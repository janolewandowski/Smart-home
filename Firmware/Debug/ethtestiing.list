
ethtestiing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b5a8  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fe0  0801b798  0801b798  0002b798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e778  0801e778  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  0801e778  0801e778  0002e778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e780  0801e780  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e780  0801e780  0002e780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e784  0801e784  0002e784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0801e788  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ece0  20000084  0801e80c  00030084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ed64  0801e80c  0003ed64  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038bae  00000000  00000000  000300ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009042  00000000  00000000  00068c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002960  00000000  00000000  00071ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002688  00000000  00000000  00074600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033f53  00000000  00000000  00076c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00044ac5  00000000  00000000  000aabdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5bb7  00000000  00000000  000ef6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d5257  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b604  00000000  00000000  001d52a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000084 	.word	0x20000084
 800020c:	00000000 	.word	0x00000000
 8000210:	0801b780 	.word	0x0801b780

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000088 	.word	0x20000088
 800022c:	0801b780 	.word	0x0801b780

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <__aeabi_drsub>:
 8000244:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000248:	e002      	b.n	8000250 <__adddf3>
 800024a:	bf00      	nop

0800024c <__aeabi_dsub>:
 800024c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000250 <__adddf3>:
 8000250:	b530      	push	{r4, r5, lr}
 8000252:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000256:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025a:	ea94 0f05 	teq	r4, r5
 800025e:	bf08      	it	eq
 8000260:	ea90 0f02 	teqeq	r0, r2
 8000264:	bf1f      	itttt	ne
 8000266:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000272:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000276:	f000 80e2 	beq.w	800043e <__adddf3+0x1ee>
 800027a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000282:	bfb8      	it	lt
 8000284:	426d      	neglt	r5, r5
 8000286:	dd0c      	ble.n	80002a2 <__adddf3+0x52>
 8000288:	442c      	add	r4, r5
 800028a:	ea80 0202 	eor.w	r2, r0, r2
 800028e:	ea81 0303 	eor.w	r3, r1, r3
 8000292:	ea82 0000 	eor.w	r0, r2, r0
 8000296:	ea83 0101 	eor.w	r1, r3, r1
 800029a:	ea80 0202 	eor.w	r2, r0, r2
 800029e:	ea81 0303 	eor.w	r3, r1, r3
 80002a2:	2d36      	cmp	r5, #54	; 0x36
 80002a4:	bf88      	it	hi
 80002a6:	bd30      	pophi	{r4, r5, pc}
 80002a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x70>
 80002ba:	4240      	negs	r0, r0
 80002bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002cc:	d002      	beq.n	80002d4 <__adddf3+0x84>
 80002ce:	4252      	negs	r2, r2
 80002d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d4:	ea94 0f05 	teq	r4, r5
 80002d8:	f000 80a7 	beq.w	800042a <__adddf3+0x1da>
 80002dc:	f1a4 0401 	sub.w	r4, r4, #1
 80002e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e4:	db0d      	blt.n	8000302 <__adddf3+0xb2>
 80002e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ea:	fa22 f205 	lsr.w	r2, r2, r5
 80002ee:	1880      	adds	r0, r0, r2
 80002f0:	f141 0100 	adc.w	r1, r1, #0
 80002f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f8:	1880      	adds	r0, r0, r2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	4159      	adcs	r1, r3
 8000300:	e00e      	b.n	8000320 <__adddf3+0xd0>
 8000302:	f1a5 0520 	sub.w	r5, r5, #32
 8000306:	f10e 0e20 	add.w	lr, lr, #32
 800030a:	2a01      	cmp	r2, #1
 800030c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000310:	bf28      	it	cs
 8000312:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000316:	fa43 f305 	asr.w	r3, r3, r5
 800031a:	18c0      	adds	r0, r0, r3
 800031c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000324:	d507      	bpl.n	8000336 <__adddf3+0xe6>
 8000326:	f04f 0e00 	mov.w	lr, #0
 800032a:	f1dc 0c00 	rsbs	ip, ip, #0
 800032e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000332:	eb6e 0101 	sbc.w	r1, lr, r1
 8000336:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800033a:	d31b      	bcc.n	8000374 <__adddf3+0x124>
 800033c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000340:	d30c      	bcc.n	800035c <__adddf3+0x10c>
 8000342:	0849      	lsrs	r1, r1, #1
 8000344:	ea5f 0030 	movs.w	r0, r0, rrx
 8000348:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800034c:	f104 0401 	add.w	r4, r4, #1
 8000350:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000354:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000358:	f080 809a 	bcs.w	8000490 <__adddf3+0x240>
 800035c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000360:	bf08      	it	eq
 8000362:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000366:	f150 0000 	adcs.w	r0, r0, #0
 800036a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036e:	ea41 0105 	orr.w	r1, r1, r5
 8000372:	bd30      	pop	{r4, r5, pc}
 8000374:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000378:	4140      	adcs	r0, r0
 800037a:	eb41 0101 	adc.w	r1, r1, r1
 800037e:	3c01      	subs	r4, #1
 8000380:	bf28      	it	cs
 8000382:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000386:	d2e9      	bcs.n	800035c <__adddf3+0x10c>
 8000388:	f091 0f00 	teq	r1, #0
 800038c:	bf04      	itt	eq
 800038e:	4601      	moveq	r1, r0
 8000390:	2000      	moveq	r0, #0
 8000392:	fab1 f381 	clz	r3, r1
 8000396:	bf08      	it	eq
 8000398:	3320      	addeq	r3, #32
 800039a:	f1a3 030b 	sub.w	r3, r3, #11
 800039e:	f1b3 0220 	subs.w	r2, r3, #32
 80003a2:	da0c      	bge.n	80003be <__adddf3+0x16e>
 80003a4:	320c      	adds	r2, #12
 80003a6:	dd08      	ble.n	80003ba <__adddf3+0x16a>
 80003a8:	f102 0c14 	add.w	ip, r2, #20
 80003ac:	f1c2 020c 	rsb	r2, r2, #12
 80003b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b4:	fa21 f102 	lsr.w	r1, r1, r2
 80003b8:	e00c      	b.n	80003d4 <__adddf3+0x184>
 80003ba:	f102 0214 	add.w	r2, r2, #20
 80003be:	bfd8      	it	le
 80003c0:	f1c2 0c20 	rsble	ip, r2, #32
 80003c4:	fa01 f102 	lsl.w	r1, r1, r2
 80003c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003cc:	bfdc      	itt	le
 80003ce:	ea41 010c 	orrle.w	r1, r1, ip
 80003d2:	4090      	lslle	r0, r2
 80003d4:	1ae4      	subs	r4, r4, r3
 80003d6:	bfa2      	ittt	ge
 80003d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003dc:	4329      	orrge	r1, r5
 80003de:	bd30      	popge	{r4, r5, pc}
 80003e0:	ea6f 0404 	mvn.w	r4, r4
 80003e4:	3c1f      	subs	r4, #31
 80003e6:	da1c      	bge.n	8000422 <__adddf3+0x1d2>
 80003e8:	340c      	adds	r4, #12
 80003ea:	dc0e      	bgt.n	800040a <__adddf3+0x1ba>
 80003ec:	f104 0414 	add.w	r4, r4, #20
 80003f0:	f1c4 0220 	rsb	r2, r4, #32
 80003f4:	fa20 f004 	lsr.w	r0, r0, r4
 80003f8:	fa01 f302 	lsl.w	r3, r1, r2
 80003fc:	ea40 0003 	orr.w	r0, r0, r3
 8000400:	fa21 f304 	lsr.w	r3, r1, r4
 8000404:	ea45 0103 	orr.w	r1, r5, r3
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	f1c4 040c 	rsb	r4, r4, #12
 800040e:	f1c4 0220 	rsb	r2, r4, #32
 8000412:	fa20 f002 	lsr.w	r0, r0, r2
 8000416:	fa01 f304 	lsl.w	r3, r1, r4
 800041a:	ea40 0003 	orr.w	r0, r0, r3
 800041e:	4629      	mov	r1, r5
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	fa21 f004 	lsr.w	r0, r1, r4
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f094 0f00 	teq	r4, #0
 800042e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000432:	bf06      	itte	eq
 8000434:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000438:	3401      	addeq	r4, #1
 800043a:	3d01      	subne	r5, #1
 800043c:	e74e      	b.n	80002dc <__adddf3+0x8c>
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf18      	it	ne
 8000444:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000448:	d029      	beq.n	800049e <__adddf3+0x24e>
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	d005      	beq.n	8000462 <__adddf3+0x212>
 8000456:	ea54 0c00 	orrs.w	ip, r4, r0
 800045a:	bf04      	itt	eq
 800045c:	4619      	moveq	r1, r3
 800045e:	4610      	moveq	r0, r2
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea91 0f03 	teq	r1, r3
 8000466:	bf1e      	ittt	ne
 8000468:	2100      	movne	r1, #0
 800046a:	2000      	movne	r0, #0
 800046c:	bd30      	popne	{r4, r5, pc}
 800046e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000472:	d105      	bne.n	8000480 <__adddf3+0x230>
 8000474:	0040      	lsls	r0, r0, #1
 8000476:	4149      	adcs	r1, r1
 8000478:	bf28      	it	cs
 800047a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047e:	bd30      	pop	{r4, r5, pc}
 8000480:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000484:	bf3c      	itt	cc
 8000486:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800048a:	bd30      	popcc	{r4, r5, pc}
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000494:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000498:	f04f 0000 	mov.w	r0, #0
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a2:	bf1a      	itte	ne
 80004a4:	4619      	movne	r1, r3
 80004a6:	4610      	movne	r0, r2
 80004a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004ac:	bf1c      	itt	ne
 80004ae:	460b      	movne	r3, r1
 80004b0:	4602      	movne	r2, r0
 80004b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b6:	bf06      	itte	eq
 80004b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004bc:	ea91 0f03 	teqeq	r1, r3
 80004c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	bf00      	nop

080004c8 <__aeabi_ui2d>:
 80004c8:	f090 0f00 	teq	r0, #0
 80004cc:	bf04      	itt	eq
 80004ce:	2100      	moveq	r1, #0
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004dc:	f04f 0500 	mov.w	r5, #0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e750      	b.n	8000388 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_i2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000500:	bf48      	it	mi
 8000502:	4240      	negmi	r0, r0
 8000504:	f04f 0100 	mov.w	r1, #0
 8000508:	e73e      	b.n	8000388 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_f2d>:
 800050c:	0042      	lsls	r2, r0, #1
 800050e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000512:	ea4f 0131 	mov.w	r1, r1, rrx
 8000516:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051a:	bf1f      	itttt	ne
 800051c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000520:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000524:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000528:	4770      	bxne	lr
 800052a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052e:	bf08      	it	eq
 8000530:	4770      	bxeq	lr
 8000532:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000536:	bf04      	itt	eq
 8000538:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000548:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800054c:	e71c      	b.n	8000388 <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_ul2d>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	f04f 0500 	mov.w	r5, #0
 800055e:	e00a      	b.n	8000576 <__aeabi_l2d+0x16>

08000560 <__aeabi_l2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056e:	d502      	bpl.n	8000576 <__aeabi_l2d+0x16>
 8000570:	4240      	negs	r0, r0
 8000572:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000576:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000582:	f43f aed8 	beq.w	8000336 <__adddf3+0xe6>
 8000586:	f04f 0203 	mov.w	r2, #3
 800058a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058e:	bf18      	it	ne
 8000590:	3203      	addne	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059e:	f1c2 0320 	rsb	r3, r2, #32
 80005a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a6:	fa20 f002 	lsr.w	r0, r0, r2
 80005aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ae:	ea40 000e 	orr.w	r0, r0, lr
 80005b2:	fa21 f102 	lsr.w	r1, r1, r2
 80005b6:	4414      	add	r4, r2
 80005b8:	e6bd      	b.n	8000336 <__adddf3+0xe6>
 80005ba:	bf00      	nop

080005bc <__aeabi_dmul>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ca:	bf1d      	ittte	ne
 80005cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d0:	ea94 0f0c 	teqne	r4, ip
 80005d4:	ea95 0f0c 	teqne	r5, ip
 80005d8:	f000 f8de 	bleq	8000798 <__aeabi_dmul+0x1dc>
 80005dc:	442c      	add	r4, r5
 80005de:	ea81 0603 	eor.w	r6, r1, r3
 80005e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ee:	bf18      	it	ne
 80005f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005fc:	d038      	beq.n	8000670 <__aeabi_dmul+0xb4>
 80005fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8000602:	f04f 0500 	mov.w	r5, #0
 8000606:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000612:	f04f 0600 	mov.w	r6, #0
 8000616:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061a:	f09c 0f00 	teq	ip, #0
 800061e:	bf18      	it	ne
 8000620:	f04e 0e01 	orrne.w	lr, lr, #1
 8000624:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000628:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800062c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000630:	d204      	bcs.n	800063c <__aeabi_dmul+0x80>
 8000632:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000636:	416d      	adcs	r5, r5
 8000638:	eb46 0606 	adc.w	r6, r6, r6
 800063c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000640:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000644:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000648:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800064c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000650:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000654:	bf88      	it	hi
 8000656:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800065a:	d81e      	bhi.n	800069a <__aeabi_dmul+0xde>
 800065c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000660:	bf08      	it	eq
 8000662:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000666:	f150 0000 	adcs.w	r0, r0, #0
 800066a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000674:	ea46 0101 	orr.w	r1, r6, r1
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	ea81 0103 	eor.w	r1, r1, r3
 8000680:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000684:	bfc2      	ittt	gt
 8000686:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068e:	bd70      	popgt	{r4, r5, r6, pc}
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f04f 0e00 	mov.w	lr, #0
 8000698:	3c01      	subs	r4, #1
 800069a:	f300 80ab 	bgt.w	80007f4 <__aeabi_dmul+0x238>
 800069e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006a2:	bfde      	ittt	le
 80006a4:	2000      	movle	r0, #0
 80006a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006aa:	bd70      	pople	{r4, r5, r6, pc}
 80006ac:	f1c4 0400 	rsb	r4, r4, #0
 80006b0:	3c20      	subs	r4, #32
 80006b2:	da35      	bge.n	8000720 <__aeabi_dmul+0x164>
 80006b4:	340c      	adds	r4, #12
 80006b6:	dc1b      	bgt.n	80006f0 <__aeabi_dmul+0x134>
 80006b8:	f104 0414 	add.w	r4, r4, #20
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f305 	lsl.w	r3, r0, r5
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f205 	lsl.w	r2, r1, r5
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	fa21 f604 	lsr.w	r6, r1, r4
 80006e0:	eb42 0106 	adc.w	r1, r2, r6
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f1c4 040c 	rsb	r4, r4, #12
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f304 	lsl.w	r3, r0, r4
 80006fc:	fa20 f005 	lsr.w	r0, r0, r5
 8000700:	fa01 f204 	lsl.w	r2, r1, r4
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	f141 0100 	adc.w	r1, r1, #0
 8000714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000718:	bf08      	it	eq
 800071a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f205 	lsl.w	r2, r0, r5
 8000728:	ea4e 0e02 	orr.w	lr, lr, r2
 800072c:	fa20 f304 	lsr.w	r3, r0, r4
 8000730:	fa01 f205 	lsl.w	r2, r1, r5
 8000734:	ea43 0302 	orr.w	r3, r3, r2
 8000738:	fa21 f004 	lsr.w	r0, r1, r4
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	fa21 f204 	lsr.w	r2, r1, r4
 8000744:	ea20 0002 	bic.w	r0, r0, r2
 8000748:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800074c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000750:	bf08      	it	eq
 8000752:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000756:	bd70      	pop	{r4, r5, r6, pc}
 8000758:	f094 0f00 	teq	r4, #0
 800075c:	d10f      	bne.n	800077e <__aeabi_dmul+0x1c2>
 800075e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000762:	0040      	lsls	r0, r0, #1
 8000764:	eb41 0101 	adc.w	r1, r1, r1
 8000768:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800076c:	bf08      	it	eq
 800076e:	3c01      	subeq	r4, #1
 8000770:	d0f7      	beq.n	8000762 <__aeabi_dmul+0x1a6>
 8000772:	ea41 0106 	orr.w	r1, r1, r6
 8000776:	f095 0f00 	teq	r5, #0
 800077a:	bf18      	it	ne
 800077c:	4770      	bxne	lr
 800077e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000782:	0052      	lsls	r2, r2, #1
 8000784:	eb43 0303 	adc.w	r3, r3, r3
 8000788:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3d01      	subeq	r5, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1c6>
 8000792:	ea43 0306 	orr.w	r3, r3, r6
 8000796:	4770      	bx	lr
 8000798:	ea94 0f0c 	teq	r4, ip
 800079c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a0:	bf18      	it	ne
 80007a2:	ea95 0f0c 	teqne	r5, ip
 80007a6:	d00c      	beq.n	80007c2 <__aeabi_dmul+0x206>
 80007a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ac:	bf18      	it	ne
 80007ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b2:	d1d1      	bne.n	8000758 <__aeabi_dmul+0x19c>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c6:	bf06      	itte	eq
 80007c8:	4610      	moveq	r0, r2
 80007ca:	4619      	moveq	r1, r3
 80007cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d0:	d019      	beq.n	8000806 <__aeabi_dmul+0x24a>
 80007d2:	ea94 0f0c 	teq	r4, ip
 80007d6:	d102      	bne.n	80007de <__aeabi_dmul+0x222>
 80007d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007dc:	d113      	bne.n	8000806 <__aeabi_dmul+0x24a>
 80007de:	ea95 0f0c 	teq	r5, ip
 80007e2:	d105      	bne.n	80007f0 <__aeabi_dmul+0x234>
 80007e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e8:	bf1c      	itt	ne
 80007ea:	4610      	movne	r0, r2
 80007ec:	4619      	movne	r1, r3
 80007ee:	d10a      	bne.n	8000806 <__aeabi_dmul+0x24a>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080e:	bd70      	pop	{r4, r5, r6, pc}

08000810 <__aeabi_ddiv>:
 8000810:	b570      	push	{r4, r5, r6, lr}
 8000812:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000816:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800081a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081e:	bf1d      	ittte	ne
 8000820:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000824:	ea94 0f0c 	teqne	r4, ip
 8000828:	ea95 0f0c 	teqne	r5, ip
 800082c:	f000 f8a7 	bleq	800097e <__aeabi_ddiv+0x16e>
 8000830:	eba4 0405 	sub.w	r4, r4, r5
 8000834:	ea81 0e03 	eor.w	lr, r1, r3
 8000838:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800083c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000840:	f000 8088 	beq.w	8000954 <__aeabi_ddiv+0x144>
 8000844:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000848:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800084c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000850:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000854:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000858:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800085c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000860:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000864:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000868:	429d      	cmp	r5, r3
 800086a:	bf08      	it	eq
 800086c:	4296      	cmpeq	r6, r2
 800086e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000872:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000876:	d202      	bcs.n	800087e <__aeabi_ddiv+0x6e>
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	1ab6      	subs	r6, r6, r2
 8000880:	eb65 0503 	sbc.w	r5, r5, r3
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b2:	bf22      	ittt	cs
 80008b4:	1ab6      	subcs	r6, r6, r2
 80008b6:	4675      	movcs	r5, lr
 80008b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ca:	bf22      	ittt	cs
 80008cc:	1ab6      	subcs	r6, r6, r2
 80008ce:	4675      	movcs	r5, lr
 80008d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	ebb6 0e02 	subs.w	lr, r6, r2
 80008de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e2:	bf22      	ittt	cs
 80008e4:	1ab6      	subcs	r6, r6, r2
 80008e6:	4675      	movcs	r5, lr
 80008e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f0:	d018      	beq.n	8000924 <__aeabi_ddiv+0x114>
 80008f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000902:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000906:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090e:	d1c0      	bne.n	8000892 <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	d10b      	bne.n	800092e <__aeabi_ddiv+0x11e>
 8000916:	ea41 0100 	orr.w	r1, r1, r0
 800091a:	f04f 0000 	mov.w	r0, #0
 800091e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000922:	e7b6      	b.n	8000892 <__aeabi_ddiv+0x82>
 8000924:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000928:	bf04      	itt	eq
 800092a:	4301      	orreq	r1, r0
 800092c:	2000      	moveq	r0, #0
 800092e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000932:	bf88      	it	hi
 8000934:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000938:	f63f aeaf 	bhi.w	800069a <__aeabi_dmul+0xde>
 800093c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000940:	bf04      	itt	eq
 8000942:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000946:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094a:	f150 0000 	adcs.w	r0, r0, #0
 800094e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000952:	bd70      	pop	{r4, r5, r6, pc}
 8000954:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000958:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800095c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000960:	bfc2      	ittt	gt
 8000962:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000966:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096a:	bd70      	popgt	{r4, r5, r6, pc}
 800096c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000970:	f04f 0e00 	mov.w	lr, #0
 8000974:	3c01      	subs	r4, #1
 8000976:	e690      	b.n	800069a <__aeabi_dmul+0xde>
 8000978:	ea45 0e06 	orr.w	lr, r5, r6
 800097c:	e68d      	b.n	800069a <__aeabi_dmul+0xde>
 800097e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000982:	ea94 0f0c 	teq	r4, ip
 8000986:	bf08      	it	eq
 8000988:	ea95 0f0c 	teqeq	r5, ip
 800098c:	f43f af3b 	beq.w	8000806 <__aeabi_dmul+0x24a>
 8000990:	ea94 0f0c 	teq	r4, ip
 8000994:	d10a      	bne.n	80009ac <__aeabi_ddiv+0x19c>
 8000996:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099a:	f47f af34 	bne.w	8000806 <__aeabi_dmul+0x24a>
 800099e:	ea95 0f0c 	teq	r5, ip
 80009a2:	f47f af25 	bne.w	80007f0 <__aeabi_dmul+0x234>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e72c      	b.n	8000806 <__aeabi_dmul+0x24a>
 80009ac:	ea95 0f0c 	teq	r5, ip
 80009b0:	d106      	bne.n	80009c0 <__aeabi_ddiv+0x1b0>
 80009b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b6:	f43f aefd 	beq.w	80007b4 <__aeabi_dmul+0x1f8>
 80009ba:	4610      	mov	r0, r2
 80009bc:	4619      	mov	r1, r3
 80009be:	e722      	b.n	8000806 <__aeabi_dmul+0x24a>
 80009c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c4:	bf18      	it	ne
 80009c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ca:	f47f aec5 	bne.w	8000758 <__aeabi_dmul+0x19c>
 80009ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d2:	f47f af0d 	bne.w	80007f0 <__aeabi_dmul+0x234>
 80009d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009da:	f47f aeeb 	bne.w	80007b4 <__aeabi_dmul+0x1f8>
 80009de:	e712      	b.n	8000806 <__aeabi_dmul+0x24a>

080009e0 <__gedf2>:
 80009e0:	f04f 3cff 	mov.w	ip, #4294967295
 80009e4:	e006      	b.n	80009f4 <__cmpdf2+0x4>
 80009e6:	bf00      	nop

080009e8 <__ledf2>:
 80009e8:	f04f 0c01 	mov.w	ip, #1
 80009ec:	e002      	b.n	80009f4 <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__cmpdf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	bf18      	it	ne
 8000a06:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0a:	d01b      	beq.n	8000a44 <__cmpdf2+0x54>
 8000a0c:	b001      	add	sp, #4
 8000a0e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a12:	bf0c      	ite	eq
 8000a14:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a18:	ea91 0f03 	teqne	r1, r3
 8000a1c:	bf02      	ittt	eq
 8000a1e:	ea90 0f02 	teqeq	r0, r2
 8000a22:	2000      	moveq	r0, #0
 8000a24:	4770      	bxeq	lr
 8000a26:	f110 0f00 	cmn.w	r0, #0
 8000a2a:	ea91 0f03 	teq	r1, r3
 8000a2e:	bf58      	it	pl
 8000a30:	4299      	cmppl	r1, r3
 8000a32:	bf08      	it	eq
 8000a34:	4290      	cmpeq	r0, r2
 8000a36:	bf2c      	ite	cs
 8000a38:	17d8      	asrcs	r0, r3, #31
 8000a3a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3e:	f040 0001 	orr.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d102      	bne.n	8000a54 <__cmpdf2+0x64>
 8000a4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a52:	d107      	bne.n	8000a64 <__cmpdf2+0x74>
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	d1d6      	bne.n	8000a0c <__cmpdf2+0x1c>
 8000a5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a62:	d0d3      	beq.n	8000a0c <__cmpdf2+0x1c>
 8000a64:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_cdrcmple>:
 8000a6c:	4684      	mov	ip, r0
 8000a6e:	4610      	mov	r0, r2
 8000a70:	4662      	mov	r2, ip
 8000a72:	468c      	mov	ip, r1
 8000a74:	4619      	mov	r1, r3
 8000a76:	4663      	mov	r3, ip
 8000a78:	e000      	b.n	8000a7c <__aeabi_cdcmpeq>
 8000a7a:	bf00      	nop

08000a7c <__aeabi_cdcmpeq>:
 8000a7c:	b501      	push	{r0, lr}
 8000a7e:	f7ff ffb7 	bl	80009f0 <__cmpdf2>
 8000a82:	2800      	cmp	r0, #0
 8000a84:	bf48      	it	mi
 8000a86:	f110 0f00 	cmnmi.w	r0, #0
 8000a8a:	bd01      	pop	{r0, pc}

08000a8c <__aeabi_dcmpeq>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff fff4 	bl	8000a7c <__aeabi_cdcmpeq>
 8000a94:	bf0c      	ite	eq
 8000a96:	2001      	moveq	r0, #1
 8000a98:	2000      	movne	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmplt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffea 	bl	8000a7c <__aeabi_cdcmpeq>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmple>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffe0 	bl	8000a7c <__aeabi_cdcmpeq>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpge>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffce 	bl	8000a6c <__aeabi_cdrcmple>
 8000ad0:	bf94      	ite	ls
 8000ad2:	2001      	movls	r0, #1
 8000ad4:	2000      	movhi	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpgt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffc4 	bl	8000a6c <__aeabi_cdrcmple>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	; 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_uldivmod>:
 8000dec:	b953      	cbnz	r3, 8000e04 <__aeabi_uldivmod+0x18>
 8000dee:	b94a      	cbnz	r2, 8000e04 <__aeabi_uldivmod+0x18>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bf08      	it	eq
 8000df4:	2800      	cmpeq	r0, #0
 8000df6:	bf1c      	itt	ne
 8000df8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000e00:	f000 b976 	b.w	80010f0 <__aeabi_idiv0>
 8000e04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0c:	f000 f806 	bl	8000e1c <__udivmoddi4>
 8000e10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr

08000e1c <__udivmoddi4>:
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e20:	9e08      	ldr	r6, [sp, #32]
 8000e22:	460d      	mov	r5, r1
 8000e24:	4604      	mov	r4, r0
 8000e26:	4688      	mov	r8, r1
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d14d      	bne.n	8000ec8 <__udivmoddi4+0xac>
 8000e2c:	428a      	cmp	r2, r1
 8000e2e:	4694      	mov	ip, r2
 8000e30:	d968      	bls.n	8000f04 <__udivmoddi4+0xe8>
 8000e32:	fab2 f282 	clz	r2, r2
 8000e36:	b152      	cbz	r2, 8000e4e <__udivmoddi4+0x32>
 8000e38:	fa01 f302 	lsl.w	r3, r1, r2
 8000e3c:	f1c2 0120 	rsb	r1, r2, #32
 8000e40:	fa20 f101 	lsr.w	r1, r0, r1
 8000e44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e48:	ea41 0803 	orr.w	r8, r1, r3
 8000e4c:	4094      	lsls	r4, r2
 8000e4e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000e52:	fbb8 f7f1 	udiv	r7, r8, r1
 8000e56:	fa1f fe8c 	uxth.w	lr, ip
 8000e5a:	fb01 8817 	mls	r8, r1, r7, r8
 8000e5e:	fb07 f00e 	mul.w	r0, r7, lr
 8000e62:	0c23      	lsrs	r3, r4, #16
 8000e64:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	d90a      	bls.n	8000e82 <__udivmoddi4+0x66>
 8000e6c:	eb1c 0303 	adds.w	r3, ip, r3
 8000e70:	f107 35ff 	add.w	r5, r7, #4294967295
 8000e74:	f080 811e 	bcs.w	80010b4 <__udivmoddi4+0x298>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f240 811b 	bls.w	80010b4 <__udivmoddi4+0x298>
 8000e7e:	3f02      	subs	r7, #2
 8000e80:	4463      	add	r3, ip
 8000e82:	1a1b      	subs	r3, r3, r0
 8000e84:	fbb3 f0f1 	udiv	r0, r3, r1
 8000e88:	fb01 3310 	mls	r3, r1, r0, r3
 8000e8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e90:	b2a4      	uxth	r4, r4
 8000e92:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e96:	45a6      	cmp	lr, r4
 8000e98:	d90a      	bls.n	8000eb0 <__udivmoddi4+0x94>
 8000e9a:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea2:	f080 8109 	bcs.w	80010b8 <__udivmoddi4+0x29c>
 8000ea6:	45a6      	cmp	lr, r4
 8000ea8:	f240 8106 	bls.w	80010b8 <__udivmoddi4+0x29c>
 8000eac:	4464      	add	r4, ip
 8000eae:	3802      	subs	r0, #2
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000eba:	b11e      	cbz	r6, 8000ec4 <__udivmoddi4+0xa8>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	40d4      	lsrs	r4, r2
 8000ec0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d908      	bls.n	8000ede <__udivmoddi4+0xc2>
 8000ecc:	2e00      	cmp	r6, #0
 8000ece:	f000 80ee 	beq.w	80010ae <__udivmoddi4+0x292>
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e9c6 0500 	strd	r0, r5, [r6]
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ede:	fab3 f183 	clz	r1, r3
 8000ee2:	2900      	cmp	r1, #0
 8000ee4:	d14a      	bne.n	8000f7c <__udivmoddi4+0x160>
 8000ee6:	42ab      	cmp	r3, r5
 8000ee8:	d302      	bcc.n	8000ef0 <__udivmoddi4+0xd4>
 8000eea:	4282      	cmp	r2, r0
 8000eec:	f200 80fc 	bhi.w	80010e8 <__udivmoddi4+0x2cc>
 8000ef0:	1a84      	subs	r4, r0, r2
 8000ef2:	eb65 0303 	sbc.w	r3, r5, r3
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4698      	mov	r8, r3
 8000efa:	2e00      	cmp	r6, #0
 8000efc:	d0e2      	beq.n	8000ec4 <__udivmoddi4+0xa8>
 8000efe:	e9c6 4800 	strd	r4, r8, [r6]
 8000f02:	e7df      	b.n	8000ec4 <__udivmoddi4+0xa8>
 8000f04:	b902      	cbnz	r2, 8000f08 <__udivmoddi4+0xec>
 8000f06:	deff      	udf	#255	; 0xff
 8000f08:	fab2 f282 	clz	r2, r2
 8000f0c:	2a00      	cmp	r2, #0
 8000f0e:	f040 8091 	bne.w	8001034 <__udivmoddi4+0x218>
 8000f12:	eba1 000c 	sub.w	r0, r1, ip
 8000f16:	2101      	movs	r1, #1
 8000f18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f1c:	fa1f fe8c 	uxth.w	lr, ip
 8000f20:	fbb0 f3f7 	udiv	r3, r0, r7
 8000f24:	fb07 0013 	mls	r0, r7, r3, r0
 8000f28:	0c25      	lsrs	r5, r4, #16
 8000f2a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000f2e:	fb0e f003 	mul.w	r0, lr, r3
 8000f32:	42a8      	cmp	r0, r5
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x12c>
 8000f36:	eb1c 0505 	adds.w	r5, ip, r5
 8000f3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f3e:	d202      	bcs.n	8000f46 <__udivmoddi4+0x12a>
 8000f40:	42a8      	cmp	r0, r5
 8000f42:	f200 80ce 	bhi.w	80010e2 <__udivmoddi4+0x2c6>
 8000f46:	4643      	mov	r3, r8
 8000f48:	1a2d      	subs	r5, r5, r0
 8000f4a:	fbb5 f0f7 	udiv	r0, r5, r7
 8000f4e:	fb07 5510 	mls	r5, r7, r0, r5
 8000f52:	fb0e fe00 	mul.w	lr, lr, r0
 8000f56:	b2a4      	uxth	r4, r4
 8000f58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f5c:	45a6      	cmp	lr, r4
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x156>
 8000f60:	eb1c 0404 	adds.w	r4, ip, r4
 8000f64:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f68:	d202      	bcs.n	8000f70 <__udivmoddi4+0x154>
 8000f6a:	45a6      	cmp	lr, r4
 8000f6c:	f200 80b6 	bhi.w	80010dc <__udivmoddi4+0x2c0>
 8000f70:	4628      	mov	r0, r5
 8000f72:	eba4 040e 	sub.w	r4, r4, lr
 8000f76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f7a:	e79e      	b.n	8000eba <__udivmoddi4+0x9e>
 8000f7c:	f1c1 0720 	rsb	r7, r1, #32
 8000f80:	408b      	lsls	r3, r1
 8000f82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f8a:	fa25 fa07 	lsr.w	sl, r5, r7
 8000f8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f92:	fbba f8f9 	udiv	r8, sl, r9
 8000f96:	fa20 f307 	lsr.w	r3, r0, r7
 8000f9a:	fb09 aa18 	mls	sl, r9, r8, sl
 8000f9e:	408d      	lsls	r5, r1
 8000fa0:	fa1f fe8c 	uxth.w	lr, ip
 8000fa4:	431d      	orrs	r5, r3
 8000fa6:	fa00 f301 	lsl.w	r3, r0, r1
 8000faa:	fb08 f00e 	mul.w	r0, r8, lr
 8000fae:	0c2c      	lsrs	r4, r5, #16
 8000fb0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000fb4:	42a0      	cmp	r0, r4
 8000fb6:	fa02 f201 	lsl.w	r2, r2, r1
 8000fba:	d90b      	bls.n	8000fd4 <__udivmoddi4+0x1b8>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fc4:	f080 8088 	bcs.w	80010d8 <__udivmoddi4+0x2bc>
 8000fc8:	42a0      	cmp	r0, r4
 8000fca:	f240 8085 	bls.w	80010d8 <__udivmoddi4+0x2bc>
 8000fce:	f1a8 0802 	sub.w	r8, r8, #2
 8000fd2:	4464      	add	r4, ip
 8000fd4:	1a24      	subs	r4, r4, r0
 8000fd6:	fbb4 f0f9 	udiv	r0, r4, r9
 8000fda:	fb09 4410 	mls	r4, r9, r0, r4
 8000fde:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fe2:	b2ad      	uxth	r5, r5
 8000fe4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fe8:	45a6      	cmp	lr, r4
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x1e2>
 8000fec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ff0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ff4:	d26c      	bcs.n	80010d0 <__udivmoddi4+0x2b4>
 8000ff6:	45a6      	cmp	lr, r4
 8000ff8:	d96a      	bls.n	80010d0 <__udivmoddi4+0x2b4>
 8000ffa:	3802      	subs	r0, #2
 8000ffc:	4464      	add	r4, ip
 8000ffe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001002:	fba0 9502 	umull	r9, r5, r0, r2
 8001006:	eba4 040e 	sub.w	r4, r4, lr
 800100a:	42ac      	cmp	r4, r5
 800100c:	46c8      	mov	r8, r9
 800100e:	46ae      	mov	lr, r5
 8001010:	d356      	bcc.n	80010c0 <__udivmoddi4+0x2a4>
 8001012:	d053      	beq.n	80010bc <__udivmoddi4+0x2a0>
 8001014:	2e00      	cmp	r6, #0
 8001016:	d069      	beq.n	80010ec <__udivmoddi4+0x2d0>
 8001018:	ebb3 0208 	subs.w	r2, r3, r8
 800101c:	eb64 040e 	sbc.w	r4, r4, lr
 8001020:	fa22 f301 	lsr.w	r3, r2, r1
 8001024:	fa04 f707 	lsl.w	r7, r4, r7
 8001028:	431f      	orrs	r7, r3
 800102a:	40cc      	lsrs	r4, r1
 800102c:	e9c6 7400 	strd	r7, r4, [r6]
 8001030:	2100      	movs	r1, #0
 8001032:	e747      	b.n	8000ec4 <__udivmoddi4+0xa8>
 8001034:	fa0c fc02 	lsl.w	ip, ip, r2
 8001038:	f1c2 0120 	rsb	r1, r2, #32
 800103c:	fa25 f301 	lsr.w	r3, r5, r1
 8001040:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001044:	fa20 f101 	lsr.w	r1, r0, r1
 8001048:	4095      	lsls	r5, r2
 800104a:	430d      	orrs	r5, r1
 800104c:	fbb3 f1f7 	udiv	r1, r3, r7
 8001050:	fb07 3311 	mls	r3, r7, r1, r3
 8001054:	fa1f fe8c 	uxth.w	lr, ip
 8001058:	0c28      	lsrs	r0, r5, #16
 800105a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800105e:	fb01 f30e 	mul.w	r3, r1, lr
 8001062:	4283      	cmp	r3, r0
 8001064:	fa04 f402 	lsl.w	r4, r4, r2
 8001068:	d908      	bls.n	800107c <__udivmoddi4+0x260>
 800106a:	eb1c 0000 	adds.w	r0, ip, r0
 800106e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001072:	d22f      	bcs.n	80010d4 <__udivmoddi4+0x2b8>
 8001074:	4283      	cmp	r3, r0
 8001076:	d92d      	bls.n	80010d4 <__udivmoddi4+0x2b8>
 8001078:	3902      	subs	r1, #2
 800107a:	4460      	add	r0, ip
 800107c:	1ac0      	subs	r0, r0, r3
 800107e:	fbb0 f3f7 	udiv	r3, r0, r7
 8001082:	fb07 0013 	mls	r0, r7, r3, r0
 8001086:	b2ad      	uxth	r5, r5
 8001088:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800108c:	fb03 f00e 	mul.w	r0, r3, lr
 8001090:	42a8      	cmp	r0, r5
 8001092:	d908      	bls.n	80010a6 <__udivmoddi4+0x28a>
 8001094:	eb1c 0505 	adds.w	r5, ip, r5
 8001098:	f103 38ff 	add.w	r8, r3, #4294967295
 800109c:	d216      	bcs.n	80010cc <__udivmoddi4+0x2b0>
 800109e:	42a8      	cmp	r0, r5
 80010a0:	d914      	bls.n	80010cc <__udivmoddi4+0x2b0>
 80010a2:	3b02      	subs	r3, #2
 80010a4:	4465      	add	r5, ip
 80010a6:	1a28      	subs	r0, r5, r0
 80010a8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80010ac:	e738      	b.n	8000f20 <__udivmoddi4+0x104>
 80010ae:	4631      	mov	r1, r6
 80010b0:	4630      	mov	r0, r6
 80010b2:	e707      	b.n	8000ec4 <__udivmoddi4+0xa8>
 80010b4:	462f      	mov	r7, r5
 80010b6:	e6e4      	b.n	8000e82 <__udivmoddi4+0x66>
 80010b8:	4618      	mov	r0, r3
 80010ba:	e6f9      	b.n	8000eb0 <__udivmoddi4+0x94>
 80010bc:	454b      	cmp	r3, r9
 80010be:	d2a9      	bcs.n	8001014 <__udivmoddi4+0x1f8>
 80010c0:	ebb9 0802 	subs.w	r8, r9, r2
 80010c4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010c8:	3801      	subs	r0, #1
 80010ca:	e7a3      	b.n	8001014 <__udivmoddi4+0x1f8>
 80010cc:	4643      	mov	r3, r8
 80010ce:	e7ea      	b.n	80010a6 <__udivmoddi4+0x28a>
 80010d0:	4628      	mov	r0, r5
 80010d2:	e794      	b.n	8000ffe <__udivmoddi4+0x1e2>
 80010d4:	4641      	mov	r1, r8
 80010d6:	e7d1      	b.n	800107c <__udivmoddi4+0x260>
 80010d8:	46d0      	mov	r8, sl
 80010da:	e77b      	b.n	8000fd4 <__udivmoddi4+0x1b8>
 80010dc:	4464      	add	r4, ip
 80010de:	3802      	subs	r0, #2
 80010e0:	e747      	b.n	8000f72 <__udivmoddi4+0x156>
 80010e2:	3b02      	subs	r3, #2
 80010e4:	4465      	add	r5, ip
 80010e6:	e72f      	b.n	8000f48 <__udivmoddi4+0x12c>
 80010e8:	4608      	mov	r0, r1
 80010ea:	e706      	b.n	8000efa <__udivmoddi4+0xde>
 80010ec:	4631      	mov	r1, r6
 80010ee:	e6e9      	b.n	8000ec4 <__udivmoddi4+0xa8>

080010f0 <__aeabi_idiv0>:
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop

080010f4 <PCA9685_SetBit>:

I2C_HandleTypeDef *pca9685_i2c;


PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value, PCA9685_DeviceNumber Device)
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b089      	sub	sp, #36	; 0x24
 80010f8:	af04      	add	r7, sp, #16
 80010fa:	4604      	mov	r4, r0
 80010fc:	4608      	mov	r0, r1
 80010fe:	4611      	mov	r1, r2
 8001100:	461a      	mov	r2, r3
 8001102:	4623      	mov	r3, r4
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	4603      	mov	r3, r0
 8001108:	71bb      	strb	r3, [r7, #6]
 800110a:	460b      	mov	r3, r1
 800110c:	717b      	strb	r3, [r7, #5]
 800110e:	4613      	mov	r3, r2
 8001110:	713b      	strb	r3, [r7, #4]
	int Address = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
	if (!Device) Address =  PCA9685_ADDRESS;
 8001116:	793b      	ldrb	r3, [r7, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <PCA9685_SetBit+0x2c>
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	60fb      	str	r3, [r7, #12]
	if (Device) Address =  PCA9685_ADDRESS2;
 8001120:	793b      	ldrb	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <PCA9685_SetBit+0x36>
 8001126:	2382      	movs	r3, #130	; 0x82
 8001128:	60fb      	str	r3, [r7, #12]

	uint8_t tmp;
	if(Value) Value = 1;
 800112a:	797b      	ldrb	r3, [r7, #5]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <PCA9685_SetBit+0x40>
 8001130:	2301      	movs	r3, #1
 8001132:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, Address, Register, 1, &tmp, 1, 100))
 8001134:	4b25      	ldr	r3, [pc, #148]	; (80011cc <PCA9685_SetBit+0xd8>)
 8001136:	6818      	ldr	r0, [r3, #0]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	b299      	uxth	r1, r3
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	b29a      	uxth	r2, r3
 8001140:	2364      	movs	r3, #100	; 0x64
 8001142:	9302      	str	r3, [sp, #8]
 8001144:	2301      	movs	r3, #1
 8001146:	9301      	str	r3, [sp, #4]
 8001148:	f107 030b 	add.w	r3, r7, #11
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2301      	movs	r3, #1
 8001150:	f003 fe7e 	bl	8004e50 <HAL_I2C_Mem_Read>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <PCA9685_SetBit+0x6a>
	{
		return PCA9685_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e032      	b.n	80011c4 <PCA9685_SetBit+0xd0>
	}
	tmp &= ~((1<<PCA9685_MODE1_RESTART_BIT)|(1<<Bit));
 800115e:	79bb      	ldrb	r3, [r7, #6]
 8001160:	2201      	movs	r2, #1
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	b25b      	sxtb	r3, r3
 8001168:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800116c:	b25b      	sxtb	r3, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	b25a      	sxtb	r2, r3
 8001172:	7afb      	ldrb	r3, [r7, #11]
 8001174:	b25b      	sxtb	r3, r3
 8001176:	4013      	ands	r3, r2
 8001178:	b25b      	sxtb	r3, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	72fb      	strb	r3, [r7, #11]
	tmp |= (Value&1)<<Bit;
 800117e:	797b      	ldrb	r3, [r7, #5]
 8001180:	f003 0201 	and.w	r2, r3, #1
 8001184:	79bb      	ldrb	r3, [r7, #6]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	b25a      	sxtb	r2, r3
 800118c:	7afb      	ldrb	r3, [r7, #11]
 800118e:	b25b      	sxtb	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	b25b      	sxtb	r3, r3
 8001194:	b2db      	uxtb	r3, r3
 8001196:	72fb      	strb	r3, [r7, #11]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, Address, Register, 1, &tmp, 1, 10))
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <PCA9685_SetBit+0xd8>)
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	b299      	uxth	r1, r3
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	230a      	movs	r3, #10
 80011a6:	9302      	str	r3, [sp, #8]
 80011a8:	2301      	movs	r3, #1
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	f107 030b 	add.w	r3, r7, #11
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2301      	movs	r3, #1
 80011b4:	f003 fd52 	bl	8004c5c <HAL_I2C_Mem_Write>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <PCA9685_SetBit+0xce>
	{
		return PCA9685_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <PCA9685_SetBit+0xd0>
	}

	return PCA9685_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd90      	pop	{r4, r7, pc}
 80011cc:	200000a0 	.word	0x200000a0

080011d0 <PCA9685_SoftwareReset>:

PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 80011d6:	2306      	movs	r3, #6
 80011d8:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <PCA9685_SoftwareReset+0x30>)
 80011dc:	6818      	ldr	r0, [r3, #0]
 80011de:	1dfa      	adds	r2, r7, #7
 80011e0:	230a      	movs	r3, #10
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2301      	movs	r3, #1
 80011e6:	2100      	movs	r1, #0
 80011e8:	f003 fc3a 	bl	8004a60 <HAL_I2C_Master_Transmit>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e000      	b.n	80011f8 <PCA9685_SoftwareReset+0x28>
	}
	return PCA9685_ERROR;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200000a0 	.word	0x200000a0

08001204 <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable, PCA9685_DeviceNumber Device)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	460a      	mov	r2, r1
 800120e:	71fb      	strb	r3, [r7, #7]
 8001210:	4613      	mov	r3, r2
 8001212:	71bb      	strb	r3, [r7, #6]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable, Device);
 8001214:	79bb      	ldrb	r3, [r7, #6]
 8001216:	79fa      	ldrb	r2, [r7, #7]
 8001218:	2104      	movs	r1, #4
 800121a:	2000      	movs	r0, #0
 800121c:	f7ff ff6a 	bl	80010f4 <PCA9685_SetBit>
 8001220:	4603      	mov	r3, r0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable, PCA9685_DeviceNumber Device)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	460a      	mov	r2, r1
 8001234:	71fb      	strb	r3, [r7, #7]
 8001236:	4613      	mov	r3, r2
 8001238:	71bb      	strb	r3, [r7, #6]

	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable, Device);
 800123a:	79bb      	ldrb	r3, [r7, #6]
 800123c:	79fa      	ldrb	r2, [r7, #7]
 800123e:	2107      	movs	r1, #7
 8001240:	2000      	movs	r0, #0
 8001242:	f7ff ff57 	bl	80010f4 <PCA9685_SetBit>
 8001246:	4603      	mov	r3, r0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <PCA9685_AutoIncrement>:

PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable, PCA9685_DeviceNumber Device)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	460a      	mov	r2, r1
 800125a:	71fb      	strb	r3, [r7, #7]
 800125c:	4613      	mov	r3, r2
 800125e:	71bb      	strb	r3, [r7, #6]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable, Device);
 8001260:	79bb      	ldrb	r3, [r7, #6]
 8001262:	79fa      	ldrb	r2, [r7, #7]
 8001264:	2105      	movs	r1, #5
 8001266:	2000      	movs	r0, #0
 8001268:	f7ff ff44 	bl	80010f4 <PCA9685_SetBit>
 800126c:	4603      	mov	r3, r0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <PCA9685_SetPwmFrequency>:

//
//	Frequency - Hz value
//
PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency, PCA9685_DeviceNumber Device)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af04      	add	r7, sp, #16
 800127e:	4603      	mov	r3, r0
 8001280:	460a      	mov	r2, r1
 8001282:	80fb      	strh	r3, [r7, #6]
 8001284:	4613      	mov	r3, r2
 8001286:	717b      	strb	r3, [r7, #5]

	int Address = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
	if (!Device) Address =  PCA9685_ADDRESS;
 800128c:	797b      	ldrb	r3, [r7, #5]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <PCA9685_SetPwmFrequency+0x1e>
 8001292:	2380      	movs	r3, #128	; 0x80
 8001294:	617b      	str	r3, [r7, #20]
	if (Device) Address =  PCA9685_ADDRESS2;
 8001296:	797b      	ldrb	r3, [r7, #5]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <PCA9685_SetPwmFrequency+0x28>
 800129c:	2382      	movs	r3, #130	; 0x82
 800129e:	617b      	str	r3, [r7, #20]

	float PrescalerVal;
	uint8_t Prescale;

	if(Frequency >= 1526)
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	f240 52f5 	movw	r2, #1525	; 0x5f5
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d902      	bls.n	80012b0 <PCA9685_SetPwmFrequency+0x38>
	{
		Prescale = 0x03;
 80012aa:	2303      	movs	r3, #3
 80012ac:	73fb      	strb	r3, [r7, #15]
 80012ae:	e041      	b.n	8001334 <PCA9685_SetPwmFrequency+0xbc>
	}
	else if(Frequency <= 24)
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	2b18      	cmp	r3, #24
 80012b4:	d802      	bhi.n	80012bc <PCA9685_SetPwmFrequency+0x44>
	{
		Prescale = 0xFF;
 80012b6:	23ff      	movs	r3, #255	; 0xff
 80012b8:	73fb      	strb	r3, [r7, #15]
 80012ba:	e03b      	b.n	8001334 <PCA9685_SetPwmFrequency+0xbc>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 80012bc:	88fb      	ldrh	r3, [r7, #6]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fd3c 	bl	8000d3c <__aeabi_ui2f>
 80012c4:	4603      	mov	r3, r0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f920 	bl	800050c <__aeabi_f2d>
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <PCA9685_SetPwmFrequency+0x110>)
 80012d2:	f7ff f973 	bl	80005bc <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	a129      	add	r1, pc, #164	; (adr r1, 8001380 <PCA9685_SetPwmFrequency+0x108>)
 80012dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012e0:	f7ff fa96 	bl	8000810 <__aeabi_ddiv>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4610      	mov	r0, r2
 80012ea:	4619      	mov	r1, r3
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	4b26      	ldr	r3, [pc, #152]	; (800138c <PCA9685_SetPwmFrequency+0x114>)
 80012f2:	f7fe ffab 	bl	800024c <__aeabi_dsub>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4610      	mov	r0, r2
 80012fc:	4619      	mov	r1, r3
 80012fe:	f7ff fc17 	bl	8000b30 <__aeabi_d2f>
 8001302:	4603      	mov	r3, r0
 8001304:	613b      	str	r3, [r7, #16]
		Prescale = floor(PrescalerVal + 0.5);
 8001306:	6938      	ldr	r0, [r7, #16]
 8001308:	f7ff f900 	bl	800050c <__aeabi_f2d>
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <PCA9685_SetPwmFrequency+0x118>)
 8001312:	f7fe ff9d 	bl	8000250 <__adddf3>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f01a f9af 	bl	801b680 <floor>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fbe1 	bl	8000af0 <__aeabi_d2uiz>
 800132e:	4603      	mov	r3, r0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	73fb      	strb	r3, [r7, #15]
	}

	//
	//	To change the frequency, PCA9685 have to be in Sleep mode.
	//
	PCA9685_SleepMode(1, Device);
 8001334:	797b      	ldrb	r3, [r7, #5]
 8001336:	4619      	mov	r1, r3
 8001338:	2001      	movs	r0, #1
 800133a:	f7ff ff63 	bl	8001204 <PCA9685_SleepMode>
	HAL_I2C_Mem_Write(pca9685_i2c, Address, PCA9685_PRESCALE, 1, &Prescale, 1, 10); // Write Prescale value
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <PCA9685_SetPwmFrequency+0x11c>)
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	b299      	uxth	r1, r3
 8001346:	230a      	movs	r3, #10
 8001348:	9302      	str	r3, [sp, #8]
 800134a:	2301      	movs	r3, #1
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	f107 030f 	add.w	r3, r7, #15
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2301      	movs	r3, #1
 8001356:	22fe      	movs	r2, #254	; 0xfe
 8001358:	f003 fc80 	bl	8004c5c <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(0, Device);
 800135c:	797b      	ldrb	r3, [r7, #5]
 800135e:	4619      	mov	r1, r3
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff ff4f 	bl	8001204 <PCA9685_SleepMode>
	PCA9685_RestartMode(1, Device);
 8001366:	797b      	ldrb	r3, [r7, #5]
 8001368:	4619      	mov	r1, r3
 800136a:	2001      	movs	r0, #1
 800136c:	f7ff ff5d 	bl	800122a <PCA9685_RestartMode>
	return PCA9685_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	f3af 8000 	nop.w
 8001380:	00000000 	.word	0x00000000
 8001384:	4177d784 	.word	0x4177d784
 8001388:	40b00000 	.word	0x40b00000
 800138c:	3ff00000 	.word	0x3ff00000
 8001390:	3fe00000 	.word	0x3fe00000
 8001394:	200000a0 	.word	0x200000a0

08001398 <PCA9685_SetPwm>:

PCA9685_STATUS PCA9685_SetPwm(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af04      	add	r7, sp, #16
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
 80013a2:	460b      	mov	r3, r1
 80013a4:	80bb      	strh	r3, [r7, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	807b      	strh	r3, [r7, #2]
	// If selected Channel is >15 then select device no 2.
	int Address = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
	if (Channel >= 16) {
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	2b0f      	cmp	r3, #15
 80013b2:	d905      	bls.n	80013c0 <PCA9685_SetPwm+0x28>
		Address =  PCA9685_ADDRESS2;
 80013b4:	2382      	movs	r3, #130	; 0x82
 80013b6:	617b      	str	r3, [r7, #20]
		Channel = Channel - 16;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	3b10      	subs	r3, #16
 80013bc:	71fb      	strb	r3, [r7, #7]
 80013be:	e001      	b.n	80013c4 <PCA9685_SetPwm+0x2c>
	}else{
		Address =  PCA9685_ADDRESS;
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	617b      	str	r3, [r7, #20]


	uint8_t RegisterAddress;
	uint8_t Message[4];

	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	3306      	adds	r3, #6
 80013cc:	74fb      	strb	r3, [r7, #19]
	Message[0] = OnTime;// & 0xFF;
 80013ce:	88bb      	ldrh	r3, [r7, #4]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	733b      	strb	r3, [r7, #12]
	Message[1] = OnTime>>8;
 80013d4:	88bb      	ldrh	r3, [r7, #4]
 80013d6:	0a1b      	lsrs	r3, r3, #8
 80013d8:	b29b      	uxth	r3, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	737b      	strb	r3, [r7, #13]
	Message[2] = OffTime;// & 0xFF;
 80013de:	887b      	ldrh	r3, [r7, #2]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	73bb      	strb	r3, [r7, #14]
	Message[3] = OffTime>>8;
 80013e4:	887b      	ldrh	r3, [r7, #2]
 80013e6:	0a1b      	lsrs	r3, r3, #8
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	73fb      	strb	r3, [r7, #15]


	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, Address, RegisterAddress, 1, Message, 4, 100))
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <PCA9685_SetPwm+0x8c>)
 80013f0:	6818      	ldr	r0, [r3, #0]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	b299      	uxth	r1, r3
 80013f6:	7cfb      	ldrb	r3, [r7, #19]
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	2364      	movs	r3, #100	; 0x64
 80013fc:	9302      	str	r3, [sp, #8]
 80013fe:	2304      	movs	r3, #4
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	2301      	movs	r3, #1
 800140a:	f003 fc27 	bl	8004c5c <HAL_I2C_Mem_Write>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <PCA9685_SetPwm+0x80>
		{
			return PCA9685_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e000      	b.n	800141a <PCA9685_SetPwm+0x82>
		}

	return PCA9685_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200000a0 	.word	0x200000a0

08001428 <PCA9685_Init>:


PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	pca9685_i2c = hi2c;
 8001430:	4a0d      	ldr	r2, [pc, #52]	; (8001468 <PCA9685_Init+0x40>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6013      	str	r3, [r2, #0]

	PCA9685_SoftwareReset();
 8001436:	f7ff fecb 	bl	80011d0 <PCA9685_SoftwareReset>

	PCA9685_SetPwmFrequency(10000, FirstDevice);
 800143a:	2100      	movs	r1, #0
 800143c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001440:	f7ff ff1a 	bl	8001278 <PCA9685_SetPwmFrequency>
	PCA9685_AutoIncrement(1, FirstDevice);
 8001444:	2100      	movs	r1, #0
 8001446:	2001      	movs	r0, #1
 8001448:	f7ff ff02 	bl	8001250 <PCA9685_AutoIncrement>

	PCA9685_SetPwmFrequency(10000, SecondDevice);
 800144c:	2101      	movs	r1, #1
 800144e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001452:	f7ff ff11 	bl	8001278 <PCA9685_SetPwmFrequency>
	PCA9685_AutoIncrement(1, SecondDevice);
 8001456:	2101      	movs	r1, #1
 8001458:	2001      	movs	r0, #1
 800145a:	f7ff fef9 	bl	8001250 <PCA9685_AutoIncrement>

	return PCA9685_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200000a0 	.word	0x200000a0

0800146c <CLUTask>:

extern int sem;


void CLUTask(void const * argument)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	while (!sem){
 8001474:	e002      	b.n	800147c <CLUTask+0x10>
		osDelay(50);
 8001476:	2032      	movs	r0, #50	; 0x32
 8001478:	f007 fea6 	bl	80091c8 <osDelay>
	while (!sem){
 800147c:	4ba1      	ldr	r3, [pc, #644]	; (8001704 <CLUTask+0x298>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0f8      	beq.n	8001476 <CLUTask+0xa>
	}

Kuchnia_1.PCA_Channel = 12;
 8001484:	4ba0      	ldr	r3, [pc, #640]	; (8001708 <CLUTask+0x29c>)
 8001486:	220c      	movs	r2, #12
 8001488:	621a      	str	r2, [r3, #32]
Kuchnia_2.PCA_Channel = 13;
 800148a:	4ba0      	ldr	r3, [pc, #640]	; (800170c <CLUTask+0x2a0>)
 800148c:	220d      	movs	r2, #13
 800148e:	621a      	str	r2, [r3, #32]

Salon_1.PCA_Channel = 8;
 8001490:	4b9f      	ldr	r3, [pc, #636]	; (8001710 <CLUTask+0x2a4>)
 8001492:	2208      	movs	r2, #8
 8001494:	621a      	str	r2, [r3, #32]
Salon_2.PCA_Channel = 9;
 8001496:	4b9f      	ldr	r3, [pc, #636]	; (8001714 <CLUTask+0x2a8>)
 8001498:	2209      	movs	r2, #9
 800149a:	621a      	str	r2, [r3, #32]

Przedpokoj.PCA_Channel = 15;
 800149c:	4b9e      	ldr	r3, [pc, #632]	; (8001718 <CLUTask+0x2ac>)
 800149e:	220f      	movs	r2, #15
 80014a0:	621a      	str	r2, [r3, #32]
Lazienka.PCA_Channel = 16;
 80014a2:	4b9e      	ldr	r3, [pc, #632]	; (800171c <CLUTask+0x2b0>)
 80014a4:	2210      	movs	r2, #16
 80014a6:	621a      	str	r2, [r3, #32]
Sypialnia.PCA_Channel = 17;
 80014a8:	4b9d      	ldr	r3, [pc, #628]	; (8001720 <CLUTask+0x2b4>)
 80014aa:	2211      	movs	r2, #17
 80014ac:	621a      	str	r2, [r3, #32]

Salon_LED.PCA_Channel_R = 5;
 80014ae:	4b9d      	ldr	r3, [pc, #628]	; (8001724 <CLUTask+0x2b8>)
 80014b0:	2205      	movs	r2, #5
 80014b2:	639a      	str	r2, [r3, #56]	; 0x38
Salon_LED.PCA_Channel_G = 4;
 80014b4:	4b9b      	ldr	r3, [pc, #620]	; (8001724 <CLUTask+0x2b8>)
 80014b6:	2204      	movs	r2, #4
 80014b8:	63da      	str	r2, [r3, #60]	; 0x3c
Salon_LED.PCA_Channel_B = 6;
 80014ba:	4b9a      	ldr	r3, [pc, #616]	; (8001724 <CLUTask+0x2b8>)
 80014bc:	2206      	movs	r2, #6
 80014be:	641a      	str	r2, [r3, #64]	; 0x40
Salon_LED.PCA_Channel_W = 7;
 80014c0:	4b98      	ldr	r3, [pc, #608]	; (8001724 <CLUTask+0x2b8>)
 80014c2:	2207      	movs	r2, #7
 80014c4:	645a      	str	r2, [r3, #68]	; 0x44
//Salon_LED.RedValue = 0;
//Salon_LED.GreenValue = 0;
//Salon_LED.BlueValue = 0;
//Salon_LED.WhiteValue = 0;

Salon_LED_Biurko.PCA_Channel_R = 1;
 80014c6:	4b98      	ldr	r3, [pc, #608]	; (8001728 <CLUTask+0x2bc>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	639a      	str	r2, [r3, #56]	; 0x38
Salon_LED_Biurko.PCA_Channel_G = 0;
 80014cc:	4b96      	ldr	r3, [pc, #600]	; (8001728 <CLUTask+0x2bc>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	63da      	str	r2, [r3, #60]	; 0x3c
Salon_LED_Biurko.PCA_Channel_B = 2;
 80014d2:	4b95      	ldr	r3, [pc, #596]	; (8001728 <CLUTask+0x2bc>)
 80014d4:	2202      	movs	r2, #2
 80014d6:	641a      	str	r2, [r3, #64]	; 0x40
Salon_LED_Biurko.PCA_Channel_W = 3;
 80014d8:	4b93      	ldr	r3, [pc, #588]	; (8001728 <CLUTask+0x2bc>)
 80014da:	2203      	movs	r2, #3
 80014dc:	645a      	str	r2, [r3, #68]	; 0x44
//Light Sypialnia_Kinkiet = {18,0,0};

//DIMM_SwitchOn(Kuchnia_1,0,0);
//DIMM_SwitchOn(Kuchnia_2,0,0);

IN_1.GPIO_Pin = IN_1_Pin;
 80014de:	4b93      	ldr	r3, [pc, #588]	; (800172c <CLUTask+0x2c0>)
 80014e0:	2204      	movs	r2, #4
 80014e2:	831a      	strh	r2, [r3, #24]
IN_1.GPIO_Port = IN_1_GPIO_Port;
 80014e4:	4b91      	ldr	r3, [pc, #580]	; (800172c <CLUTask+0x2c0>)
 80014e6:	4a92      	ldr	r2, [pc, #584]	; (8001730 <CLUTask+0x2c4>)
 80014e8:	615a      	str	r2, [r3, #20]

IN_2.GPIO_Pin = IN_2_Pin;
 80014ea:	4b92      	ldr	r3, [pc, #584]	; (8001734 <CLUTask+0x2c8>)
 80014ec:	2280      	movs	r2, #128	; 0x80
 80014ee:	831a      	strh	r2, [r3, #24]
IN_2.GPIO_Port = IN_2_GPIO_Port;
 80014f0:	4b90      	ldr	r3, [pc, #576]	; (8001734 <CLUTask+0x2c8>)
 80014f2:	4a91      	ldr	r2, [pc, #580]	; (8001738 <CLUTask+0x2cc>)
 80014f4:	615a      	str	r2, [r3, #20]

IN_3.GPIO_Pin = IN_3_Pin;
 80014f6:	4b91      	ldr	r3, [pc, #580]	; (800173c <CLUTask+0x2d0>)
 80014f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014fc:	831a      	strh	r2, [r3, #24]
IN_3.GPIO_Port = IN_3_GPIO_Port;
 80014fe:	4b8f      	ldr	r3, [pc, #572]	; (800173c <CLUTask+0x2d0>)
 8001500:	4a8d      	ldr	r2, [pc, #564]	; (8001738 <CLUTask+0x2cc>)
 8001502:	615a      	str	r2, [r3, #20]

IN_4.GPIO_Pin = IN_4_Pin;
 8001504:	4b8e      	ldr	r3, [pc, #568]	; (8001740 <CLUTask+0x2d4>)
 8001506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800150a:	831a      	strh	r2, [r3, #24]
IN_4.GPIO_Port = IN_4_GPIO_Port;
 800150c:	4b8c      	ldr	r3, [pc, #560]	; (8001740 <CLUTask+0x2d4>)
 800150e:	4a8a      	ldr	r2, [pc, #552]	; (8001738 <CLUTask+0x2cc>)
 8001510:	615a      	str	r2, [r3, #20]

IN_5.GPIO_Pin = IN_5_Pin;
 8001512:	4b8c      	ldr	r3, [pc, #560]	; (8001744 <CLUTask+0x2d8>)
 8001514:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001518:	831a      	strh	r2, [r3, #24]
IN_5.GPIO_Port = IN_5_GPIO_Port;
 800151a:	4b8a      	ldr	r3, [pc, #552]	; (8001744 <CLUTask+0x2d8>)
 800151c:	4a86      	ldr	r2, [pc, #536]	; (8001738 <CLUTask+0x2cc>)
 800151e:	615a      	str	r2, [r3, #20]

SetInertion(&IN_1, 30);
 8001520:	211e      	movs	r1, #30
 8001522:	4882      	ldr	r0, [pc, #520]	; (800172c <CLUTask+0x2c0>)
 8001524:	f000 f9bd 	bl	80018a2 <SetInertion>
//IN_1.Inertion = 30;
IN_2.Inertion = 30;
 8001528:	4b82      	ldr	r3, [pc, #520]	; (8001734 <CLUTask+0x2c8>)
 800152a:	221e      	movs	r2, #30
 800152c:	609a      	str	r2, [r3, #8]
IN_3.Inertion = 30;
 800152e:	4b83      	ldr	r3, [pc, #524]	; (800173c <CLUTask+0x2d0>)
 8001530:	221e      	movs	r2, #30
 8001532:	609a      	str	r2, [r3, #8]
IN_4.Inertion = 30;
 8001534:	4b82      	ldr	r3, [pc, #520]	; (8001740 <CLUTask+0x2d4>)
 8001536:	221e      	movs	r2, #30
 8001538:	609a      	str	r2, [r3, #8]
IN_5.Inertion = 30;
 800153a:	4b82      	ldr	r3, [pc, #520]	; (8001744 <CLUTask+0x2d8>)
 800153c:	221e      	movs	r2, #30
 800153e:	609a      	str	r2, [r3, #8]

LED_OK.GPIO_Pin = LED_OK_Pin;
 8001540:	4b81      	ldr	r3, [pc, #516]	; (8001748 <CLUTask+0x2dc>)
 8001542:	2210      	movs	r2, #16
 8001544:	819a      	strh	r2, [r3, #12]
LED_OK.GPIO_Port = LED_OK_GPIO_Port;
 8001546:	4b80      	ldr	r3, [pc, #512]	; (8001748 <CLUTask+0x2dc>)
 8001548:	4a7b      	ldr	r2, [pc, #492]	; (8001738 <CLUTask+0x2cc>)
 800154a:	609a      	str	r2, [r3, #8]
LED_ERROR.GPIO_Pin = LED_ERROR_Pin;
 800154c:	4b7f      	ldr	r3, [pc, #508]	; (800174c <CLUTask+0x2e0>)
 800154e:	2208      	movs	r2, #8
 8001550:	819a      	strh	r2, [r3, #12]
LED_ERROR.GPIO_Port = LED_ERROR_GPIO_Port;
 8001552:	4b7e      	ldr	r3, [pc, #504]	; (800174c <CLUTask+0x2e0>)
 8001554:	4a78      	ldr	r2, [pc, #480]	; (8001738 <CLUTask+0x2cc>)
 8001556:	609a      	str	r2, [r3, #8]

DOUT_Switch(&LED_OK,0);
 8001558:	2100      	movs	r1, #0
 800155a:	487b      	ldr	r0, [pc, #492]	; (8001748 <CLUTask+0x2dc>)
 800155c:	f000 fa63 	bl	8001a26 <DOUT_Switch>
PCA9685_Init(&hi2c1);
 8001560:	487b      	ldr	r0, [pc, #492]	; (8001750 <CLUTask+0x2e4>)
 8001562:	f7ff ff61 	bl	8001428 <PCA9685_Init>
//LED_SetWhiteValue(&Salon_LED_Biurko, 255, 0);

  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8001566:	2001      	movs	r0, #1
 8001568:	f007 fe2e 	bl	80091c8 <osDelay>
	  switch (DIN_Process(&IN_1)){
 800156c:	486f      	ldr	r0, [pc, #444]	; (800172c <CLUTask+0x2c0>)
 800156e:	f000 f9a6 	bl	80018be <DIN_Process>
 8001572:	4603      	mov	r3, r0
 8001574:	2b01      	cmp	r3, #1
 8001576:	d002      	beq.n	800157e <CLUTask+0x112>
 8001578:	2b02      	cmp	r3, #2
 800157a:	d00a      	beq.n	8001592 <CLUTask+0x126>
 800157c:	e037      	b.n	80015ee <CLUTask+0x182>
	  case SINGLE_PRESS:
		  DIMM_Switch(&Przedpokoj,0,0);
 800157e:	2200      	movs	r2, #0
 8001580:	2100      	movs	r1, #0
 8001582:	4865      	ldr	r0, [pc, #404]	; (8001718 <CLUTask+0x2ac>)
 8001584:	f000 f96e 	bl	8001864 <DIMM_Switch>
		  DOUT_Switch(&LED_OK,0);
 8001588:	2100      	movs	r1, #0
 800158a:	486f      	ldr	r0, [pc, #444]	; (8001748 <CLUTask+0x2dc>)
 800158c:	f000 fa4b 	bl	8001a26 <DOUT_Switch>
		  break;
 8001590:	e02d      	b.n	80015ee <CLUTask+0x182>
	  case LONG_PRESS:
		  DIMM_SwitchOff(&Lazienka, 0, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	4861      	ldr	r0, [pc, #388]	; (800171c <CLUTask+0x2b0>)
 8001598:	f000 f936 	bl	8001808 <DIMM_SwitchOff>
		  DIMM_SwitchOff(&Kuchnia_1, 0, 0);
 800159c:	2200      	movs	r2, #0
 800159e:	2100      	movs	r1, #0
 80015a0:	4859      	ldr	r0, [pc, #356]	; (8001708 <CLUTask+0x29c>)
 80015a2:	f000 f931 	bl	8001808 <DIMM_SwitchOff>
		  DIMM_SwitchOff(&Kuchnia_2, 0, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	4858      	ldr	r0, [pc, #352]	; (800170c <CLUTask+0x2a0>)
 80015ac:	f000 f92c 	bl	8001808 <DIMM_SwitchOff>
		  DIMM_SwitchOff(&Salon_1, 0, 0);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2100      	movs	r1, #0
 80015b4:	4856      	ldr	r0, [pc, #344]	; (8001710 <CLUTask+0x2a4>)
 80015b6:	f000 f927 	bl	8001808 <DIMM_SwitchOff>
		  DIMM_SwitchOff(&Salon_2, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	4855      	ldr	r0, [pc, #340]	; (8001714 <CLUTask+0x2a8>)
 80015c0:	f000 f922 	bl	8001808 <DIMM_SwitchOff>
		  DIMM_SwitchOff(&Sypialnia, 0, 0);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2100      	movs	r1, #0
 80015c8:	4855      	ldr	r0, [pc, #340]	; (8001720 <CLUTask+0x2b4>)
 80015ca:	f000 f91d 	bl	8001808 <DIMM_SwitchOff>
		  //wait 10s
		  DIMM_SwitchOff(&Przedpokoj, 0, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	4851      	ldr	r0, [pc, #324]	; (8001718 <CLUTask+0x2ac>)
 80015d4:	f000 f918 	bl	8001808 <DIMM_SwitchOff>

		  LED_SwitchOff(&Salon_LED, 0, 0);
 80015d8:	2200      	movs	r2, #0
 80015da:	2100      	movs	r1, #0
 80015dc:	4851      	ldr	r0, [pc, #324]	; (8001724 <CLUTask+0x2b8>)
 80015de:	f000 faf9 	bl	8001bd4 <LED_SwitchOff>
		  LED_SwitchOff(&Salon_LED_Biurko, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	4850      	ldr	r0, [pc, #320]	; (8001728 <CLUTask+0x2bc>)
 80015e8:	f000 faf4 	bl	8001bd4 <LED_SwitchOff>
		  break;
 80015ec:	bf00      	nop
	  }

	  switch (DIN_Process(&IN_2)){
 80015ee:	4851      	ldr	r0, [pc, #324]	; (8001734 <CLUTask+0x2c8>)
 80015f0:	f000 f965 	bl	80018be <DIN_Process>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d109      	bne.n	800160e <CLUTask+0x1a2>
	  case SINGLE_PRESS:
		  DIMM_Switch(&Sypialnia,0,0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2100      	movs	r1, #0
 80015fe:	4848      	ldr	r0, [pc, #288]	; (8001720 <CLUTask+0x2b4>)
 8001600:	f000 f930 	bl	8001864 <DIMM_Switch>
		  DOUT_Switch(&LED_OK,0);
 8001604:	2100      	movs	r1, #0
 8001606:	4850      	ldr	r0, [pc, #320]	; (8001748 <CLUTask+0x2dc>)
 8001608:	f000 fa0d 	bl	8001a26 <DOUT_Switch>
		  break;
 800160c:	bf00      	nop
	  }

	  switch (DIN_Process(&IN_3)){
 800160e:	484b      	ldr	r0, [pc, #300]	; (800173c <CLUTask+0x2d0>)
 8001610:	f000 f955 	bl	80018be <DIN_Process>
 8001614:	4603      	mov	r3, r0
 8001616:	2b01      	cmp	r3, #1
 8001618:	d002      	beq.n	8001620 <CLUTask+0x1b4>
 800161a:	2b03      	cmp	r3, #3
 800161c:	d023      	beq.n	8001666 <CLUTask+0x1fa>
 800161e:	e053      	b.n	80016c8 <CLUTask+0x25c>
	  case SINGLE_PRESS:
		  DOUT_Switch(&LED_OK,0);
 8001620:	2100      	movs	r1, #0
 8001622:	4849      	ldr	r0, [pc, #292]	; (8001748 <CLUTask+0x2dc>)
 8001624:	f000 f9ff 	bl	8001a26 <DOUT_Switch>

		  if (Kuchnia_1.Value==0&&Kuchnia_2.Value==1){ // STAN KUCHNIA_1 = 0 KUCHNIA_2 = 1
 8001628:	4b37      	ldr	r3, [pc, #220]	; (8001708 <CLUTask+0x29c>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d109      	bne.n	8001644 <CLUTask+0x1d8>
 8001630:	4b36      	ldr	r3, [pc, #216]	; (800170c <CLUTask+0x2a0>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d105      	bne.n	8001644 <CLUTask+0x1d8>
			  DIMM_SwitchOff(&Kuchnia_2,0,0);
 8001638:	2200      	movs	r2, #0
 800163a:	2100      	movs	r1, #0
 800163c:	4833      	ldr	r0, [pc, #204]	; (800170c <CLUTask+0x2a0>)
 800163e:	f000 f8e3 	bl	8001808 <DIMM_SwitchOff>
			  break;
 8001642:	e041      	b.n	80016c8 <CLUTask+0x25c>
		  }

		  if(Kuchnia_2.Value==Kuchnia_1.Value)	// STAN KUCHNIA_x == KUCHNIA_x
 8001644:	4b31      	ldr	r3, [pc, #196]	; (800170c <CLUTask+0x2a0>)
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <CLUTask+0x29c>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	429a      	cmp	r2, r3
 800164e:	d138      	bne.n	80016c2 <CLUTask+0x256>
		  {
			  DIMM_Switch(&Kuchnia_1,0,0);
 8001650:	2200      	movs	r2, #0
 8001652:	2100      	movs	r1, #0
 8001654:	482c      	ldr	r0, [pc, #176]	; (8001708 <CLUTask+0x29c>)
 8001656:	f000 f905 	bl	8001864 <DIMM_Switch>
			  DIMM_Switch(&Kuchnia_2,0,0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	482b      	ldr	r0, [pc, #172]	; (800170c <CLUTask+0x2a0>)
 8001660:	f000 f900 	bl	8001864 <DIMM_Switch>
			  break;
 8001664:	e030      	b.n	80016c8 <CLUTask+0x25c>
		  }
		  break;
	  case DOUBLE_PRESS:
		  DOUT_Switch(&LED_OK,0);
 8001666:	2100      	movs	r1, #0
 8001668:	4837      	ldr	r0, [pc, #220]	; (8001748 <CLUTask+0x2dc>)
 800166a:	f000 f9dc 	bl	8001a26 <DOUT_Switch>

		  if(Kuchnia_2.Value==0&&Kuchnia_1.Value==0)	// STAN KUCHNIA_x == KUCHNIA_x
 800166e:	4b27      	ldr	r3, [pc, #156]	; (800170c <CLUTask+0x2a0>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d109      	bne.n	800168a <CLUTask+0x21e>
 8001676:	4b24      	ldr	r3, [pc, #144]	; (8001708 <CLUTask+0x29c>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d105      	bne.n	800168a <CLUTask+0x21e>
		  {
			  DIMM_SwitchOn(&Kuchnia_2,0,0);
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	4822      	ldr	r0, [pc, #136]	; (800170c <CLUTask+0x2a0>)
 8001684:	f000 f892 	bl	80017ac <DIMM_SwitchOn>
			  break;
 8001688:	e01e      	b.n	80016c8 <CLUTask+0x25c>
		  }

		  if (Kuchnia_1.Value==0&&Kuchnia_2.Value==1){ // STAN KUCHNIA_1 = 0 KUCHNIA_2 = 1
 800168a:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <CLUTask+0x29c>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d109      	bne.n	80016a6 <CLUTask+0x23a>
 8001692:	4b1e      	ldr	r3, [pc, #120]	; (800170c <CLUTask+0x2a0>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d105      	bne.n	80016a6 <CLUTask+0x23a>
			  DIMM_SwitchOff(&Kuchnia_2,0,0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	481b      	ldr	r0, [pc, #108]	; (800170c <CLUTask+0x2a0>)
 80016a0:	f000 f8b2 	bl	8001808 <DIMM_SwitchOff>
			  break;
 80016a4:	e010      	b.n	80016c8 <CLUTask+0x25c>
		  }

		  if(Kuchnia_2.Value==1&&Kuchnia_1.Value==1)	// STAN KUCHNIA_x == KUCHNIA_x
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <CLUTask+0x2a0>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d10b      	bne.n	80016c6 <CLUTask+0x25a>
 80016ae:	4b16      	ldr	r3, [pc, #88]	; (8001708 <CLUTask+0x29c>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d107      	bne.n	80016c6 <CLUTask+0x25a>
		  {
			  DIMM_SwitchOff(&Kuchnia_1,0,0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	4813      	ldr	r0, [pc, #76]	; (8001708 <CLUTask+0x29c>)
 80016bc:	f000 f8a4 	bl	8001808 <DIMM_SwitchOff>
			  break;
 80016c0:	e002      	b.n	80016c8 <CLUTask+0x25c>
		  break;
 80016c2:	bf00      	nop
 80016c4:	e000      	b.n	80016c8 <CLUTask+0x25c>
		  }
		  break;
 80016c6:	bf00      	nop
	  }

	  switch (DIN_Process(&IN_4)){
 80016c8:	481d      	ldr	r0, [pc, #116]	; (8001740 <CLUTask+0x2d4>)
 80016ca:	f000 f8f8 	bl	80018be <DIN_Process>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d109      	bne.n	80016e8 <CLUTask+0x27c>
	  case SINGLE_PRESS:
		  DIMM_Switch(&Lazienka,0,0);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2100      	movs	r1, #0
 80016d8:	4810      	ldr	r0, [pc, #64]	; (800171c <CLUTask+0x2b0>)
 80016da:	f000 f8c3 	bl	8001864 <DIMM_Switch>
		  DOUT_Switch(&LED_OK,0);
 80016de:	2100      	movs	r1, #0
 80016e0:	4819      	ldr	r0, [pc, #100]	; (8001748 <CLUTask+0x2dc>)
 80016e2:	f000 f9a0 	bl	8001a26 <DOUT_Switch>
		  break;
 80016e6:	bf00      	nop
	  }

	  switch (DIN_Process(&IN_5)){
 80016e8:	4816      	ldr	r0, [pc, #88]	; (8001744 <CLUTask+0x2d8>)
 80016ea:	f000 f8e8 	bl	80018be <DIN_Process>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d03e      	beq.n	8001772 <CLUTask+0x306>
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	f73f af36 	bgt.w	8001566 <CLUTask+0xfa>
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d02a      	beq.n	8001754 <CLUTask+0x2e8>
 80016fe:	2b02      	cmp	r3, #2
		  Salon_LED_Biurko.WhiteValue = 200;
		  LED_Switch(&Salon_LED, 0, 0);
		  LED_Switch(&Salon_LED_Biurko, 0, 0);
		  break;
	  case LONG_PRESS:
		  break;
 8001700:	e048      	b.n	8001794 <CLUTask+0x328>
 8001702:	bf00      	nop
 8001704:	20000384 	.word	0x20000384
 8001708:	200001bc 	.word	0x200001bc
 800170c:	200001e0 	.word	0x200001e0
 8001710:	20000204 	.word	0x20000204
 8001714:	20000228 	.word	0x20000228
 8001718:	2000024c 	.word	0x2000024c
 800171c:	20000270 	.word	0x20000270
 8001720:	20000294 	.word	0x20000294
 8001724:	200002b8 	.word	0x200002b8
 8001728:	20000300 	.word	0x20000300
 800172c:	200000cc 	.word	0x200000cc
 8001730:	40010c00 	.word	0x40010c00
 8001734:	200000fc 	.word	0x200000fc
 8001738:	40011800 	.word	0x40011800
 800173c:	2000012c 	.word	0x2000012c
 8001740:	2000015c 	.word	0x2000015c
 8001744:	2000018c 	.word	0x2000018c
 8001748:	200000b8 	.word	0x200000b8
 800174c:	200000a4 	.word	0x200000a4
 8001750:	20000c48 	.word	0x20000c48
		  DIMM_Switch(&Salon_1,0,0);
 8001754:	2200      	movs	r2, #0
 8001756:	2100      	movs	r1, #0
 8001758:	480f      	ldr	r0, [pc, #60]	; (8001798 <CLUTask+0x32c>)
 800175a:	f000 f883 	bl	8001864 <DIMM_Switch>
		  DIMM_Switch(&Salon_2,0,0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	480e      	ldr	r0, [pc, #56]	; (800179c <CLUTask+0x330>)
 8001764:	f000 f87e 	bl	8001864 <DIMM_Switch>
		  DOUT_Switch(&LED_OK,0);
 8001768:	2100      	movs	r1, #0
 800176a:	480d      	ldr	r0, [pc, #52]	; (80017a0 <CLUTask+0x334>)
 800176c:	f000 f95b 	bl	8001a26 <DOUT_Switch>
		  break;
 8001770:	e010      	b.n	8001794 <CLUTask+0x328>
		  Salon_LED.WhiteValue = 200;
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <CLUTask+0x338>)
 8001774:	22c8      	movs	r2, #200	; 0xc8
 8001776:	61da      	str	r2, [r3, #28]
		  Salon_LED_Biurko.WhiteValue = 200;
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <CLUTask+0x33c>)
 800177a:	22c8      	movs	r2, #200	; 0xc8
 800177c:	61da      	str	r2, [r3, #28]
		  LED_Switch(&Salon_LED, 0, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2100      	movs	r1, #0
 8001782:	4808      	ldr	r0, [pc, #32]	; (80017a4 <CLUTask+0x338>)
 8001784:	f000 fa78 	bl	8001c78 <LED_Switch>
		  LED_Switch(&Salon_LED_Biurko, 0, 0);
 8001788:	2200      	movs	r2, #0
 800178a:	2100      	movs	r1, #0
 800178c:	4806      	ldr	r0, [pc, #24]	; (80017a8 <CLUTask+0x33c>)
 800178e:	f000 fa73 	bl	8001c78 <LED_Switch>
		  break;
 8001792:	bf00      	nop
	  osDelay(1);
 8001794:	e6e7      	b.n	8001566 <CLUTask+0xfa>
 8001796:	bf00      	nop
 8001798:	20000204 	.word	0x20000204
 800179c:	20000228 	.word	0x20000228
 80017a0:	200000b8 	.word	0x200000b8
 80017a4:	200002b8 	.word	0x200002b8
 80017a8:	20000300 	.word	0x20000300

080017ac <DIMM_SwitchOn>:
#include "stdbool.h"
#include "DIMM.h"

/* Function declarations -----------------------------------------------*/

METHOD_ERROR DIMM_SwitchOn(struct DIMM *Object, int Time, int Ramp){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
	if (Object->Value) return ERROR_CBC;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d002      	beq.n	80017c6 <DIMM_SwitchOn+0x1a>
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295
 80017c4:	e01c      	b.n	8001800 <DIMM_SwitchOn+0x54>

	if (PCA9685_SetPwm(Object->PCA_Channel, 0, 4095)) return ERROR_PCA;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	f640 72ff 	movw	r2, #4095	; 0xfff
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fde0 	bl	8001398 <PCA9685_SetPwm>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d002      	beq.n	80017e4 <DIMM_SwitchOn+0x38>
 80017de:	f06f 0302 	mvn.w	r3, #2
 80017e2:	e00d      	b.n	8001800 <DIMM_SwitchOn+0x54>

	Object->Value = 1;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2201      	movs	r2, #1
 80017e8:	605a      	str	r2, [r3, #4]
	OnValueChange(Object->ID);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 fa61 	bl	8001cb6 <OnValueChange>
	OnSwitchOn(Object->ID);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 fa66 	bl	8001cca <OnSwitchOn>
	return ERROR_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <DIMM_SwitchOff>:
METHOD_ERROR DIMM_SwitchOff(struct DIMM *Object, int Time, int Ramp){
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
	if (!Object->Value) return ERROR_CBC;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d102      	bne.n	8001822 <DIMM_SwitchOff+0x1a>
 800181c:	f04f 33ff 	mov.w	r3, #4294967295
 8001820:	e01c      	b.n	800185c <DIMM_SwitchOff+0x54>

	if (PCA9685_SetPwm(Object->PCA_Channel, 4095, 0)) return ERROR_PCA;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2200      	movs	r2, #0
 800182a:	f640 71ff 	movw	r1, #4095	; 0xfff
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fdb2 	bl	8001398 <PCA9685_SetPwm>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d002      	beq.n	8001840 <DIMM_SwitchOff+0x38>
 800183a:	f06f 0302 	mvn.w	r3, #2
 800183e:	e00d      	b.n	800185c <DIMM_SwitchOff+0x54>

	Object->Value = 0;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	605a      	str	r2, [r3, #4]
	OnValueChange(Object->ID);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f000 fa33 	bl	8001cb6 <OnValueChange>
	OnSwitchOff(Object->ID);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f000 fa42 	bl	8001cde <OnSwitchOff>
	return ERROR_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <DIMM_Switch>:
METHOD_ERROR DIMM_Switch(struct DIMM *Object, int Time, int Ramp){
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
	METHOD_ERROR ERROR_VALUE;
	if (Object->Value){
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d007      	beq.n	8001888 <DIMM_Switch+0x24>
		ERROR_VALUE = DIMM_SwitchOff(Object, Time, Ramp);
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	68b9      	ldr	r1, [r7, #8]
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f7ff ffc3 	bl	8001808 <DIMM_SwitchOff>
 8001882:	4603      	mov	r3, r0
 8001884:	75fb      	strb	r3, [r7, #23]
 8001886:	e006      	b.n	8001896 <DIMM_Switch+0x32>
	}else {
		ERROR_VALUE = DIMM_SwitchOn(Object, Time, Ramp);
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	68b9      	ldr	r1, [r7, #8]
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f7ff ff8d 	bl	80017ac <DIMM_SwitchOn>
 8001892:	4603      	mov	r3, r0
 8001894:	75fb      	strb	r3, [r7, #23]
	}
	return ERROR_VALUE;
 8001896:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <SetInertion>:
*/
#include "DIN.h"

/* Function declarations -----------------------------------------------*/

METHOD_ERROR SetInertion(struct DIN *Object, int Inertion){
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	6039      	str	r1, [r7, #0]
	Object->Inertion = Inertion;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	609a      	str	r2, [r3, #8]
	return ERROR_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr

080018be <DIN_Process>:
METHOD_ERROR SetHoldInterval(struct DIN *Object, int HoldInterval){
	Object->HoldInterval = HoldInterval;
	return ERROR_OK;
}

DIN_Event DIN_Process(struct DIN *Object){
 80018be:	b590      	push	{r4, r7, lr}
 80018c0:	b085      	sub	sp, #20
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]

  DIN_Event retval = NO_PRESS;
 80018c6:	2300      	movs	r3, #0
 80018c8:	73fb      	strb	r3, [r7, #15]

  if (HAL_GetTick() < Object->lastTime) Object->lastTime = HAL_GetTick();																// wrapped around
 80018ca:	f001 f94f 	bl	8002b6c <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d204      	bcs.n	80018e2 <DIN_Process+0x24>
 80018d8:	f001 f948 	bl	8002b6c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	61da      	str	r2, [r3, #28]
  if ((Object->lastTime + Object->Inertion) > HAL_GetTick())  return NO_PRESS;															// not enough time has passed to debounce, try again
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6892      	ldr	r2, [r2, #8]
 80018ea:	189c      	adds	r4, r3, r2
 80018ec:	f001 f93e 	bl	8002b6c <HAL_GetTick>
 80018f0:	4603      	mov	r3, r0
 80018f2:	429c      	cmp	r4, r3
 80018f4:	d901      	bls.n	80018fa <DIN_Process+0x3c>
 80018f6:	2300      	movs	r3, #0
 80018f8:	e091      	b.n	8001a1e <DIN_Process+0x160>

  Object->lastTime = HAL_GetTick();																								// have waited DEBOUNCE milliseconds, reset the timer
 80018fa:	f001 f937 	bl	8002b6c <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	61da      	str	r2, [r3, #28]
  Object->state = HAL_GPIO_ReadPin(Object->GPIO_Port, Object->GPIO_Pin);  																// read the button
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	695a      	ldr	r2, [r3, #20]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	8b1b      	ldrh	r3, [r3, #24]
 800190c:	4619      	mov	r1, r3
 800190e:	4610      	mov	r0, r2
 8001910:	f002 ff1e 	bl	8004750 <HAL_GPIO_ReadPin>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	bf14      	ite	ne
 800191a:	2301      	movne	r3, #1
 800191c:	2300      	moveq	r3, #0
 800191e:	b2da      	uxtb	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	769a      	strb	r2, [r3, #26]

	if (Object->state != Object->lastState) {																							// BUTTON PRESSED AFTER DEBOUNCE
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	7e9a      	ldrb	r2, [r3, #26]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	7edb      	ldrb	r3, [r3, #27]
 800192c:	429a      	cmp	r2, r3
 800192e:	d031      	beq.n	8001994 <DIN_Process+0xd6>
		  if (Object->state == 0) {																								// just pressed
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	7e9b      	ldrb	r3, [r3, #26]
 8001934:	f083 0301 	eor.w	r3, r3, #1
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d009      	beq.n	8001952 <DIN_Process+0x94>
			  Object->button_pressed_ts = HAL_GetTick();
 800193e:	f001 f915 	bl	8002b6c <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	621a      	str	r2, [r3, #32]
			  Object->long_press_pending = true;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001950:	e020      	b.n	8001994 <DIN_Process+0xd6>
		  }else if (Object->state == 1) {          																				// just released
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	7e9b      	ldrb	r3, [r3, #26]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d01c      	beq.n	8001994 <DIN_Process+0xd6>
			  Object-> button_released_ts = HAL_GetTick();
 800195a:	f001 f907 	bl	8002b6c <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	625a      	str	r2, [r3, #36]	; 0x24
				 if(Object->double_pending)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800196a:	2b00      	cmp	r3, #0
 800196c:	d006      	beq.n	800197c <DIN_Process+0xbe>
				 {
					 retval = DOUBLE_PRESS;
 800196e:	2303      	movs	r3, #3
 8001970:	73fb      	strb	r3, [r7, #15]
					 Object->double_pending = false;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800197a:	e00b      	b.n	8001994 <DIN_Process+0xd6>
				 }
				 else if (Object->button_released_ts - Object->button_pressed_ts < DOUBLE_GAP_MILLIS_MAX)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800198a:	d203      	bcs.n	8001994 <DIN_Process+0xd6>
				 {
					 Object->double_pending = true;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				 }
		  }
	}

	if (Object->state && Object->double_pending && HAL_GetTick() - Object->button_released_ts >= DOUBLE_GAP_MILLIS_MAX && Object->button_released_ts - Object->button_pressed_ts < LONG_MILLIS_MIN){
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7e9b      	ldrb	r3, [r3, #26]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d020      	beq.n	80019de <DIN_Process+0x120>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d01b      	beq.n	80019de <DIN_Process+0x120>
 80019a6:	f001 f8e1 	bl	8002b6c <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80019b6:	d312      	bcc.n	80019de <DIN_Process+0x120>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80019c6:	d20a      	bcs.n	80019de <DIN_Process+0x120>
		retval = SINGLE_PRESS;
 80019c8:	2301      	movs	r3, #1
 80019ca:	73fb      	strb	r3, [r7, #15]
		Object->long_press_pending = false;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		Object->double_pending = false;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80019dc:	e01a      	b.n	8001a14 <DIN_Process+0x156>
	}else if(Object->long_press_pending && !Object->state && HAL_GetTick() - Object->button_pressed_ts > LONG_MILLIS_MIN){
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d015      	beq.n	8001a14 <DIN_Process+0x156>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7e9b      	ldrb	r3, [r3, #26]
 80019ec:	f083 0301 	eor.w	r3, r3, #1
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00e      	beq.n	8001a14 <DIN_Process+0x156>
 80019f6:	f001 f8b9 	bl	8002b6c <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001a06:	d905      	bls.n	8001a14 <DIN_Process+0x156>
		retval = LONG_PRESS;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	73fb      	strb	r3, [r7, #15]
		Object->double_pending = false;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		//long_press_pending = false; //long press only once if uncommented
	}

	Object->lastState = Object->state;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	7e9a      	ldrb	r2, [r3, #26]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	76da      	strb	r2, [r3, #27]
    return retval;
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd90      	pop	{r4, r7, pc}

08001a26 <DOUT_Switch>:
	if (Object->Value) ERROR_VALUE = DOUT_SwitchOff(Object, 0);
	if (!Object->Value)ERROR_VALUE = DOUT_SwitchOn(Object, 0);
	return ERROR_VALUE;
}

METHOD_ERROR DOUT_Switch(struct DOUT *Object, int Time){
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b084      	sub	sp, #16
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
	METHOD_ERROR ERROR_VALUE = 1;
 8001a30:	2301      	movs	r3, #1
 8001a32:	73fb      	strb	r3, [r7, #15]

	if (Object->Value){
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	791b      	ldrb	r3, [r3, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d006      	beq.n	8001a4a <DOUT_Switch+0x24>
		ERROR_VALUE = DOUT_SwitchOff(Object, Time);
 8001a3c:	6839      	ldr	r1, [r7, #0]
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f842 	bl	8001ac8 <DOUT_SwitchOff>
 8001a44:	4603      	mov	r3, r0
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	e00c      	b.n	8001a64 <DOUT_Switch+0x3e>
	}else if(!Object->Value){
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	791b      	ldrb	r3, [r3, #4]
 8001a4e:	f083 0301 	eor.w	r3, r3, #1
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <DOUT_Switch+0x3e>
		ERROR_VALUE = DOUT_SwitchOn(Object, Time);
 8001a58:	6839      	ldr	r1, [r7, #0]
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f808 	bl	8001a70 <DOUT_SwitchOn>
 8001a60:	4603      	mov	r3, r0
 8001a62:	73fb      	strb	r3, [r7, #15]
	}

	return ERROR_VALUE;
 8001a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <DOUT_SwitchOn>:

METHOD_ERROR DOUT_SwitchOn(struct DOUT *Object, int Time){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
	if (Object->Value) return ERROR_CBC;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	791b      	ldrb	r3, [r3, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <DOUT_SwitchOn+0x18>
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
 8001a86:	e019      	b.n	8001abc <DOUT_SwitchOn+0x4c>
	HAL_GPIO_WritePin(Object->GPIO_Port, Object->GPIO_Pin, 1);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6898      	ldr	r0, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	899b      	ldrh	r3, [r3, #12]
 8001a90:	2201      	movs	r2, #1
 8001a92:	4619      	mov	r1, r3
 8001a94:	f002 fe73 	bl	800477e <HAL_GPIO_WritePin>
	Object->Value = 1;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	711a      	strb	r2, [r3, #4]
	OnValueChange(Object->ID);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 f907 	bl	8001cb6 <OnValueChange>
	OnSwitchOn(Object->ID);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f000 f90c 	bl	8001cca <OnSwitchOn>
#if (_TCP_DEBUG == 1)
	AddToLog("Turned ON", LOG_ACT);
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4803      	ldr	r0, [pc, #12]	; (8001ac4 <DOUT_SwitchOn+0x54>)
 8001ab6:	f000 f91c 	bl	8001cf2 <AddToLog>
#endif
	return ERROR_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	0801b798 	.word	0x0801b798

08001ac8 <DOUT_SwitchOff>:

METHOD_ERROR DOUT_SwitchOff(struct DOUT *Object, int Time){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
	if (!Object->Value) return ERROR_CBC;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	791b      	ldrb	r3, [r3, #4]
 8001ad6:	f083 0301 	eor.w	r3, r3, #1
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d002      	beq.n	8001ae6 <DOUT_SwitchOff+0x1e>
 8001ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae4:	e019      	b.n	8001b1a <DOUT_SwitchOff+0x52>
	HAL_GPIO_WritePin(Object->GPIO_Port, Object->GPIO_Pin, 0);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6898      	ldr	r0, [r3, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	899b      	ldrh	r3, [r3, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	4619      	mov	r1, r3
 8001af2:	f002 fe44 	bl	800477e <HAL_GPIO_WritePin>
	Object->Value = 0;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	711a      	strb	r2, [r3, #4]
	OnValueChange(Object->ID);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 f8d8 	bl	8001cb6 <OnValueChange>
	OnSwitchOff(Object->ID);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f8e7 	bl	8001cde <OnSwitchOff>
#if (_TCP_DEBUG == 1)
	AddToLog("Turned ON", LOG_ACT);
 8001b10:	2100      	movs	r1, #0
 8001b12:	4804      	ldr	r0, [pc, #16]	; (8001b24 <DOUT_SwitchOff+0x5c>)
 8001b14:	f000 f8ed 	bl	8001cf2 <AddToLog>
#endif
	return ERROR_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	0801b798 	.word	0x0801b798

08001b28 <LED_SwitchOn>:
METHOD_ERROR LED_SetRGBValue(struct LED *Object, int Value, int Ramp); //HEX

METHOD_ERROR LED_HoldValue(struct LED *Object, int Ramp); //ms
METHOD_ERROR LED_HoldHue(struct LED *Object, int Ramp);

METHOD_ERROR LED_SwitchOn(struct LED *Object, int Time, int Ramp){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
	if (Object->Value == 1) return ERROR_CBC;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d102      	bne.n	8001b42 <LED_SwitchOn+0x1a>
 8001b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b40:	e044      	b.n	8001bcc <LED_SwitchOn+0xa4>

	if (PCA9685_SetPwm(Object->PCA_Channel_W, 0, Object->RedValue*16)) return ERROR_PCA;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	2100      	movs	r1, #0
 8001b50:	f7ff fc22 	bl	8001398 <PCA9685_SetPwm>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <LED_SwitchOn+0x38>
 8001b5a:	f06f 0302 	mvn.w	r3, #2
 8001b5e:	e035      	b.n	8001bcc <LED_SwitchOn+0xa4>
	if (PCA9685_SetPwm(Object->PCA_Channel_W, 0, Object->GreenValue*16)) return ERROR_PCA;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	f7ff fc13 	bl	8001398 <PCA9685_SetPwm>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d002      	beq.n	8001b7e <LED_SwitchOn+0x56>
 8001b78:	f06f 0302 	mvn.w	r3, #2
 8001b7c:	e026      	b.n	8001bcc <LED_SwitchOn+0xa4>
	if (PCA9685_SetPwm(Object->PCA_Channel_W, 0, Object->BlueValue*16)) return ERROR_PCA;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	461a      	mov	r2, r3
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	f7ff fc04 	bl	8001398 <PCA9685_SetPwm>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d002      	beq.n	8001b9c <LED_SwitchOn+0x74>
 8001b96:	f06f 0302 	mvn.w	r3, #2
 8001b9a:	e017      	b.n	8001bcc <LED_SwitchOn+0xa4>
	if (PCA9685_SetPwm(Object->PCA_Channel_W, 0, Object->WhiteValue*16)) return ERROR_PCA;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	011b      	lsls	r3, r3, #4
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	2100      	movs	r1, #0
 8001baa:	f7ff fbf5 	bl	8001398 <PCA9685_SetPwm>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d002      	beq.n	8001bba <LED_SwitchOn+0x92>
 8001bb4:	f06f 0302 	mvn.w	r3, #2
 8001bb8:	e008      	b.n	8001bcc <LED_SwitchOn+0xa4>
	Object->Value = 1;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	605a      	str	r2, [r3, #4]
	OnValueChange(Object->ID);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 f876 	bl	8001cb6 <OnValueChange>
	return ERROR_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <LED_SwitchOff>:

METHOD_ERROR LED_SwitchOff(struct LED *Object, int Time, int Ramp){
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
	if (Object->Value == 0) return ERROR_CBC;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d102      	bne.n	8001bee <LED_SwitchOff+0x1a>
 8001be8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bec:	e040      	b.n	8001c70 <LED_SwitchOff+0x9c>

	if (PCA9685_SetPwm(Object->PCA_Channel_W, 4095, 0)) return ERROR_PCA;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fbcd 	bl	8001398 <PCA9685_SetPwm>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d002      	beq.n	8001c0a <LED_SwitchOff+0x36>
 8001c04:	f06f 0302 	mvn.w	r3, #2
 8001c08:	e032      	b.n	8001c70 <LED_SwitchOff+0x9c>
	if (PCA9685_SetPwm(Object->PCA_Channel_W, 4095, 0)) return ERROR_PCA;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fbbf 	bl	8001398 <PCA9685_SetPwm>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <LED_SwitchOff+0x52>
 8001c20:	f06f 0302 	mvn.w	r3, #2
 8001c24:	e024      	b.n	8001c70 <LED_SwitchOff+0x9c>
	if (PCA9685_SetPwm(Object->PCA_Channel_W, 4095, 0)) return ERROR_PCA;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fbb1 	bl	8001398 <PCA9685_SetPwm>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <LED_SwitchOff+0x6e>
 8001c3c:	f06f 0302 	mvn.w	r3, #2
 8001c40:	e016      	b.n	8001c70 <LED_SwitchOff+0x9c>
	if (PCA9685_SetPwm(Object->PCA_Channel_W, 4095, 0)) return ERROR_PCA;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	2200      	movs	r2, #0
 8001c48:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fba3 	bl	8001398 <PCA9685_SetPwm>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <LED_SwitchOff+0x8a>
 8001c58:	f06f 0302 	mvn.w	r3, #2
 8001c5c:	e008      	b.n	8001c70 <LED_SwitchOff+0x9c>
	Object->Value = 0;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	605a      	str	r2, [r3, #4]
	OnValueChange(Object->ID);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 f824 	bl	8001cb6 <OnValueChange>
	return ERROR_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <LED_Switch>:

METHOD_ERROR LED_Switch(struct LED *Object, int Time, int Ramp){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
	METHOD_ERROR ERROR_VALUE;
	if (Object->Value){
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d007      	beq.n	8001c9c <LED_Switch+0x24>
		ERROR_VALUE = LED_SwitchOff(Object, Time, Ramp);
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	68b9      	ldr	r1, [r7, #8]
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f7ff ff9f 	bl	8001bd4 <LED_SwitchOff>
 8001c96:	4603      	mov	r3, r0
 8001c98:	75fb      	strb	r3, [r7, #23]
 8001c9a:	e006      	b.n	8001caa <LED_Switch+0x32>
	}else {
		ERROR_VALUE = LED_SwitchOn(Object, Time, Ramp);
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	68b9      	ldr	r1, [r7, #8]
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f7ff ff41 	bl	8001b28 <LED_SwitchOn>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	75fb      	strb	r3, [r7, #23]
	}
	return ERROR_VALUE;
 8001caa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <OnValueChange>:

//extern struct DOUT LED_OK;

/* Function declarations -----------------------------------------------*/
// DOUT + DIN + LED
METHOD_ERROR OnValueChange(int ID){
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
	//variable = ID;
	return ERROR_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr

08001cca <OnSwitchOn>:

METHOD_ERROR OnSwitchOn(int ID){
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
	//if (ID == 0x07) DOUT_Switch(&LED_OK,0);
	return ERROR_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <OnSwitchOff>:

METHOD_ERROR OnSwitchOff(int ID){
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
	return ERROR_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr

08001cf2 <AddToLog>:

char msg[100];
char smsg[100];
extern struct netconn newconn;

void AddToLog(char msg[], LOGGER_TYPE type){
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	70fb      	strb	r3, [r7, #3]
	//int len = 1;//sprintf (smsg, "");
	//netconn_write(newconn, msg, len, NETCONN_COPY);
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <TCPServerTask>:
//char cmd_DIMMSwitch[] = "DIMM_Switch";
//char cmd_LED[] = "DIMM_Switch";


void TCPServerTask(void const * argument)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b0b8      	sub	sp, #224	; 0xe0
 8001d0c:	af02      	add	r7, sp, #8
 8001d0e:	6078      	str	r0, [r7, #4]
	char msg[100];
	char smsg[100];

	err_t err, accept_err, recv_error;

	while (!sem){
 8001d10:	e002      	b.n	8001d18 <TCPServerTask+0x10>
		osDelay(50);
 8001d12:	2032      	movs	r0, #50	; 0x32
 8001d14:	f007 fa58 	bl	80091c8 <osDelay>
	while (!sem){
 8001d18:	4b82      	ldr	r3, [pc, #520]	; (8001f24 <TCPServerTask+0x21c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f8      	beq.n	8001d12 <TCPServerTask+0xa>
	}
	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2100      	movs	r1, #0
 8001d24:	2010      	movs	r0, #16
 8001d26:	f00a f97f 	bl	800c028 <netconn_new_with_proto_and_callback>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4a7e      	ldr	r2, [pc, #504]	; (8001f28 <TCPServerTask+0x220>)
 8001d2e:	6013      	str	r3, [r2, #0]

	if (conn!=NULL){
 8001d30:	4b7d      	ldr	r3, [pc, #500]	; (8001f28 <TCPServerTask+0x220>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 80ef 	beq.w	8001f18 <TCPServerTask+0x210>
			/* Bind connection to the port number 7. */
			err = netconn_bind(conn, IP_ADDR_ANY, 7);
 8001d3a:	4b7b      	ldr	r3, [pc, #492]	; (8001f28 <TCPServerTask+0x220>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2207      	movs	r2, #7
 8001d40:	497a      	ldr	r1, [pc, #488]	; (8001f2c <TCPServerTask+0x224>)
 8001d42:	4618      	mov	r0, r3
 8001d44:	f00a fa10 	bl	800c168 <netconn_bind>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7

			if (err == ERR_OK){
 8001d4e:	f997 30d7 	ldrsb.w	r3, [r7, #215]	; 0xd7
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f040 80d8 	bne.w	8001f08 <TCPServerTask+0x200>
				/* Tell connection to go into listening mode. */
				netconn_listen(conn);
 8001d58:	4b73      	ldr	r3, [pc, #460]	; (8001f28 <TCPServerTask+0x220>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	21ff      	movs	r1, #255	; 0xff
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f00a fa3a 	bl	800c1d8 <netconn_listen_with_backlog>
				for(;;)
				{
					/* Grab new connection. */
					accept_err = netconn_accept(conn, &newconn);
 8001d64:	4b70      	ldr	r3, [pc, #448]	; (8001f28 <TCPServerTask+0x220>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4971      	ldr	r1, [pc, #452]	; (8001f30 <TCPServerTask+0x228>)
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f00a fa60 	bl	800c230 <netconn_accept>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6

					/* Process the new connection. */
					if (accept_err == ERR_OK)
 8001d76:	f997 30d6 	ldrsb.w	r3, [r7, #214]	; 0xd6
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f040 80c0 	bne.w	8001f00 <TCPServerTask+0x1f8>
					{
						/* receive the data from the client */
						while (netconn_recv(newconn, &buf) == ERR_OK)
 8001d80:	e0aa      	b.n	8001ed8 <TCPServerTask+0x1d0>
						{
							/* Extract the address and port in case they are required */
							addr = netbuf_fromaddr(buf);  // get the address of the client
 8001d82:	4b6c      	ldr	r3, [pc, #432]	; (8001f34 <TCPServerTask+0x22c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	3308      	adds	r3, #8
 8001d88:	4a6b      	ldr	r2, [pc, #428]	; (8001f38 <TCPServerTask+0x230>)
 8001d8a:	6013      	str	r3, [r2, #0]
							port = netbuf_fromport(buf);  // get the Port of the client
 8001d8c:	4b69      	ldr	r3, [pc, #420]	; (8001f34 <TCPServerTask+0x22c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	899a      	ldrh	r2, [r3, #12]
 8001d92:	4b6a      	ldr	r3, [pc, #424]	; (8001f3c <TCPServerTask+0x234>)
 8001d94:	801a      	strh	r2, [r3, #0]
							/* If there is some data remaining to be sent, the following process will continue */
							do
							{
								strncpy (msg, buf->p->payload, buf->p->len);   // get the message from the client
 8001d96:	4b67      	ldr	r3, [pc, #412]	; (8001f34 <TCPServerTask+0x22c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6859      	ldr	r1, [r3, #4]
 8001d9e:	4b65      	ldr	r3, [pc, #404]	; (8001f34 <TCPServerTask+0x22c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	895b      	ldrh	r3, [r3, #10]
 8001da6:	461a      	mov	r2, r3
 8001da8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001dac:	4618      	mov	r0, r3
 8001dae:	f018 fc86 	bl	801a6be <strncpy>

								// Or modify the message received, so that we can send it back to the client
								int len = sprintf (smsg, "\"%s\" was sent by Client\n", msg);
 8001db2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001db6:	f107 0308 	add.w	r3, r7, #8
 8001dba:	4961      	ldr	r1, [pc, #388]	; (8001f40 <TCPServerTask+0x238>)
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f018 fc1b 	bl	801a5f8 <siprintf>
 8001dc2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
//									LED_SetBlueValue(&Salon_LED,(int) msg[2], 0);
//									LED_SetWhiteValue(&Salon_LED,(int)  msg[3], 0);
//									ledcmd = 0;
//								}

								if (!(strcmp(msg, "sypialnia"))){
 8001dc6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001dca:	495e      	ldr	r1, [pc, #376]	; (8001f44 <TCPServerTask+0x23c>)
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fa2f 	bl	8000230 <strcmp>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d104      	bne.n	8001de2 <TCPServerTask+0xda>
									DIMM_Switch(&Sypialnia, 0, 0);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2100      	movs	r1, #0
 8001ddc:	485a      	ldr	r0, [pc, #360]	; (8001f48 <TCPServerTask+0x240>)
 8001dde:	f7ff fd41 	bl	8001864 <DIMM_Switch>
								}

								if (!(strcmp(msg, "przedpokoj"))){
 8001de2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001de6:	4959      	ldr	r1, [pc, #356]	; (8001f4c <TCPServerTask+0x244>)
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fa21 	bl	8000230 <strcmp>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d104      	bne.n	8001dfe <TCPServerTask+0xf6>
													DIMM_Switch(&Przedpokoj, 0, 0);
 8001df4:	2200      	movs	r2, #0
 8001df6:	2100      	movs	r1, #0
 8001df8:	4855      	ldr	r0, [pc, #340]	; (8001f50 <TCPServerTask+0x248>)
 8001dfa:	f7ff fd33 	bl	8001864 <DIMM_Switch>
												}

								if (!(strcmp(msg, "kuchnia"))){
 8001dfe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e02:	4954      	ldr	r1, [pc, #336]	; (8001f54 <TCPServerTask+0x24c>)
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fa13 	bl	8000230 <strcmp>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d109      	bne.n	8001e24 <TCPServerTask+0x11c>
													DIMM_Switch(&Kuchnia_1, 0, 0);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2100      	movs	r1, #0
 8001e14:	4850      	ldr	r0, [pc, #320]	; (8001f58 <TCPServerTask+0x250>)
 8001e16:	f7ff fd25 	bl	8001864 <DIMM_Switch>
													DIMM_Switch(&Kuchnia_2, 0, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	484f      	ldr	r0, [pc, #316]	; (8001f5c <TCPServerTask+0x254>)
 8001e20:	f7ff fd20 	bl	8001864 <DIMM_Switch>
												}

								if (!(strcmp(msg, "salon"))){
 8001e24:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e28:	494d      	ldr	r1, [pc, #308]	; (8001f60 <TCPServerTask+0x258>)
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe fa00 	bl	8000230 <strcmp>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d109      	bne.n	8001e4a <TCPServerTask+0x142>
													DIMM_Switch(&Salon_1, 0, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2100      	movs	r1, #0
 8001e3a:	484a      	ldr	r0, [pc, #296]	; (8001f64 <TCPServerTask+0x25c>)
 8001e3c:	f7ff fd12 	bl	8001864 <DIMM_Switch>
													DIMM_Switch(&Salon_2, 0, 0);
 8001e40:	2200      	movs	r2, #0
 8001e42:	2100      	movs	r1, #0
 8001e44:	4848      	ldr	r0, [pc, #288]	; (8001f68 <TCPServerTask+0x260>)
 8001e46:	f7ff fd0d 	bl	8001864 <DIMM_Switch>
												}

								if (!(strcmp(msg, "lazienka"))){
 8001e4a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e4e:	4947      	ldr	r1, [pc, #284]	; (8001f6c <TCPServerTask+0x264>)
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe f9ed 	bl	8000230 <strcmp>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d104      	bne.n	8001e66 <TCPServerTask+0x15e>
													DIMM_Switch(&Lazienka, 0, 0);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4843      	ldr	r0, [pc, #268]	; (8001f70 <TCPServerTask+0x268>)
 8001e62:	f7ff fcff 	bl	8001864 <DIMM_Switch>
												}
								if (!(strcmp(msg, "salonled"))){
 8001e66:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e6a:	4942      	ldr	r1, [pc, #264]	; (8001f74 <TCPServerTask+0x26c>)
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe f9df 	bl	8000230 <strcmp>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d10f      	bne.n	8001e98 <TCPServerTask+0x190>
									Salon_LED.WhiteValue = 200;
 8001e78:	4b3f      	ldr	r3, [pc, #252]	; (8001f78 <TCPServerTask+0x270>)
 8001e7a:	22c8      	movs	r2, #200	; 0xc8
 8001e7c:	61da      	str	r2, [r3, #28]
									Salon_LED_Biurko.WhiteValue = 200;
 8001e7e:	4b3f      	ldr	r3, [pc, #252]	; (8001f7c <TCPServerTask+0x274>)
 8001e80:	22c8      	movs	r2, #200	; 0xc8
 8001e82:	61da      	str	r2, [r3, #28]
									LED_Switch(&Salon_LED, 0, 0);
 8001e84:	2200      	movs	r2, #0
 8001e86:	2100      	movs	r1, #0
 8001e88:	483b      	ldr	r0, [pc, #236]	; (8001f78 <TCPServerTask+0x270>)
 8001e8a:	f7ff fef5 	bl	8001c78 <LED_Switch>
									LED_Switch(&Salon_LED_Biurko, 0, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2100      	movs	r1, #0
 8001e92:	483a      	ldr	r0, [pc, #232]	; (8001f7c <TCPServerTask+0x274>)
 8001e94:	f7ff fef0 	bl	8001c78 <LED_Switch>
													//ledcmd = 1;
												}

								netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
 8001e98:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <TCPServerTask+0x228>)
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001ea0:	f107 0108 	add.w	r1, r7, #8
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	f00a fb87 	bl	800c5bc <netconn_write_partly>
								memset (msg, '\0', 100);  // clear the buffer
 8001eae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001eb2:	2264      	movs	r2, #100	; 0x64
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f018 fa31 	bl	801a31e <memset>
							}while (netbuf_next(buf) >0);
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <TCPServerTask+0x22c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f00c f885 	bl	800dfd0 <netbuf_next>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f73f af64 	bgt.w	8001d96 <TCPServerTask+0x8e>

							netbuf_delete(buf);
 8001ece:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <TCPServerTask+0x22c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f00c f85c 	bl	800df90 <netbuf_delete>
						while (netconn_recv(newconn, &buf) == ERR_OK)
 8001ed8:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <TCPServerTask+0x228>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4915      	ldr	r1, [pc, #84]	; (8001f34 <TCPServerTask+0x22c>)
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f00a faf4 	bl	800c4cc <netconn_recv>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f43f af4b 	beq.w	8001d82 <TCPServerTask+0x7a>
						}
						/* Close connection and discard connection identifier. */
						netconn_close(newconn);
 8001eec:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <TCPServerTask+0x228>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f00a fc0b 	bl	800c70c <netconn_close>
						netconn_delete(newconn);
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <TCPServerTask+0x228>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f00a f90e 	bl	800c11c <netconn_delete>
					}
					osDelay(5);
 8001f00:	2005      	movs	r0, #5
 8001f02:	f007 f961 	bl	80091c8 <osDelay>
					accept_err = netconn_accept(conn, &newconn);
 8001f06:	e72d      	b.n	8001d64 <TCPServerTask+0x5c>
				}
			}
			else
			{
				netconn_delete(conn);
 8001f08:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <TCPServerTask+0x220>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f00a f905 	bl	800c11c <netconn_delete>
				Error_Handler();
 8001f12:	f000 fb11 	bl	8002538 <Error_Handler>
			}
		}else{
			Error_Handler();
		}
  /* USER CODE END TCPServerTask */
}
 8001f16:	e001      	b.n	8001f1c <TCPServerTask+0x214>
			Error_Handler();
 8001f18:	f000 fb0e 	bl	8002538 <Error_Handler>
}
 8001f1c:	bf00      	nop
 8001f1e:	37d8      	adds	r7, #216	; 0xd8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000384 	.word	0x20000384
 8001f28:	20000348 	.word	0x20000348
 8001f2c:	0801e610 	.word	0x0801e610
 8001f30:	2000034c 	.word	0x2000034c
 8001f34:	20000350 	.word	0x20000350
 8001f38:	20000354 	.word	0x20000354
 8001f3c:	20000358 	.word	0x20000358
 8001f40:	0801b7a4 	.word	0x0801b7a4
 8001f44:	0801b7c0 	.word	0x0801b7c0
 8001f48:	20000294 	.word	0x20000294
 8001f4c:	0801b7cc 	.word	0x0801b7cc
 8001f50:	2000024c 	.word	0x2000024c
 8001f54:	0801b7d8 	.word	0x0801b7d8
 8001f58:	200001bc 	.word	0x200001bc
 8001f5c:	200001e0 	.word	0x200001e0
 8001f60:	0801b7e0 	.word	0x0801b7e0
 8001f64:	20000204 	.word	0x20000204
 8001f68:	20000228 	.word	0x20000228
 8001f6c:	0801b7e8 	.word	0x0801b7e8
 8001f70:	20000270 	.word	0x20000270
 8001f74:	0801b7f4 	.word	0x0801b7f4
 8001f78:	200002b8 	.word	0x200002b8
 8001f7c:	20000300 	.word	0x20000300

08001f80 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001f84:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <MX_CAN1_Init+0x60>)
 8001f86:	4a17      	ldr	r2, [pc, #92]	; (8001fe4 <MX_CAN1_Init+0x64>)
 8001f88:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001f8a:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <MX_CAN1_Init+0x60>)
 8001f8c:	2210      	movs	r2, #16
 8001f8e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <MX_CAN1_Init+0x60>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001f96:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <MX_CAN1_Init+0x60>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001f9c:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <MX_CAN1_Init+0x60>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <MX_CAN1_Init+0x60>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <MX_CAN1_Init+0x60>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001fae:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <MX_CAN1_Init+0x60>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <MX_CAN1_Init+0x60>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <MX_CAN1_Init+0x60>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <MX_CAN1_Init+0x60>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <MX_CAN1_Init+0x60>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001fcc:	4804      	ldr	r0, [pc, #16]	; (8001fe0 <MX_CAN1_Init+0x60>)
 8001fce:	f000 fdfb 	bl	8002bc8 <HAL_CAN_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001fd8:	f000 faae 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	2000035c 	.word	0x2000035c
 8001fe4:	40006400 	.word	0x40006400

08001fe8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	; 0x28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a24      	ldr	r2, [pc, #144]	; (8002094 <HAL_CAN_MspInit+0xac>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d141      	bne.n	800208c <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002008:	4b23      	ldr	r3, [pc, #140]	; (8002098 <HAL_CAN_MspInit+0xb0>)
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	4a22      	ldr	r2, [pc, #136]	; (8002098 <HAL_CAN_MspInit+0xb0>)
 800200e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002012:	61d3      	str	r3, [r2, #28]
 8002014:	4b20      	ldr	r3, [pc, #128]	; (8002098 <HAL_CAN_MspInit+0xb0>)
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002020:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <HAL_CAN_MspInit+0xb0>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	4a1c      	ldr	r2, [pc, #112]	; (8002098 <HAL_CAN_MspInit+0xb0>)
 8002026:	f043 0320 	orr.w	r3, r3, #32
 800202a:	6193      	str	r3, [r2, #24]
 800202c:	4b1a      	ldr	r3, [pc, #104]	; (8002098 <HAL_CAN_MspInit+0xb0>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	f003 0320 	and.w	r3, r3, #32
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002038:	2301      	movs	r3, #1
 800203a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800203c:	2300      	movs	r3, #0
 800203e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4619      	mov	r1, r3
 800204a:	4814      	ldr	r0, [pc, #80]	; (800209c <HAL_CAN_MspInit+0xb4>)
 800204c:	f002 f9fc 	bl	8004448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002050:	2302      	movs	r3, #2
 8002052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002058:	2303      	movs	r3, #3
 800205a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	4619      	mov	r1, r3
 8002062:	480e      	ldr	r0, [pc, #56]	; (800209c <HAL_CAN_MspInit+0xb4>)
 8002064:	f002 f9f0 	bl	8004448 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_3();
 8002068:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <HAL_CAN_MspInit+0xb8>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
 8002086:	4a06      	ldr	r2, [pc, #24]	; (80020a0 <HAL_CAN_MspInit+0xb8>)
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800208c:	bf00      	nop
 800208e:	3728      	adds	r7, #40	; 0x28
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40006400 	.word	0x40006400
 8002098:	40021000 	.word	0x40021000
 800209c:	40011400 	.word	0x40011400
 80020a0:	40010000 	.word	0x40010000

080020a4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4a07      	ldr	r2, [pc, #28]	; (80020d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80020b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	4a06      	ldr	r2, [pc, #24]	; (80020d4 <vApplicationGetIdleTaskMemory+0x30>)
 80020ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020c2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80020c4:	bf00      	nop
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20000394 	.word	0x20000394
 80020d4:	20000448 	.word	0x20000448

080020d8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80020d8:	b5b0      	push	{r4, r5, r7, lr}
 80020da:	b096      	sub	sp, #88	; 0x58
 80020dc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 80020de:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <MX_FREERTOS_Init+0x7c>)
 80020e0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80020e4:	461d      	mov	r5, r3
 80020e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80020f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020f6:	2100      	movs	r1, #0
 80020f8:	4618      	mov	r0, r3
 80020fa:	f007 f819 	bl	8009130 <osThreadCreate>
 80020fe:	4603      	mov	r3, r0
 8002100:	4a15      	ldr	r2, [pc, #84]	; (8002158 <MX_FREERTOS_Init+0x80>)
 8002102:	6013      	str	r3, [r2, #0]

  /* definition and creation of TCPServer */
  osThreadDef(TCPServer, TCPServerTask, osPriorityAboveNormal, 0, 512);
 8002104:	4b15      	ldr	r3, [pc, #84]	; (800215c <MX_FREERTOS_Init+0x84>)
 8002106:	f107 0420 	add.w	r4, r7, #32
 800210a:	461d      	mov	r5, r3
 800210c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800210e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002110:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002114:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TCPServerHandle = osThreadCreate(osThread(TCPServer), NULL);
 8002118:	f107 0320 	add.w	r3, r7, #32
 800211c:	2100      	movs	r1, #0
 800211e:	4618      	mov	r0, r3
 8002120:	f007 f806 	bl	8009130 <osThreadCreate>
 8002124:	4603      	mov	r3, r0
 8002126:	4a0e      	ldr	r2, [pc, #56]	; (8002160 <MX_FREERTOS_Init+0x88>)
 8002128:	6013      	str	r3, [r2, #0]

  /* definition and creation of CLU */
  osThreadDef(CLU, CLUTask, osPriorityNormal, 0, 512);
 800212a:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <MX_FREERTOS_Init+0x8c>)
 800212c:	1d3c      	adds	r4, r7, #4
 800212e:	461d      	mov	r5, r3
 8002130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002134:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002138:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CLUHandle = osThreadCreate(osThread(CLU), NULL);
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	2100      	movs	r1, #0
 8002140:	4618      	mov	r0, r3
 8002142:	f006 fff5 	bl	8009130 <osThreadCreate>
 8002146:	4603      	mov	r3, r0
 8002148:	4a07      	ldr	r2, [pc, #28]	; (8002168 <MX_FREERTOS_Init+0x90>)
 800214a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800214c:	bf00      	nop
 800214e:	3758      	adds	r7, #88	; 0x58
 8002150:	46bd      	mov	sp, r7
 8002152:	bdb0      	pop	{r4, r5, r7, pc}
 8002154:	0801b81c 	.word	0x0801b81c
 8002158:	20000388 	.word	0x20000388
 800215c:	0801b838 	.word	0x0801b838
 8002160:	2000038c 	.word	0x2000038c
 8002164:	0801b854 	.word	0x0801b854
 8002168:	20000390 	.word	0x20000390

0800216c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8002174:	f006 fb22 	bl	80087bc <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  sem = 1;
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <StartDefaultTask+0x1c>)
 800217a:	2201      	movs	r2, #1
 800217c:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 800217e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002182:	f007 f821 	bl	80091c8 <osDelay>
 8002186:	e7fa      	b.n	800217e <StartDefaultTask+0x12>
 8002188:	20000384 	.word	0x20000384

0800218c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08a      	sub	sp, #40	; 0x28
 8002190:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002192:	f107 0318 	add.w	r3, r7, #24
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021a0:	4b66      	ldr	r3, [pc, #408]	; (800233c <MX_GPIO_Init+0x1b0>)
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	4a65      	ldr	r2, [pc, #404]	; (800233c <MX_GPIO_Init+0x1b0>)
 80021a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021aa:	6193      	str	r3, [r2, #24]
 80021ac:	4b63      	ldr	r3, [pc, #396]	; (800233c <MX_GPIO_Init+0x1b0>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b8:	4b60      	ldr	r3, [pc, #384]	; (800233c <MX_GPIO_Init+0x1b0>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	4a5f      	ldr	r2, [pc, #380]	; (800233c <MX_GPIO_Init+0x1b0>)
 80021be:	f043 0310 	orr.w	r3, r3, #16
 80021c2:	6193      	str	r3, [r2, #24]
 80021c4:	4b5d      	ldr	r3, [pc, #372]	; (800233c <MX_GPIO_Init+0x1b0>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d0:	4b5a      	ldr	r3, [pc, #360]	; (800233c <MX_GPIO_Init+0x1b0>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	4a59      	ldr	r2, [pc, #356]	; (800233c <MX_GPIO_Init+0x1b0>)
 80021d6:	f043 0304 	orr.w	r3, r3, #4
 80021da:	6193      	str	r3, [r2, #24]
 80021dc:	4b57      	ldr	r3, [pc, #348]	; (800233c <MX_GPIO_Init+0x1b0>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e8:	4b54      	ldr	r3, [pc, #336]	; (800233c <MX_GPIO_Init+0x1b0>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	4a53      	ldr	r2, [pc, #332]	; (800233c <MX_GPIO_Init+0x1b0>)
 80021ee:	f043 0308 	orr.w	r3, r3, #8
 80021f2:	6193      	str	r3, [r2, #24]
 80021f4:	4b51      	ldr	r3, [pc, #324]	; (800233c <MX_GPIO_Init+0x1b0>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002200:	4b4e      	ldr	r3, [pc, #312]	; (800233c <MX_GPIO_Init+0x1b0>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	4a4d      	ldr	r2, [pc, #308]	; (800233c <MX_GPIO_Init+0x1b0>)
 8002206:	f043 0320 	orr.w	r3, r3, #32
 800220a:	6193      	str	r3, [r2, #24]
 800220c:	4b4b      	ldr	r3, [pc, #300]	; (800233c <MX_GPIO_Init+0x1b0>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	f003 0320 	and.w	r3, r3, #32
 8002214:	607b      	str	r3, [r7, #4]
 8002216:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_ERROR_Pin|LED_OK_Pin, GPIO_PIN_RESET);
 8002218:	2200      	movs	r2, #0
 800221a:	2118      	movs	r1, #24
 800221c:	4848      	ldr	r0, [pc, #288]	; (8002340 <MX_GPIO_Init+0x1b4>)
 800221e:	f002 faae 	bl	800477e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RTC_CHARGE_Pin|BUZZER_Pin|W25Q64_CS_Pin, GPIO_PIN_RESET);
 8002222:	2200      	movs	r2, #0
 8002224:	f248 0103 	movw	r1, #32771	; 0x8003
 8002228:	4846      	ldr	r0, [pc, #280]	; (8002344 <MX_GPIO_Init+0x1b8>)
 800222a:	f002 faa8 	bl	800477e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, W25Q64_WP_Pin|W25Q64_HOLD_Pin|OUT_6_Pin|OUT_5_Pin
 800222e:	2200      	movs	r2, #0
 8002230:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8002234:	4844      	ldr	r0, [pc, #272]	; (8002348 <MX_GPIO_Init+0x1bc>)
 8002236:	f002 faa2 	bl	800477e <HAL_GPIO_WritePin>
                          |OUT_4_Pin|OUT_3_Pin|OUT_2_Pin|OUT_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USART1_DE_Pin|OUT_9_Pin|OUT_8_Pin|OUT_7_Pin, GPIO_PIN_RESET);
 800223a:	2200      	movs	r2, #0
 800223c:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8002240:	4842      	ldr	r0, [pc, #264]	; (800234c <MX_GPIO_Init+0x1c0>)
 8002242:	f002 fa9c 	bl	800477e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USART1_RE_Pin|OUT_10_Pin, GPIO_PIN_RESET);
 8002246:	2200      	movs	r2, #0
 8002248:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 800224c:	4840      	ldr	r0, [pc, #256]	; (8002350 <MX_GPIO_Init+0x1c4>)
 800224e:	f002 fa96 	bl	800477e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED_ERROR_Pin|LED_OK_Pin;
 8002252:	2318      	movs	r3, #24
 8002254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002256:	2301      	movs	r3, #1
 8002258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225e:	2302      	movs	r3, #2
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002262:	f107 0318 	add.w	r3, r7, #24
 8002266:	4619      	mov	r1, r3
 8002268:	4835      	ldr	r0, [pc, #212]	; (8002340 <MX_GPIO_Init+0x1b4>)
 800226a:	f002 f8ed 	bl	8004448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ETH_INT_Pin;
 800226e:	2301      	movs	r3, #1
 8002270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ETH_INT_GPIO_Port, &GPIO_InitStruct);
 800227a:	f107 0318 	add.w	r3, r7, #24
 800227e:	4619      	mov	r1, r3
 8002280:	4832      	ldr	r0, [pc, #200]	; (800234c <MX_GPIO_Init+0x1c0>)
 8002282:	f002 f8e1 	bl	8004448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RTC_CHARGE_Pin|BUZZER_Pin|W25Q64_CS_Pin;
 8002286:	f248 0303 	movw	r3, #32771	; 0x8003
 800228a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228c:	2301      	movs	r3, #1
 800228e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2302      	movs	r3, #2
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002298:	f107 0318 	add.w	r3, r7, #24
 800229c:	4619      	mov	r1, r3
 800229e:	4829      	ldr	r0, [pc, #164]	; (8002344 <MX_GPIO_Init+0x1b8>)
 80022a0:	f002 f8d2 	bl	8004448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IN_1_Pin|IN_11_Pin;
 80022a4:	f240 4304 	movw	r3, #1028	; 0x404
 80022a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b2:	f107 0318 	add.w	r3, r7, #24
 80022b6:	4619      	mov	r1, r3
 80022b8:	4822      	ldr	r0, [pc, #136]	; (8002344 <MX_GPIO_Init+0x1b8>)
 80022ba:	f002 f8c5 	bl	8004448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = IN_2_Pin|IN_3_Pin|IN_4_Pin|IN_5_Pin
 80022be:	f64f 7380 	movw	r3, #65408	; 0xff80
 80022c2:	61bb      	str	r3, [r7, #24]
                          |IN_6_Pin|IN_7_Pin|IN_8_Pin|IN_9_Pin
                          |IN_10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022cc:	f107 0318 	add.w	r3, r7, #24
 80022d0:	4619      	mov	r1, r3
 80022d2:	481b      	ldr	r0, [pc, #108]	; (8002340 <MX_GPIO_Init+0x1b4>)
 80022d4:	f002 f8b8 	bl	8004448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = W25Q64_WP_Pin|W25Q64_HOLD_Pin|OUT_6_Pin|OUT_5_Pin
 80022d8:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 80022dc:	61bb      	str	r3, [r7, #24]
                          |OUT_4_Pin|OUT_3_Pin|OUT_2_Pin|OUT_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022de:	2301      	movs	r3, #1
 80022e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e6:	2302      	movs	r3, #2
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ea:	f107 0318 	add.w	r3, r7, #24
 80022ee:	4619      	mov	r1, r3
 80022f0:	4815      	ldr	r0, [pc, #84]	; (8002348 <MX_GPIO_Init+0x1bc>)
 80022f2:	f002 f8a9 	bl	8004448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = USART1_DE_Pin|OUT_9_Pin|OUT_8_Pin|OUT_7_Pin;
 80022f6:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80022fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022fc:	2301      	movs	r3, #1
 80022fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002304:	2302      	movs	r3, #2
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002308:	f107 0318 	add.w	r3, r7, #24
 800230c:	4619      	mov	r1, r3
 800230e:	480f      	ldr	r0, [pc, #60]	; (800234c <MX_GPIO_Init+0x1c0>)
 8002310:	f002 f89a 	bl	8004448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART1_RE_Pin|OUT_10_Pin;
 8002314:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8002318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231a:	2301      	movs	r3, #1
 800231c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002322:	2302      	movs	r3, #2
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002326:	f107 0318 	add.w	r3, r7, #24
 800232a:	4619      	mov	r1, r3
 800232c:	4808      	ldr	r0, [pc, #32]	; (8002350 <MX_GPIO_Init+0x1c4>)
 800232e:	f002 f88b 	bl	8004448 <HAL_GPIO_Init>

}
 8002332:	bf00      	nop
 8002334:	3728      	adds	r7, #40	; 0x28
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	40011800 	.word	0x40011800
 8002344:	40010c00 	.word	0x40010c00
 8002348:	40011400 	.word	0x40011400
 800234c:	40011000 	.word	0x40011000
 8002350:	40010800 	.word	0x40010800

08002354 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002358:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <MX_I2C1_Init+0x50>)
 800235a:	4a13      	ldr	r2, [pc, #76]	; (80023a8 <MX_I2C1_Init+0x54>)
 800235c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800235e:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <MX_I2C1_Init+0x50>)
 8002360:	4a12      	ldr	r2, [pc, #72]	; (80023ac <MX_I2C1_Init+0x58>)
 8002362:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002364:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <MX_I2C1_Init+0x50>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800236a:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <MX_I2C1_Init+0x50>)
 800236c:	2200      	movs	r2, #0
 800236e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <MX_I2C1_Init+0x50>)
 8002372:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002376:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <MX_I2C1_Init+0x50>)
 800237a:	2200      	movs	r2, #0
 800237c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <MX_I2C1_Init+0x50>)
 8002380:	2200      	movs	r2, #0
 8002382:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002384:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <MX_I2C1_Init+0x50>)
 8002386:	2200      	movs	r2, #0
 8002388:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <MX_I2C1_Init+0x50>)
 800238c:	2200      	movs	r2, #0
 800238e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002390:	4804      	ldr	r0, [pc, #16]	; (80023a4 <MX_I2C1_Init+0x50>)
 8002392:	f002 fa0d 	bl	80047b0 <HAL_I2C_Init>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800239c:	f000 f8cc 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000c48 	.word	0x20000c48
 80023a8:	40005400 	.word	0x40005400
 80023ac:	00061a80 	.word	0x00061a80

080023b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	f107 0310 	add.w	r3, r7, #16
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a1d      	ldr	r2, [pc, #116]	; (8002440 <HAL_I2C_MspInit+0x90>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d133      	bne.n	8002438 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d0:	4b1c      	ldr	r3, [pc, #112]	; (8002444 <HAL_I2C_MspInit+0x94>)
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	4a1b      	ldr	r2, [pc, #108]	; (8002444 <HAL_I2C_MspInit+0x94>)
 80023d6:	f043 0308 	orr.w	r3, r3, #8
 80023da:	6193      	str	r3, [r2, #24]
 80023dc:	4b19      	ldr	r3, [pc, #100]	; (8002444 <HAL_I2C_MspInit+0x94>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023e8:	23c0      	movs	r3, #192	; 0xc0
 80023ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ec:	2312      	movs	r3, #18
 80023ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023f0:	2303      	movs	r3, #3
 80023f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f4:	f107 0310 	add.w	r3, r7, #16
 80023f8:	4619      	mov	r1, r3
 80023fa:	4813      	ldr	r0, [pc, #76]	; (8002448 <HAL_I2C_MspInit+0x98>)
 80023fc:	f002 f824 	bl	8004448 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002400:	4b10      	ldr	r3, [pc, #64]	; (8002444 <HAL_I2C_MspInit+0x94>)
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	4a0f      	ldr	r2, [pc, #60]	; (8002444 <HAL_I2C_MspInit+0x94>)
 8002406:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800240a:	61d3      	str	r3, [r2, #28]
 800240c:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <HAL_I2C_MspInit+0x94>)
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002418:	2200      	movs	r2, #0
 800241a:	2105      	movs	r1, #5
 800241c:	201f      	movs	r0, #31
 800241e:	f000 fd84 	bl	8002f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002422:	201f      	movs	r0, #31
 8002424:	f000 fd9d 	bl	8002f62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002428:	2200      	movs	r2, #0
 800242a:	2105      	movs	r1, #5
 800242c:	2020      	movs	r0, #32
 800242e:	f000 fd7c 	bl	8002f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002432:	2020      	movs	r0, #32
 8002434:	f000 fd95 	bl	8002f62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002438:	bf00      	nop
 800243a:	3720      	adds	r7, #32
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40005400 	.word	0x40005400
 8002444:	40021000 	.word	0x40021000
 8002448:	40010c00 	.word	0x40010c00

0800244c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002450:	f000 fb64 	bl	8002b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002454:	f000 f810 	bl	8002478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002458:	f7ff fe98 	bl	800218c <MX_GPIO_Init>
  MX_I2C1_Init();
 800245c:	f7ff ff7a 	bl	8002354 <MX_I2C1_Init>
  MX_CAN1_Init();
 8002460:	f7ff fd8e 	bl	8001f80 <MX_CAN1_Init>
  MX_SPI1_Init();
 8002464:	f000 f86e 	bl	8002544 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002468:	f000 fabc 	bl	80029e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800246c:	f7ff fe34 	bl	80020d8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002470:	f006 fe47 	bl	8009102 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002474:	e7fe      	b.n	8002474 <main+0x28>
	...

08002478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b094      	sub	sp, #80	; 0x50
 800247c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800247e:	f107 0318 	add.w	r3, r7, #24
 8002482:	2238      	movs	r2, #56	; 0x38
 8002484:	2100      	movs	r1, #0
 8002486:	4618      	mov	r0, r3
 8002488:	f017 ff49 	bl	801a31e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800248c:	1d3b      	adds	r3, r7, #4
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	605a      	str	r2, [r3, #4]
 8002494:	609a      	str	r2, [r3, #8]
 8002496:	60da      	str	r2, [r3, #12]
 8002498:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800249a:	2301      	movs	r3, #1
 800249c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800249e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80024a4:	2300      	movs	r3, #0
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024a8:	2301      	movs	r3, #1
 80024aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024b0:	2302      	movs	r3, #2
 80024b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80024ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80024be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024c4:	f107 0318 	add.w	r3, r7, #24
 80024c8:	4618      	mov	r0, r3
 80024ca:	f005 f845 	bl	8007558 <HAL_RCC_OscConfig>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80024d4:	f000 f830 	bl	8002538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024d8:	230f      	movs	r3, #15
 80024da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024dc:	2302      	movs	r3, #2
 80024de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024ee:	1d3b      	adds	r3, r7, #4
 80024f0:	2102      	movs	r1, #2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f005 fb46 	bl	8007b84 <HAL_RCC_ClockConfig>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80024fe:	f000 f81b 	bl	8002538 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8002502:	4b03      	ldr	r3, [pc, #12]	; (8002510 <SystemClock_Config+0x98>)
 8002504:	2201      	movs	r2, #1
 8002506:	601a      	str	r2, [r3, #0]
}
 8002508:	bf00      	nop
 800250a:	3750      	adds	r7, #80	; 0x50
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	42420070 	.word	0x42420070

08002514 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a04      	ldr	r2, [pc, #16]	; (8002534 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d101      	bne.n	800252a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002526:	f000 fb0f 	bl	8002b48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40001400 	.word	0x40001400

08002538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800253c:	b672      	cpsid	i
}
 800253e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002540:	e7fe      	b.n	8002540 <Error_Handler+0x8>
	...

08002544 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002548:	4b17      	ldr	r3, [pc, #92]	; (80025a8 <MX_SPI1_Init+0x64>)
 800254a:	4a18      	ldr	r2, [pc, #96]	; (80025ac <MX_SPI1_Init+0x68>)
 800254c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800254e:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <MX_SPI1_Init+0x64>)
 8002550:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002554:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002556:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <MX_SPI1_Init+0x64>)
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800255c:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <MX_SPI1_Init+0x64>)
 800255e:	2200      	movs	r2, #0
 8002560:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002562:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <MX_SPI1_Init+0x64>)
 8002564:	2200      	movs	r2, #0
 8002566:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002568:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <MX_SPI1_Init+0x64>)
 800256a:	2200      	movs	r2, #0
 800256c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800256e:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <MX_SPI1_Init+0x64>)
 8002570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002574:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002576:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <MX_SPI1_Init+0x64>)
 8002578:	2208      	movs	r2, #8
 800257a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800257c:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <MX_SPI1_Init+0x64>)
 800257e:	2200      	movs	r2, #0
 8002580:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <MX_SPI1_Init+0x64>)
 8002584:	2200      	movs	r2, #0
 8002586:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002588:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <MX_SPI1_Init+0x64>)
 800258a:	2200      	movs	r2, #0
 800258c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <MX_SPI1_Init+0x64>)
 8002590:	220a      	movs	r2, #10
 8002592:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002594:	4804      	ldr	r0, [pc, #16]	; (80025a8 <MX_SPI1_Init+0x64>)
 8002596:	f005 fd53 	bl	8008040 <HAL_SPI_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80025a0:	f7ff ffca 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000c9c 	.word	0x20000c9c
 80025ac:	40013000 	.word	0x40013000

080025b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a22      	ldr	r2, [pc, #136]	; (8002654 <HAL_SPI_MspInit+0xa4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d13d      	bne.n	800264c <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025d0:	4b21      	ldr	r3, [pc, #132]	; (8002658 <HAL_SPI_MspInit+0xa8>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	4a20      	ldr	r2, [pc, #128]	; (8002658 <HAL_SPI_MspInit+0xa8>)
 80025d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025da:	6193      	str	r3, [r2, #24]
 80025dc:	4b1e      	ldr	r3, [pc, #120]	; (8002658 <HAL_SPI_MspInit+0xa8>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e8:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <HAL_SPI_MspInit+0xa8>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	4a1a      	ldr	r2, [pc, #104]	; (8002658 <HAL_SPI_MspInit+0xa8>)
 80025ee:	f043 0308 	orr.w	r3, r3, #8
 80025f2:	6193      	str	r3, [r2, #24]
 80025f4:	4b18      	ldr	r3, [pc, #96]	; (8002658 <HAL_SPI_MspInit+0xa8>)
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002600:	2328      	movs	r3, #40	; 0x28
 8002602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002604:	2302      	movs	r3, #2
 8002606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002608:	2303      	movs	r3, #3
 800260a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260c:	f107 0314 	add.w	r3, r7, #20
 8002610:	4619      	mov	r1, r3
 8002612:	4812      	ldr	r0, [pc, #72]	; (800265c <HAL_SPI_MspInit+0xac>)
 8002614:	f001 ff18 	bl	8004448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002618:	2310      	movs	r3, #16
 800261a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800261c:	2300      	movs	r3, #0
 800261e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002624:	f107 0314 	add.w	r3, r7, #20
 8002628:	4619      	mov	r1, r3
 800262a:	480c      	ldr	r0, [pc, #48]	; (800265c <HAL_SPI_MspInit+0xac>)
 800262c:	f001 ff0c 	bl	8004448 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8002630:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <HAL_SPI_MspInit+0xb0>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
 8002646:	4a06      	ldr	r2, [pc, #24]	; (8002660 <HAL_SPI_MspInit+0xb0>)
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800264c:	bf00      	nop
 800264e:	3728      	adds	r7, #40	; 0x28
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40013000 	.word	0x40013000
 8002658:	40021000 	.word	0x40021000
 800265c:	40010c00 	.word	0x40010c00
 8002660:	40010000 	.word	0x40010000

08002664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800266a:	4b18      	ldr	r3, [pc, #96]	; (80026cc <HAL_MspInit+0x68>)
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	4a17      	ldr	r2, [pc, #92]	; (80026cc <HAL_MspInit+0x68>)
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	6193      	str	r3, [r2, #24]
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <HAL_MspInit+0x68>)
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_MspInit+0x68>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	4a11      	ldr	r2, [pc, #68]	; (80026cc <HAL_MspInit+0x68>)
 8002688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268c:	61d3      	str	r3, [r2, #28]
 800268e:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <HAL_MspInit+0x68>)
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002696:	607b      	str	r3, [r7, #4]
 8002698:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800269a:	2200      	movs	r2, #0
 800269c:	210f      	movs	r1, #15
 800269e:	f06f 0001 	mvn.w	r0, #1
 80026a2:	f000 fc42 	bl	8002f2a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80026a6:	4b0a      	ldr	r3, [pc, #40]	; (80026d0 <HAL_MspInit+0x6c>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	4a04      	ldr	r2, [pc, #16]	; (80026d0 <HAL_MspInit+0x6c>)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026c2:	bf00      	nop
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40010000 	.word	0x40010000

080026d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08e      	sub	sp, #56	; 0x38
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80026e4:	2300      	movs	r3, #0
 80026e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80026ea:	4b34      	ldr	r3, [pc, #208]	; (80027bc <HAL_InitTick+0xe8>)
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	4a33      	ldr	r2, [pc, #204]	; (80027bc <HAL_InitTick+0xe8>)
 80026f0:	f043 0320 	orr.w	r3, r3, #32
 80026f4:	61d3      	str	r3, [r2, #28]
 80026f6:	4b31      	ldr	r3, [pc, #196]	; (80027bc <HAL_InitTick+0xe8>)
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	f003 0320 	and.w	r3, r3, #32
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002702:	f107 0210 	add.w	r2, r7, #16
 8002706:	f107 0314 	add.w	r3, r7, #20
 800270a:	4611      	mov	r1, r2
 800270c:	4618      	mov	r0, r3
 800270e:	f005 fc49 	bl	8007fa4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002718:	2b00      	cmp	r3, #0
 800271a:	d103      	bne.n	8002724 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800271c:	f005 fc1a 	bl	8007f54 <HAL_RCC_GetPCLK1Freq>
 8002720:	6378      	str	r0, [r7, #52]	; 0x34
 8002722:	e004      	b.n	800272e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002724:	f005 fc16 	bl	8007f54 <HAL_RCC_GetPCLK1Freq>
 8002728:	4603      	mov	r3, r0
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800272e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002730:	4a23      	ldr	r2, [pc, #140]	; (80027c0 <HAL_InitTick+0xec>)
 8002732:	fba2 2303 	umull	r2, r3, r2, r3
 8002736:	0c9b      	lsrs	r3, r3, #18
 8002738:	3b01      	subs	r3, #1
 800273a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800273c:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <HAL_InitTick+0xf0>)
 800273e:	4a22      	ldr	r2, [pc, #136]	; (80027c8 <HAL_InitTick+0xf4>)
 8002740:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002742:	4b20      	ldr	r3, [pc, #128]	; (80027c4 <HAL_InitTick+0xf0>)
 8002744:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002748:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800274a:	4a1e      	ldr	r2, [pc, #120]	; (80027c4 <HAL_InitTick+0xf0>)
 800274c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002750:	4b1c      	ldr	r3, [pc, #112]	; (80027c4 <HAL_InitTick+0xf0>)
 8002752:	2200      	movs	r2, #0
 8002754:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002756:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <HAL_InitTick+0xf0>)
 8002758:	2200      	movs	r2, #0
 800275a:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800275c:	4b19      	ldr	r3, [pc, #100]	; (80027c4 <HAL_InitTick+0xf0>)
 800275e:	2200      	movs	r2, #0
 8002760:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8002762:	4818      	ldr	r0, [pc, #96]	; (80027c4 <HAL_InitTick+0xf0>)
 8002764:	f005 fcf0 	bl	8008148 <HAL_TIM_Base_Init>
 8002768:	4603      	mov	r3, r0
 800276a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800276e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002772:	2b00      	cmp	r3, #0
 8002774:	d11b      	bne.n	80027ae <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8002776:	4813      	ldr	r0, [pc, #76]	; (80027c4 <HAL_InitTick+0xf0>)
 8002778:	f005 fd3e 	bl	80081f8 <HAL_TIM_Base_Start_IT>
 800277c:	4603      	mov	r3, r0
 800277e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002782:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002786:	2b00      	cmp	r3, #0
 8002788:	d111      	bne.n	80027ae <HAL_InitTick+0xda>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800278a:	2037      	movs	r0, #55	; 0x37
 800278c:	f000 fbe9 	bl	8002f62 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b0f      	cmp	r3, #15
 8002794:	d808      	bhi.n	80027a8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8002796:	2200      	movs	r2, #0
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	2037      	movs	r0, #55	; 0x37
 800279c:	f000 fbc5 	bl	8002f2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027a0:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <HAL_InitTick+0xf8>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	e002      	b.n	80027ae <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80027ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3738      	adds	r7, #56	; 0x38
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40021000 	.word	0x40021000
 80027c0:	431bde83 	.word	0x431bde83
 80027c4:	20000cf4 	.word	0x20000cf4
 80027c8:	40001400 	.word	0x40001400
 80027cc:	20000004 	.word	0x20000004

080027d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027d4:	e7fe      	b.n	80027d4 <NMI_Handler+0x4>

080027d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027da:	e7fe      	b.n	80027da <HardFault_Handler+0x4>

080027dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e0:	e7fe      	b.n	80027e0 <MemManage_Handler+0x4>

080027e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027e6:	e7fe      	b.n	80027e6 <BusFault_Handler+0x4>

080027e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027ec:	e7fe      	b.n	80027ec <UsageFault_Handler+0x4>

080027ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr
	...

080027fc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002800:	4802      	ldr	r0, [pc, #8]	; (800280c <I2C1_EV_IRQHandler+0x10>)
 8002802:	f002 fd8d 	bl	8005320 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000c48 	.word	0x20000c48

08002810 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002814:	4802      	ldr	r0, [pc, #8]	; (8002820 <I2C1_ER_IRQHandler+0x10>)
 8002816:	f002 fef4 	bl	8005602 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000c48 	.word	0x20000c48

08002824 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002828:	4802      	ldr	r0, [pc, #8]	; (8002834 <TIM7_IRQHandler+0x10>)
 800282a:	f005 fd3f 	bl	80082ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20000cf4 	.word	0x20000cf4

08002838 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800283c:	4802      	ldr	r0, [pc, #8]	; (8002848 <ETH_IRQHandler+0x10>)
 800283e:	f001 f862 	bl	8003906 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20005610 	.word	0x20005610

0800284c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return 1;
 8002850:	2301      	movs	r3, #1
}
 8002852:	4618      	mov	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr
	...

0800285c <_kill>:

int _kill(int pid, int sig)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <_kill+0x20>)
 8002868:	2216      	movs	r2, #22
 800286a:	601a      	str	r2, [r3, #0]
  return -1;
 800286c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002870:	4618      	mov	r0, r3
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	2000ed60 	.word	0x2000ed60

08002880 <_exit>:

void _exit (int status)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002888:	f04f 31ff 	mov.w	r1, #4294967295
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff ffe5 	bl	800285c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002892:	e7fe      	b.n	8002892 <_exit+0x12>

08002894 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	e00a      	b.n	80028bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028a6:	f3af 8000 	nop.w
 80028aa:	4601      	mov	r1, r0
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	60ba      	str	r2, [r7, #8]
 80028b2:	b2ca      	uxtb	r2, r1
 80028b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	3301      	adds	r3, #1
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	dbf0      	blt.n	80028a6 <_read+0x12>
  }

  return len;
 80028c4:	687b      	ldr	r3, [r7, #4]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b086      	sub	sp, #24
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028da:	2300      	movs	r3, #0
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	e009      	b.n	80028f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	60ba      	str	r2, [r7, #8]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	3301      	adds	r3, #1
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	dbf1      	blt.n	80028e0 <_write+0x12>
  }
  return len;
 80028fc:	687b      	ldr	r3, [r7, #4]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <_close>:

int _close(int file)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800290e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800292c:	605a      	str	r2, [r3, #4]
  return 0;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <_isatty>:

int _isatty(int file)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002942:	2301      	movs	r3, #1
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr

0800294e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800294e:	b480      	push	{r7}
 8002950:	b085      	sub	sp, #20
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr
	...

08002968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002970:	4a14      	ldr	r2, [pc, #80]	; (80029c4 <_sbrk+0x5c>)
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <_sbrk+0x60>)
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800297c:	4b13      	ldr	r3, [pc, #76]	; (80029cc <_sbrk+0x64>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d102      	bne.n	800298a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002984:	4b11      	ldr	r3, [pc, #68]	; (80029cc <_sbrk+0x64>)
 8002986:	4a12      	ldr	r2, [pc, #72]	; (80029d0 <_sbrk+0x68>)
 8002988:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800298a:	4b10      	ldr	r3, [pc, #64]	; (80029cc <_sbrk+0x64>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4413      	add	r3, r2
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	429a      	cmp	r2, r3
 8002996:	d205      	bcs.n	80029a4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002998:	4b0e      	ldr	r3, [pc, #56]	; (80029d4 <_sbrk+0x6c>)
 800299a:	220c      	movs	r2, #12
 800299c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800299e:	f04f 33ff 	mov.w	r3, #4294967295
 80029a2:	e009      	b.n	80029b8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80029a4:	4b09      	ldr	r3, [pc, #36]	; (80029cc <_sbrk+0x64>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029aa:	4b08      	ldr	r3, [pc, #32]	; (80029cc <_sbrk+0x64>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	4a06      	ldr	r2, [pc, #24]	; (80029cc <_sbrk+0x64>)
 80029b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029b6:	68fb      	ldr	r3, [r7, #12]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	371c      	adds	r7, #28
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20010000 	.word	0x20010000
 80029c8:	00000400 	.word	0x00000400
 80029cc:	20000d3c 	.word	0x20000d3c
 80029d0:	2000ed68 	.word	0x2000ed68
 80029d4:	2000ed60 	.word	0x2000ed60

080029d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029e8:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <MX_USART1_UART_Init+0x4c>)
 80029ea:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <MX_USART1_UART_Init+0x50>)
 80029ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80029ee:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <MX_USART1_UART_Init+0x4c>)
 80029f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029f6:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <MX_USART1_UART_Init+0x4c>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029fc:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <MX_USART1_UART_Init+0x4c>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a02:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <MX_USART1_UART_Init+0x4c>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a08:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <MX_USART1_UART_Init+0x4c>)
 8002a0a:	220c      	movs	r2, #12
 8002a0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a0e:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <MX_USART1_UART_Init+0x4c>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a14:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <MX_USART1_UART_Init+0x4c>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a1a:	4805      	ldr	r0, [pc, #20]	; (8002a30 <MX_USART1_UART_Init+0x4c>)
 8002a1c:	f005 fdf0 	bl	8008600 <HAL_UART_Init>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a26:	f7ff fd87 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000d40 	.word	0x20000d40
 8002a34:	40013800 	.word	0x40013800

08002a38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a40:	f107 0310 	add.w	r3, r7, #16
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <HAL_UART_MspInit+0x8c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d131      	bne.n	8002abc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a58:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <HAL_UART_MspInit+0x90>)
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	4a1a      	ldr	r2, [pc, #104]	; (8002ac8 <HAL_UART_MspInit+0x90>)
 8002a5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a62:	6193      	str	r3, [r2, #24]
 8002a64:	4b18      	ldr	r3, [pc, #96]	; (8002ac8 <HAL_UART_MspInit+0x90>)
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a70:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <HAL_UART_MspInit+0x90>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	4a14      	ldr	r2, [pc, #80]	; (8002ac8 <HAL_UART_MspInit+0x90>)
 8002a76:	f043 0304 	orr.w	r3, r3, #4
 8002a7a:	6193      	str	r3, [r2, #24]
 8002a7c:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <HAL_UART_MspInit+0x90>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a92:	2303      	movs	r3, #3
 8002a94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a96:	f107 0310 	add.w	r3, r7, #16
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	480b      	ldr	r0, [pc, #44]	; (8002acc <HAL_UART_MspInit+0x94>)
 8002a9e:	f001 fcd3 	bl	8004448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab0:	f107 0310 	add.w	r3, r7, #16
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4805      	ldr	r0, [pc, #20]	; (8002acc <HAL_UART_MspInit+0x94>)
 8002ab8:	f001 fcc6 	bl	8004448 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002abc:	bf00      	nop
 8002abe:	3720      	adds	r7, #32
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40013800 	.word	0x40013800
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40010800 	.word	0x40010800

08002ad0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ad0:	f7ff ff82 	bl	80029d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ad4:	480b      	ldr	r0, [pc, #44]	; (8002b04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002ad6:	490c      	ldr	r1, [pc, #48]	; (8002b08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002ad8:	4a0c      	ldr	r2, [pc, #48]	; (8002b0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8002ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002adc:	e002      	b.n	8002ae4 <LoopCopyDataInit>

08002ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ae2:	3304      	adds	r3, #4

08002ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ae8:	d3f9      	bcc.n	8002ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aea:	4a09      	ldr	r2, [pc, #36]	; (8002b10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002aec:	4c09      	ldr	r4, [pc, #36]	; (8002b14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002af0:	e001      	b.n	8002af6 <LoopFillZerobss>

08002af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002af4:	3204      	adds	r2, #4

08002af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002af8:	d3fb      	bcc.n	8002af2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8002afa:	f017 fbcb 	bl	801a294 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002afe:	f7ff fca5 	bl	800244c <main>
  bx lr
 8002b02:	4770      	bx	lr
  ldr r0, =_sdata
 8002b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b08:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002b0c:	0801e788 	.word	0x0801e788
  ldr r2, =_sbss
 8002b10:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002b14:	2000ed64 	.word	0x2000ed64

08002b18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b18:	e7fe      	b.n	8002b18 <ADC1_2_IRQHandler>
	...

08002b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b20:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <HAL_Init+0x28>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <HAL_Init+0x28>)
 8002b26:	f043 0310 	orr.w	r3, r3, #16
 8002b2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b2c:	2003      	movs	r0, #3
 8002b2e:	f000 f9f1 	bl	8002f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b32:	200f      	movs	r0, #15
 8002b34:	f7ff fdce 	bl	80026d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b38:	f7ff fd94 	bl	8002664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40022000 	.word	0x40022000

08002b48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b4c:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <HAL_IncTick+0x1c>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <HAL_IncTick+0x20>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4413      	add	r3, r2
 8002b58:	4a03      	ldr	r2, [pc, #12]	; (8002b68 <HAL_IncTick+0x20>)
 8002b5a:	6013      	str	r3, [r2, #0]
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr
 8002b64:	20000008 	.word	0x20000008
 8002b68:	20000d88 	.word	0x20000d88

08002b6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b70:	4b02      	ldr	r3, [pc, #8]	; (8002b7c <HAL_GetTick+0x10>)
 8002b72:	681b      	ldr	r3, [r3, #0]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr
 8002b7c:	20000d88 	.word	0x20000d88

08002b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b88:	f7ff fff0 	bl	8002b6c <HAL_GetTick>
 8002b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b98:	d005      	beq.n	8002ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b9a:	4b0a      	ldr	r3, [pc, #40]	; (8002bc4 <HAL_Delay+0x44>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ba6:	bf00      	nop
 8002ba8:	f7ff ffe0 	bl	8002b6c <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d8f7      	bhi.n	8002ba8 <HAL_Delay+0x28>
  {
  }
}
 8002bb8:	bf00      	nop
 8002bba:	bf00      	nop
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000008 	.word	0x20000008

08002bc8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e0ed      	b.n	8002db6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d102      	bne.n	8002bec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff f9fe 	bl	8001fe8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bfc:	f7ff ffb6 	bl	8002b6c <HAL_GetTick>
 8002c00:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c02:	e012      	b.n	8002c2a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c04:	f7ff ffb2 	bl	8002b6c <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b0a      	cmp	r3, #10
 8002c10:	d90b      	bls.n	8002c2a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2205      	movs	r2, #5
 8002c22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e0c5      	b.n	8002db6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0e5      	beq.n	8002c04 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0202 	bic.w	r2, r2, #2
 8002c46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c48:	f7ff ff90 	bl	8002b6c <HAL_GetTick>
 8002c4c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c4e:	e012      	b.n	8002c76 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c50:	f7ff ff8c 	bl	8002b6c <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b0a      	cmp	r3, #10
 8002c5c:	d90b      	bls.n	8002c76 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2205      	movs	r2, #5
 8002c6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e09f      	b.n	8002db6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1e5      	bne.n	8002c50 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	7e1b      	ldrb	r3, [r3, #24]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d108      	bne.n	8002c9e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	e007      	b.n	8002cae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	7e5b      	ldrb	r3, [r3, #25]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d108      	bne.n	8002cc8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	e007      	b.n	8002cd8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	7e9b      	ldrb	r3, [r3, #26]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d108      	bne.n	8002cf2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0220 	orr.w	r2, r2, #32
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	e007      	b.n	8002d02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0220 	bic.w	r2, r2, #32
 8002d00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	7edb      	ldrb	r3, [r3, #27]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d108      	bne.n	8002d1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0210 	bic.w	r2, r2, #16
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	e007      	b.n	8002d2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0210 	orr.w	r2, r2, #16
 8002d2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	7f1b      	ldrb	r3, [r3, #28]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d108      	bne.n	8002d46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0208 	orr.w	r2, r2, #8
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	e007      	b.n	8002d56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0208 	bic.w	r2, r2, #8
 8002d54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	7f5b      	ldrb	r3, [r3, #29]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d108      	bne.n	8002d70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 0204 	orr.w	r2, r2, #4
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	e007      	b.n	8002d80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0204 	bic.w	r2, r2, #4
 8002d7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	ea42 0103 	orr.w	r1, r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	1e5a      	subs	r2, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
	...

08002dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dd0:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002de8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002df2:	4a04      	ldr	r2, [pc, #16]	; (8002e04 <__NVIC_SetPriorityGrouping+0x44>)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	60d3      	str	r3, [r2, #12]
}
 8002df8:	bf00      	nop
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e0c:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <__NVIC_GetPriorityGrouping+0x18>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	0a1b      	lsrs	r3, r3, #8
 8002e12:	f003 0307 	and.w	r3, r3, #7
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	db0b      	blt.n	8002e4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	f003 021f 	and.w	r2, r3, #31
 8002e3c:	4906      	ldr	r1, [pc, #24]	; (8002e58 <__NVIC_EnableIRQ+0x34>)
 8002e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	2001      	movs	r0, #1
 8002e46:	fa00 f202 	lsl.w	r2, r0, r2
 8002e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr
 8002e58:	e000e100 	.word	0xe000e100

08002e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	6039      	str	r1, [r7, #0]
 8002e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	db0a      	blt.n	8002e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	490c      	ldr	r1, [pc, #48]	; (8002ea8 <__NVIC_SetPriority+0x4c>)
 8002e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7a:	0112      	lsls	r2, r2, #4
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	440b      	add	r3, r1
 8002e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e84:	e00a      	b.n	8002e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	4908      	ldr	r1, [pc, #32]	; (8002eac <__NVIC_SetPriority+0x50>)
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	3b04      	subs	r3, #4
 8002e94:	0112      	lsls	r2, r2, #4
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	440b      	add	r3, r1
 8002e9a:	761a      	strb	r2, [r3, #24]
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	e000e100 	.word	0xe000e100
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b089      	sub	sp, #36	; 0x24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f1c3 0307 	rsb	r3, r3, #7
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	bf28      	it	cs
 8002ece:	2304      	movcs	r3, #4
 8002ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	2b06      	cmp	r3, #6
 8002ed8:	d902      	bls.n	8002ee0 <NVIC_EncodePriority+0x30>
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	3b03      	subs	r3, #3
 8002ede:	e000      	b.n	8002ee2 <NVIC_EncodePriority+0x32>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43da      	mvns	r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	401a      	ands	r2, r3
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	fa01 f303 	lsl.w	r3, r1, r3
 8002f02:	43d9      	mvns	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f08:	4313      	orrs	r3, r2
         );
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3724      	adds	r7, #36	; 0x24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff ff4f 	bl	8002dc0 <__NVIC_SetPriorityGrouping>
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b086      	sub	sp, #24
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	4603      	mov	r3, r0
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
 8002f36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f3c:	f7ff ff64 	bl	8002e08 <__NVIC_GetPriorityGrouping>
 8002f40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	68b9      	ldr	r1, [r7, #8]
 8002f46:	6978      	ldr	r0, [r7, #20]
 8002f48:	f7ff ffb2 	bl	8002eb0 <NVIC_EncodePriority>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f52:	4611      	mov	r1, r2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff ff81 	bl	8002e5c <__NVIC_SetPriority>
}
 8002f5a:	bf00      	nop
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b082      	sub	sp, #8
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	4603      	mov	r3, r0
 8002f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff ff57 	bl	8002e24 <__NVIC_EnableIRQ>
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d005      	beq.n	8002fa4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2204      	movs	r2, #4
 8002f9c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
 8002fa2:	e0d6      	b.n	8003152 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 020e 	bic.w	r2, r2, #14
 8002fb2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0201 	bic.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4b64      	ldr	r3, [pc, #400]	; (800315c <HAL_DMA_Abort_IT+0x1dc>)
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d958      	bls.n	8003082 <HAL_DMA_Abort_IT+0x102>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a62      	ldr	r2, [pc, #392]	; (8003160 <HAL_DMA_Abort_IT+0x1e0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d04f      	beq.n	800307a <HAL_DMA_Abort_IT+0xfa>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a61      	ldr	r2, [pc, #388]	; (8003164 <HAL_DMA_Abort_IT+0x1e4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d048      	beq.n	8003076 <HAL_DMA_Abort_IT+0xf6>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a5f      	ldr	r2, [pc, #380]	; (8003168 <HAL_DMA_Abort_IT+0x1e8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d040      	beq.n	8003070 <HAL_DMA_Abort_IT+0xf0>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a5e      	ldr	r2, [pc, #376]	; (800316c <HAL_DMA_Abort_IT+0x1ec>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d038      	beq.n	800306a <HAL_DMA_Abort_IT+0xea>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a5c      	ldr	r2, [pc, #368]	; (8003170 <HAL_DMA_Abort_IT+0x1f0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d030      	beq.n	8003064 <HAL_DMA_Abort_IT+0xe4>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a5b      	ldr	r2, [pc, #364]	; (8003174 <HAL_DMA_Abort_IT+0x1f4>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d028      	beq.n	800305e <HAL_DMA_Abort_IT+0xde>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a52      	ldr	r2, [pc, #328]	; (800315c <HAL_DMA_Abort_IT+0x1dc>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d020      	beq.n	8003058 <HAL_DMA_Abort_IT+0xd8>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a57      	ldr	r2, [pc, #348]	; (8003178 <HAL_DMA_Abort_IT+0x1f8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d019      	beq.n	8003054 <HAL_DMA_Abort_IT+0xd4>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a55      	ldr	r2, [pc, #340]	; (800317c <HAL_DMA_Abort_IT+0x1fc>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d012      	beq.n	8003050 <HAL_DMA_Abort_IT+0xd0>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a54      	ldr	r2, [pc, #336]	; (8003180 <HAL_DMA_Abort_IT+0x200>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00a      	beq.n	800304a <HAL_DMA_Abort_IT+0xca>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a52      	ldr	r2, [pc, #328]	; (8003184 <HAL_DMA_Abort_IT+0x204>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d102      	bne.n	8003044 <HAL_DMA_Abort_IT+0xc4>
 800303e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003042:	e01b      	b.n	800307c <HAL_DMA_Abort_IT+0xfc>
 8003044:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003048:	e018      	b.n	800307c <HAL_DMA_Abort_IT+0xfc>
 800304a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800304e:	e015      	b.n	800307c <HAL_DMA_Abort_IT+0xfc>
 8003050:	2310      	movs	r3, #16
 8003052:	e013      	b.n	800307c <HAL_DMA_Abort_IT+0xfc>
 8003054:	2301      	movs	r3, #1
 8003056:	e011      	b.n	800307c <HAL_DMA_Abort_IT+0xfc>
 8003058:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800305c:	e00e      	b.n	800307c <HAL_DMA_Abort_IT+0xfc>
 800305e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003062:	e00b      	b.n	800307c <HAL_DMA_Abort_IT+0xfc>
 8003064:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003068:	e008      	b.n	800307c <HAL_DMA_Abort_IT+0xfc>
 800306a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800306e:	e005      	b.n	800307c <HAL_DMA_Abort_IT+0xfc>
 8003070:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003074:	e002      	b.n	800307c <HAL_DMA_Abort_IT+0xfc>
 8003076:	2310      	movs	r3, #16
 8003078:	e000      	b.n	800307c <HAL_DMA_Abort_IT+0xfc>
 800307a:	2301      	movs	r3, #1
 800307c:	4a42      	ldr	r2, [pc, #264]	; (8003188 <HAL_DMA_Abort_IT+0x208>)
 800307e:	6053      	str	r3, [r2, #4]
 8003080:	e057      	b.n	8003132 <HAL_DMA_Abort_IT+0x1b2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a36      	ldr	r2, [pc, #216]	; (8003160 <HAL_DMA_Abort_IT+0x1e0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d04f      	beq.n	800312c <HAL_DMA_Abort_IT+0x1ac>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a34      	ldr	r2, [pc, #208]	; (8003164 <HAL_DMA_Abort_IT+0x1e4>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d048      	beq.n	8003128 <HAL_DMA_Abort_IT+0x1a8>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a33      	ldr	r2, [pc, #204]	; (8003168 <HAL_DMA_Abort_IT+0x1e8>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d040      	beq.n	8003122 <HAL_DMA_Abort_IT+0x1a2>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a31      	ldr	r2, [pc, #196]	; (800316c <HAL_DMA_Abort_IT+0x1ec>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d038      	beq.n	800311c <HAL_DMA_Abort_IT+0x19c>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a30      	ldr	r2, [pc, #192]	; (8003170 <HAL_DMA_Abort_IT+0x1f0>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d030      	beq.n	8003116 <HAL_DMA_Abort_IT+0x196>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a2e      	ldr	r2, [pc, #184]	; (8003174 <HAL_DMA_Abort_IT+0x1f4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d028      	beq.n	8003110 <HAL_DMA_Abort_IT+0x190>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a26      	ldr	r2, [pc, #152]	; (800315c <HAL_DMA_Abort_IT+0x1dc>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d020      	beq.n	800310a <HAL_DMA_Abort_IT+0x18a>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a2a      	ldr	r2, [pc, #168]	; (8003178 <HAL_DMA_Abort_IT+0x1f8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d019      	beq.n	8003106 <HAL_DMA_Abort_IT+0x186>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a29      	ldr	r2, [pc, #164]	; (800317c <HAL_DMA_Abort_IT+0x1fc>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d012      	beq.n	8003102 <HAL_DMA_Abort_IT+0x182>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a27      	ldr	r2, [pc, #156]	; (8003180 <HAL_DMA_Abort_IT+0x200>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00a      	beq.n	80030fc <HAL_DMA_Abort_IT+0x17c>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a26      	ldr	r2, [pc, #152]	; (8003184 <HAL_DMA_Abort_IT+0x204>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d102      	bne.n	80030f6 <HAL_DMA_Abort_IT+0x176>
 80030f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030f4:	e01b      	b.n	800312e <HAL_DMA_Abort_IT+0x1ae>
 80030f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030fa:	e018      	b.n	800312e <HAL_DMA_Abort_IT+0x1ae>
 80030fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003100:	e015      	b.n	800312e <HAL_DMA_Abort_IT+0x1ae>
 8003102:	2310      	movs	r3, #16
 8003104:	e013      	b.n	800312e <HAL_DMA_Abort_IT+0x1ae>
 8003106:	2301      	movs	r3, #1
 8003108:	e011      	b.n	800312e <HAL_DMA_Abort_IT+0x1ae>
 800310a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800310e:	e00e      	b.n	800312e <HAL_DMA_Abort_IT+0x1ae>
 8003110:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003114:	e00b      	b.n	800312e <HAL_DMA_Abort_IT+0x1ae>
 8003116:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800311a:	e008      	b.n	800312e <HAL_DMA_Abort_IT+0x1ae>
 800311c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003120:	e005      	b.n	800312e <HAL_DMA_Abort_IT+0x1ae>
 8003122:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003126:	e002      	b.n	800312e <HAL_DMA_Abort_IT+0x1ae>
 8003128:	2310      	movs	r3, #16
 800312a:	e000      	b.n	800312e <HAL_DMA_Abort_IT+0x1ae>
 800312c:	2301      	movs	r3, #1
 800312e:	4a17      	ldr	r2, [pc, #92]	; (800318c <HAL_DMA_Abort_IT+0x20c>)
 8003130:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	4798      	blx	r3
    } 
  }
  return status;
 8003152:	7bfb      	ldrb	r3, [r7, #15]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40020080 	.word	0x40020080
 8003160:	40020008 	.word	0x40020008
 8003164:	4002001c 	.word	0x4002001c
 8003168:	40020030 	.word	0x40020030
 800316c:	40020044 	.word	0x40020044
 8003170:	40020058 	.word	0x40020058
 8003174:	4002006c 	.word	0x4002006c
 8003178:	40020408 	.word	0x40020408
 800317c:	4002041c 	.word	0x4002041c
 8003180:	40020430 	.word	0x40020430
 8003184:	40020444 	.word	0x40020444
 8003188:	40020400 	.word	0x40020400
 800318c:	40020000 	.word	0x40020000

08003190 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800319e:	b2db      	uxtb	r3, r3
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr
	...

080031ac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61fb      	str	r3, [r7, #28]
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80031bc:	4ba4      	ldr	r3, [pc, #656]	; (8003450 <HAL_ETH_Init+0x2a4>)
 80031be:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80031c4:	2300      	movs	r3, #0
 80031c6:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e153      	b.n	800347a <HAL_ETH_Init+0x2ce>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f005 fb58 	bl	800889c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Select MII or RMII Mode*/
  AFIO->MAPR &= ~(AFIO_MAPR_MII_RMII_SEL);
 80031ec:	4b99      	ldr	r3, [pc, #612]	; (8003454 <HAL_ETH_Init+0x2a8>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	4a98      	ldr	r2, [pc, #608]	; (8003454 <HAL_ETH_Init+0x2a8>)
 80031f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80031f6:	6053      	str	r3, [r2, #4]
  AFIO->MAPR |= (uint32_t)heth->Init.MediaInterface;
 80031f8:	4b96      	ldr	r3, [pc, #600]	; (8003454 <HAL_ETH_Init+0x2a8>)
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	4994      	ldr	r1, [pc, #592]	; (8003454 <HAL_ETH_Init+0x2a8>)
 8003202:	4313      	orrs	r3, r2
 8003204:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6812      	ldr	r2, [r2, #0]
 8003214:	f043 0301 	orr.w	r3, r3, #1
 8003218:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800321c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800321e:	f7ff fca5 	bl	8002b6c <HAL_GetTick>
 8003222:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003224:	e011      	b.n	800324a <HAL_ETH_Init+0x9e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8003226:	f7ff fca1 	bl	8002b6c <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003234:	d909      	bls.n	800324a <HAL_ETH_Init+0x9e>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2203      	movs	r2, #3
 800323a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e117      	b.n	800347a <HAL_ETH_Init+0x2ce>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1e4      	bne.n	8003226 <HAL_ETH_Init+0x7a>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f023 031c 	bic.w	r3, r3, #28
 800326a:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800326c:	f004 fe68 	bl	8007f40 <HAL_RCC_GetHCLKFreq>
 8003270:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	4a78      	ldr	r2, [pc, #480]	; (8003458 <HAL_ETH_Init+0x2ac>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d908      	bls.n	800328c <HAL_ETH_Init+0xe0>
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	4a77      	ldr	r2, [pc, #476]	; (800345c <HAL_ETH_Init+0x2b0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d804      	bhi.n	800328c <HAL_ETH_Init+0xe0>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV16;
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	f043 0308 	orr.w	r3, r3, #8
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	e00b      	b.n	80032a4 <HAL_ETH_Init+0xf8>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	4a73      	ldr	r2, [pc, #460]	; (800345c <HAL_ETH_Init+0x2b0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d907      	bls.n	80032a4 <HAL_ETH_Init+0xf8>
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	4a6e      	ldr	r2, [pc, #440]	; (8003450 <HAL_ETH_Init+0x2a4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d203      	bcs.n	80032a4 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV26;
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f043 030c 	orr.w	r3, r3, #12
 80032a2:	61fb      	str	r3, [r7, #28]
    /* CSR Clock Range between 60-72 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV42;
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	69fa      	ldr	r2, [r7, #28]
 80032aa:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80032ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80032b0:	2100      	movs	r1, #0
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 fc05 	bl	8003ac2 <HAL_ETH_WritePHYRegister>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00b      	beq.n	80032d6 <HAL_ETH_Init+0x12a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80032c2:	6939      	ldr	r1, [r7, #16]
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 fdbb 	bl	8003e40 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e0d1      	b.n	800347a <HAL_ETH_Init+0x2ce>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80032d6:	20ff      	movs	r0, #255	; 0xff
 80032d8:	f7ff fc52 	bl	8002b80 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 8096 	beq.w	8003412 <HAL_ETH_Init+0x266>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80032e6:	f7ff fc41 	bl	8002b6c <HAL_GetTick>
 80032ea:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80032ec:	f107 030c 	add.w	r3, r7, #12
 80032f0:	461a      	mov	r2, r3
 80032f2:	2101      	movs	r1, #1
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 fb7c 	bl	80039f2 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 80032fa:	f7ff fc37 	bl	8002b6c <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	f241 3288 	movw	r2, #5000	; 0x1388
 8003308:	4293      	cmp	r3, r2
 800330a:	d90f      	bls.n	800332c <HAL_ETH_Init+0x180>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003310:	6939      	ldr	r1, [r7, #16]
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fd94 	bl	8003e40 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e0a6      	b.n	800347a <HAL_ETH_Init+0x2ce>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0da      	beq.n	80032ec <HAL_ETH_Init+0x140>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003336:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800333a:	2100      	movs	r1, #0
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 fbc0 	bl	8003ac2 <HAL_ETH_WritePHYRegister>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00b      	beq.n	8003360 <HAL_ETH_Init+0x1b4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800334c:	6939      	ldr	r1, [r7, #16]
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 fd76 	bl	8003e40 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e08c      	b.n	800347a <HAL_ETH_Init+0x2ce>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8003360:	f7ff fc04 	bl	8002b6c <HAL_GetTick>
 8003364:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003366:	f107 030c 	add.w	r3, r7, #12
 800336a:	461a      	mov	r2, r3
 800336c:	2101      	movs	r1, #1
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fb3f 	bl	80039f2 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003374:	f7ff fbfa 	bl	8002b6c <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003382:	4293      	cmp	r3, r2
 8003384:	d90f      	bls.n	80033a6 <HAL_ETH_Init+0x1fa>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800338a:	6939      	ldr	r1, [r7, #16]
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fd57 	bl	8003e40 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e069      	b.n	800347a <HAL_ETH_Init+0x2ce>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0da      	beq.n	8003366 <HAL_ETH_Init+0x1ba>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80033b0:	f107 030c 	add.w	r3, r7, #12
 80033b4:	461a      	mov	r2, r3
 80033b6:	211f      	movs	r1, #31
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 fb1a 	bl	80039f2 <HAL_ETH_ReadPHYRegister>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00b      	beq.n	80033dc <HAL_ETH_Init+0x230>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80033c8:	6939      	ldr	r1, [r7, #16]
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fd38 	bl	8003e40 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e04e      	b.n	800347a <HAL_ETH_Init+0x2ce>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d004      	beq.n	80033f0 <HAL_ETH_Init+0x244>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033ec:	60da      	str	r2, [r3, #12]
 80033ee:	e002      	b.n	80033f6 <HAL_ETH_Init+0x24a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_ETH_Init+0x25c>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	609a      	str	r2, [r3, #8]
 8003406:	e02f      	b.n	8003468 <HAL_ETH_Init+0x2bc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800340e:	609a      	str	r2, [r3, #8]
 8003410:	e02a      	b.n	8003468 <HAL_ETH_Init+0x2bc>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	08db      	lsrs	r3, r3, #3
 8003418:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	085b      	lsrs	r3, r3, #1
 8003420:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003422:	4313      	orrs	r3, r2
 8003424:	b29b      	uxth	r3, r3
 8003426:	461a      	mov	r2, r3
 8003428:	2100      	movs	r1, #0
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 fb49 	bl	8003ac2 <HAL_ETH_WritePHYRegister>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d014      	beq.n	8003460 <HAL_ETH_Init+0x2b4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800343a:	6939      	ldr	r1, [r7, #16]
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fcff 	bl	8003e40 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e015      	b.n	800347a <HAL_ETH_Init+0x2ce>
 800344e:	bf00      	nop
 8003450:	03938700 	.word	0x03938700
 8003454:	40010000 	.word	0x40010000
 8003458:	01312cff 	.word	0x01312cff
 800345c:	02160ebf 	.word	0x02160ebf
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003460:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003464:	f7ff fb8c 	bl	8002b80 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003468:	6939      	ldr	r1, [r7, #16]
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fce8 	bl	8003e40 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3720      	adds	r7, #32
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop

08003484 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff: Pointer to the first TxBuffer list
  * @param  TxBuffCount: Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
 8003490:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_ETH_DMATxDescListInit+0x20>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e051      	b.n	8003548 <HAL_ETH_DMATxDescListInit+0xc4>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 80034ba:	2300      	movs	r3, #0
 80034bc:	617b      	str	r3, [r7, #20]
 80034be:	e030      	b.n	8003522 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	4413      	add	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80034d0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80034d8:	fb02 f303 	mul.w	r3, r2, r3
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	4413      	add	r3, r2
 80034e0:	461a      	mov	r2, r3
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d105      	bne.n	80034fa <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1U))
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	3b01      	subs	r3, #1
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	429a      	cmp	r2, r3
 8003502:	d208      	bcs.n	8003516 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1U);
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	3301      	adds	r3, #1
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	4413      	add	r3, r2
 800350e:	461a      	mov	r2, r3
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	60da      	str	r2, [r3, #12]
 8003514:	e002      	b.n	800351c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	3301      	adds	r3, #1
 8003520:	617b      	str	r3, [r7, #20]
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d3ca      	bcc.n	80034c0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003534:	6113      	str	r3, [r2, #16]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr

08003552 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff: Pointer to the first RxBuffer list
  * @param  RxBuffCount: Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8003552:	b480      	push	{r7}
 8003554:	b087      	sub	sp, #28
 8003556:	af00      	add	r7, sp, #0
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	607a      	str	r2, [r7, #4]
 800355e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_ETH_DMARxDescListInit+0x20>
 800356e:	2302      	movs	r3, #2
 8003570:	e055      	b.n	800361e <HAL_ETH_DMARxDescListInit+0xcc>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2202      	movs	r2, #2
 800357e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	e034      	b.n	80035f8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	4413      	add	r3, r2
 8003596:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800359e:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80035a6:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80035ae:	fb02 f303 	mul.w	r3, r2, r3
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	4413      	add	r3, r2
 80035b6:	461a      	mov	r2, r3
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d105      	bne.n	80035d0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d208      	bcs.n	80035ec <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	3301      	adds	r3, #1
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	4413      	add	r3, r2
 80035e4:	461a      	mov	r2, r3
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	60da      	str	r2, [r3, #12]
 80035ea:	e002      	b.n	80035f2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	3301      	adds	r3, #1
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d3c6      	bcc.n	800358e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800360a:	60d3      	str	r3, [r2, #12]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr

08003628 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	2300      	movs	r3, #0
 800363c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_ETH_TransmitFrame+0x24>
 8003648:	2302      	movs	r3, #2
 800364a:	e0cc      	b.n	80037e6 <HAL_ETH_TransmitFrame+0x1be>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d109      	bne.n	8003676 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e0b7      	b.n	80037e6 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	da09      	bge.n	8003694 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2212      	movs	r2, #18
 8003684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0a8      	b.n	80037e6 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800369a:	4293      	cmp	r3, r2
 800369c:	d915      	bls.n	80036ca <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	4a53      	ldr	r2, [pc, #332]	; (80037f0 <HAL_ETH_TransmitFrame+0x1c8>)
 80036a2:	fba2 2303 	umull	r2, r3, r2, r3
 80036a6:	0a9b      	lsrs	r3, r3, #10
 80036a8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	4b50      	ldr	r3, [pc, #320]	; (80037f0 <HAL_ETH_TransmitFrame+0x1c8>)
 80036ae:	fba3 1302 	umull	r1, r3, r3, r2
 80036b2:	0a9b      	lsrs	r3, r3, #10
 80036b4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	3301      	adds	r3, #1
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	e001      	b.n	80036ce <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 80036ca:	2301      	movs	r3, #1
 80036cc:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d11c      	bne.n	800370e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80036e2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80036ee:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80036fe:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	461a      	mov	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	62da      	str	r2, [r3, #44]	; 0x2c
 800370c:	e04b      	b.n	80037a6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 800370e:	2300      	movs	r3, #0
 8003710:	613b      	str	r3, [r7, #16]
 8003712:	e044      	b.n	800379e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003722:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d107      	bne.n	800373a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003738:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003742:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	3b01      	subs	r3, #1
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	429a      	cmp	r2, r3
 800374c:	d116      	bne.n	800377c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800375c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	4a24      	ldr	r2, [pc, #144]	; (80037f4 <HAL_ETH_TransmitFrame+0x1cc>)
 8003762:	fb03 f202 	mul.w	r2, r3, r2
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	4413      	add	r3, r2
 800376a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800376e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800377a:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800378a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	461a      	mov	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	3301      	adds	r3, #1
 800379c:	613b      	str	r3, [r7, #16]
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d3b6      	bcc.n	8003714 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00d      	beq.n	80037d4 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037c0:	461a      	mov	r2, r3
 80037c2:	2304      	movs	r3, #4
 80037c4:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ce:	461a      	mov	r2, r3
 80037d0:	2300      	movs	r3, #0
 80037d2:	6053      	str	r3, [r2, #4]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	371c      	adds	r7, #28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr
 80037f0:	ac02b00b 	.word	0xac02b00b
 80037f4:	fffffa0c 	.word	0xfffffa0c

080037f8 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800380a:	2b01      	cmp	r3, #1
 800380c:	d101      	bne.n	8003812 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800380e:	2302      	movs	r3, #2
 8003810:	e074      	b.n	80038fc <HAL_ETH_GetReceivedFrame_IT+0x104>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2202      	movs	r2, #2
 800381e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003822:	e05a      	b.n	80038da <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	3301      	adds	r3, #1
 8003828:	60fb      	str	r3, [r7, #12]

    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */
    if ((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003838:	d10d      	bne.n	8003856 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    {
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	461a      	mov	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	629a      	str	r2, [r3, #40]	; 0x28
 8003854:	e041      	b.n	80038da <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10b      	bne.n	800387c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	461a      	mov	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	629a      	str	r2, [r3, #40]	; 0x28
 800387a:	e02e      	b.n	80038da <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    {
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	635a      	str	r2, [r3, #52]	; 0x34

      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003892:	2b01      	cmp	r3, #1
 8003894:	d103      	bne.n	800389e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	0c1b      	lsrs	r3, r3, #16
 80038a6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80038aa:	1f1a      	subs	r2, r3, #4
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	461a      	mov	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Return function status */
      return HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	e010      	b.n	80038fc <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	db02      	blt.n	80038ea <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b07      	cmp	r3, #7
 80038e8:	d99c      	bls.n	8003824 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	bc80      	pop	{r7}
 8003904:	4770      	bx	lr

08003906 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391c:	2b40      	cmp	r3, #64	; 0x40
 800391e:	d112      	bne.n	8003946 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f005 f867 	bl	80089f4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800392e:	461a      	mov	r2, r3
 8003930:	2340      	movs	r3, #64	; 0x40
 8003932:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003944:	e01a      	b.n	800397c <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b01      	cmp	r3, #1
 8003956:	d111      	bne.n	800397c <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f838 	bl	80039ce <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003966:	461a      	mov	r2, r3
 8003968:	2301      	movs	r3, #1
 800396a:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003984:	461a      	mov	r2, r3
 8003986:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800398a:	6153      	str	r3, [r2, #20]

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800399a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800399e:	d112      	bne.n	80039c6 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f81d 	bl	80039e0 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039ae:	461a      	mov	r2, r3
 80039b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039b4:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	bc80      	pop	{r7}
 80039de:	4770      	bx	lr

080039e0 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bc80      	pop	{r7}
 80039f0:	4770      	bx	lr

080039f2 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue: PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b086      	sub	sp, #24
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	60f8      	str	r0, [r7, #12]
 80039fa:	460b      	mov	r3, r1
 80039fc:	607a      	str	r2, [r7, #4]
 80039fe:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b82      	cmp	r3, #130	; 0x82
 8003a12:	d101      	bne.n	8003a18 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003a14:	2302      	movs	r3, #2
 8003a16:	e050      	b.n	8003aba <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2282      	movs	r2, #130	; 0x82
 8003a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f003 031c 	and.w	r3, r3, #28
 8003a2e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8a1b      	ldrh	r3, [r3, #16]
 8003a34:	02db      	lsls	r3, r3, #11
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003a3e:	897b      	ldrh	r3, [r7, #10]
 8003a40:	019b      	lsls	r3, r3, #6
 8003a42:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f023 0302 	bic.w	r3, r3, #2
 8003a52:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a64:	f7ff f882 	bl	8002b6c <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003a6a:	e015      	b.n	8003a98 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003a6c:	f7ff f87e 	bl	8002b6c <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a7a:	d309      	bcc.n	8003a90 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e014      	b.n	8003aba <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1e4      	bne.n	8003a6c <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b086      	sub	sp, #24
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	460b      	mov	r3, r1
 8003acc:	607a      	str	r2, [r7, #4]
 8003ace:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b42      	cmp	r3, #66	; 0x42
 8003ae2:	d101      	bne.n	8003ae8 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e04e      	b.n	8003b86 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2242      	movs	r2, #66	; 0x42
 8003aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f003 031c 	and.w	r3, r3, #28
 8003afe:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8a1b      	ldrh	r3, [r3, #16]
 8003b04:	02db      	lsls	r3, r3, #11
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003b0e:	897b      	ldrh	r3, [r7, #10]
 8003b10:	019b      	lsls	r3, r3, #6
 8003b12:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f043 0302 	orr.w	r3, r3, #2
 8003b22:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b3e:	f7ff f815 	bl	8002b6c <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003b44:	e015      	b.n	8003b72 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003b46:	f7ff f811 	bl	8002b6c <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b54:	d309      	bcc.n	8003b6a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e00d      	b.n	8003b86 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e4      	bne.n	8003b46 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_ETH_Start>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b082      	sub	sp, #8
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_ETH_Start+0x16>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e01f      	b.n	8003be4 <HAL_ETH_Start+0x56>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fb3b 	bl	8004230 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 fb72 	bl	80042a4 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fbfd 	bl	80043c0 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 fba6 	bl	8004318 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 fbcd 	bl	800436c <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <HAL_ETH_Stop+0x16>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e01f      	b.n	8003c42 <HAL_ETH_Stop+0x56>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fb95 	bl	8004342 <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 fbbc 	bl	8004396 <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fb5d 	bl	80042de <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 fbcb 	bl	80043c0 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 fb1d 	bl	800426a <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
	...

08003c4c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf: MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_ETH_ConfigMAC+0x1c>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e0e4      	b.n	8003e32 <HAL_ETH_ConfigMAC+0x1e6>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 80b1 	beq.w	8003de2 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4b6c      	ldr	r3, [pc, #432]	; (8003e3c <HAL_ETH_ConfigMAC+0x1f0>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8003c98:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8003c9e:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8003ca4:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8003caa:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 8003cb0:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 8003cb6:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8003cbc:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 8003cc2:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8003cc8:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8003cce:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          macconf->AutomaticPadCRCStrip |
 8003cd4:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          macconf->BackOffLimit |
 8003cda:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cf2:	2001      	movs	r0, #1
 8003cf4:	f7fe ff44 	bl	8002b80 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8003d08:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8003d0e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8003d14:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception |
 8003d1a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8003d20:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8003d26:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8003d32:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8003d34:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d3e:	2001      	movs	r0, #1
 8003d40:	f7fe ff1e 	bl	8002b80 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003d54:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d5e:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003d6e:	4013      	ands	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d76:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d7c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8003d82:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8003d88:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect |
 8003d8e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8003d94:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dac:	2001      	movs	r0, #1
 8003dae:	f7fe fee7 	bl	8002b80 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                             macconf->VLANTagIdentifier);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dd2:	2001      	movs	r0, #1
 8003dd4:	f7fe fed4 	bl	8002b80 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	61da      	str	r2, [r3, #28]
 8003de0:	e01e      	b.n	8003e20 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003df0:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e12:	2001      	movs	r0, #1
 8003e14:	f7fe feb4 	bl	8002b80 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	ff20810f 	.word	0xff20810f

08003e40 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err: Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b0b0      	sub	sp, #192	; 0xc0
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d007      	beq.n	8003e66 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e5c:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e64:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003e66:	2300      	movs	r3, #0
 8003e68:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003e72:	2300      	movs	r3, #0
 8003e74:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003e76:	2300      	movs	r3, #0
 8003e78:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d103      	bne.n	8003e8e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e8a:	663b      	str	r3, [r7, #96]	; 0x60
 8003e8c:	e001      	b.n	8003e92 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003e92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e96:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003eac:	2340      	movs	r3, #64	; 0x40
 8003eae:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003ee0:	2380      	movs	r3, #128	; 0x80
 8003ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003eec:	2300      	movs	r3, #0
 8003eee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003efe:	2300      	movs	r3, #0
 8003f00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003f14:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f18:	4ba8      	ldr	r3, [pc, #672]	; (80041bc <ETH_MACDMAConfig+0x37c>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8003f20:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 8003f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8003f24:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8003f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 8003f28:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8003f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 8003f2c:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8003f32:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8003f34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 8003f36:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8003f38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 8003f3a:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8003f40:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8003f42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 8003f44:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8003f46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 8003f48:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8003f4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 8003f4c:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 8003f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 8003f50:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 8003f52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 8003f54:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8003f56:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f68:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f74:	2001      	movs	r0, #1
 8003f76:	f7fe fe03 	bl	8002b80 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f82:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8003f84:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003f86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8003f88:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003f8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003f8c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 8003f8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003f92:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003f94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 8003f98:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003f9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003f9e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003fa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003fa4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003fa8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003fb0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8003fb2:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003fbe:	2001      	movs	r0, #1
 8003fc0:	f7fe fdde 	bl	8002b80 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003fcc:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fd6:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003fe0:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003fec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ff0:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8003ffa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ffe:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004000:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8004004:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004006:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800400a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 800400c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004010:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8004012:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 8004016:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8004018:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800401c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 800401e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004030:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800403c:	2001      	movs	r0, #1
 800403e:	f7fe fd9f 	bl	8002b80 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800404a:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 800404c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 8004050:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004066:	2001      	movs	r0, #1
 8004068:	f7fe fd8a 	bl	8002b80 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004074:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800407a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800407e:	613b      	str	r3, [r7, #16]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004080:	2300      	movs	r3, #0
 8004082:	617b      	str	r3, [r7, #20]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8004084:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004088:	61bb      	str	r3, [r7, #24]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800408a:	2300      	movs	r3, #0
 800408c:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800408e:	2300      	movs	r3, #0
 8004090:	623b      	str	r3, [r7, #32]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8004092:	2300      	movs	r3, #0
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004096:	2300      	movs	r3, #0
 8004098:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800409a:	2304      	movs	r3, #4
 800409c:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800409e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040a2:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80040a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040a8:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80040aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040ae:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80040b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80040ba:	2300      	movs	r3, #0
 80040bc:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80040cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80040d0:	4b3b      	ldr	r3, [pc, #236]	; (80041c0 <ETH_MACDMAConfig+0x380>)
 80040d2:	4013      	ands	r3, r2
 80040d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 80040d8:	68fa      	ldr	r2, [r7, #12]
                        dmainit.ReceiveStoreForward |
 80040da:	693b      	ldr	r3, [r7, #16]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 80040dc:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 80040de:	697b      	ldr	r3, [r7, #20]
                        dmainit.ReceiveStoreForward |
 80040e0:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 80040e2:	69bb      	ldr	r3, [r7, #24]
                        dmainit.FlushReceivedFrame |
 80040e4:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 80040e6:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitStoreForward |
 80040e8:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 80040ea:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.TransmitThresholdControl |
 80040ec:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardErrorFrames |
 80040f0:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 80040f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ForwardUndersizedGoodFrames |
 80040f4:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 80040f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                        dmainit.ReceiveThresholdControl |
 80040f8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 80040fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800410c:	461a      	mov	r2, r3
 800410e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004112:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004122:	2001      	movs	r0, #1
 8004124:	f7fe fd2c 	bl	8002b80 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004130:	461a      	mov	r2, r3
 8004132:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004136:	6193      	str	r3, [r2, #24]
  /* Set the FB bit according to ETH FixedBurst value */
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8004138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
                                        dmainit.FixedBurst |
 800413a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 800413c:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800413e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.FixedBurst |
 8004140:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 8004142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004144:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 8004146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004148:	009b      	lsls	r3, r3, #2
                                        dmainit.TxDMABurstLength |
 800414a:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 800414c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 800414e:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6812      	ldr	r2, [r2, #0]
 8004154:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004158:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800415c:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800416c:	2001      	movs	r0, #1
 800416e:	f7fe fd07 	bl	8002b80 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800417a:	461a      	mov	r2, r3
 800417c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004180:	6013      	str	r3, [r2, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d10d      	bne.n	80041a6 <ETH_MACDMAConfig+0x366>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6812      	ldr	r2, [r2, #0]
 8004198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800419c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041a4:	61d3      	str	r3, [r2, #28]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	461a      	mov	r2, r3
 80041ac:	2100      	movs	r1, #0
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f808 	bl	80041c4 <ETH_MACAddressConfig>
}
 80041b4:	bf00      	nop
 80041b6:	37c0      	adds	r7, #192	; 0xc0
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	ff20810f 	.word	0xff20810f
 80041c0:	f8de3f23 	.word	0xf8de3f23

080041c4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr: Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3305      	adds	r3, #5
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	021b      	lsls	r3, r3, #8
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	3204      	adds	r2, #4
 80041dc:	7812      	ldrb	r2, [r2, #0]
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	4b10      	ldr	r3, [pc, #64]	; (8004228 <ETH_MACAddressConfig+0x64>)
 80041e6:	4413      	add	r3, r2
 80041e8:	461a      	mov	r2, r3
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3303      	adds	r3, #3
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	061a      	lsls	r2, r3, #24
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3302      	adds	r3, #2
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	041b      	lsls	r3, r3, #16
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3301      	adds	r3, #1
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	021b      	lsls	r3, r3, #8
 8004208:	4313      	orrs	r3, r2
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	7812      	ldrb	r2, [r2, #0]
 800420e:	4313      	orrs	r3, r2
 8004210:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	4b05      	ldr	r3, [pc, #20]	; (800422c <ETH_MACAddressConfig+0x68>)
 8004216:	4413      	add	r3, r2
 8004218:	461a      	mov	r2, r3
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	6013      	str	r3, [r2, #0]
}
 800421e:	bf00      	nop
 8004220:	371c      	adds	r7, #28
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr
 8004228:	40028040 	.word	0x40028040
 800422c:	40028044 	.word	0x40028044

08004230 <ETH_MACTransmissionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0208 	orr.w	r2, r2, #8
 800424a:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004254:	2001      	movs	r0, #1
 8004256:	f000 f8d9 	bl	800440c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	601a      	str	r2, [r3, #0]
}
 8004262:	bf00      	nop
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <ETH_MACTransmissionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b084      	sub	sp, #16
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0208 	bic.w	r2, r2, #8
 8004284:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800428e:	2001      	movs	r0, #1
 8004290:	f000 f8bc 	bl	800440c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	601a      	str	r2, [r3, #0]
}
 800429c:	bf00      	nop
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <ETH_MACReceptionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0204 	orr.w	r2, r2, #4
 80042be:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80042c8:	2001      	movs	r0, #1
 80042ca:	f000 f89f 	bl	800440c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	601a      	str	r2, [r3, #0]
}
 80042d6:	bf00      	nop
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <ETH_MACReceptionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b084      	sub	sp, #16
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0204 	bic.w	r2, r2, #4
 80042f8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004302:	2001      	movs	r0, #1
 8004304:	f000 f882 	bl	800440c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	601a      	str	r2, [r3, #0]
}
 8004310:	bf00      	nop
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <ETH_DMATransmissionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6812      	ldr	r2, [r2, #0]
 800432e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004332:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004336:	6193      	str	r3, [r2, #24]
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	bc80      	pop	{r7}
 8004340:	4770      	bx	lr

08004342 <ETH_DMATransmissionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6812      	ldr	r2, [r2, #0]
 8004358:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800435c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004360:	6193      	str	r3, [r2, #24]
}
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr

0800436c <ETH_DMAReceptionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6812      	ldr	r2, [r2, #0]
 8004382:	f043 0302 	orr.w	r3, r3, #2
 8004386:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800438a:	6193      	str	r3, [r2, #24]
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr

08004396 <ETH_DMAReceptionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6812      	ldr	r2, [r2, #0]
 80043ac:	f023 0302 	bic.w	r3, r3, #2
 80043b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043b4:	6193      	str	r3, [r2, #24]
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <ETH_FlushTransmitFIFO>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6812      	ldr	r2, [r2, #0]
 80043da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043e2:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80043f0:	2001      	movs	r0, #1
 80043f2:	f000 f80b 	bl	800440c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004400:	6193      	str	r3, [r2, #24]
}
 8004402:	bf00      	nop
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
	...

0800440c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004414:	4b0a      	ldr	r3, [pc, #40]	; (8004440 <ETH_Delay+0x34>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a0a      	ldr	r2, [pc, #40]	; (8004444 <ETH_Delay+0x38>)
 800441a:	fba2 2303 	umull	r2, r3, r2, r3
 800441e:	0a5b      	lsrs	r3, r3, #9
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	fb02 f303 	mul.w	r3, r2, r3
 8004426:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004428:	bf00      	nop
  }
  while (Delay --);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	1e5a      	subs	r2, r3, #1
 800442e:	60fa      	str	r2, [r7, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1f9      	bne.n	8004428 <ETH_Delay+0x1c>
}
 8004434:	bf00      	nop
 8004436:	bf00      	nop
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr
 8004440:	20000000 	.word	0x20000000
 8004444:	10624dd3 	.word	0x10624dd3

08004448 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004448:	b480      	push	{r7}
 800444a:	b08b      	sub	sp, #44	; 0x2c
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004452:	2300      	movs	r3, #0
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004456:	2300      	movs	r3, #0
 8004458:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800445a:	e169      	b.n	8004730 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800445c:	2201      	movs	r2, #1
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	4013      	ands	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	429a      	cmp	r2, r3
 8004476:	f040 8158 	bne.w	800472a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	4a9a      	ldr	r2, [pc, #616]	; (80046e8 <HAL_GPIO_Init+0x2a0>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d05e      	beq.n	8004542 <HAL_GPIO_Init+0xfa>
 8004484:	4a98      	ldr	r2, [pc, #608]	; (80046e8 <HAL_GPIO_Init+0x2a0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d875      	bhi.n	8004576 <HAL_GPIO_Init+0x12e>
 800448a:	4a98      	ldr	r2, [pc, #608]	; (80046ec <HAL_GPIO_Init+0x2a4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d058      	beq.n	8004542 <HAL_GPIO_Init+0xfa>
 8004490:	4a96      	ldr	r2, [pc, #600]	; (80046ec <HAL_GPIO_Init+0x2a4>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d86f      	bhi.n	8004576 <HAL_GPIO_Init+0x12e>
 8004496:	4a96      	ldr	r2, [pc, #600]	; (80046f0 <HAL_GPIO_Init+0x2a8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d052      	beq.n	8004542 <HAL_GPIO_Init+0xfa>
 800449c:	4a94      	ldr	r2, [pc, #592]	; (80046f0 <HAL_GPIO_Init+0x2a8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d869      	bhi.n	8004576 <HAL_GPIO_Init+0x12e>
 80044a2:	4a94      	ldr	r2, [pc, #592]	; (80046f4 <HAL_GPIO_Init+0x2ac>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d04c      	beq.n	8004542 <HAL_GPIO_Init+0xfa>
 80044a8:	4a92      	ldr	r2, [pc, #584]	; (80046f4 <HAL_GPIO_Init+0x2ac>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d863      	bhi.n	8004576 <HAL_GPIO_Init+0x12e>
 80044ae:	4a92      	ldr	r2, [pc, #584]	; (80046f8 <HAL_GPIO_Init+0x2b0>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d046      	beq.n	8004542 <HAL_GPIO_Init+0xfa>
 80044b4:	4a90      	ldr	r2, [pc, #576]	; (80046f8 <HAL_GPIO_Init+0x2b0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d85d      	bhi.n	8004576 <HAL_GPIO_Init+0x12e>
 80044ba:	2b12      	cmp	r3, #18
 80044bc:	d82a      	bhi.n	8004514 <HAL_GPIO_Init+0xcc>
 80044be:	2b12      	cmp	r3, #18
 80044c0:	d859      	bhi.n	8004576 <HAL_GPIO_Init+0x12e>
 80044c2:	a201      	add	r2, pc, #4	; (adr r2, 80044c8 <HAL_GPIO_Init+0x80>)
 80044c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c8:	08004543 	.word	0x08004543
 80044cc:	0800451d 	.word	0x0800451d
 80044d0:	0800452f 	.word	0x0800452f
 80044d4:	08004571 	.word	0x08004571
 80044d8:	08004577 	.word	0x08004577
 80044dc:	08004577 	.word	0x08004577
 80044e0:	08004577 	.word	0x08004577
 80044e4:	08004577 	.word	0x08004577
 80044e8:	08004577 	.word	0x08004577
 80044ec:	08004577 	.word	0x08004577
 80044f0:	08004577 	.word	0x08004577
 80044f4:	08004577 	.word	0x08004577
 80044f8:	08004577 	.word	0x08004577
 80044fc:	08004577 	.word	0x08004577
 8004500:	08004577 	.word	0x08004577
 8004504:	08004577 	.word	0x08004577
 8004508:	08004577 	.word	0x08004577
 800450c:	08004525 	.word	0x08004525
 8004510:	08004539 	.word	0x08004539
 8004514:	4a79      	ldr	r2, [pc, #484]	; (80046fc <HAL_GPIO_Init+0x2b4>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d013      	beq.n	8004542 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800451a:	e02c      	b.n	8004576 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	623b      	str	r3, [r7, #32]
          break;
 8004522:	e029      	b.n	8004578 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	3304      	adds	r3, #4
 800452a:	623b      	str	r3, [r7, #32]
          break;
 800452c:	e024      	b.n	8004578 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	3308      	adds	r3, #8
 8004534:	623b      	str	r3, [r7, #32]
          break;
 8004536:	e01f      	b.n	8004578 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	330c      	adds	r3, #12
 800453e:	623b      	str	r3, [r7, #32]
          break;
 8004540:	e01a      	b.n	8004578 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d102      	bne.n	8004550 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800454a:	2304      	movs	r3, #4
 800454c:	623b      	str	r3, [r7, #32]
          break;
 800454e:	e013      	b.n	8004578 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d105      	bne.n	8004564 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004558:	2308      	movs	r3, #8
 800455a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69fa      	ldr	r2, [r7, #28]
 8004560:	611a      	str	r2, [r3, #16]
          break;
 8004562:	e009      	b.n	8004578 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004564:	2308      	movs	r3, #8
 8004566:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	69fa      	ldr	r2, [r7, #28]
 800456c:	615a      	str	r2, [r3, #20]
          break;
 800456e:	e003      	b.n	8004578 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004570:	2300      	movs	r3, #0
 8004572:	623b      	str	r3, [r7, #32]
          break;
 8004574:	e000      	b.n	8004578 <HAL_GPIO_Init+0x130>
          break;
 8004576:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	2bff      	cmp	r3, #255	; 0xff
 800457c:	d801      	bhi.n	8004582 <HAL_GPIO_Init+0x13a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	e001      	b.n	8004586 <HAL_GPIO_Init+0x13e>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3304      	adds	r3, #4
 8004586:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	2bff      	cmp	r3, #255	; 0xff
 800458c:	d802      	bhi.n	8004594 <HAL_GPIO_Init+0x14c>
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	e002      	b.n	800459a <HAL_GPIO_Init+0x152>
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	3b08      	subs	r3, #8
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	210f      	movs	r1, #15
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	fa01 f303 	lsl.w	r3, r1, r3
 80045a8:	43db      	mvns	r3, r3
 80045aa:	401a      	ands	r2, r3
 80045ac:	6a39      	ldr	r1, [r7, #32]
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	fa01 f303 	lsl.w	r3, r1, r3
 80045b4:	431a      	orrs	r2, r3
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 80b1 	beq.w	800472a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80045c8:	4b4d      	ldr	r3, [pc, #308]	; (8004700 <HAL_GPIO_Init+0x2b8>)
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	4a4c      	ldr	r2, [pc, #304]	; (8004700 <HAL_GPIO_Init+0x2b8>)
 80045ce:	f043 0301 	orr.w	r3, r3, #1
 80045d2:	6193      	str	r3, [r2, #24]
 80045d4:	4b4a      	ldr	r3, [pc, #296]	; (8004700 <HAL_GPIO_Init+0x2b8>)
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	60bb      	str	r3, [r7, #8]
 80045de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80045e0:	4a48      	ldr	r2, [pc, #288]	; (8004704 <HAL_GPIO_Init+0x2bc>)
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	089b      	lsrs	r3, r3, #2
 80045e6:	3302      	adds	r3, #2
 80045e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	f003 0303 	and.w	r3, r3, #3
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	220f      	movs	r2, #15
 80045f8:	fa02 f303 	lsl.w	r3, r2, r3
 80045fc:	43db      	mvns	r3, r3
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4013      	ands	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a40      	ldr	r2, [pc, #256]	; (8004708 <HAL_GPIO_Init+0x2c0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d013      	beq.n	8004634 <HAL_GPIO_Init+0x1ec>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a3f      	ldr	r2, [pc, #252]	; (800470c <HAL_GPIO_Init+0x2c4>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d00d      	beq.n	8004630 <HAL_GPIO_Init+0x1e8>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a3e      	ldr	r2, [pc, #248]	; (8004710 <HAL_GPIO_Init+0x2c8>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d007      	beq.n	800462c <HAL_GPIO_Init+0x1e4>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a3d      	ldr	r2, [pc, #244]	; (8004714 <HAL_GPIO_Init+0x2cc>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d101      	bne.n	8004628 <HAL_GPIO_Init+0x1e0>
 8004624:	2303      	movs	r3, #3
 8004626:	e006      	b.n	8004636 <HAL_GPIO_Init+0x1ee>
 8004628:	2304      	movs	r3, #4
 800462a:	e004      	b.n	8004636 <HAL_GPIO_Init+0x1ee>
 800462c:	2302      	movs	r3, #2
 800462e:	e002      	b.n	8004636 <HAL_GPIO_Init+0x1ee>
 8004630:	2301      	movs	r3, #1
 8004632:	e000      	b.n	8004636 <HAL_GPIO_Init+0x1ee>
 8004634:	2300      	movs	r3, #0
 8004636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004638:	f002 0203 	and.w	r2, r2, #3
 800463c:	0092      	lsls	r2, r2, #2
 800463e:	4093      	lsls	r3, r2
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004646:	492f      	ldr	r1, [pc, #188]	; (8004704 <HAL_GPIO_Init+0x2bc>)
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	089b      	lsrs	r3, r3, #2
 800464c:	3302      	adds	r3, #2
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d006      	beq.n	800466e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004660:	4b2d      	ldr	r3, [pc, #180]	; (8004718 <HAL_GPIO_Init+0x2d0>)
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	492c      	ldr	r1, [pc, #176]	; (8004718 <HAL_GPIO_Init+0x2d0>)
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	4313      	orrs	r3, r2
 800466a:	608b      	str	r3, [r1, #8]
 800466c:	e006      	b.n	800467c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800466e:	4b2a      	ldr	r3, [pc, #168]	; (8004718 <HAL_GPIO_Init+0x2d0>)
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	43db      	mvns	r3, r3
 8004676:	4928      	ldr	r1, [pc, #160]	; (8004718 <HAL_GPIO_Init+0x2d0>)
 8004678:	4013      	ands	r3, r2
 800467a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d006      	beq.n	8004696 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004688:	4b23      	ldr	r3, [pc, #140]	; (8004718 <HAL_GPIO_Init+0x2d0>)
 800468a:	68da      	ldr	r2, [r3, #12]
 800468c:	4922      	ldr	r1, [pc, #136]	; (8004718 <HAL_GPIO_Init+0x2d0>)
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	4313      	orrs	r3, r2
 8004692:	60cb      	str	r3, [r1, #12]
 8004694:	e006      	b.n	80046a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004696:	4b20      	ldr	r3, [pc, #128]	; (8004718 <HAL_GPIO_Init+0x2d0>)
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	43db      	mvns	r3, r3
 800469e:	491e      	ldr	r1, [pc, #120]	; (8004718 <HAL_GPIO_Init+0x2d0>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d006      	beq.n	80046be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80046b0:	4b19      	ldr	r3, [pc, #100]	; (8004718 <HAL_GPIO_Init+0x2d0>)
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	4918      	ldr	r1, [pc, #96]	; (8004718 <HAL_GPIO_Init+0x2d0>)
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	604b      	str	r3, [r1, #4]
 80046bc:	e006      	b.n	80046cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80046be:	4b16      	ldr	r3, [pc, #88]	; (8004718 <HAL_GPIO_Init+0x2d0>)
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	43db      	mvns	r3, r3
 80046c6:	4914      	ldr	r1, [pc, #80]	; (8004718 <HAL_GPIO_Init+0x2d0>)
 80046c8:	4013      	ands	r3, r2
 80046ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d021      	beq.n	800471c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80046d8:	4b0f      	ldr	r3, [pc, #60]	; (8004718 <HAL_GPIO_Init+0x2d0>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	490e      	ldr	r1, [pc, #56]	; (8004718 <HAL_GPIO_Init+0x2d0>)
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	600b      	str	r3, [r1, #0]
 80046e4:	e021      	b.n	800472a <HAL_GPIO_Init+0x2e2>
 80046e6:	bf00      	nop
 80046e8:	10320000 	.word	0x10320000
 80046ec:	10310000 	.word	0x10310000
 80046f0:	10220000 	.word	0x10220000
 80046f4:	10210000 	.word	0x10210000
 80046f8:	10120000 	.word	0x10120000
 80046fc:	10110000 	.word	0x10110000
 8004700:	40021000 	.word	0x40021000
 8004704:	40010000 	.word	0x40010000
 8004708:	40010800 	.word	0x40010800
 800470c:	40010c00 	.word	0x40010c00
 8004710:	40011000 	.word	0x40011000
 8004714:	40011400 	.word	0x40011400
 8004718:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800471c:	4b0b      	ldr	r3, [pc, #44]	; (800474c <HAL_GPIO_Init+0x304>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	43db      	mvns	r3, r3
 8004724:	4909      	ldr	r1, [pc, #36]	; (800474c <HAL_GPIO_Init+0x304>)
 8004726:	4013      	ands	r3, r2
 8004728:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	3301      	adds	r3, #1
 800472e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	fa22 f303 	lsr.w	r3, r2, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	f47f ae8e 	bne.w	800445c <HAL_GPIO_Init+0x14>
  }
}
 8004740:	bf00      	nop
 8004742:	bf00      	nop
 8004744:	372c      	adds	r7, #44	; 0x2c
 8004746:	46bd      	mov	sp, r7
 8004748:	bc80      	pop	{r7}
 800474a:	4770      	bx	lr
 800474c:	40010400 	.word	0x40010400

08004750 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	460b      	mov	r3, r1
 800475a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	887b      	ldrh	r3, [r7, #2]
 8004762:	4013      	ands	r3, r2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004768:	2301      	movs	r3, #1
 800476a:	73fb      	strb	r3, [r7, #15]
 800476c:	e001      	b.n	8004772 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800476e:	2300      	movs	r3, #0
 8004770:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004772:	7bfb      	ldrb	r3, [r7, #15]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	bc80      	pop	{r7}
 800477c:	4770      	bx	lr

0800477e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	460b      	mov	r3, r1
 8004788:	807b      	strh	r3, [r7, #2]
 800478a:	4613      	mov	r3, r2
 800478c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800478e:	787b      	ldrb	r3, [r7, #1]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004794:	887a      	ldrh	r2, [r7, #2]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800479a:	e003      	b.n	80047a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800479c:	887b      	ldrh	r3, [r7, #2]
 800479e:	041a      	lsls	r2, r3, #16
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	611a      	str	r2, [r3, #16]
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc80      	pop	{r7}
 80047ac:	4770      	bx	lr
	...

080047b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e12b      	b.n	8004a1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d106      	bne.n	80047dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7fd fdea 	bl	80023b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2224      	movs	r2, #36	; 0x24
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0201 	bic.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004802:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004812:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004814:	f003 fb9e 	bl	8007f54 <HAL_RCC_GetPCLK1Freq>
 8004818:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	4a81      	ldr	r2, [pc, #516]	; (8004a24 <HAL_I2C_Init+0x274>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d807      	bhi.n	8004834 <HAL_I2C_Init+0x84>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4a80      	ldr	r2, [pc, #512]	; (8004a28 <HAL_I2C_Init+0x278>)
 8004828:	4293      	cmp	r3, r2
 800482a:	bf94      	ite	ls
 800482c:	2301      	movls	r3, #1
 800482e:	2300      	movhi	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	e006      	b.n	8004842 <HAL_I2C_Init+0x92>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4a7d      	ldr	r2, [pc, #500]	; (8004a2c <HAL_I2C_Init+0x27c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	bf94      	ite	ls
 800483c:	2301      	movls	r3, #1
 800483e:	2300      	movhi	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e0e7      	b.n	8004a1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	4a78      	ldr	r2, [pc, #480]	; (8004a30 <HAL_I2C_Init+0x280>)
 800484e:	fba2 2303 	umull	r2, r3, r2, r3
 8004852:	0c9b      	lsrs	r3, r3, #18
 8004854:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	430a      	orrs	r2, r1
 8004868:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	4a6a      	ldr	r2, [pc, #424]	; (8004a24 <HAL_I2C_Init+0x274>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d802      	bhi.n	8004884 <HAL_I2C_Init+0xd4>
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	3301      	adds	r3, #1
 8004882:	e009      	b.n	8004898 <HAL_I2C_Init+0xe8>
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800488a:	fb02 f303 	mul.w	r3, r2, r3
 800488e:	4a69      	ldr	r2, [pc, #420]	; (8004a34 <HAL_I2C_Init+0x284>)
 8004890:	fba2 2303 	umull	r2, r3, r2, r3
 8004894:	099b      	lsrs	r3, r3, #6
 8004896:	3301      	adds	r3, #1
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6812      	ldr	r2, [r2, #0]
 800489c:	430b      	orrs	r3, r1
 800489e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	495c      	ldr	r1, [pc, #368]	; (8004a24 <HAL_I2C_Init+0x274>)
 80048b4:	428b      	cmp	r3, r1
 80048b6:	d819      	bhi.n	80048ec <HAL_I2C_Init+0x13c>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	1e59      	subs	r1, r3, #1
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80048c6:	1c59      	adds	r1, r3, #1
 80048c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80048cc:	400b      	ands	r3, r1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <HAL_I2C_Init+0x138>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	1e59      	subs	r1, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80048e0:	3301      	adds	r3, #1
 80048e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048e6:	e051      	b.n	800498c <HAL_I2C_Init+0x1dc>
 80048e8:	2304      	movs	r3, #4
 80048ea:	e04f      	b.n	800498c <HAL_I2C_Init+0x1dc>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d111      	bne.n	8004918 <HAL_I2C_Init+0x168>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	1e58      	subs	r0, r3, #1
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6859      	ldr	r1, [r3, #4]
 80048fc:	460b      	mov	r3, r1
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	440b      	add	r3, r1
 8004902:	fbb0 f3f3 	udiv	r3, r0, r3
 8004906:	3301      	adds	r3, #1
 8004908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800490c:	2b00      	cmp	r3, #0
 800490e:	bf0c      	ite	eq
 8004910:	2301      	moveq	r3, #1
 8004912:	2300      	movne	r3, #0
 8004914:	b2db      	uxtb	r3, r3
 8004916:	e012      	b.n	800493e <HAL_I2C_Init+0x18e>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	1e58      	subs	r0, r3, #1
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6859      	ldr	r1, [r3, #4]
 8004920:	460b      	mov	r3, r1
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	0099      	lsls	r1, r3, #2
 8004928:	440b      	add	r3, r1
 800492a:	fbb0 f3f3 	udiv	r3, r0, r3
 800492e:	3301      	adds	r3, #1
 8004930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004934:	2b00      	cmp	r3, #0
 8004936:	bf0c      	ite	eq
 8004938:	2301      	moveq	r3, #1
 800493a:	2300      	movne	r3, #0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <HAL_I2C_Init+0x196>
 8004942:	2301      	movs	r3, #1
 8004944:	e022      	b.n	800498c <HAL_I2C_Init+0x1dc>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10e      	bne.n	800496c <HAL_I2C_Init+0x1bc>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	1e58      	subs	r0, r3, #1
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6859      	ldr	r1, [r3, #4]
 8004956:	460b      	mov	r3, r1
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	440b      	add	r3, r1
 800495c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004960:	3301      	adds	r3, #1
 8004962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800496a:	e00f      	b.n	800498c <HAL_I2C_Init+0x1dc>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	1e58      	subs	r0, r3, #1
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6859      	ldr	r1, [r3, #4]
 8004974:	460b      	mov	r3, r1
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	440b      	add	r3, r1
 800497a:	0099      	lsls	r1, r3, #2
 800497c:	440b      	add	r3, r1
 800497e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004982:	3301      	adds	r3, #1
 8004984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004988:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800498c:	6879      	ldr	r1, [r7, #4]
 800498e:	6809      	ldr	r1, [r1, #0]
 8004990:	4313      	orrs	r3, r2
 8004992:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	69da      	ldr	r2, [r3, #28]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80049ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6911      	ldr	r1, [r2, #16]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	68d2      	ldr	r2, [r2, #12]
 80049c6:	4311      	orrs	r1, r2
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6812      	ldr	r2, [r2, #0]
 80049cc:	430b      	orrs	r3, r1
 80049ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695a      	ldr	r2, [r3, #20]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	431a      	orrs	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f042 0201 	orr.w	r2, r2, #1
 80049fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	000186a0 	.word	0x000186a0
 8004a28:	001e847f 	.word	0x001e847f
 8004a2c:	003d08ff 	.word	0x003d08ff
 8004a30:	431bde83 	.word	0x431bde83
 8004a34:	10624dd3 	.word	0x10624dd3

08004a38 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4a:	2b80      	cmp	r3, #128	; 0x80
 8004a4c:	d103      	bne.n	8004a56 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2200      	movs	r2, #0
 8004a54:	611a      	str	r2, [r3, #16]
  }
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bc80      	pop	{r7}
 8004a5e:	4770      	bx	lr

08004a60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b088      	sub	sp, #32
 8004a64:	af02      	add	r7, sp, #8
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	607a      	str	r2, [r7, #4]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	817b      	strh	r3, [r7, #10]
 8004a70:	4613      	mov	r3, r2
 8004a72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a74:	f7fe f87a 	bl	8002b6c <HAL_GetTick>
 8004a78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b20      	cmp	r3, #32
 8004a84:	f040 80e0 	bne.w	8004c48 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	2319      	movs	r3, #25
 8004a8e:	2201      	movs	r2, #1
 8004a90:	4970      	ldr	r1, [pc, #448]	; (8004c54 <HAL_I2C_Master_Transmit+0x1f4>)
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f002 fade 	bl	8007054 <I2C_WaitOnFlagUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e0d3      	b.n	8004c4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d101      	bne.n	8004ab0 <HAL_I2C_Master_Transmit+0x50>
 8004aac:	2302      	movs	r3, #2
 8004aae:	e0cc      	b.n	8004c4a <HAL_I2C_Master_Transmit+0x1ea>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d007      	beq.n	8004ad6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f042 0201 	orr.w	r2, r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ae4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2221      	movs	r2, #33	; 0x21
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2210      	movs	r2, #16
 8004af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	893a      	ldrh	r2, [r7, #8]
 8004b06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	4a50      	ldr	r2, [pc, #320]	; (8004c58 <HAL_I2C_Master_Transmit+0x1f8>)
 8004b16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b18:	8979      	ldrh	r1, [r7, #10]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	6a3a      	ldr	r2, [r7, #32]
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f001 fff0 	bl	8006b04 <I2C_MasterRequestWrite>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e08d      	b.n	8004c4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b2e:	2300      	movs	r3, #0
 8004b30:	613b      	str	r3, [r7, #16]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	613b      	str	r3, [r7, #16]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	613b      	str	r3, [r7, #16]
 8004b42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004b44:	e066      	b.n	8004c14 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	6a39      	ldr	r1, [r7, #32]
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f002 fb9c 	bl	8007288 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00d      	beq.n	8004b72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d107      	bne.n	8004b6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e06b      	b.n	8004c4a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	781a      	ldrb	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	d11b      	bne.n	8004be8 <HAL_I2C_Master_Transmit+0x188>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d017      	beq.n	8004be8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	781a      	ldrb	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	6a39      	ldr	r1, [r7, #32]
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f002 fb93 	bl	8007318 <I2C_WaitOnBTFFlagUntilTimeout>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00d      	beq.n	8004c14 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	d107      	bne.n	8004c10 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c0e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e01a      	b.n	8004c4a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d194      	bne.n	8004b46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c44:	2300      	movs	r3, #0
 8004c46:	e000      	b.n	8004c4a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004c48:	2302      	movs	r3, #2
  }
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	00100002 	.word	0x00100002
 8004c58:	ffff0000 	.word	0xffff0000

08004c5c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b088      	sub	sp, #32
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	4608      	mov	r0, r1
 8004c66:	4611      	mov	r1, r2
 8004c68:	461a      	mov	r2, r3
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	817b      	strh	r3, [r7, #10]
 8004c6e:	460b      	mov	r3, r1
 8004c70:	813b      	strh	r3, [r7, #8]
 8004c72:	4613      	mov	r3, r2
 8004c74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c76:	f7fd ff79 	bl	8002b6c <HAL_GetTick>
 8004c7a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b20      	cmp	r3, #32
 8004c86:	f040 80d9 	bne.w	8004e3c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	2319      	movs	r3, #25
 8004c90:	2201      	movs	r2, #1
 8004c92:	496d      	ldr	r1, [pc, #436]	; (8004e48 <HAL_I2C_Mem_Write+0x1ec>)
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f002 f9dd 	bl	8007054 <I2C_WaitOnFlagUntilTimeout>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e0cc      	b.n	8004e3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <HAL_I2C_Mem_Write+0x56>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	e0c5      	b.n	8004e3e <HAL_I2C_Mem_Write+0x1e2>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d007      	beq.n	8004cd8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 0201 	orr.w	r2, r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ce6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2221      	movs	r2, #33	; 0x21
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2240      	movs	r2, #64	; 0x40
 8004cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a3a      	ldr	r2, [r7, #32]
 8004d02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4a4d      	ldr	r2, [pc, #308]	; (8004e4c <HAL_I2C_Mem_Write+0x1f0>)
 8004d18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d1a:	88f8      	ldrh	r0, [r7, #6]
 8004d1c:	893a      	ldrh	r2, [r7, #8]
 8004d1e:	8979      	ldrh	r1, [r7, #10]
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	9301      	str	r3, [sp, #4]
 8004d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	4603      	mov	r3, r0
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f001 ff6c 	bl	8006c08 <I2C_RequestMemoryWrite>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d052      	beq.n	8004ddc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e081      	b.n	8004e3e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f002 faa2 	bl	8007288 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00d      	beq.n	8004d66 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d107      	bne.n	8004d62 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e06b      	b.n	8004e3e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	781a      	ldrb	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	d11b      	bne.n	8004ddc <HAL_I2C_Mem_Write+0x180>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d017      	beq.n	8004ddc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	781a      	ldrb	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1aa      	bne.n	8004d3a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f002 fa95 	bl	8007318 <I2C_WaitOnBTFFlagUntilTimeout>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00d      	beq.n	8004e10 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d107      	bne.n	8004e0c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e0a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e016      	b.n	8004e3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	e000      	b.n	8004e3e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e3c:	2302      	movs	r3, #2
  }
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3718      	adds	r7, #24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	00100002 	.word	0x00100002
 8004e4c:	ffff0000 	.word	0xffff0000

08004e50 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b08c      	sub	sp, #48	; 0x30
 8004e54:	af02      	add	r7, sp, #8
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	4608      	mov	r0, r1
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4603      	mov	r3, r0
 8004e60:	817b      	strh	r3, [r7, #10]
 8004e62:	460b      	mov	r3, r1
 8004e64:	813b      	strh	r3, [r7, #8]
 8004e66:	4613      	mov	r3, r2
 8004e68:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e6e:	f7fd fe7d 	bl	8002b6c <HAL_GetTick>
 8004e72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b20      	cmp	r3, #32
 8004e7e:	f040 8244 	bne.w	800530a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	2319      	movs	r3, #25
 8004e88:	2201      	movs	r2, #1
 8004e8a:	4982      	ldr	r1, [pc, #520]	; (8005094 <HAL_I2C_Mem_Read+0x244>)
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f002 f8e1 	bl	8007054 <I2C_WaitOnFlagUntilTimeout>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004e98:	2302      	movs	r3, #2
 8004e9a:	e237      	b.n	800530c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d101      	bne.n	8004eaa <HAL_I2C_Mem_Read+0x5a>
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	e230      	b.n	800530c <HAL_I2C_Mem_Read+0x4bc>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d007      	beq.n	8004ed0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0201 	orr.w	r2, r2, #1
 8004ece:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ede:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2222      	movs	r2, #34	; 0x22
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2240      	movs	r2, #64	; 0x40
 8004eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004efa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004f00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4a62      	ldr	r2, [pc, #392]	; (8005098 <HAL_I2C_Mem_Read+0x248>)
 8004f10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f12:	88f8      	ldrh	r0, [r7, #6]
 8004f14:	893a      	ldrh	r2, [r7, #8]
 8004f16:	8979      	ldrh	r1, [r7, #10]
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	9301      	str	r3, [sp, #4]
 8004f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	4603      	mov	r3, r0
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f001 ff06 	bl	8006d34 <I2C_RequestMemoryRead>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e1ec      	b.n	800530c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d113      	bne.n	8004f62 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61fb      	str	r3, [r7, #28]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	61fb      	str	r3, [r7, #28]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	61fb      	str	r3, [r7, #28]
 8004f4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	e1c0      	b.n	80052e4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d11e      	bne.n	8004fa8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f7a:	b672      	cpsid	i
}
 8004f7c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61bb      	str	r3, [r7, #24]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	61bb      	str	r3, [r7, #24]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	61bb      	str	r3, [r7, #24]
 8004f92:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004fa4:	b662      	cpsie	i
}
 8004fa6:	e035      	b.n	8005014 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d11e      	bne.n	8004fee <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fbe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004fc0:	b672      	cpsid	i
}
 8004fc2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004fea:	b662      	cpsie	i
}
 8004fec:	e012      	b.n	8005014 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ffc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ffe:	2300      	movs	r3, #0
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	613b      	str	r3, [r7, #16]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	613b      	str	r3, [r7, #16]
 8005012:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005014:	e166      	b.n	80052e4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501a:	2b03      	cmp	r3, #3
 800501c:	f200 811f 	bhi.w	800525e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005024:	2b01      	cmp	r3, #1
 8005026:	d123      	bne.n	8005070 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800502a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f002 f9ed 	bl	800740c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e167      	b.n	800530c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	691a      	ldr	r2, [r3, #16]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005064:	b29b      	uxth	r3, r3
 8005066:	3b01      	subs	r3, #1
 8005068:	b29a      	uxth	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800506e:	e139      	b.n	80052e4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005074:	2b02      	cmp	r3, #2
 8005076:	d152      	bne.n	800511e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507e:	2200      	movs	r2, #0
 8005080:	4906      	ldr	r1, [pc, #24]	; (800509c <HAL_I2C_Mem_Read+0x24c>)
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f001 ffe6 	bl	8007054 <I2C_WaitOnFlagUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d008      	beq.n	80050a0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e13c      	b.n	800530c <HAL_I2C_Mem_Read+0x4bc>
 8005092:	bf00      	nop
 8005094:	00100002 	.word	0x00100002
 8005098:	ffff0000 	.word	0xffff0000
 800509c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80050a0:	b672      	cpsid	i
}
 80050a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	691a      	ldr	r2, [r3, #16]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	1c5a      	adds	r2, r3, #1
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050dc:	b29b      	uxth	r3, r3
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80050e6:	b662      	cpsie	i
}
 80050e8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	691a      	ldr	r2, [r3, #16]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	b2d2      	uxtb	r2, r2
 80050f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	1c5a      	adds	r2, r3, #1
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005106:	3b01      	subs	r3, #1
 8005108:	b29a      	uxth	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005112:	b29b      	uxth	r3, r3
 8005114:	3b01      	subs	r3, #1
 8005116:	b29a      	uxth	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800511c:	e0e2      	b.n	80052e4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005124:	2200      	movs	r2, #0
 8005126:	497b      	ldr	r1, [pc, #492]	; (8005314 <HAL_I2C_Mem_Read+0x4c4>)
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f001 ff93 	bl	8007054 <I2C_WaitOnFlagUntilTimeout>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e0e9      	b.n	800530c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005146:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005148:	b672      	cpsid	i
}
 800514a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691a      	ldr	r2, [r3, #16]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005168:	3b01      	subs	r3, #1
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005174:	b29b      	uxth	r3, r3
 8005176:	3b01      	subs	r3, #1
 8005178:	b29a      	uxth	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800517e:	4b66      	ldr	r3, [pc, #408]	; (8005318 <HAL_I2C_Mem_Read+0x4c8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	08db      	lsrs	r3, r3, #3
 8005184:	4a65      	ldr	r2, [pc, #404]	; (800531c <HAL_I2C_Mem_Read+0x4cc>)
 8005186:	fba2 2303 	umull	r2, r3, r2, r3
 800518a:	0a1a      	lsrs	r2, r3, #8
 800518c:	4613      	mov	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	00da      	lsls	r2, r3, #3
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	3b01      	subs	r3, #1
 800519c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d118      	bne.n	80051d6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	f043 0220 	orr.w	r2, r3, #32
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80051c6:	b662      	cpsie	i
}
 80051c8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e09a      	b.n	800530c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	d1d9      	bne.n	8005198 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	691a      	ldr	r2, [r3, #16]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	b2d2      	uxtb	r2, r2
 8005200:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005210:	3b01      	subs	r3, #1
 8005212:	b29a      	uxth	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521c:	b29b      	uxth	r3, r3
 800521e:	3b01      	subs	r3, #1
 8005220:	b29a      	uxth	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005226:	b662      	cpsie	i
}
 8005228:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	691a      	ldr	r2, [r3, #16]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	b2d2      	uxtb	r2, r2
 8005236:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005246:	3b01      	subs	r3, #1
 8005248:	b29a      	uxth	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005252:	b29b      	uxth	r3, r3
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800525c:	e042      	b.n	80052e4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800525e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005260:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f002 f8d2 	bl	800740c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e04c      	b.n	800530c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	691a      	ldr	r2, [r3, #16]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800528e:	3b01      	subs	r3, #1
 8005290:	b29a      	uxth	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529a:	b29b      	uxth	r3, r3
 800529c:	3b01      	subs	r3, #1
 800529e:	b29a      	uxth	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	f003 0304 	and.w	r3, r3, #4
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d118      	bne.n	80052e4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	691a      	ldr	r2, [r3, #16]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	b2d2      	uxtb	r2, r2
 80052be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	1c5a      	adds	r2, r3, #1
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ce:	3b01      	subs	r3, #1
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052da:	b29b      	uxth	r3, r3
 80052dc:	3b01      	subs	r3, #1
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f47f ae94 	bne.w	8005016 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2220      	movs	r2, #32
 80052f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	e000      	b.n	800530c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800530a:	2302      	movs	r3, #2
  }
}
 800530c:	4618      	mov	r0, r3
 800530e:	3728      	adds	r7, #40	; 0x28
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	00010004 	.word	0x00010004
 8005318:	20000000 	.word	0x20000000
 800531c:	14f8b589 	.word	0x14f8b589

08005320 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005338:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005340:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005348:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800534a:	7bfb      	ldrb	r3, [r7, #15]
 800534c:	2b10      	cmp	r3, #16
 800534e:	d003      	beq.n	8005358 <HAL_I2C_EV_IRQHandler+0x38>
 8005350:	7bfb      	ldrb	r3, [r7, #15]
 8005352:	2b40      	cmp	r3, #64	; 0x40
 8005354:	f040 80c1 	bne.w	80054da <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10d      	bne.n	800538e <HAL_I2C_EV_IRQHandler+0x6e>
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005378:	d003      	beq.n	8005382 <HAL_I2C_EV_IRQHandler+0x62>
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005380:	d101      	bne.n	8005386 <HAL_I2C_EV_IRQHandler+0x66>
 8005382:	2301      	movs	r3, #1
 8005384:	e000      	b.n	8005388 <HAL_I2C_EV_IRQHandler+0x68>
 8005386:	2300      	movs	r3, #0
 8005388:	2b01      	cmp	r3, #1
 800538a:	f000 8132 	beq.w	80055f2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00c      	beq.n	80053b2 <HAL_I2C_EV_IRQHandler+0x92>
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	0a5b      	lsrs	r3, r3, #9
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d006      	beq.n	80053b2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f002 f8bc 	bl	8007522 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fd85 	bl	8005eba <I2C_Master_SB>
 80053b0:	e092      	b.n	80054d8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	08db      	lsrs	r3, r3, #3
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d009      	beq.n	80053d2 <HAL_I2C_EV_IRQHandler+0xb2>
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	0a5b      	lsrs	r3, r3, #9
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 fdfa 	bl	8005fc4 <I2C_Master_ADD10>
 80053d0:	e082      	b.n	80054d8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	085b      	lsrs	r3, r3, #1
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d009      	beq.n	80053f2 <HAL_I2C_EV_IRQHandler+0xd2>
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	0a5b      	lsrs	r3, r3, #9
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fe13 	bl	8006016 <I2C_Master_ADDR>
 80053f0:	e072      	b.n	80054d8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	089b      	lsrs	r3, r3, #2
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d03b      	beq.n	8005476 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800540c:	f000 80f3 	beq.w	80055f6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	09db      	lsrs	r3, r3, #7
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00f      	beq.n	800543c <HAL_I2C_EV_IRQHandler+0x11c>
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	0a9b      	lsrs	r3, r3, #10
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b00      	cmp	r3, #0
 8005426:	d009      	beq.n	800543c <HAL_I2C_EV_IRQHandler+0x11c>
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	089b      	lsrs	r3, r3, #2
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d103      	bne.n	800543c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f9f1 	bl	800581c <I2C_MasterTransmit_TXE>
 800543a:	e04d      	b.n	80054d8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	089b      	lsrs	r3, r3, #2
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 80d6 	beq.w	80055f6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	0a5b      	lsrs	r3, r3, #9
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 80cf 	beq.w	80055f6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005458:	7bbb      	ldrb	r3, [r7, #14]
 800545a:	2b21      	cmp	r3, #33	; 0x21
 800545c:	d103      	bne.n	8005466 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fa78 	bl	8005954 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005464:	e0c7      	b.n	80055f6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005466:	7bfb      	ldrb	r3, [r7, #15]
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	f040 80c4 	bne.w	80055f6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fae6 	bl	8005a40 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005474:	e0bf      	b.n	80055f6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005484:	f000 80b7 	beq.w	80055f6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	099b      	lsrs	r3, r3, #6
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00f      	beq.n	80054b4 <HAL_I2C_EV_IRQHandler+0x194>
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	0a9b      	lsrs	r3, r3, #10
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	d009      	beq.n	80054b4 <HAL_I2C_EV_IRQHandler+0x194>
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	089b      	lsrs	r3, r3, #2
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d103      	bne.n	80054b4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fb5f 	bl	8005b70 <I2C_MasterReceive_RXNE>
 80054b2:	e011      	b.n	80054d8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	089b      	lsrs	r3, r3, #2
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 809a 	beq.w	80055f6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	0a5b      	lsrs	r3, r3, #9
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 8093 	beq.w	80055f6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fc08 	bl	8005ce6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054d6:	e08e      	b.n	80055f6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80054d8:	e08d      	b.n	80055f6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d004      	beq.n	80054ec <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	61fb      	str	r3, [r7, #28]
 80054ea:	e007      	b.n	80054fc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	085b      	lsrs	r3, r3, #1
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	d012      	beq.n	800552e <HAL_I2C_EV_IRQHandler+0x20e>
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	0a5b      	lsrs	r3, r3, #9
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00c      	beq.n	800552e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005524:	69b9      	ldr	r1, [r7, #24]
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 ffcc 	bl	80064c4 <I2C_Slave_ADDR>
 800552c:	e066      	b.n	80055fc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	091b      	lsrs	r3, r3, #4
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d009      	beq.n	800554e <HAL_I2C_EV_IRQHandler+0x22e>
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	0a5b      	lsrs	r3, r3, #9
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f001 f806 	bl	8006558 <I2C_Slave_STOPF>
 800554c:	e056      	b.n	80055fc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800554e:	7bbb      	ldrb	r3, [r7, #14]
 8005550:	2b21      	cmp	r3, #33	; 0x21
 8005552:	d002      	beq.n	800555a <HAL_I2C_EV_IRQHandler+0x23a>
 8005554:	7bbb      	ldrb	r3, [r7, #14]
 8005556:	2b29      	cmp	r3, #41	; 0x29
 8005558:	d125      	bne.n	80055a6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	09db      	lsrs	r3, r3, #7
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00f      	beq.n	8005586 <HAL_I2C_EV_IRQHandler+0x266>
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	0a9b      	lsrs	r3, r3, #10
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d009      	beq.n	8005586 <HAL_I2C_EV_IRQHandler+0x266>
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	089b      	lsrs	r3, r3, #2
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d103      	bne.n	8005586 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fee4 	bl	800634c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005584:	e039      	b.n	80055fa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	089b      	lsrs	r3, r3, #2
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d033      	beq.n	80055fa <HAL_I2C_EV_IRQHandler+0x2da>
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	0a5b      	lsrs	r3, r3, #9
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d02d      	beq.n	80055fa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 ff11 	bl	80063c6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055a4:	e029      	b.n	80055fa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	099b      	lsrs	r3, r3, #6
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00f      	beq.n	80055d2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	0a9b      	lsrs	r3, r3, #10
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d009      	beq.n	80055d2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	089b      	lsrs	r3, r3, #2
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d103      	bne.n	80055d2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 ff1b 	bl	8006406 <I2C_SlaveReceive_RXNE>
 80055d0:	e014      	b.n	80055fc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	089b      	lsrs	r3, r3, #2
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00e      	beq.n	80055fc <HAL_I2C_EV_IRQHandler+0x2dc>
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	0a5b      	lsrs	r3, r3, #9
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d008      	beq.n	80055fc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 ff49 	bl	8006482 <I2C_SlaveReceive_BTF>
 80055f0:	e004      	b.n	80055fc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80055f2:	bf00      	nop
 80055f4:	e002      	b.n	80055fc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055f6:	bf00      	nop
 80055f8:	e000      	b.n	80055fc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055fa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80055fc:	3720      	adds	r7, #32
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b08a      	sub	sp, #40	; 0x28
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800561a:	2300      	movs	r3, #0
 800561c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005624:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	0a1b      	lsrs	r3, r3, #8
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d016      	beq.n	8005660 <HAL_I2C_ER_IRQHandler+0x5e>
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	0a1b      	lsrs	r3, r3, #8
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d010      	beq.n	8005660 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	f043 0301 	orr.w	r3, r3, #1
 8005644:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800564e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800565e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	0a5b      	lsrs	r3, r3, #9
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00e      	beq.n	800568a <HAL_I2C_ER_IRQHandler+0x88>
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	0a1b      	lsrs	r3, r3, #8
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d008      	beq.n	800568a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	f043 0302 	orr.w	r3, r3, #2
 800567e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005688:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	0a9b      	lsrs	r3, r3, #10
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d03f      	beq.n	8005716 <HAL_I2C_ER_IRQHandler+0x114>
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	0a1b      	lsrs	r3, r3, #8
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d039      	beq.n	8005716 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80056a2:	7efb      	ldrb	r3, [r7, #27]
 80056a4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ba:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80056bc:	7ebb      	ldrb	r3, [r7, #26]
 80056be:	2b20      	cmp	r3, #32
 80056c0:	d112      	bne.n	80056e8 <HAL_I2C_ER_IRQHandler+0xe6>
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10f      	bne.n	80056e8 <HAL_I2C_ER_IRQHandler+0xe6>
 80056c8:	7cfb      	ldrb	r3, [r7, #19]
 80056ca:	2b21      	cmp	r3, #33	; 0x21
 80056cc:	d008      	beq.n	80056e0 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80056ce:	7cfb      	ldrb	r3, [r7, #19]
 80056d0:	2b29      	cmp	r3, #41	; 0x29
 80056d2:	d005      	beq.n	80056e0 <HAL_I2C_ER_IRQHandler+0xde>
 80056d4:	7cfb      	ldrb	r3, [r7, #19]
 80056d6:	2b28      	cmp	r3, #40	; 0x28
 80056d8:	d106      	bne.n	80056e8 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2b21      	cmp	r3, #33	; 0x21
 80056de:	d103      	bne.n	80056e8 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f001 f869 	bl	80067b8 <I2C_Slave_AF>
 80056e6:	e016      	b.n	8005716 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056f0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	f043 0304 	orr.w	r3, r3, #4
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80056fa:	7efb      	ldrb	r3, [r7, #27]
 80056fc:	2b10      	cmp	r3, #16
 80056fe:	d002      	beq.n	8005706 <HAL_I2C_ER_IRQHandler+0x104>
 8005700:	7efb      	ldrb	r3, [r7, #27]
 8005702:	2b40      	cmp	r3, #64	; 0x40
 8005704:	d107      	bne.n	8005716 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005714:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005716:	6a3b      	ldr	r3, [r7, #32]
 8005718:	0adb      	lsrs	r3, r3, #11
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00e      	beq.n	8005740 <HAL_I2C_ER_IRQHandler+0x13e>
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	0a1b      	lsrs	r3, r3, #8
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d008      	beq.n	8005740 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	f043 0308 	orr.w	r3, r3, #8
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800573e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	2b00      	cmp	r3, #0
 8005744:	d008      	beq.n	8005758 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	431a      	orrs	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f001 f8a4 	bl	80068a0 <I2C_ITError>
  }
}
 8005758:	bf00      	nop
 800575a:	3728      	adds	r7, #40	; 0x28
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	bc80      	pop	{r7}
 8005770:	4770      	bx	lr

08005772 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr

08005784 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	bc80      	pop	{r7}
 8005794:	4770      	bx	lr

08005796 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bc80      	pop	{r7}
 80057a6:	4770      	bx	lr

080057a8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	460b      	mov	r3, r1
 80057b2:	70fb      	strb	r3, [r7, #3]
 80057b4:	4613      	mov	r3, r2
 80057b6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	bc80      	pop	{r7}
 80057c0:	4770      	bx	lr

080057c2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bc80      	pop	{r7}
 80057d2:	4770      	bx	lr

080057d4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bc80      	pop	{r7}
 80057e4:	4770      	bx	lr

080057e6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b083      	sub	sp, #12
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bc80      	pop	{r7}
 80057f6:	4770      	bx	lr

080057f8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	bc80      	pop	{r7}
 8005808:	4770      	bx	lr

0800580a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800580a:	b480      	push	{r7}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005812:	bf00      	nop
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	bc80      	pop	{r7}
 800581a:	4770      	bx	lr

0800581c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800582a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005832:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005838:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583e:	2b00      	cmp	r3, #0
 8005840:	d150      	bne.n	80058e4 <I2C_MasterTransmit_TXE+0xc8>
 8005842:	7bfb      	ldrb	r3, [r7, #15]
 8005844:	2b21      	cmp	r3, #33	; 0x21
 8005846:	d14d      	bne.n	80058e4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b08      	cmp	r3, #8
 800584c:	d01d      	beq.n	800588a <I2C_MasterTransmit_TXE+0x6e>
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2b20      	cmp	r3, #32
 8005852:	d01a      	beq.n	800588a <I2C_MasterTransmit_TXE+0x6e>
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800585a:	d016      	beq.n	800588a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800586a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2211      	movs	r2, #17
 8005870:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2220      	movs	r2, #32
 800587e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7ff ff6c 	bl	8005760 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005888:	e060      	b.n	800594c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005898:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058a8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2220      	movs	r2, #32
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b40      	cmp	r3, #64	; 0x40
 80058c2:	d107      	bne.n	80058d4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff ff81 	bl	80057d4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80058d2:	e03b      	b.n	800594c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7ff ff3f 	bl	8005760 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80058e2:	e033      	b.n	800594c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80058e4:	7bfb      	ldrb	r3, [r7, #15]
 80058e6:	2b21      	cmp	r3, #33	; 0x21
 80058e8:	d005      	beq.n	80058f6 <I2C_MasterTransmit_TXE+0xda>
 80058ea:	7bbb      	ldrb	r3, [r7, #14]
 80058ec:	2b40      	cmp	r3, #64	; 0x40
 80058ee:	d12d      	bne.n	800594c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
 80058f2:	2b22      	cmp	r3, #34	; 0x22
 80058f4:	d12a      	bne.n	800594c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d108      	bne.n	8005912 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800590e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005910:	e01c      	b.n	800594c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b40      	cmp	r3, #64	; 0x40
 800591c:	d103      	bne.n	8005926 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f88e 	bl	8005a40 <I2C_MemoryTransmit_TXE_BTF>
}
 8005924:	e012      	b.n	800594c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	781a      	ldrb	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800594a:	e7ff      	b.n	800594c <I2C_MasterTransmit_TXE+0x130>
 800594c:	bf00      	nop
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b21      	cmp	r3, #33	; 0x21
 800596c:	d164      	bne.n	8005a38 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005972:	b29b      	uxth	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	d012      	beq.n	800599e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	781a      	ldrb	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	1c5a      	adds	r2, r3, #1
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005992:	b29b      	uxth	r3, r3
 8005994:	3b01      	subs	r3, #1
 8005996:	b29a      	uxth	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800599c:	e04c      	b.n	8005a38 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b08      	cmp	r3, #8
 80059a2:	d01d      	beq.n	80059e0 <I2C_MasterTransmit_BTF+0x8c>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	d01a      	beq.n	80059e0 <I2C_MasterTransmit_BTF+0x8c>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059b0:	d016      	beq.n	80059e0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059c0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2211      	movs	r2, #17
 80059c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2220      	movs	r2, #32
 80059d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7ff fec1 	bl	8005760 <HAL_I2C_MasterTxCpltCallback>
}
 80059de:	e02b      	b.n	8005a38 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059ee:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059fe:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b40      	cmp	r3, #64	; 0x40
 8005a18:	d107      	bne.n	8005a2a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7ff fed6 	bl	80057d4 <HAL_I2C_MemTxCpltCallback>
}
 8005a28:	e006      	b.n	8005a38 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7ff fe94 	bl	8005760 <HAL_I2C_MasterTxCpltCallback>
}
 8005a38:	bf00      	nop
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a4e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d11d      	bne.n	8005a94 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d10b      	bne.n	8005a78 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a70:	1c9a      	adds	r2, r3, #2
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8005a76:	e077      	b.n	8005b68 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	121b      	asrs	r3, r3, #8
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a8c:	1c5a      	adds	r2, r3, #1
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005a92:	e069      	b.n	8005b68 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d10b      	bne.n	8005ab4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aac:	1c5a      	adds	r2, r3, #1
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005ab2:	e059      	b.n	8005b68 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d152      	bne.n	8005b62 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005abc:	7bfb      	ldrb	r3, [r7, #15]
 8005abe:	2b22      	cmp	r3, #34	; 0x22
 8005ac0:	d10d      	bne.n	8005ade <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ad0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005adc:	e044      	b.n	8005b68 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d015      	beq.n	8005b14 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
 8005aea:	2b21      	cmp	r3, #33	; 0x21
 8005aec:	d112      	bne.n	8005b14 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	781a      	ldrb	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005b12:	e029      	b.n	8005b68 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d124      	bne.n	8005b68 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005b1e:	7bfb      	ldrb	r3, [r7, #15]
 8005b20:	2b21      	cmp	r3, #33	; 0x21
 8005b22:	d121      	bne.n	8005b68 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b32:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b42:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7ff fe3a 	bl	80057d4 <HAL_I2C_MemTxCpltCallback>
}
 8005b60:	e002      	b.n	8005b68 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7fe ff68 	bl	8004a38 <I2C_Flush_DR>
}
 8005b68:	bf00      	nop
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b22      	cmp	r3, #34	; 0x22
 8005b82:	f040 80ac 	bne.w	8005cde <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2b03      	cmp	r3, #3
 8005b92:	d921      	bls.n	8005bd8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691a      	ldr	r2, [r3, #16]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9e:	b2d2      	uxtb	r2, r2
 8005ba0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	2b03      	cmp	r3, #3
 8005bc2:	f040 808c 	bne.w	8005cde <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bd4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005bd6:	e082      	b.n	8005cde <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d075      	beq.n	8005ccc <I2C_MasterReceive_RXNE+0x15c>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d002      	beq.n	8005bec <I2C_MasterReceive_RXNE+0x7c>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d16f      	bne.n	8005ccc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f001 fbdb 	bl	80073a8 <I2C_WaitOnSTOPRequestThroughIT>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d142      	bne.n	8005c7e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c06:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c16:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691a      	ldr	r2, [r3, #16]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	3b01      	subs	r3, #1
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2220      	movs	r2, #32
 8005c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b40      	cmp	r3, #64	; 0x40
 8005c50:	d10a      	bne.n	8005c68 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7ff fdc0 	bl	80057e6 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005c66:	e03a      	b.n	8005cde <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2212      	movs	r2, #18
 8005c74:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f7ff fd7b 	bl	8005772 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005c7c:	e02f      	b.n	8005cde <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c8c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	691a      	ldr	r2, [r3, #16]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	b2d2      	uxtb	r2, r2
 8005c9a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	3b01      	subs	r3, #1
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f7ff fd97 	bl	80057f8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005cca:	e008      	b.n	8005cde <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cda:	605a      	str	r2, [r3, #4]
}
 8005cdc:	e7ff      	b.n	8005cde <I2C_MasterReceive_RXNE+0x16e>
 8005cde:	bf00      	nop
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b084      	sub	sp, #16
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	d11b      	bne.n	8005d36 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d0c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	691a      	ldr	r2, [r3, #16]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	b2d2      	uxtb	r2, r2
 8005d1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	1c5a      	adds	r2, r3, #1
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005d34:	e0bd      	b.n	8005eb2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	2b03      	cmp	r3, #3
 8005d3e:	d129      	bne.n	8005d94 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d4e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	d00a      	beq.n	8005d6c <I2C_MasterReceive_BTF+0x86>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d007      	beq.n	8005d6c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d6a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	691a      	ldr	r2, [r3, #16]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005d92:	e08e      	b.n	8005eb2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d176      	bne.n	8005e8c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d002      	beq.n	8005daa <I2C_MasterReceive_BTF+0xc4>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2b10      	cmp	r3, #16
 8005da8:	d108      	bne.n	8005dbc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005db8:	601a      	str	r2, [r3, #0]
 8005dba:	e019      	b.n	8005df0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	d002      	beq.n	8005dc8 <I2C_MasterReceive_BTF+0xe2>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d108      	bne.n	8005dda <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	e00a      	b.n	8005df0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b10      	cmp	r3, #16
 8005dde:	d007      	beq.n	8005df0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	691a      	ldr	r2, [r3, #16]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	691a      	ldr	r2, [r3, #16]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	b2d2      	uxtb	r2, r2
 8005e22:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	1c5a      	adds	r2, r3, #1
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	3b01      	subs	r3, #1
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005e4a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b40      	cmp	r3, #64	; 0x40
 8005e5e:	d10a      	bne.n	8005e76 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7ff fcb9 	bl	80057e6 <HAL_I2C_MemRxCpltCallback>
}
 8005e74:	e01d      	b.n	8005eb2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2212      	movs	r2, #18
 8005e82:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff fc74 	bl	8005772 <HAL_I2C_MasterRxCpltCallback>
}
 8005e8a:	e012      	b.n	8005eb2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	691a      	ldr	r2, [r3, #16]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	1c5a      	adds	r2, r3, #1
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005eb2:	bf00      	nop
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b083      	sub	sp, #12
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b40      	cmp	r3, #64	; 0x40
 8005ecc:	d117      	bne.n	8005efe <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d109      	bne.n	8005eea <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	461a      	mov	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ee6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005ee8:	e067      	b.n	8005fba <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	f043 0301 	orr.w	r3, r3, #1
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	611a      	str	r2, [r3, #16]
}
 8005efc:	e05d      	b.n	8005fba <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f06:	d133      	bne.n	8005f70 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b21      	cmp	r3, #33	; 0x21
 8005f12:	d109      	bne.n	8005f28 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f24:	611a      	str	r2, [r3, #16]
 8005f26:	e008      	b.n	8005f3a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	f043 0301 	orr.w	r3, r3, #1
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d004      	beq.n	8005f4c <I2C_Master_SB+0x92>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d108      	bne.n	8005f5e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d032      	beq.n	8005fba <I2C_Master_SB+0x100>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d02d      	beq.n	8005fba <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f6c:	605a      	str	r2, [r3, #4]
}
 8005f6e:	e024      	b.n	8005fba <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10e      	bne.n	8005f96 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	11db      	asrs	r3, r3, #7
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	f003 0306 	and.w	r3, r3, #6
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	f063 030f 	orn	r3, r3, #15
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	611a      	str	r2, [r3, #16]
}
 8005f94:	e011      	b.n	8005fba <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d10d      	bne.n	8005fba <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	11db      	asrs	r3, r3, #7
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	f003 0306 	and.w	r3, r3, #6
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	f063 030e 	orn	r3, r3, #14
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	611a      	str	r2, [r3, #16]
}
 8005fba:	bf00      	nop
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bc80      	pop	{r7}
 8005fc2:	4770      	bx	lr

08005fc4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d004      	beq.n	8005fea <I2C_Master_ADD10+0x26>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d108      	bne.n	8005ffc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00c      	beq.n	800600c <I2C_Master_ADD10+0x48>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d007      	beq.n	800600c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800600a:	605a      	str	r2, [r3, #4]
  }
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	bc80      	pop	{r7}
 8006014:	4770      	bx	lr

08006016 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006016:	b480      	push	{r7}
 8006018:	b091      	sub	sp, #68	; 0x44
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006024:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006032:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b22      	cmp	r3, #34	; 0x22
 800603e:	f040 8174 	bne.w	800632a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10f      	bne.n	800606a <I2C_Master_ADDR+0x54>
 800604a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800604e:	2b40      	cmp	r3, #64	; 0x40
 8006050:	d10b      	bne.n	800606a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006052:	2300      	movs	r3, #0
 8006054:	633b      	str	r3, [r7, #48]	; 0x30
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	633b      	str	r3, [r7, #48]	; 0x30
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	633b      	str	r3, [r7, #48]	; 0x30
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	e16b      	b.n	8006342 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800606e:	2b00      	cmp	r3, #0
 8006070:	d11d      	bne.n	80060ae <I2C_Master_ADDR+0x98>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800607a:	d118      	bne.n	80060ae <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800607c:	2300      	movs	r3, #0
 800607e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006090:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060a0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a6:	1c5a      	adds	r2, r3, #1
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	651a      	str	r2, [r3, #80]	; 0x50
 80060ac:	e149      	b.n	8006342 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d113      	bne.n	80060e0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060b8:	2300      	movs	r3, #0
 80060ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80060cc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	e120      	b.n	8006322 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	f040 808a 	bne.w	8006200 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80060ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060f2:	d137      	bne.n	8006164 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006102:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800610e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006112:	d113      	bne.n	800613c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006122:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006124:	2300      	movs	r3, #0
 8006126:	627b      	str	r3, [r7, #36]	; 0x24
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	627b      	str	r3, [r7, #36]	; 0x24
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	627b      	str	r3, [r7, #36]	; 0x24
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	e0f2      	b.n	8006322 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800613c:	2300      	movs	r3, #0
 800613e:	623b      	str	r3, [r7, #32]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	623b      	str	r3, [r7, #32]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	623b      	str	r3, [r7, #32]
 8006150:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	e0de      	b.n	8006322 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006166:	2b08      	cmp	r3, #8
 8006168:	d02e      	beq.n	80061c8 <I2C_Master_ADDR+0x1b2>
 800616a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616c:	2b20      	cmp	r3, #32
 800616e:	d02b      	beq.n	80061c8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006172:	2b12      	cmp	r3, #18
 8006174:	d102      	bne.n	800617c <I2C_Master_ADDR+0x166>
 8006176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006178:	2b01      	cmp	r3, #1
 800617a:	d125      	bne.n	80061c8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800617c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617e:	2b04      	cmp	r3, #4
 8006180:	d00e      	beq.n	80061a0 <I2C_Master_ADDR+0x18a>
 8006182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006184:	2b02      	cmp	r3, #2
 8006186:	d00b      	beq.n	80061a0 <I2C_Master_ADDR+0x18a>
 8006188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618a:	2b10      	cmp	r3, #16
 800618c:	d008      	beq.n	80061a0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	e007      	b.n	80061b0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061ae:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061b0:	2300      	movs	r3, #0
 80061b2:	61fb      	str	r3, [r7, #28]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	61fb      	str	r3, [r7, #28]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	61fb      	str	r3, [r7, #28]
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	e0ac      	b.n	8006322 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061d6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061d8:	2300      	movs	r3, #0
 80061da:	61bb      	str	r3, [r7, #24]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	61bb      	str	r3, [r7, #24]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	61bb      	str	r3, [r7, #24]
 80061ec:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	e090      	b.n	8006322 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006204:	b29b      	uxth	r3, r3
 8006206:	2b02      	cmp	r3, #2
 8006208:	d158      	bne.n	80062bc <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800620a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620c:	2b04      	cmp	r3, #4
 800620e:	d021      	beq.n	8006254 <I2C_Master_ADDR+0x23e>
 8006210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006212:	2b02      	cmp	r3, #2
 8006214:	d01e      	beq.n	8006254 <I2C_Master_ADDR+0x23e>
 8006216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006218:	2b10      	cmp	r3, #16
 800621a:	d01b      	beq.n	8006254 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800622a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800622c:	2300      	movs	r3, #0
 800622e:	617b      	str	r3, [r7, #20]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	e012      	b.n	800627a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006262:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006264:	2300      	movs	r3, #0
 8006266:	613b      	str	r3, [r7, #16]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	613b      	str	r3, [r7, #16]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	613b      	str	r3, [r7, #16]
 8006278:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006288:	d14b      	bne.n	8006322 <I2C_Master_ADDR+0x30c>
 800628a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006290:	d00b      	beq.n	80062aa <I2C_Master_ADDR+0x294>
 8006292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006294:	2b01      	cmp	r3, #1
 8006296:	d008      	beq.n	80062aa <I2C_Master_ADDR+0x294>
 8006298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629a:	2b08      	cmp	r3, #8
 800629c:	d005      	beq.n	80062aa <I2C_Master_ADDR+0x294>
 800629e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a0:	2b10      	cmp	r3, #16
 80062a2:	d002      	beq.n	80062aa <I2C_Master_ADDR+0x294>
 80062a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a6:	2b20      	cmp	r3, #32
 80062a8:	d13b      	bne.n	8006322 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	685a      	ldr	r2, [r3, #4]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062b8:	605a      	str	r2, [r3, #4]
 80062ba:	e032      	b.n	8006322 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062ca:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062da:	d117      	bne.n	800630c <I2C_Master_ADDR+0x2f6>
 80062dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062e2:	d00b      	beq.n	80062fc <I2C_Master_ADDR+0x2e6>
 80062e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d008      	beq.n	80062fc <I2C_Master_ADDR+0x2e6>
 80062ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ec:	2b08      	cmp	r3, #8
 80062ee:	d005      	beq.n	80062fc <I2C_Master_ADDR+0x2e6>
 80062f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f2:	2b10      	cmp	r3, #16
 80062f4:	d002      	beq.n	80062fc <I2C_Master_ADDR+0x2e6>
 80062f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f8:	2b20      	cmp	r3, #32
 80062fa:	d107      	bne.n	800630c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	685a      	ldr	r2, [r3, #4]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800630a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800630c:	2300      	movs	r3, #0
 800630e:	60fb      	str	r3, [r7, #12]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	60fb      	str	r3, [r7, #12]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006328:	e00b      	b.n	8006342 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800632a:	2300      	movs	r3, #0
 800632c:	60bb      	str	r3, [r7, #8]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	60bb      	str	r3, [r7, #8]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	60bb      	str	r3, [r7, #8]
 800633e:	68bb      	ldr	r3, [r7, #8]
}
 8006340:	e7ff      	b.n	8006342 <I2C_Master_ADDR+0x32c>
 8006342:	bf00      	nop
 8006344:	3744      	adds	r7, #68	; 0x44
 8006346:	46bd      	mov	sp, r7
 8006348:	bc80      	pop	{r7}
 800634a:	4770      	bx	lr

0800634c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800635a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006360:	b29b      	uxth	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d02b      	beq.n	80063be <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	781a      	ldrb	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006376:	1c5a      	adds	r2, r3, #1
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006380:	b29b      	uxth	r3, r3
 8006382:	3b01      	subs	r3, #1
 8006384:	b29a      	uxth	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800638e:	b29b      	uxth	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	d114      	bne.n	80063be <I2C_SlaveTransmit_TXE+0x72>
 8006394:	7bfb      	ldrb	r3, [r7, #15]
 8006396:	2b29      	cmp	r3, #41	; 0x29
 8006398:	d111      	bne.n	80063be <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063a8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2221      	movs	r2, #33	; 0x21
 80063ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2228      	movs	r2, #40	; 0x28
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f7ff f9e3 	bl	8005784 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80063be:	bf00      	nop
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d011      	beq.n	80063fc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063dc:	781a      	ldrb	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	3b01      	subs	r3, #1
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	bc80      	pop	{r7}
 8006404:	4770      	bx	lr

08006406 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b084      	sub	sp, #16
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006414:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800641a:	b29b      	uxth	r3, r3
 800641c:	2b00      	cmp	r3, #0
 800641e:	d02c      	beq.n	800647a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	691a      	ldr	r2, [r3, #16]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642a:	b2d2      	uxtb	r2, r2
 800642c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800643c:	b29b      	uxth	r3, r3
 800643e:	3b01      	subs	r3, #1
 8006440:	b29a      	uxth	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800644a:	b29b      	uxth	r3, r3
 800644c:	2b00      	cmp	r3, #0
 800644e:	d114      	bne.n	800647a <I2C_SlaveReceive_RXNE+0x74>
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	2b2a      	cmp	r3, #42	; 0x2a
 8006454:	d111      	bne.n	800647a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006464:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2222      	movs	r2, #34	; 0x22
 800646a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2228      	movs	r2, #40	; 0x28
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f7ff f98e 	bl	8005796 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800647a:	bf00      	nop
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006482:	b480      	push	{r7}
 8006484:	b083      	sub	sp, #12
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800648e:	b29b      	uxth	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d012      	beq.n	80064ba <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	691a      	ldr	r2, [r3, #16]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649e:	b2d2      	uxtb	r2, r2
 80064a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	3b01      	subs	r3, #1
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80064ba:	bf00      	nop
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	bc80      	pop	{r7}
 80064c2:	4770      	bx	lr

080064c4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80064ce:	2300      	movs	r3, #0
 80064d0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80064de:	2b28      	cmp	r3, #40	; 0x28
 80064e0:	d127      	bne.n	8006532 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064f0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	089b      	lsrs	r3, r3, #2
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80064fe:	2301      	movs	r3, #1
 8006500:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	09db      	lsrs	r3, r3, #7
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b00      	cmp	r3, #0
 800650c:	d103      	bne.n	8006516 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	81bb      	strh	r3, [r7, #12]
 8006514:	e002      	b.n	800651c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006524:	89ba      	ldrh	r2, [r7, #12]
 8006526:	7bfb      	ldrb	r3, [r7, #15]
 8006528:	4619      	mov	r1, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7ff f93c 	bl	80057a8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006530:	e00e      	b.n	8006550 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006532:	2300      	movs	r3, #0
 8006534:	60bb      	str	r3, [r7, #8]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	60bb      	str	r3, [r7, #8]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	60bb      	str	r3, [r7, #8]
 8006546:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006550:	bf00      	nop
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006566:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006576:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006578:	2300      	movs	r3, #0
 800657a:	60bb      	str	r3, [r7, #8]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	60bb      	str	r3, [r7, #8]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0201 	orr.w	r2, r2, #1
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065a4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065b4:	d172      	bne.n	800669c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80065b6:	7bfb      	ldrb	r3, [r7, #15]
 80065b8:	2b22      	cmp	r3, #34	; 0x22
 80065ba:	d002      	beq.n	80065c2 <I2C_Slave_STOPF+0x6a>
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
 80065be:	2b2a      	cmp	r3, #42	; 0x2a
 80065c0:	d135      	bne.n	800662e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d005      	beq.n	80065e6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065de:	f043 0204 	orr.w	r2, r3, #4
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fc fdc8 	bl	8003190 <HAL_DMA_GetState>
 8006600:	4603      	mov	r3, r0
 8006602:	2b01      	cmp	r3, #1
 8006604:	d049      	beq.n	800669a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660a:	4a69      	ldr	r2, [pc, #420]	; (80067b0 <I2C_Slave_STOPF+0x258>)
 800660c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006612:	4618      	mov	r0, r3
 8006614:	f7fc fcb4 	bl	8002f80 <HAL_DMA_Abort_IT>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d03d      	beq.n	800669a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006628:	4610      	mov	r0, r2
 800662a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800662c:	e035      	b.n	800669a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	b29a      	uxth	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006640:	b29b      	uxth	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d005      	beq.n	8006652 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	f043 0204 	orr.w	r2, r3, #4
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006660:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006666:	4618      	mov	r0, r3
 8006668:	f7fc fd92 	bl	8003190 <HAL_DMA_GetState>
 800666c:	4603      	mov	r3, r0
 800666e:	2b01      	cmp	r3, #1
 8006670:	d014      	beq.n	800669c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006676:	4a4e      	ldr	r2, [pc, #312]	; (80067b0 <I2C_Slave_STOPF+0x258>)
 8006678:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667e:	4618      	mov	r0, r3
 8006680:	f7fc fc7e 	bl	8002f80 <HAL_DMA_Abort_IT>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d008      	beq.n	800669c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800668e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006694:	4610      	mov	r0, r2
 8006696:	4798      	blx	r3
 8006698:	e000      	b.n	800669c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800669a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d03e      	beq.n	8006724 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	695b      	ldr	r3, [r3, #20]
 80066ac:	f003 0304 	and.w	r3, r3, #4
 80066b0:	2b04      	cmp	r3, #4
 80066b2:	d112      	bne.n	80066da <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	691a      	ldr	r2, [r3, #16]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	b2d2      	uxtb	r2, r2
 80066c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	3b01      	subs	r3, #1
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e4:	2b40      	cmp	r3, #64	; 0x40
 80066e6:	d112      	bne.n	800670e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	691a      	ldr	r2, [r3, #16]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f2:	b2d2      	uxtb	r2, r2
 80066f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	1c5a      	adds	r2, r3, #1
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006704:	b29b      	uxth	r3, r3
 8006706:	3b01      	subs	r3, #1
 8006708:	b29a      	uxth	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006712:	b29b      	uxth	r3, r3
 8006714:	2b00      	cmp	r3, #0
 8006716:	d005      	beq.n	8006724 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671c:	f043 0204 	orr.w	r2, r3, #4
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 f8b7 	bl	80068a0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006732:	e039      	b.n	80067a8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006734:	7bfb      	ldrb	r3, [r7, #15]
 8006736:	2b2a      	cmp	r3, #42	; 0x2a
 8006738:	d109      	bne.n	800674e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2228      	movs	r2, #40	; 0x28
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7ff f824 	bl	8005796 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b28      	cmp	r3, #40	; 0x28
 8006758:	d111      	bne.n	800677e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a15      	ldr	r2, [pc, #84]	; (80067b4 <I2C_Slave_STOPF+0x25c>)
 800675e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2220      	movs	r2, #32
 800676a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7ff f823 	bl	80057c2 <HAL_I2C_ListenCpltCallback>
}
 800677c:	e014      	b.n	80067a8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006782:	2b22      	cmp	r3, #34	; 0x22
 8006784:	d002      	beq.n	800678c <I2C_Slave_STOPF+0x234>
 8006786:	7bfb      	ldrb	r3, [r7, #15]
 8006788:	2b22      	cmp	r3, #34	; 0x22
 800678a:	d10d      	bne.n	80067a8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2220      	movs	r2, #32
 8006796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7fe fff7 	bl	8005796 <HAL_I2C_SlaveRxCpltCallback>
}
 80067a8:	bf00      	nop
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	08006f05 	.word	0x08006f05
 80067b4:	ffff0000 	.word	0xffff0000

080067b8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067c6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067cc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	d002      	beq.n	80067da <I2C_Slave_AF+0x22>
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2b20      	cmp	r3, #32
 80067d8:	d129      	bne.n	800682e <I2C_Slave_AF+0x76>
 80067da:	7bfb      	ldrb	r3, [r7, #15]
 80067dc:	2b28      	cmp	r3, #40	; 0x28
 80067de:	d126      	bne.n	800682e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a2e      	ldr	r2, [pc, #184]	; (800689c <I2C_Slave_AF+0xe4>)
 80067e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80067f4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067fe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800680e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2220      	movs	r2, #32
 800681a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7fe ffcb 	bl	80057c2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800682c:	e031      	b.n	8006892 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800682e:	7bfb      	ldrb	r3, [r7, #15]
 8006830:	2b21      	cmp	r3, #33	; 0x21
 8006832:	d129      	bne.n	8006888 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a19      	ldr	r2, [pc, #100]	; (800689c <I2C_Slave_AF+0xe4>)
 8006838:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2221      	movs	r2, #33	; 0x21
 800683e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2220      	movs	r2, #32
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800685e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006868:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006878:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f7fe f8dc 	bl	8004a38 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7fe ff7f 	bl	8005784 <HAL_I2C_SlaveTxCpltCallback>
}
 8006886:	e004      	b.n	8006892 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006890:	615a      	str	r2, [r3, #20]
}
 8006892:	bf00      	nop
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	ffff0000 	.word	0xffff0000

080068a0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068b6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80068b8:	7bbb      	ldrb	r3, [r7, #14]
 80068ba:	2b10      	cmp	r3, #16
 80068bc:	d002      	beq.n	80068c4 <I2C_ITError+0x24>
 80068be:	7bbb      	ldrb	r3, [r7, #14]
 80068c0:	2b40      	cmp	r3, #64	; 0x40
 80068c2:	d10a      	bne.n	80068da <I2C_ITError+0x3a>
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
 80068c6:	2b22      	cmp	r3, #34	; 0x22
 80068c8:	d107      	bne.n	80068da <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068d8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80068da:	7bfb      	ldrb	r3, [r7, #15]
 80068dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80068e0:	2b28      	cmp	r3, #40	; 0x28
 80068e2:	d107      	bne.n	80068f4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2228      	movs	r2, #40	; 0x28
 80068ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80068f2:	e015      	b.n	8006920 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006902:	d00a      	beq.n	800691a <I2C_ITError+0x7a>
 8006904:	7bfb      	ldrb	r3, [r7, #15]
 8006906:	2b60      	cmp	r3, #96	; 0x60
 8006908:	d007      	beq.n	800691a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2220      	movs	r2, #32
 800690e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800692a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800692e:	d162      	bne.n	80069f6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800693e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006944:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b01      	cmp	r3, #1
 800694c:	d020      	beq.n	8006990 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006952:	4a6a      	ldr	r2, [pc, #424]	; (8006afc <I2C_ITError+0x25c>)
 8006954:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695a:	4618      	mov	r0, r3
 800695c:	f7fc fb10 	bl	8002f80 <HAL_DMA_Abort_IT>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 8089 	beq.w	8006a7a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f022 0201 	bic.w	r2, r2, #1
 8006976:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2220      	movs	r2, #32
 800697c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800698a:	4610      	mov	r0, r2
 800698c:	4798      	blx	r3
 800698e:	e074      	b.n	8006a7a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006994:	4a59      	ldr	r2, [pc, #356]	; (8006afc <I2C_ITError+0x25c>)
 8006996:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699c:	4618      	mov	r0, r3
 800699e:	f7fc faef 	bl	8002f80 <HAL_DMA_Abort_IT>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d068      	beq.n	8006a7a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b2:	2b40      	cmp	r3, #64	; 0x40
 80069b4:	d10b      	bne.n	80069ce <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	691a      	ldr	r2, [r3, #16]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c0:	b2d2      	uxtb	r2, r2
 80069c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 0201 	bic.w	r2, r2, #1
 80069dc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2220      	movs	r2, #32
 80069e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069f0:	4610      	mov	r0, r2
 80069f2:	4798      	blx	r3
 80069f4:	e041      	b.n	8006a7a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b60      	cmp	r3, #96	; 0x60
 8006a00:	d125      	bne.n	8006a4e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1a:	2b40      	cmp	r3, #64	; 0x40
 8006a1c:	d10b      	bne.n	8006a36 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	691a      	ldr	r2, [r3, #16]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a28:	b2d2      	uxtb	r2, r2
 8006a2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f022 0201 	bic.w	r2, r2, #1
 8006a44:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7fe fedf 	bl	800580a <HAL_I2C_AbortCpltCallback>
 8006a4c:	e015      	b.n	8006a7a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	695b      	ldr	r3, [r3, #20]
 8006a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a58:	2b40      	cmp	r3, #64	; 0x40
 8006a5a:	d10b      	bne.n	8006a74 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	691a      	ldr	r2, [r3, #16]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a66:	b2d2      	uxtb	r2, r2
 8006a68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6e:	1c5a      	adds	r2, r3, #1
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7fe febf 	bl	80057f8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10e      	bne.n	8006aa8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d109      	bne.n	8006aa8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d104      	bne.n	8006aa8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d007      	beq.n	8006ab8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ab6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006abe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac4:	f003 0304 	and.w	r3, r3, #4
 8006ac8:	2b04      	cmp	r3, #4
 8006aca:	d113      	bne.n	8006af4 <I2C_ITError+0x254>
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
 8006ace:	2b28      	cmp	r3, #40	; 0x28
 8006ad0:	d110      	bne.n	8006af4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a0a      	ldr	r2, [pc, #40]	; (8006b00 <I2C_ITError+0x260>)
 8006ad6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7fe fe67 	bl	80057c2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006af4:	bf00      	nop
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	08006f05 	.word	0x08006f05
 8006b00:	ffff0000 	.word	0xffff0000

08006b04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b088      	sub	sp, #32
 8006b08:	af02      	add	r7, sp, #8
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	607a      	str	r2, [r7, #4]
 8006b0e:	603b      	str	r3, [r7, #0]
 8006b10:	460b      	mov	r3, r1
 8006b12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	2b08      	cmp	r3, #8
 8006b1e:	d006      	beq.n	8006b2e <I2C_MasterRequestWrite+0x2a>
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d003      	beq.n	8006b2e <I2C_MasterRequestWrite+0x2a>
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b2c:	d108      	bne.n	8006b40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	e00b      	b.n	8006b58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b44:	2b12      	cmp	r3, #18
 8006b46:	d107      	bne.n	8006b58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 fa75 	bl	8007054 <I2C_WaitOnFlagUntilTimeout>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00d      	beq.n	8006b8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b7e:	d103      	bne.n	8006b88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e035      	b.n	8006bf8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b94:	d108      	bne.n	8006ba8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b96:	897b      	ldrh	r3, [r7, #10]
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ba4:	611a      	str	r2, [r3, #16]
 8006ba6:	e01b      	b.n	8006be0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006ba8:	897b      	ldrh	r3, [r7, #10]
 8006baa:	11db      	asrs	r3, r3, #7
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	f003 0306 	and.w	r3, r3, #6
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	f063 030f 	orn	r3, r3, #15
 8006bb8:	b2da      	uxtb	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	490e      	ldr	r1, [pc, #56]	; (8006c00 <I2C_MasterRequestWrite+0xfc>)
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 fabe 	bl	8007148 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e010      	b.n	8006bf8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006bd6:	897b      	ldrh	r3, [r7, #10]
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	4907      	ldr	r1, [pc, #28]	; (8006c04 <I2C_MasterRequestWrite+0x100>)
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f000 faae 	bl	8007148 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d001      	beq.n	8006bf6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e000      	b.n	8006bf8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3718      	adds	r7, #24
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	00010008 	.word	0x00010008
 8006c04:	00010002 	.word	0x00010002

08006c08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b088      	sub	sp, #32
 8006c0c:	af02      	add	r7, sp, #8
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	4608      	mov	r0, r1
 8006c12:	4611      	mov	r1, r2
 8006c14:	461a      	mov	r2, r3
 8006c16:	4603      	mov	r3, r0
 8006c18:	817b      	strh	r3, [r7, #10]
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	813b      	strh	r3, [r7, #8]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	6a3b      	ldr	r3, [r7, #32]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 fa08 	bl	8007054 <I2C_WaitOnFlagUntilTimeout>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00d      	beq.n	8006c66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c58:	d103      	bne.n	8006c62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e05f      	b.n	8006d26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c66:	897b      	ldrh	r3, [r7, #10]
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	6a3a      	ldr	r2, [r7, #32]
 8006c7a:	492d      	ldr	r1, [pc, #180]	; (8006d30 <I2C_RequestMemoryWrite+0x128>)
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f000 fa63 	bl	8007148 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d001      	beq.n	8006c8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e04c      	b.n	8006d26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	617b      	str	r3, [r7, #20]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	617b      	str	r3, [r7, #20]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	617b      	str	r3, [r7, #20]
 8006ca0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ca4:	6a39      	ldr	r1, [r7, #32]
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f000 faee 	bl	8007288 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00d      	beq.n	8006cce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	2b04      	cmp	r3, #4
 8006cb8:	d107      	bne.n	8006cca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e02b      	b.n	8006d26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006cce:	88fb      	ldrh	r3, [r7, #6]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d105      	bne.n	8006ce0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006cd4:	893b      	ldrh	r3, [r7, #8]
 8006cd6:	b2da      	uxtb	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	611a      	str	r2, [r3, #16]
 8006cde:	e021      	b.n	8006d24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ce0:	893b      	ldrh	r3, [r7, #8]
 8006ce2:	0a1b      	lsrs	r3, r3, #8
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cf0:	6a39      	ldr	r1, [r7, #32]
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f000 fac8 	bl	8007288 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00d      	beq.n	8006d1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d02:	2b04      	cmp	r3, #4
 8006d04:	d107      	bne.n	8006d16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e005      	b.n	8006d26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d1a:	893b      	ldrh	r3, [r7, #8]
 8006d1c:	b2da      	uxtb	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3718      	adds	r7, #24
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	00010002 	.word	0x00010002

08006d34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b088      	sub	sp, #32
 8006d38:	af02      	add	r7, sp, #8
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	4608      	mov	r0, r1
 8006d3e:	4611      	mov	r1, r2
 8006d40:	461a      	mov	r2, r3
 8006d42:	4603      	mov	r3, r0
 8006d44:	817b      	strh	r3, [r7, #10]
 8006d46:	460b      	mov	r3, r1
 8006d48:	813b      	strh	r3, [r7, #8]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f000 f96a 	bl	8007054 <I2C_WaitOnFlagUntilTimeout>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00d      	beq.n	8006da2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d94:	d103      	bne.n	8006d9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e0aa      	b.n	8006ef8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006da2:	897b      	ldrh	r3, [r7, #10]
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	461a      	mov	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006db0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db4:	6a3a      	ldr	r2, [r7, #32]
 8006db6:	4952      	ldr	r1, [pc, #328]	; (8006f00 <I2C_RequestMemoryRead+0x1cc>)
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f000 f9c5 	bl	8007148 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d001      	beq.n	8006dc8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e097      	b.n	8006ef8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dc8:	2300      	movs	r3, #0
 8006dca:	617b      	str	r3, [r7, #20]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	617b      	str	r3, [r7, #20]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	617b      	str	r3, [r7, #20]
 8006ddc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006de0:	6a39      	ldr	r1, [r7, #32]
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f000 fa50 	bl	8007288 <I2C_WaitOnTXEFlagUntilTimeout>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00d      	beq.n	8006e0a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	d107      	bne.n	8006e06 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e076      	b.n	8006ef8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e0a:	88fb      	ldrh	r3, [r7, #6]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d105      	bne.n	8006e1c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e10:	893b      	ldrh	r3, [r7, #8]
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	611a      	str	r2, [r3, #16]
 8006e1a:	e021      	b.n	8006e60 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006e1c:	893b      	ldrh	r3, [r7, #8]
 8006e1e:	0a1b      	lsrs	r3, r3, #8
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e2c:	6a39      	ldr	r1, [r7, #32]
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 fa2a 	bl	8007288 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00d      	beq.n	8006e56 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	d107      	bne.n	8006e52 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e050      	b.n	8006ef8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e56:	893b      	ldrh	r3, [r7, #8]
 8006e58:	b2da      	uxtb	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e62:	6a39      	ldr	r1, [r7, #32]
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f000 fa0f 	bl	8007288 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00d      	beq.n	8006e8c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	d107      	bne.n	8006e88 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e035      	b.n	8006ef8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 f8d3 	bl	8007054 <I2C_WaitOnFlagUntilTimeout>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00d      	beq.n	8006ed0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ec2:	d103      	bne.n	8006ecc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006eca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e013      	b.n	8006ef8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006ed0:	897b      	ldrh	r3, [r7, #10]
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	f043 0301 	orr.w	r3, r3, #1
 8006ed8:	b2da      	uxtb	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	6a3a      	ldr	r2, [r7, #32]
 8006ee4:	4906      	ldr	r1, [pc, #24]	; (8006f00 <I2C_RequestMemoryRead+0x1cc>)
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	f000 f92e 	bl	8007148 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e000      	b.n	8006ef8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3718      	adds	r7, #24
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	00010002 	.word	0x00010002

08006f04 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f14:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f1c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006f1e:	4b4b      	ldr	r3, [pc, #300]	; (800704c <I2C_DMAAbort+0x148>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	08db      	lsrs	r3, r3, #3
 8006f24:	4a4a      	ldr	r2, [pc, #296]	; (8007050 <I2C_DMAAbort+0x14c>)
 8006f26:	fba2 2303 	umull	r2, r3, r2, r3
 8006f2a:	0a1a      	lsrs	r2, r3, #8
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	00da      	lsls	r2, r3, #3
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d106      	bne.n	8006f4c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f42:	f043 0220 	orr.w	r2, r3, #32
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006f4a:	e00a      	b.n	8006f62 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f60:	d0ea      	beq.n	8006f38 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f6e:	2200      	movs	r2, #0
 8006f70:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d003      	beq.n	8006f82 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7e:	2200      	movs	r2, #0
 8006f80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f90:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	2200      	movs	r2, #0
 8006f96:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d003      	beq.n	8006fa8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d003      	beq.n	8006fb8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0201 	bic.w	r2, r2, #1
 8006fc6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	2b60      	cmp	r3, #96	; 0x60
 8006fd2:	d10e      	bne.n	8006ff2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006fea:	6978      	ldr	r0, [r7, #20]
 8006fec:	f7fe fc0d 	bl	800580a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ff0:	e027      	b.n	8007042 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ff2:	7cfb      	ldrb	r3, [r7, #19]
 8006ff4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006ff8:	2b28      	cmp	r3, #40	; 0x28
 8006ffa:	d117      	bne.n	800702c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f042 0201 	orr.w	r2, r2, #1
 800700a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800701a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	2200      	movs	r2, #0
 8007020:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	2228      	movs	r2, #40	; 0x28
 8007026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800702a:	e007      	b.n	800703c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	2220      	movs	r2, #32
 8007030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800703c:	6978      	ldr	r0, [r7, #20]
 800703e:	f7fe fbdb 	bl	80057f8 <HAL_I2C_ErrorCallback>
}
 8007042:	bf00      	nop
 8007044:	3718      	adds	r7, #24
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	20000000 	.word	0x20000000
 8007050:	14f8b589 	.word	0x14f8b589

08007054 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	603b      	str	r3, [r7, #0]
 8007060:	4613      	mov	r3, r2
 8007062:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007064:	e048      	b.n	80070f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706c:	d044      	beq.n	80070f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800706e:	f7fb fd7d 	bl	8002b6c <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	683a      	ldr	r2, [r7, #0]
 800707a:	429a      	cmp	r2, r3
 800707c:	d302      	bcc.n	8007084 <I2C_WaitOnFlagUntilTimeout+0x30>
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d139      	bne.n	80070f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	0c1b      	lsrs	r3, r3, #16
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b01      	cmp	r3, #1
 800708c:	d10d      	bne.n	80070aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	695b      	ldr	r3, [r3, #20]
 8007094:	43da      	mvns	r2, r3
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	4013      	ands	r3, r2
 800709a:	b29b      	uxth	r3, r3
 800709c:	2b00      	cmp	r3, #0
 800709e:	bf0c      	ite	eq
 80070a0:	2301      	moveq	r3, #1
 80070a2:	2300      	movne	r3, #0
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	461a      	mov	r2, r3
 80070a8:	e00c      	b.n	80070c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	43da      	mvns	r2, r3
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	4013      	ands	r3, r2
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	bf0c      	ite	eq
 80070bc:	2301      	moveq	r3, #1
 80070be:	2300      	movne	r3, #0
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	461a      	mov	r2, r3
 80070c4:	79fb      	ldrb	r3, [r7, #7]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d116      	bne.n	80070f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2220      	movs	r2, #32
 80070d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e4:	f043 0220 	orr.w	r2, r3, #32
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e023      	b.n	8007140 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	0c1b      	lsrs	r3, r3, #16
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d10d      	bne.n	800711e <I2C_WaitOnFlagUntilTimeout+0xca>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	43da      	mvns	r2, r3
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	4013      	ands	r3, r2
 800710e:	b29b      	uxth	r3, r3
 8007110:	2b00      	cmp	r3, #0
 8007112:	bf0c      	ite	eq
 8007114:	2301      	moveq	r3, #1
 8007116:	2300      	movne	r3, #0
 8007118:	b2db      	uxtb	r3, r3
 800711a:	461a      	mov	r2, r3
 800711c:	e00c      	b.n	8007138 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	43da      	mvns	r2, r3
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	4013      	ands	r3, r2
 800712a:	b29b      	uxth	r3, r3
 800712c:	2b00      	cmp	r3, #0
 800712e:	bf0c      	ite	eq
 8007130:	2301      	moveq	r3, #1
 8007132:	2300      	movne	r3, #0
 8007134:	b2db      	uxtb	r3, r3
 8007136:	461a      	mov	r2, r3
 8007138:	79fb      	ldrb	r3, [r7, #7]
 800713a:	429a      	cmp	r2, r3
 800713c:	d093      	beq.n	8007066 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
 8007154:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007156:	e071      	b.n	800723c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007166:	d123      	bne.n	80071b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007176:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007180:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2220      	movs	r2, #32
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719c:	f043 0204 	orr.w	r2, r3, #4
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	e067      	b.n	8007280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b6:	d041      	beq.n	800723c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071b8:	f7fb fcd8 	bl	8002b6c <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d302      	bcc.n	80071ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d136      	bne.n	800723c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	0c1b      	lsrs	r3, r3, #16
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d10c      	bne.n	80071f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	43da      	mvns	r2, r3
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	4013      	ands	r3, r2
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	bf14      	ite	ne
 80071ea:	2301      	movne	r3, #1
 80071ec:	2300      	moveq	r3, #0
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	e00b      	b.n	800720a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	43da      	mvns	r2, r3
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	4013      	ands	r3, r2
 80071fe:	b29b      	uxth	r3, r3
 8007200:	2b00      	cmp	r3, #0
 8007202:	bf14      	ite	ne
 8007204:	2301      	movne	r3, #1
 8007206:	2300      	moveq	r3, #0
 8007208:	b2db      	uxtb	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	d016      	beq.n	800723c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2220      	movs	r2, #32
 8007218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007228:	f043 0220 	orr.w	r2, r3, #32
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e021      	b.n	8007280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	0c1b      	lsrs	r3, r3, #16
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b01      	cmp	r3, #1
 8007244:	d10c      	bne.n	8007260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	43da      	mvns	r2, r3
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	4013      	ands	r3, r2
 8007252:	b29b      	uxth	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	bf14      	ite	ne
 8007258:	2301      	movne	r3, #1
 800725a:	2300      	moveq	r3, #0
 800725c:	b2db      	uxtb	r3, r3
 800725e:	e00b      	b.n	8007278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	43da      	mvns	r2, r3
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	4013      	ands	r3, r2
 800726c:	b29b      	uxth	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	bf14      	ite	ne
 8007272:	2301      	movne	r3, #1
 8007274:	2300      	moveq	r3, #0
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b00      	cmp	r3, #0
 800727a:	f47f af6d 	bne.w	8007158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007294:	e034      	b.n	8007300 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f000 f915 	bl	80074c6 <I2C_IsAcknowledgeFailed>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e034      	b.n	8007310 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ac:	d028      	beq.n	8007300 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ae:	f7fb fc5d 	bl	8002b6c <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d302      	bcc.n	80072c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d11d      	bne.n	8007300 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ce:	2b80      	cmp	r3, #128	; 0x80
 80072d0:	d016      	beq.n	8007300 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2220      	movs	r2, #32
 80072dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ec:	f043 0220 	orr.w	r2, r3, #32
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e007      	b.n	8007310 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800730a:	2b80      	cmp	r3, #128	; 0x80
 800730c:	d1c3      	bne.n	8007296 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007324:	e034      	b.n	8007390 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f000 f8cd 	bl	80074c6 <I2C_IsAcknowledgeFailed>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e034      	b.n	80073a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800733c:	d028      	beq.n	8007390 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800733e:	f7fb fc15 	bl	8002b6c <HAL_GetTick>
 8007342:	4602      	mov	r2, r0
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	429a      	cmp	r2, r3
 800734c:	d302      	bcc.n	8007354 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d11d      	bne.n	8007390 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	f003 0304 	and.w	r3, r3, #4
 800735e:	2b04      	cmp	r3, #4
 8007360:	d016      	beq.n	8007390 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2220      	movs	r2, #32
 800736c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737c:	f043 0220 	orr.w	r2, r3, #32
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	e007      	b.n	80073a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	f003 0304 	and.w	r3, r3, #4
 800739a:	2b04      	cmp	r3, #4
 800739c:	d1c3      	bne.n	8007326 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80073b4:	4b13      	ldr	r3, [pc, #76]	; (8007404 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	08db      	lsrs	r3, r3, #3
 80073ba:	4a13      	ldr	r2, [pc, #76]	; (8007408 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80073bc:	fba2 2303 	umull	r2, r3, r2, r3
 80073c0:	0a1a      	lsrs	r2, r3, #8
 80073c2:	4613      	mov	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4413      	add	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3b01      	subs	r3, #1
 80073ce:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d107      	bne.n	80073e6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073da:	f043 0220 	orr.w	r2, r3, #32
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e008      	b.n	80073f8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073f4:	d0e9      	beq.n	80073ca <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bc80      	pop	{r7}
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	20000000 	.word	0x20000000
 8007408:	14f8b589 	.word	0x14f8b589

0800740c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007418:	e049      	b.n	80074ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	695b      	ldr	r3, [r3, #20]
 8007420:	f003 0310 	and.w	r3, r3, #16
 8007424:	2b10      	cmp	r3, #16
 8007426:	d119      	bne.n	800745c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f06f 0210 	mvn.w	r2, #16
 8007430:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2220      	movs	r2, #32
 800743c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e030      	b.n	80074be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800745c:	f7fb fb86 	bl	8002b6c <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	429a      	cmp	r2, r3
 800746a:	d302      	bcc.n	8007472 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d11d      	bne.n	80074ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747c:	2b40      	cmp	r3, #64	; 0x40
 800747e:	d016      	beq.n	80074ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2220      	movs	r2, #32
 800748a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749a:	f043 0220 	orr.w	r2, r3, #32
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e007      	b.n	80074be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	695b      	ldr	r3, [r3, #20]
 80074b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b8:	2b40      	cmp	r3, #64	; 0x40
 80074ba:	d1ae      	bne.n	800741a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80074c6:	b480      	push	{r7}
 80074c8:	b083      	sub	sp, #12
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074dc:	d11b      	bne.n	8007516 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2220      	movs	r2, #32
 80074f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007502:	f043 0204 	orr.w	r2, r3, #4
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e000      	b.n	8007518 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	bc80      	pop	{r7}
 8007520:	4770      	bx	lr

08007522 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007522:	b480      	push	{r7}
 8007524:	b083      	sub	sp, #12
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007532:	d103      	bne.n	800753c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800753a:	e007      	b.n	800754c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007540:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007544:	d102      	bne.n	800754c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2208      	movs	r2, #8
 800754a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	bc80      	pop	{r7}
 8007554:	4770      	bx	lr
	...

08007558 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e304      	b.n	8007b74 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	2b00      	cmp	r3, #0
 8007574:	f000 8087 	beq.w	8007686 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007578:	4b92      	ldr	r3, [pc, #584]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	f003 030c 	and.w	r3, r3, #12
 8007580:	2b04      	cmp	r3, #4
 8007582:	d00c      	beq.n	800759e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007584:	4b8f      	ldr	r3, [pc, #572]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	f003 030c 	and.w	r3, r3, #12
 800758c:	2b08      	cmp	r3, #8
 800758e:	d112      	bne.n	80075b6 <HAL_RCC_OscConfig+0x5e>
 8007590:	4b8c      	ldr	r3, [pc, #560]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800759c:	d10b      	bne.n	80075b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800759e:	4b89      	ldr	r3, [pc, #548]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d06c      	beq.n	8007684 <HAL_RCC_OscConfig+0x12c>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d168      	bne.n	8007684 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e2de      	b.n	8007b74 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075be:	d106      	bne.n	80075ce <HAL_RCC_OscConfig+0x76>
 80075c0:	4b80      	ldr	r3, [pc, #512]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a7f      	ldr	r2, [pc, #508]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 80075c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075ca:	6013      	str	r3, [r2, #0]
 80075cc:	e02e      	b.n	800762c <HAL_RCC_OscConfig+0xd4>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10c      	bne.n	80075f0 <HAL_RCC_OscConfig+0x98>
 80075d6:	4b7b      	ldr	r3, [pc, #492]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a7a      	ldr	r2, [pc, #488]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 80075dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075e0:	6013      	str	r3, [r2, #0]
 80075e2:	4b78      	ldr	r3, [pc, #480]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a77      	ldr	r2, [pc, #476]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 80075e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075ec:	6013      	str	r3, [r2, #0]
 80075ee:	e01d      	b.n	800762c <HAL_RCC_OscConfig+0xd4>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075f8:	d10c      	bne.n	8007614 <HAL_RCC_OscConfig+0xbc>
 80075fa:	4b72      	ldr	r3, [pc, #456]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a71      	ldr	r2, [pc, #452]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 8007600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007604:	6013      	str	r3, [r2, #0]
 8007606:	4b6f      	ldr	r3, [pc, #444]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a6e      	ldr	r2, [pc, #440]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 800760c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007610:	6013      	str	r3, [r2, #0]
 8007612:	e00b      	b.n	800762c <HAL_RCC_OscConfig+0xd4>
 8007614:	4b6b      	ldr	r3, [pc, #428]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a6a      	ldr	r2, [pc, #424]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 800761a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800761e:	6013      	str	r3, [r2, #0]
 8007620:	4b68      	ldr	r3, [pc, #416]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a67      	ldr	r2, [pc, #412]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 8007626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800762a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d013      	beq.n	800765c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007634:	f7fb fa9a 	bl	8002b6c <HAL_GetTick>
 8007638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800763a:	e008      	b.n	800764e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800763c:	f7fb fa96 	bl	8002b6c <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	2b64      	cmp	r3, #100	; 0x64
 8007648:	d901      	bls.n	800764e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e292      	b.n	8007b74 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800764e:	4b5d      	ldr	r3, [pc, #372]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d0f0      	beq.n	800763c <HAL_RCC_OscConfig+0xe4>
 800765a:	e014      	b.n	8007686 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800765c:	f7fb fa86 	bl	8002b6c <HAL_GetTick>
 8007660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007662:	e008      	b.n	8007676 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007664:	f7fb fa82 	bl	8002b6c <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	2b64      	cmp	r3, #100	; 0x64
 8007670:	d901      	bls.n	8007676 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e27e      	b.n	8007b74 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007676:	4b53      	ldr	r3, [pc, #332]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1f0      	bne.n	8007664 <HAL_RCC_OscConfig+0x10c>
 8007682:	e000      	b.n	8007686 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0302 	and.w	r3, r3, #2
 800768e:	2b00      	cmp	r3, #0
 8007690:	d063      	beq.n	800775a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007692:	4b4c      	ldr	r3, [pc, #304]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f003 030c 	and.w	r3, r3, #12
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00b      	beq.n	80076b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800769e:	4b49      	ldr	r3, [pc, #292]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f003 030c 	and.w	r3, r3, #12
 80076a6:	2b08      	cmp	r3, #8
 80076a8:	d11c      	bne.n	80076e4 <HAL_RCC_OscConfig+0x18c>
 80076aa:	4b46      	ldr	r3, [pc, #280]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d116      	bne.n	80076e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076b6:	4b43      	ldr	r3, [pc, #268]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0302 	and.w	r3, r3, #2
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d005      	beq.n	80076ce <HAL_RCC_OscConfig+0x176>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d001      	beq.n	80076ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e252      	b.n	8007b74 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076ce:	4b3d      	ldr	r3, [pc, #244]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	00db      	lsls	r3, r3, #3
 80076dc:	4939      	ldr	r1, [pc, #228]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076e2:	e03a      	b.n	800775a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	695b      	ldr	r3, [r3, #20]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d020      	beq.n	800772e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076ec:	4b36      	ldr	r3, [pc, #216]	; (80077c8 <HAL_RCC_OscConfig+0x270>)
 80076ee:	2201      	movs	r2, #1
 80076f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076f2:	f7fb fa3b 	bl	8002b6c <HAL_GetTick>
 80076f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076f8:	e008      	b.n	800770c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076fa:	f7fb fa37 	bl	8002b6c <HAL_GetTick>
 80076fe:	4602      	mov	r2, r0
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	2b02      	cmp	r3, #2
 8007706:	d901      	bls.n	800770c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007708:	2303      	movs	r3, #3
 800770a:	e233      	b.n	8007b74 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800770c:	4b2d      	ldr	r3, [pc, #180]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0302 	and.w	r3, r3, #2
 8007714:	2b00      	cmp	r3, #0
 8007716:	d0f0      	beq.n	80076fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007718:	4b2a      	ldr	r3, [pc, #168]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	00db      	lsls	r3, r3, #3
 8007726:	4927      	ldr	r1, [pc, #156]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 8007728:	4313      	orrs	r3, r2
 800772a:	600b      	str	r3, [r1, #0]
 800772c:	e015      	b.n	800775a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800772e:	4b26      	ldr	r3, [pc, #152]	; (80077c8 <HAL_RCC_OscConfig+0x270>)
 8007730:	2200      	movs	r2, #0
 8007732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007734:	f7fb fa1a 	bl	8002b6c <HAL_GetTick>
 8007738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800773a:	e008      	b.n	800774e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800773c:	f7fb fa16 	bl	8002b6c <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b02      	cmp	r3, #2
 8007748:	d901      	bls.n	800774e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e212      	b.n	8007b74 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800774e:	4b1d      	ldr	r3, [pc, #116]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0302 	and.w	r3, r3, #2
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1f0      	bne.n	800773c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0308 	and.w	r3, r3, #8
 8007762:	2b00      	cmp	r3, #0
 8007764:	d03a      	beq.n	80077dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	69db      	ldr	r3, [r3, #28]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d019      	beq.n	80077a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800776e:	4b17      	ldr	r3, [pc, #92]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 8007770:	2201      	movs	r2, #1
 8007772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007774:	f7fb f9fa 	bl	8002b6c <HAL_GetTick>
 8007778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800777a:	e008      	b.n	800778e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800777c:	f7fb f9f6 	bl	8002b6c <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	2b02      	cmp	r3, #2
 8007788:	d901      	bls.n	800778e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	e1f2      	b.n	8007b74 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800778e:	4b0d      	ldr	r3, [pc, #52]	; (80077c4 <HAL_RCC_OscConfig+0x26c>)
 8007790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007792:	f003 0302 	and.w	r3, r3, #2
 8007796:	2b00      	cmp	r3, #0
 8007798:	d0f0      	beq.n	800777c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800779a:	2001      	movs	r0, #1
 800779c:	f000 fc32 	bl	8008004 <RCC_Delay>
 80077a0:	e01c      	b.n	80077dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077a2:	4b0a      	ldr	r3, [pc, #40]	; (80077cc <HAL_RCC_OscConfig+0x274>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077a8:	f7fb f9e0 	bl	8002b6c <HAL_GetTick>
 80077ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077ae:	e00f      	b.n	80077d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077b0:	f7fb f9dc 	bl	8002b6c <HAL_GetTick>
 80077b4:	4602      	mov	r2, r0
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d908      	bls.n	80077d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e1d8      	b.n	8007b74 <HAL_RCC_OscConfig+0x61c>
 80077c2:	bf00      	nop
 80077c4:	40021000 	.word	0x40021000
 80077c8:	42420000 	.word	0x42420000
 80077cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077d0:	4b9b      	ldr	r3, [pc, #620]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 80077d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d4:	f003 0302 	and.w	r3, r3, #2
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1e9      	bne.n	80077b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0304 	and.w	r3, r3, #4
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f000 80a6 	beq.w	8007936 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077ea:	2300      	movs	r3, #0
 80077ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077ee:	4b94      	ldr	r3, [pc, #592]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10d      	bne.n	8007816 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077fa:	4b91      	ldr	r3, [pc, #580]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 80077fc:	69db      	ldr	r3, [r3, #28]
 80077fe:	4a90      	ldr	r2, [pc, #576]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 8007800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007804:	61d3      	str	r3, [r2, #28]
 8007806:	4b8e      	ldr	r3, [pc, #568]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800780e:	60bb      	str	r3, [r7, #8]
 8007810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007812:	2301      	movs	r3, #1
 8007814:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007816:	4b8b      	ldr	r3, [pc, #556]	; (8007a44 <HAL_RCC_OscConfig+0x4ec>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800781e:	2b00      	cmp	r3, #0
 8007820:	d118      	bne.n	8007854 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007822:	4b88      	ldr	r3, [pc, #544]	; (8007a44 <HAL_RCC_OscConfig+0x4ec>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a87      	ldr	r2, [pc, #540]	; (8007a44 <HAL_RCC_OscConfig+0x4ec>)
 8007828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800782c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800782e:	f7fb f99d 	bl	8002b6c <HAL_GetTick>
 8007832:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007834:	e008      	b.n	8007848 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007836:	f7fb f999 	bl	8002b6c <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	2b64      	cmp	r3, #100	; 0x64
 8007842:	d901      	bls.n	8007848 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e195      	b.n	8007b74 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007848:	4b7e      	ldr	r3, [pc, #504]	; (8007a44 <HAL_RCC_OscConfig+0x4ec>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007850:	2b00      	cmp	r3, #0
 8007852:	d0f0      	beq.n	8007836 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d106      	bne.n	800786a <HAL_RCC_OscConfig+0x312>
 800785c:	4b78      	ldr	r3, [pc, #480]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 800785e:	6a1b      	ldr	r3, [r3, #32]
 8007860:	4a77      	ldr	r2, [pc, #476]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 8007862:	f043 0301 	orr.w	r3, r3, #1
 8007866:	6213      	str	r3, [r2, #32]
 8007868:	e02d      	b.n	80078c6 <HAL_RCC_OscConfig+0x36e>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10c      	bne.n	800788c <HAL_RCC_OscConfig+0x334>
 8007872:	4b73      	ldr	r3, [pc, #460]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	4a72      	ldr	r2, [pc, #456]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 8007878:	f023 0301 	bic.w	r3, r3, #1
 800787c:	6213      	str	r3, [r2, #32]
 800787e:	4b70      	ldr	r3, [pc, #448]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	4a6f      	ldr	r2, [pc, #444]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 8007884:	f023 0304 	bic.w	r3, r3, #4
 8007888:	6213      	str	r3, [r2, #32]
 800788a:	e01c      	b.n	80078c6 <HAL_RCC_OscConfig+0x36e>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	2b05      	cmp	r3, #5
 8007892:	d10c      	bne.n	80078ae <HAL_RCC_OscConfig+0x356>
 8007894:	4b6a      	ldr	r3, [pc, #424]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 8007896:	6a1b      	ldr	r3, [r3, #32]
 8007898:	4a69      	ldr	r2, [pc, #420]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 800789a:	f043 0304 	orr.w	r3, r3, #4
 800789e:	6213      	str	r3, [r2, #32]
 80078a0:	4b67      	ldr	r3, [pc, #412]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 80078a2:	6a1b      	ldr	r3, [r3, #32]
 80078a4:	4a66      	ldr	r2, [pc, #408]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 80078a6:	f043 0301 	orr.w	r3, r3, #1
 80078aa:	6213      	str	r3, [r2, #32]
 80078ac:	e00b      	b.n	80078c6 <HAL_RCC_OscConfig+0x36e>
 80078ae:	4b64      	ldr	r3, [pc, #400]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	4a63      	ldr	r2, [pc, #396]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 80078b4:	f023 0301 	bic.w	r3, r3, #1
 80078b8:	6213      	str	r3, [r2, #32]
 80078ba:	4b61      	ldr	r3, [pc, #388]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	4a60      	ldr	r2, [pc, #384]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 80078c0:	f023 0304 	bic.w	r3, r3, #4
 80078c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d015      	beq.n	80078fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078ce:	f7fb f94d 	bl	8002b6c <HAL_GetTick>
 80078d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078d4:	e00a      	b.n	80078ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078d6:	f7fb f949 	bl	8002b6c <HAL_GetTick>
 80078da:	4602      	mov	r2, r0
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d901      	bls.n	80078ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e143      	b.n	8007b74 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078ec:	4b54      	ldr	r3, [pc, #336]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 80078ee:	6a1b      	ldr	r3, [r3, #32]
 80078f0:	f003 0302 	and.w	r3, r3, #2
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d0ee      	beq.n	80078d6 <HAL_RCC_OscConfig+0x37e>
 80078f8:	e014      	b.n	8007924 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078fa:	f7fb f937 	bl	8002b6c <HAL_GetTick>
 80078fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007900:	e00a      	b.n	8007918 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007902:	f7fb f933 	bl	8002b6c <HAL_GetTick>
 8007906:	4602      	mov	r2, r0
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007910:	4293      	cmp	r3, r2
 8007912:	d901      	bls.n	8007918 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e12d      	b.n	8007b74 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007918:	4b49      	ldr	r3, [pc, #292]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 800791a:	6a1b      	ldr	r3, [r3, #32]
 800791c:	f003 0302 	and.w	r3, r3, #2
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1ee      	bne.n	8007902 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007924:	7dfb      	ldrb	r3, [r7, #23]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d105      	bne.n	8007936 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800792a:	4b45      	ldr	r3, [pc, #276]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 800792c:	69db      	ldr	r3, [r3, #28]
 800792e:	4a44      	ldr	r2, [pc, #272]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 8007930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007934:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793a:	2b00      	cmp	r3, #0
 800793c:	f000 808c 	beq.w	8007a58 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8007940:	4b3f      	ldr	r3, [pc, #252]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800794c:	d10e      	bne.n	800796c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800794e:	4b3c      	ldr	r3, [pc, #240]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8007956:	2b08      	cmp	r3, #8
 8007958:	d108      	bne.n	800796c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800795a:	4b39      	ldr	r3, [pc, #228]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 800795c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8007962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007966:	d101      	bne.n	800796c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e103      	b.n	8007b74 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007970:	2b02      	cmp	r3, #2
 8007972:	d14e      	bne.n	8007a12 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8007974:	4b32      	ldr	r3, [pc, #200]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d009      	beq.n	8007994 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8007980:	4b2f      	ldr	r3, [pc, #188]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 8007982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007984:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800798c:	429a      	cmp	r2, r3
 800798e:	d001      	beq.n	8007994 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e0ef      	b.n	8007b74 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8007994:	4b2c      	ldr	r3, [pc, #176]	; (8007a48 <HAL_RCC_OscConfig+0x4f0>)
 8007996:	2200      	movs	r2, #0
 8007998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800799a:	f7fb f8e7 	bl	8002b6c <HAL_GetTick>
 800799e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80079a0:	e008      	b.n	80079b4 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80079a2:	f7fb f8e3 	bl	8002b6c <HAL_GetTick>
 80079a6:	4602      	mov	r2, r0
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	2b64      	cmp	r3, #100	; 0x64
 80079ae:	d901      	bls.n	80079b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80079b0:	2303      	movs	r3, #3
 80079b2:	e0df      	b.n	8007b74 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80079b4:	4b22      	ldr	r3, [pc, #136]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1f0      	bne.n	80079a2 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80079c0:	4b1f      	ldr	r3, [pc, #124]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 80079c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079cc:	491c      	ldr	r1, [pc, #112]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 80079ce:	4313      	orrs	r3, r2
 80079d0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80079d2:	4b1b      	ldr	r3, [pc, #108]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 80079d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079de:	4918      	ldr	r1, [pc, #96]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 80079e0:	4313      	orrs	r3, r2
 80079e2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80079e4:	4b18      	ldr	r3, [pc, #96]	; (8007a48 <HAL_RCC_OscConfig+0x4f0>)
 80079e6:	2201      	movs	r2, #1
 80079e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079ea:	f7fb f8bf 	bl	8002b6c <HAL_GetTick>
 80079ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80079f0:	e008      	b.n	8007a04 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80079f2:	f7fb f8bb 	bl	8002b6c <HAL_GetTick>
 80079f6:	4602      	mov	r2, r0
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	1ad3      	subs	r3, r2, r3
 80079fc:	2b64      	cmp	r3, #100	; 0x64
 80079fe:	d901      	bls.n	8007a04 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e0b7      	b.n	8007b74 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8007a04:	4b0e      	ldr	r3, [pc, #56]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d0f0      	beq.n	80079f2 <HAL_RCC_OscConfig+0x49a>
 8007a10:	e022      	b.n	8007a58 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8007a12:	4b0b      	ldr	r3, [pc, #44]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 8007a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a16:	4a0a      	ldr	r2, [pc, #40]	; (8007a40 <HAL_RCC_OscConfig+0x4e8>)
 8007a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8007a1e:	4b0a      	ldr	r3, [pc, #40]	; (8007a48 <HAL_RCC_OscConfig+0x4f0>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a24:	f7fb f8a2 	bl	8002b6c <HAL_GetTick>
 8007a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8007a2a:	e00f      	b.n	8007a4c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a2c:	f7fb f89e 	bl	8002b6c <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	2b64      	cmp	r3, #100	; 0x64
 8007a38:	d908      	bls.n	8007a4c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e09a      	b.n	8007b74 <HAL_RCC_OscConfig+0x61c>
 8007a3e:	bf00      	nop
 8007a40:	40021000 	.word	0x40021000
 8007a44:	40007000 	.word	0x40007000
 8007a48:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8007a4c:	4b4b      	ldr	r3, [pc, #300]	; (8007b7c <HAL_RCC_OscConfig+0x624>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e9      	bne.n	8007a2c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a1b      	ldr	r3, [r3, #32]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 8088 	beq.w	8007b72 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a62:	4b46      	ldr	r3, [pc, #280]	; (8007b7c <HAL_RCC_OscConfig+0x624>)
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	f003 030c 	and.w	r3, r3, #12
 8007a6a:	2b08      	cmp	r3, #8
 8007a6c:	d068      	beq.n	8007b40 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d14d      	bne.n	8007b12 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a76:	4b42      	ldr	r3, [pc, #264]	; (8007b80 <HAL_RCC_OscConfig+0x628>)
 8007a78:	2200      	movs	r2, #0
 8007a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a7c:	f7fb f876 	bl	8002b6c <HAL_GetTick>
 8007a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a82:	e008      	b.n	8007a96 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a84:	f7fb f872 	bl	8002b6c <HAL_GetTick>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d901      	bls.n	8007a96 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e06e      	b.n	8007b74 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a96:	4b39      	ldr	r3, [pc, #228]	; (8007b7c <HAL_RCC_OscConfig+0x624>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1f0      	bne.n	8007a84 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aaa:	d10f      	bne.n	8007acc <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8007aac:	4b33      	ldr	r3, [pc, #204]	; (8007b7c <HAL_RCC_OscConfig+0x624>)
 8007aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	4931      	ldr	r1, [pc, #196]	; (8007b7c <HAL_RCC_OscConfig+0x624>)
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007aba:	4b30      	ldr	r3, [pc, #192]	; (8007b7c <HAL_RCC_OscConfig+0x624>)
 8007abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007abe:	f023 020f 	bic.w	r2, r3, #15
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	492d      	ldr	r1, [pc, #180]	; (8007b7c <HAL_RCC_OscConfig+0x624>)
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007acc:	4b2b      	ldr	r3, [pc, #172]	; (8007b7c <HAL_RCC_OscConfig+0x624>)
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007adc:	430b      	orrs	r3, r1
 8007ade:	4927      	ldr	r1, [pc, #156]	; (8007b7c <HAL_RCC_OscConfig+0x624>)
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ae4:	4b26      	ldr	r3, [pc, #152]	; (8007b80 <HAL_RCC_OscConfig+0x628>)
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aea:	f7fb f83f 	bl	8002b6c <HAL_GetTick>
 8007aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007af0:	e008      	b.n	8007b04 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007af2:	f7fb f83b 	bl	8002b6c <HAL_GetTick>
 8007af6:	4602      	mov	r2, r0
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	1ad3      	subs	r3, r2, r3
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d901      	bls.n	8007b04 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e037      	b.n	8007b74 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007b04:	4b1d      	ldr	r3, [pc, #116]	; (8007b7c <HAL_RCC_OscConfig+0x624>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d0f0      	beq.n	8007af2 <HAL_RCC_OscConfig+0x59a>
 8007b10:	e02f      	b.n	8007b72 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b12:	4b1b      	ldr	r3, [pc, #108]	; (8007b80 <HAL_RCC_OscConfig+0x628>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b18:	f7fb f828 	bl	8002b6c <HAL_GetTick>
 8007b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007b1e:	e008      	b.n	8007b32 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b20:	f7fb f824 	bl	8002b6c <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d901      	bls.n	8007b32 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e020      	b.n	8007b74 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007b32:	4b12      	ldr	r3, [pc, #72]	; (8007b7c <HAL_RCC_OscConfig+0x624>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1f0      	bne.n	8007b20 <HAL_RCC_OscConfig+0x5c8>
 8007b3e:	e018      	b.n	8007b72 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a1b      	ldr	r3, [r3, #32]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d101      	bne.n	8007b4c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e013      	b.n	8007b74 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007b4c:	4b0b      	ldr	r3, [pc, #44]	; (8007b7c <HAL_RCC_OscConfig+0x624>)
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d106      	bne.n	8007b6e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d001      	beq.n	8007b72 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e000      	b.n	8007b74 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3718      	adds	r7, #24
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	40021000 	.word	0x40021000
 8007b80:	42420060 	.word	0x42420060

08007b84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d101      	bne.n	8007b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e0d0      	b.n	8007d3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b98:	4b6a      	ldr	r3, [pc, #424]	; (8007d44 <HAL_RCC_ClockConfig+0x1c0>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0307 	and.w	r3, r3, #7
 8007ba0:	683a      	ldr	r2, [r7, #0]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d910      	bls.n	8007bc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ba6:	4b67      	ldr	r3, [pc, #412]	; (8007d44 <HAL_RCC_ClockConfig+0x1c0>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f023 0207 	bic.w	r2, r3, #7
 8007bae:	4965      	ldr	r1, [pc, #404]	; (8007d44 <HAL_RCC_ClockConfig+0x1c0>)
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bb6:	4b63      	ldr	r3, [pc, #396]	; (8007d44 <HAL_RCC_ClockConfig+0x1c0>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0307 	and.w	r3, r3, #7
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d001      	beq.n	8007bc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e0b8      	b.n	8007d3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 0302 	and.w	r3, r3, #2
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d020      	beq.n	8007c16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0304 	and.w	r3, r3, #4
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d005      	beq.n	8007bec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007be0:	4b59      	ldr	r3, [pc, #356]	; (8007d48 <HAL_RCC_ClockConfig+0x1c4>)
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	4a58      	ldr	r2, [pc, #352]	; (8007d48 <HAL_RCC_ClockConfig+0x1c4>)
 8007be6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007bea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 0308 	and.w	r3, r3, #8
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d005      	beq.n	8007c04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007bf8:	4b53      	ldr	r3, [pc, #332]	; (8007d48 <HAL_RCC_ClockConfig+0x1c4>)
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	4a52      	ldr	r2, [pc, #328]	; (8007d48 <HAL_RCC_ClockConfig+0x1c4>)
 8007bfe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007c02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c04:	4b50      	ldr	r3, [pc, #320]	; (8007d48 <HAL_RCC_ClockConfig+0x1c4>)
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	494d      	ldr	r1, [pc, #308]	; (8007d48 <HAL_RCC_ClockConfig+0x1c4>)
 8007c12:	4313      	orrs	r3, r2
 8007c14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d040      	beq.n	8007ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d107      	bne.n	8007c3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c2a:	4b47      	ldr	r3, [pc, #284]	; (8007d48 <HAL_RCC_ClockConfig+0x1c4>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d115      	bne.n	8007c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e07f      	b.n	8007d3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d107      	bne.n	8007c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c42:	4b41      	ldr	r3, [pc, #260]	; (8007d48 <HAL_RCC_ClockConfig+0x1c4>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d109      	bne.n	8007c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e073      	b.n	8007d3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c52:	4b3d      	ldr	r3, [pc, #244]	; (8007d48 <HAL_RCC_ClockConfig+0x1c4>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 0302 	and.w	r3, r3, #2
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d101      	bne.n	8007c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e06b      	b.n	8007d3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c62:	4b39      	ldr	r3, [pc, #228]	; (8007d48 <HAL_RCC_ClockConfig+0x1c4>)
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f023 0203 	bic.w	r2, r3, #3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	4936      	ldr	r1, [pc, #216]	; (8007d48 <HAL_RCC_ClockConfig+0x1c4>)
 8007c70:	4313      	orrs	r3, r2
 8007c72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c74:	f7fa ff7a 	bl	8002b6c <HAL_GetTick>
 8007c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c7a:	e00a      	b.n	8007c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c7c:	f7fa ff76 	bl	8002b6c <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d901      	bls.n	8007c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e053      	b.n	8007d3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c92:	4b2d      	ldr	r3, [pc, #180]	; (8007d48 <HAL_RCC_ClockConfig+0x1c4>)
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	f003 020c 	and.w	r2, r3, #12
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d1eb      	bne.n	8007c7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ca4:	4b27      	ldr	r3, [pc, #156]	; (8007d44 <HAL_RCC_ClockConfig+0x1c0>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0307 	and.w	r3, r3, #7
 8007cac:	683a      	ldr	r2, [r7, #0]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d210      	bcs.n	8007cd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cb2:	4b24      	ldr	r3, [pc, #144]	; (8007d44 <HAL_RCC_ClockConfig+0x1c0>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f023 0207 	bic.w	r2, r3, #7
 8007cba:	4922      	ldr	r1, [pc, #136]	; (8007d44 <HAL_RCC_ClockConfig+0x1c0>)
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cc2:	4b20      	ldr	r3, [pc, #128]	; (8007d44 <HAL_RCC_ClockConfig+0x1c0>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	683a      	ldr	r2, [r7, #0]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d001      	beq.n	8007cd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e032      	b.n	8007d3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 0304 	and.w	r3, r3, #4
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d008      	beq.n	8007cf2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ce0:	4b19      	ldr	r3, [pc, #100]	; (8007d48 <HAL_RCC_ClockConfig+0x1c4>)
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	4916      	ldr	r1, [pc, #88]	; (8007d48 <HAL_RCC_ClockConfig+0x1c4>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0308 	and.w	r3, r3, #8
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d009      	beq.n	8007d12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007cfe:	4b12      	ldr	r3, [pc, #72]	; (8007d48 <HAL_RCC_ClockConfig+0x1c4>)
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	00db      	lsls	r3, r3, #3
 8007d0c:	490e      	ldr	r1, [pc, #56]	; (8007d48 <HAL_RCC_ClockConfig+0x1c4>)
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007d12:	f000 f821 	bl	8007d58 <HAL_RCC_GetSysClockFreq>
 8007d16:	4602      	mov	r2, r0
 8007d18:	4b0b      	ldr	r3, [pc, #44]	; (8007d48 <HAL_RCC_ClockConfig+0x1c4>)
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	091b      	lsrs	r3, r3, #4
 8007d1e:	f003 030f 	and.w	r3, r3, #15
 8007d22:	490a      	ldr	r1, [pc, #40]	; (8007d4c <HAL_RCC_ClockConfig+0x1c8>)
 8007d24:	5ccb      	ldrb	r3, [r1, r3]
 8007d26:	fa22 f303 	lsr.w	r3, r2, r3
 8007d2a:	4a09      	ldr	r2, [pc, #36]	; (8007d50 <HAL_RCC_ClockConfig+0x1cc>)
 8007d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007d2e:	4b09      	ldr	r3, [pc, #36]	; (8007d54 <HAL_RCC_ClockConfig+0x1d0>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fa fcce 	bl	80026d4 <HAL_InitTick>

  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	40022000 	.word	0x40022000
 8007d48:	40021000 	.word	0x40021000
 8007d4c:	0801e4b8 	.word	0x0801e4b8
 8007d50:	20000000 	.word	0x20000000
 8007d54:	20000004 	.word	0x20000004

08007d58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d5c:	b092      	sub	sp, #72	; 0x48
 8007d5e:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007d60:	2300      	movs	r3, #0
 8007d62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d64:	2300      	movs	r3, #0
 8007d66:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d68:	2300      	movs	r3, #0
 8007d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t sysclockfreq = 0U;
 8007d70:	2300      	movs	r3, #0
 8007d72:	643b      	str	r3, [r7, #64]	; 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8007d74:	2300      	movs	r3, #0
 8007d76:	633b      	str	r3, [r7, #48]	; 0x30
 8007d78:	2300      	movs	r3, #0
 8007d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007d7c:	4b6b      	ldr	r3, [pc, #428]	; (8007f2c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d84:	f003 030c 	and.w	r3, r3, #12
 8007d88:	2b04      	cmp	r3, #4
 8007d8a:	d002      	beq.n	8007d92 <HAL_RCC_GetSysClockFreq+0x3a>
 8007d8c:	2b08      	cmp	r3, #8
 8007d8e:	d003      	beq.n	8007d98 <HAL_RCC_GetSysClockFreq+0x40>
 8007d90:	e0c3      	b.n	8007f1a <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007d92:	4b67      	ldr	r3, [pc, #412]	; (8007f30 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8007d94:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8007d96:	e0c3      	b.n	8007f20 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d9a:	0c9b      	lsrs	r3, r3, #18
 8007d9c:	f003 020f 	and.w	r2, r3, #15
 8007da0:	4b64      	ldr	r3, [pc, #400]	; (8007f34 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8007da2:	5c9b      	ldrb	r3, [r3, r2]
 8007da4:	637b      	str	r3, [r7, #52]	; 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f000 80ac 	beq.w	8007f0a <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8007db2:	4b5e      	ldr	r3, [pc, #376]	; (8007f2c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db6:	f003 020f 	and.w	r2, r3, #15
 8007dba:	4b5f      	ldr	r3, [pc, #380]	; (8007f38 <HAL_RCC_GetSysClockFreq+0x1e0>)
 8007dbc:	5c9b      	ldrb	r3, [r3, r2]
 8007dbe:	63bb      	str	r3, [r7, #56]	; 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8007dc0:	4b5a      	ldr	r3, [pc, #360]	; (8007f2c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f000 808c 	beq.w	8007ee6 <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8007dce:	4b57      	ldr	r3, [pc, #348]	; (8007f2c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd2:	091b      	lsrs	r3, r3, #4
 8007dd4:	f003 030f 	and.w	r3, r3, #15
 8007dd8:	3301      	adds	r3, #1
 8007dda:	633b      	str	r3, [r7, #48]	; 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8007ddc:	4b53      	ldr	r3, [pc, #332]	; (8007f2c <HAL_RCC_GetSysClockFreq+0x1d4>)
 8007dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de0:	0a1b      	lsrs	r3, r3, #8
 8007de2:	f003 030f 	and.w	r3, r3, #15
 8007de6:	3302      	adds	r3, #2
 8007de8:	62fb      	str	r3, [r7, #44]	; 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8007dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dec:	2200      	movs	r2, #0
 8007dee:	623b      	str	r3, [r7, #32]
 8007df0:	627a      	str	r2, [r7, #36]	; 0x24
 8007df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df4:	2200      	movs	r2, #0
 8007df6:	4618      	mov	r0, r3
 8007df8:	4611      	mov	r1, r2
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	fb00 f203 	mul.w	r2, r0, r3
 8007e00:	6a3b      	ldr	r3, [r7, #32]
 8007e02:	fb03 f301 	mul.w	r3, r3, r1
 8007e06:	4413      	add	r3, r2
 8007e08:	6a3a      	ldr	r2, [r7, #32]
 8007e0a:	fba2 4500 	umull	r4, r5, r2, r0
 8007e0e:	442b      	add	r3, r5
 8007e10:	461d      	mov	r5, r3
 8007e12:	4622      	mov	r2, r4
 8007e14:	462b      	mov	r3, r5
 8007e16:	f04f 0000 	mov.w	r0, #0
 8007e1a:	f04f 0100 	mov.w	r1, #0
 8007e1e:	0159      	lsls	r1, r3, #5
 8007e20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e24:	0150      	lsls	r0, r2, #5
 8007e26:	4602      	mov	r2, r0
 8007e28:	460b      	mov	r3, r1
 8007e2a:	ebb2 0a04 	subs.w	sl, r2, r4
 8007e2e:	eb63 0b05 	sbc.w	fp, r3, r5
 8007e32:	f04f 0200 	mov.w	r2, #0
 8007e36:	f04f 0300 	mov.w	r3, #0
 8007e3a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007e3e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007e42:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007e46:	ebb2 080a 	subs.w	r8, r2, sl
 8007e4a:	eb63 090b 	sbc.w	r9, r3, fp
 8007e4e:	f04f 0200 	mov.w	r2, #0
 8007e52:	f04f 0300 	mov.w	r3, #0
 8007e56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e62:	4690      	mov	r8, r2
 8007e64:	4699      	mov	r9, r3
 8007e66:	eb18 0304 	adds.w	r3, r8, r4
 8007e6a:	603b      	str	r3, [r7, #0]
 8007e6c:	eb49 0305 	adc.w	r3, r9, r5
 8007e70:	607b      	str	r3, [r7, #4]
 8007e72:	f04f 0200 	mov.w	r2, #0
 8007e76:	f04f 0300 	mov.w	r3, #0
 8007e7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007e7e:	4629      	mov	r1, r5
 8007e80:	024b      	lsls	r3, r1, #9
 8007e82:	4620      	mov	r0, r4
 8007e84:	4629      	mov	r1, r5
 8007e86:	4604      	mov	r4, r0
 8007e88:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8007e8c:	4601      	mov	r1, r0
 8007e8e:	024a      	lsls	r2, r1, #9
 8007e90:	4610      	mov	r0, r2
 8007e92:	4619      	mov	r1, r3
 8007e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e96:	2200      	movs	r2, #0
 8007e98:	613b      	str	r3, [r7, #16]
 8007e9a:	617a      	str	r2, [r7, #20]
 8007e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	60bb      	str	r3, [r7, #8]
 8007ea2:	60fa      	str	r2, [r7, #12]
 8007ea4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007ea8:	4622      	mov	r2, r4
 8007eaa:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8007eae:	4645      	mov	r5, r8
 8007eb0:	fb05 f202 	mul.w	r2, r5, r2
 8007eb4:	46cc      	mov	ip, r9
 8007eb6:	4625      	mov	r5, r4
 8007eb8:	461c      	mov	r4, r3
 8007eba:	4623      	mov	r3, r4
 8007ebc:	fb03 f30c 	mul.w	r3, r3, ip
 8007ec0:	4413      	add	r3, r2
 8007ec2:	4622      	mov	r2, r4
 8007ec4:	4644      	mov	r4, r8
 8007ec6:	fba2 2404 	umull	r2, r4, r2, r4
 8007eca:	61fc      	str	r4, [r7, #28]
 8007ecc:	61ba      	str	r2, [r7, #24]
 8007ece:	69fa      	ldr	r2, [r7, #28]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	61fb      	str	r3, [r7, #28]
 8007ed4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ed8:	f7f8 ff88 	bl	8000dec <__aeabi_uldivmod>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	647b      	str	r3, [r7, #68]	; 0x44
 8007ee4:	e007      	b.n	8007ef6 <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8007ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee8:	4a11      	ldr	r2, [pc, #68]	; (8007f30 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8007eea:	fb03 f202 	mul.w	r2, r3, r2
 8007eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef4:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8007ef6:	4b0f      	ldr	r3, [pc, #60]	; (8007f34 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8007ef8:	7b5b      	ldrb	r3, [r3, #13]
 8007efa:	461a      	mov	r2, r3
 8007efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d108      	bne.n	8007f14 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 8007f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f04:	085b      	lsrs	r3, r3, #1
 8007f06:	647b      	str	r3, [r7, #68]	; 0x44
 8007f08:	e004      	b.n	8007f14 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f0c:	4a0b      	ldr	r2, [pc, #44]	; (8007f3c <HAL_RCC_GetSysClockFreq+0x1e4>)
 8007f0e:	fb02 f303 	mul.w	r3, r2, r3
 8007f12:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllclk;
 8007f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f16:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8007f18:	e002      	b.n	8007f20 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007f1a:	4b05      	ldr	r3, [pc, #20]	; (8007f30 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8007f1c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8007f1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3748      	adds	r7, #72	; 0x48
 8007f26:	46bd      	mov	sp, r7
 8007f28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f2c:	40021000 	.word	0x40021000
 8007f30:	007a1200 	.word	0x007a1200
 8007f34:	0801e4d0 	.word	0x0801e4d0
 8007f38:	0801e4e0 	.word	0x0801e4e0
 8007f3c:	003d0900 	.word	0x003d0900

08007f40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f40:	b480      	push	{r7}
 8007f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f44:	4b02      	ldr	r3, [pc, #8]	; (8007f50 <HAL_RCC_GetHCLKFreq+0x10>)
 8007f46:	681b      	ldr	r3, [r3, #0]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bc80      	pop	{r7}
 8007f4e:	4770      	bx	lr
 8007f50:	20000000 	.word	0x20000000

08007f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007f58:	f7ff fff2 	bl	8007f40 <HAL_RCC_GetHCLKFreq>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	4b05      	ldr	r3, [pc, #20]	; (8007f74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	0a1b      	lsrs	r3, r3, #8
 8007f64:	f003 0307 	and.w	r3, r3, #7
 8007f68:	4903      	ldr	r1, [pc, #12]	; (8007f78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f6a:	5ccb      	ldrb	r3, [r1, r3]
 8007f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	40021000 	.word	0x40021000
 8007f78:	0801e4c8 	.word	0x0801e4c8

08007f7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007f80:	f7ff ffde 	bl	8007f40 <HAL_RCC_GetHCLKFreq>
 8007f84:	4602      	mov	r2, r0
 8007f86:	4b05      	ldr	r3, [pc, #20]	; (8007f9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	0adb      	lsrs	r3, r3, #11
 8007f8c:	f003 0307 	and.w	r3, r3, #7
 8007f90:	4903      	ldr	r1, [pc, #12]	; (8007fa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f92:	5ccb      	ldrb	r3, [r1, r3]
 8007f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	40021000 	.word	0x40021000
 8007fa0:	0801e4c8 	.word	0x0801e4c8

08007fa4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	220f      	movs	r2, #15
 8007fb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007fb4:	4b11      	ldr	r3, [pc, #68]	; (8007ffc <HAL_RCC_GetClockConfig+0x58>)
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	f003 0203 	and.w	r2, r3, #3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007fc0:	4b0e      	ldr	r3, [pc, #56]	; (8007ffc <HAL_RCC_GetClockConfig+0x58>)
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007fcc:	4b0b      	ldr	r3, [pc, #44]	; (8007ffc <HAL_RCC_GetClockConfig+0x58>)
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007fd8:	4b08      	ldr	r3, [pc, #32]	; (8007ffc <HAL_RCC_GetClockConfig+0x58>)
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	08db      	lsrs	r3, r3, #3
 8007fde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007fe6:	4b06      	ldr	r3, [pc, #24]	; (8008000 <HAL_RCC_GetClockConfig+0x5c>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0207 	and.w	r2, r3, #7
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8007ff2:	bf00      	nop
 8007ff4:	370c      	adds	r7, #12
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bc80      	pop	{r7}
 8007ffa:	4770      	bx	lr
 8007ffc:	40021000 	.word	0x40021000
 8008000:	40022000 	.word	0x40022000

08008004 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800800c:	4b0a      	ldr	r3, [pc, #40]	; (8008038 <RCC_Delay+0x34>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a0a      	ldr	r2, [pc, #40]	; (800803c <RCC_Delay+0x38>)
 8008012:	fba2 2303 	umull	r2, r3, r2, r3
 8008016:	0a5b      	lsrs	r3, r3, #9
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	fb02 f303 	mul.w	r3, r2, r3
 800801e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008020:	bf00      	nop
  }
  while (Delay --);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	1e5a      	subs	r2, r3, #1
 8008026:	60fa      	str	r2, [r7, #12]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1f9      	bne.n	8008020 <RCC_Delay+0x1c>
}
 800802c:	bf00      	nop
 800802e:	bf00      	nop
 8008030:	3714      	adds	r7, #20
 8008032:	46bd      	mov	sp, r7
 8008034:	bc80      	pop	{r7}
 8008036:	4770      	bx	lr
 8008038:	20000000 	.word	0x20000000
 800803c:	10624dd3 	.word	0x10624dd3

08008040 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d101      	bne.n	8008052 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e076      	b.n	8008140 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008056:	2b00      	cmp	r3, #0
 8008058:	d108      	bne.n	800806c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008062:	d009      	beq.n	8008078 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	61da      	str	r2, [r3, #28]
 800806a:	e005      	b.n	8008078 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b00      	cmp	r3, #0
 8008088:	d106      	bne.n	8008098 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f7fa fa8c 	bl	80025b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2202      	movs	r2, #2
 800809c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80080c0:	431a      	orrs	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080ca:	431a      	orrs	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	f003 0302 	and.w	r3, r3, #2
 80080d4:	431a      	orrs	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	431a      	orrs	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080e8:	431a      	orrs	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080f2:	431a      	orrs	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a1b      	ldr	r3, [r3, #32]
 80080f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080fc:	ea42 0103 	orr.w	r1, r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008104:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	430a      	orrs	r2, r1
 800810e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	0c1a      	lsrs	r2, r3, #16
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f002 0204 	and.w	r2, r2, #4
 800811e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	69da      	ldr	r2, [r3, #28]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800812e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d101      	bne.n	800815a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e041      	b.n	80081de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d106      	bne.n	8008174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f839 	bl	80081e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2202      	movs	r2, #2
 8008178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	3304      	adds	r3, #4
 8008184:	4619      	mov	r1, r3
 8008186:	4610      	mov	r0, r2
 8008188:	f000 f9bc 	bl	8008504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3708      	adds	r7, #8
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b083      	sub	sp, #12
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80081ee:	bf00      	nop
 80081f0:	370c      	adds	r7, #12
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bc80      	pop	{r7}
 80081f6:	4770      	bx	lr

080081f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008206:	b2db      	uxtb	r3, r3
 8008208:	2b01      	cmp	r3, #1
 800820a:	d001      	beq.n	8008210 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	e03f      	b.n	8008290 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2202      	movs	r2, #2
 8008214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	68da      	ldr	r2, [r3, #12]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f042 0201 	orr.w	r2, r2, #1
 8008226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a1b      	ldr	r2, [pc, #108]	; (800829c <HAL_TIM_Base_Start_IT+0xa4>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d013      	beq.n	800825a <HAL_TIM_Base_Start_IT+0x62>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800823a:	d00e      	beq.n	800825a <HAL_TIM_Base_Start_IT+0x62>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a17      	ldr	r2, [pc, #92]	; (80082a0 <HAL_TIM_Base_Start_IT+0xa8>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d009      	beq.n	800825a <HAL_TIM_Base_Start_IT+0x62>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a16      	ldr	r2, [pc, #88]	; (80082a4 <HAL_TIM_Base_Start_IT+0xac>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d004      	beq.n	800825a <HAL_TIM_Base_Start_IT+0x62>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a14      	ldr	r2, [pc, #80]	; (80082a8 <HAL_TIM_Base_Start_IT+0xb0>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d111      	bne.n	800827e <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	f003 0307 	and.w	r3, r3, #7
 8008264:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2b06      	cmp	r3, #6
 800826a:	d010      	beq.n	800828e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f042 0201 	orr.w	r2, r2, #1
 800827a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800827c:	e007      	b.n	800828e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f042 0201 	orr.w	r2, r2, #1
 800828c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3714      	adds	r7, #20
 8008294:	46bd      	mov	sp, r7
 8008296:	bc80      	pop	{r7}
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	40012c00 	.word	0x40012c00
 80082a0:	40000400 	.word	0x40000400
 80082a4:	40000800 	.word	0x40000800
 80082a8:	40000c00 	.word	0x40000c00

080082ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	f003 0302 	and.w	r3, r3, #2
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d122      	bne.n	8008308 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d11b      	bne.n	8008308 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f06f 0202 	mvn.w	r2, #2
 80082d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	f003 0303 	and.w	r3, r3, #3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d003      	beq.n	80082f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f8ed 	bl	80084ce <HAL_TIM_IC_CaptureCallback>
 80082f4:	e005      	b.n	8008302 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f8e0 	bl	80084bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f8ef 	bl	80084e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	f003 0304 	and.w	r3, r3, #4
 8008312:	2b04      	cmp	r3, #4
 8008314:	d122      	bne.n	800835c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	f003 0304 	and.w	r3, r3, #4
 8008320:	2b04      	cmp	r3, #4
 8008322:	d11b      	bne.n	800835c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f06f 0204 	mvn.w	r2, #4
 800832c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2202      	movs	r2, #2
 8008332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800833e:	2b00      	cmp	r3, #0
 8008340:	d003      	beq.n	800834a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f8c3 	bl	80084ce <HAL_TIM_IC_CaptureCallback>
 8008348:	e005      	b.n	8008356 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f8b6 	bl	80084bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f8c5 	bl	80084e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	f003 0308 	and.w	r3, r3, #8
 8008366:	2b08      	cmp	r3, #8
 8008368:	d122      	bne.n	80083b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	f003 0308 	and.w	r3, r3, #8
 8008374:	2b08      	cmp	r3, #8
 8008376:	d11b      	bne.n	80083b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f06f 0208 	mvn.w	r2, #8
 8008380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2204      	movs	r2, #4
 8008386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	f003 0303 	and.w	r3, r3, #3
 8008392:	2b00      	cmp	r3, #0
 8008394:	d003      	beq.n	800839e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 f899 	bl	80084ce <HAL_TIM_IC_CaptureCallback>
 800839c:	e005      	b.n	80083aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f88c 	bl	80084bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f89b 	bl	80084e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	f003 0310 	and.w	r3, r3, #16
 80083ba:	2b10      	cmp	r3, #16
 80083bc:	d122      	bne.n	8008404 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	f003 0310 	and.w	r3, r3, #16
 80083c8:	2b10      	cmp	r3, #16
 80083ca:	d11b      	bne.n	8008404 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f06f 0210 	mvn.w	r2, #16
 80083d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2208      	movs	r2, #8
 80083da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	69db      	ldr	r3, [r3, #28]
 80083e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d003      	beq.n	80083f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f86f 	bl	80084ce <HAL_TIM_IC_CaptureCallback>
 80083f0:	e005      	b.n	80083fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f862 	bl	80084bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 f871 	bl	80084e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	2b01      	cmp	r3, #1
 8008410:	d10e      	bne.n	8008430 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	f003 0301 	and.w	r3, r3, #1
 800841c:	2b01      	cmp	r3, #1
 800841e:	d107      	bne.n	8008430 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f06f 0201 	mvn.w	r2, #1
 8008428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7fa f872 	bl	8002514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800843a:	2b80      	cmp	r3, #128	; 0x80
 800843c:	d10e      	bne.n	800845c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008448:	2b80      	cmp	r3, #128	; 0x80
 800844a:	d107      	bne.n	800845c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f8c9 	bl	80085ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008466:	2b40      	cmp	r3, #64	; 0x40
 8008468:	d10e      	bne.n	8008488 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008474:	2b40      	cmp	r3, #64	; 0x40
 8008476:	d107      	bne.n	8008488 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f835 	bl	80084f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	f003 0320 	and.w	r3, r3, #32
 8008492:	2b20      	cmp	r3, #32
 8008494:	d10e      	bne.n	80084b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	f003 0320 	and.w	r3, r3, #32
 80084a0:	2b20      	cmp	r3, #32
 80084a2:	d107      	bne.n	80084b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f06f 0220 	mvn.w	r2, #32
 80084ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f894 	bl	80085dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084b4:	bf00      	nop
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084c4:	bf00      	nop
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bc80      	pop	{r7}
 80084cc:	4770      	bx	lr

080084ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b083      	sub	sp, #12
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084d6:	bf00      	nop
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	bc80      	pop	{r7}
 80084de:	4770      	bx	lr

080084e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bc80      	pop	{r7}
 80084f0:	4770      	bx	lr

080084f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084f2:	b480      	push	{r7}
 80084f4:	b083      	sub	sp, #12
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084fa:	bf00      	nop
 80084fc:	370c      	adds	r7, #12
 80084fe:	46bd      	mov	sp, r7
 8008500:	bc80      	pop	{r7}
 8008502:	4770      	bx	lr

08008504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a2d      	ldr	r2, [pc, #180]	; (80085cc <TIM_Base_SetConfig+0xc8>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d00f      	beq.n	800853c <TIM_Base_SetConfig+0x38>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008522:	d00b      	beq.n	800853c <TIM_Base_SetConfig+0x38>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a2a      	ldr	r2, [pc, #168]	; (80085d0 <TIM_Base_SetConfig+0xcc>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d007      	beq.n	800853c <TIM_Base_SetConfig+0x38>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a29      	ldr	r2, [pc, #164]	; (80085d4 <TIM_Base_SetConfig+0xd0>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d003      	beq.n	800853c <TIM_Base_SetConfig+0x38>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a28      	ldr	r2, [pc, #160]	; (80085d8 <TIM_Base_SetConfig+0xd4>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d108      	bne.n	800854e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	4313      	orrs	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a1e      	ldr	r2, [pc, #120]	; (80085cc <TIM_Base_SetConfig+0xc8>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d00f      	beq.n	8008576 <TIM_Base_SetConfig+0x72>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800855c:	d00b      	beq.n	8008576 <TIM_Base_SetConfig+0x72>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a1b      	ldr	r2, [pc, #108]	; (80085d0 <TIM_Base_SetConfig+0xcc>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d007      	beq.n	8008576 <TIM_Base_SetConfig+0x72>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a1a      	ldr	r2, [pc, #104]	; (80085d4 <TIM_Base_SetConfig+0xd0>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d003      	beq.n	8008576 <TIM_Base_SetConfig+0x72>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a19      	ldr	r2, [pc, #100]	; (80085d8 <TIM_Base_SetConfig+0xd4>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d108      	bne.n	8008588 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800857c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	4313      	orrs	r3, r2
 8008586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	4313      	orrs	r3, r2
 8008594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	689a      	ldr	r2, [r3, #8]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a07      	ldr	r2, [pc, #28]	; (80085cc <TIM_Base_SetConfig+0xc8>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d103      	bne.n	80085bc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	691a      	ldr	r2, [r3, #16]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	615a      	str	r2, [r3, #20]
}
 80085c2:	bf00      	nop
 80085c4:	3714      	adds	r7, #20
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bc80      	pop	{r7}
 80085ca:	4770      	bx	lr
 80085cc:	40012c00 	.word	0x40012c00
 80085d0:	40000400 	.word	0x40000400
 80085d4:	40000800 	.word	0x40000800
 80085d8:	40000c00 	.word	0x40000c00

080085dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bc80      	pop	{r7}
 80085ec:	4770      	bx	lr

080085ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b083      	sub	sp, #12
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085f6:	bf00      	nop
 80085f8:	370c      	adds	r7, #12
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bc80      	pop	{r7}
 80085fe:	4770      	bx	lr

08008600 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e042      	b.n	8008698 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008618:	b2db      	uxtb	r3, r3
 800861a:	2b00      	cmp	r3, #0
 800861c:	d106      	bne.n	800862c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7fa fa06 	bl	8002a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2224      	movs	r2, #36	; 0x24
 8008630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68da      	ldr	r2, [r3, #12]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008642:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f82b 	bl	80086a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	691a      	ldr	r2, [r3, #16]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008658:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	695a      	ldr	r2, [r3, #20]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008668:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68da      	ldr	r2, [r3, #12]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008678:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2220      	movs	r2, #32
 8008684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2220      	movs	r2, #32
 800868c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3708      	adds	r7, #8
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	68da      	ldr	r2, [r3, #12]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	430a      	orrs	r2, r1
 80086bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	689a      	ldr	r2, [r3, #8]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	431a      	orrs	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80086da:	f023 030c 	bic.w	r3, r3, #12
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	6812      	ldr	r2, [r2, #0]
 80086e2:	68b9      	ldr	r1, [r7, #8]
 80086e4:	430b      	orrs	r3, r1
 80086e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	695b      	ldr	r3, [r3, #20]
 80086ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	699a      	ldr	r2, [r3, #24]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	430a      	orrs	r2, r1
 80086fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a2c      	ldr	r2, [pc, #176]	; (80087b4 <UART_SetConfig+0x114>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d103      	bne.n	8008710 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008708:	f7ff fc38 	bl	8007f7c <HAL_RCC_GetPCLK2Freq>
 800870c:	60f8      	str	r0, [r7, #12]
 800870e:	e002      	b.n	8008716 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008710:	f7ff fc20 	bl	8007f54 <HAL_RCC_GetPCLK1Freq>
 8008714:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008716:	68fa      	ldr	r2, [r7, #12]
 8008718:	4613      	mov	r3, r2
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	4413      	add	r3, r2
 800871e:	009a      	lsls	r2, r3, #2
 8008720:	441a      	add	r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	fbb2 f3f3 	udiv	r3, r2, r3
 800872c:	4a22      	ldr	r2, [pc, #136]	; (80087b8 <UART_SetConfig+0x118>)
 800872e:	fba2 2303 	umull	r2, r3, r2, r3
 8008732:	095b      	lsrs	r3, r3, #5
 8008734:	0119      	lsls	r1, r3, #4
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	4613      	mov	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	009a      	lsls	r2, r3, #2
 8008740:	441a      	add	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	fbb2 f2f3 	udiv	r2, r2, r3
 800874c:	4b1a      	ldr	r3, [pc, #104]	; (80087b8 <UART_SetConfig+0x118>)
 800874e:	fba3 0302 	umull	r0, r3, r3, r2
 8008752:	095b      	lsrs	r3, r3, #5
 8008754:	2064      	movs	r0, #100	; 0x64
 8008756:	fb00 f303 	mul.w	r3, r0, r3
 800875a:	1ad3      	subs	r3, r2, r3
 800875c:	011b      	lsls	r3, r3, #4
 800875e:	3332      	adds	r3, #50	; 0x32
 8008760:	4a15      	ldr	r2, [pc, #84]	; (80087b8 <UART_SetConfig+0x118>)
 8008762:	fba2 2303 	umull	r2, r3, r2, r3
 8008766:	095b      	lsrs	r3, r3, #5
 8008768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800876c:	4419      	add	r1, r3
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	4613      	mov	r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	009a      	lsls	r2, r3, #2
 8008778:	441a      	add	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	fbb2 f2f3 	udiv	r2, r2, r3
 8008784:	4b0c      	ldr	r3, [pc, #48]	; (80087b8 <UART_SetConfig+0x118>)
 8008786:	fba3 0302 	umull	r0, r3, r3, r2
 800878a:	095b      	lsrs	r3, r3, #5
 800878c:	2064      	movs	r0, #100	; 0x64
 800878e:	fb00 f303 	mul.w	r3, r0, r3
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	011b      	lsls	r3, r3, #4
 8008796:	3332      	adds	r3, #50	; 0x32
 8008798:	4a07      	ldr	r2, [pc, #28]	; (80087b8 <UART_SetConfig+0x118>)
 800879a:	fba2 2303 	umull	r2, r3, r2, r3
 800879e:	095b      	lsrs	r3, r3, #5
 80087a0:	f003 020f 	and.w	r2, r3, #15
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	440a      	add	r2, r1
 80087aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80087ac:	bf00      	nop
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	40013800 	.word	0x40013800
 80087b8:	51eb851f 	.word	0x51eb851f

080087bc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80087bc:	b5b0      	push	{r4, r5, r7, lr}
 80087be:	b08e      	sub	sp, #56	; 0x38
 80087c0:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80087c2:	2100      	movs	r1, #0
 80087c4:	2000      	movs	r0, #0
 80087c6:	f005 fd63 	bl	800e290 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80087ca:	4b2a      	ldr	r3, [pc, #168]	; (8008874 <MX_LWIP_Init+0xb8>)
 80087cc:	2200      	movs	r2, #0
 80087ce:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80087d0:	4b29      	ldr	r3, [pc, #164]	; (8008878 <MX_LWIP_Init+0xbc>)
 80087d2:	2200      	movs	r2, #0
 80087d4:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80087d6:	4b29      	ldr	r3, [pc, #164]	; (800887c <MX_LWIP_Init+0xc0>)
 80087d8:	2200      	movs	r2, #0
 80087da:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80087dc:	4b28      	ldr	r3, [pc, #160]	; (8008880 <MX_LWIP_Init+0xc4>)
 80087de:	9302      	str	r3, [sp, #8]
 80087e0:	4b28      	ldr	r3, [pc, #160]	; (8008884 <MX_LWIP_Init+0xc8>)
 80087e2:	9301      	str	r3, [sp, #4]
 80087e4:	2300      	movs	r3, #0
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	4b24      	ldr	r3, [pc, #144]	; (800887c <MX_LWIP_Init+0xc0>)
 80087ea:	4a23      	ldr	r2, [pc, #140]	; (8008878 <MX_LWIP_Init+0xbc>)
 80087ec:	4921      	ldr	r1, [pc, #132]	; (8008874 <MX_LWIP_Init+0xb8>)
 80087ee:	4826      	ldr	r0, [pc, #152]	; (8008888 <MX_LWIP_Init+0xcc>)
 80087f0:	f006 fa06 	bl	800ec00 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80087f4:	4824      	ldr	r0, [pc, #144]	; (8008888 <MX_LWIP_Init+0xcc>)
 80087f6:	f006 faeb 	bl	800edd0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80087fa:	4b23      	ldr	r3, [pc, #140]	; (8008888 <MX_LWIP_Init+0xcc>)
 80087fc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8008800:	089b      	lsrs	r3, r3, #2
 8008802:	f003 0301 	and.w	r3, r3, #1
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b00      	cmp	r3, #0
 800880a:	d003      	beq.n	8008814 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800880c:	481e      	ldr	r0, [pc, #120]	; (8008888 <MX_LWIP_Init+0xcc>)
 800880e:	f006 faed 	bl	800edec <netif_set_up>
 8008812:	e002      	b.n	800881a <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8008814:	481c      	ldr	r0, [pc, #112]	; (8008888 <MX_LWIP_Init+0xcc>)
 8008816:	f006 fb2d 	bl	800ee74 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800881a:	491c      	ldr	r1, [pc, #112]	; (800888c <MX_LWIP_Init+0xd0>)
 800881c:	481a      	ldr	r0, [pc, #104]	; (8008888 <MX_LWIP_Init+0xcc>)
 800881e:	f006 fb99 	bl	800ef54 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8008822:	2300      	movs	r3, #0
 8008824:	623b      	str	r3, [r7, #32]
 8008826:	2300      	movs	r3, #0
 8008828:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800882a:	f107 0320 	add.w	r3, r7, #32
 800882e:	2101      	movs	r1, #1
 8008830:	4618      	mov	r0, r3
 8008832:	f000 fd79 	bl	8009328 <osSemaphoreCreate>
 8008836:	4603      	mov	r3, r0
 8008838:	4a15      	ldr	r2, [pc, #84]	; (8008890 <MX_LWIP_Init+0xd4>)
 800883a:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800883c:	4b15      	ldr	r3, [pc, #84]	; (8008894 <MX_LWIP_Init+0xd8>)
 800883e:	4a12      	ldr	r2, [pc, #72]	; (8008888 <MX_LWIP_Init+0xcc>)
 8008840:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8008842:	4b13      	ldr	r3, [pc, #76]	; (8008890 <MX_LWIP_Init+0xd4>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a13      	ldr	r2, [pc, #76]	; (8008894 <MX_LWIP_Init+0xd8>)
 8008848:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800884a:	4b13      	ldr	r3, [pc, #76]	; (8008898 <MX_LWIP_Init+0xdc>)
 800884c:	1d3c      	adds	r4, r7, #4
 800884e:	461d      	mov	r5, r3
 8008850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008854:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008858:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 800885c:	1d3b      	adds	r3, r7, #4
 800885e:	490d      	ldr	r1, [pc, #52]	; (8008894 <MX_LWIP_Init+0xd8>)
 8008860:	4618      	mov	r0, r3
 8008862:	f000 fc65 	bl	8009130 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8008866:	4808      	ldr	r0, [pc, #32]	; (8008888 <MX_LWIP_Init+0xcc>)
 8008868:	f00d fc3a 	bl	80160e0 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800886c:	bf00      	nop
 800886e:	3728      	adds	r7, #40	; 0x28
 8008870:	46bd      	mov	sp, r7
 8008872:	bdb0      	pop	{r4, r5, r7, pc}
 8008874:	20000dd0 	.word	0x20000dd0
 8008878:	20000dd4 	.word	0x20000dd4
 800887c:	20000dd8 	.word	0x20000dd8
 8008880:	0800e18d 	.word	0x0800e18d
 8008884:	08008ec5 	.word	0x08008ec5
 8008888:	20000d98 	.word	0x20000d98
 800888c:	08008fa9 	.word	0x08008fa9
 8008890:	20000d8c 	.word	0x20000d8c
 8008894:	20000d90 	.word	0x20000d90
 8008898:	0801b878 	.word	0x0801b878

0800889c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b08c      	sub	sp, #48	; 0x30
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088a4:	f107 0320 	add.w	r3, r7, #32
 80088a8:	2200      	movs	r2, #0
 80088aa:	601a      	str	r2, [r3, #0]
 80088ac:	605a      	str	r2, [r3, #4]
 80088ae:	609a      	str	r2, [r3, #8]
 80088b0:	60da      	str	r2, [r3, #12]
  if(ethHandle->Instance==ETH)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a4a      	ldr	r2, [pc, #296]	; (80089e0 <HAL_ETH_MspInit+0x144>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	f040 808d 	bne.w	80089d8 <HAL_ETH_MspInit+0x13c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80088be:	4b49      	ldr	r3, [pc, #292]	; (80089e4 <HAL_ETH_MspInit+0x148>)
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	4a48      	ldr	r2, [pc, #288]	; (80089e4 <HAL_ETH_MspInit+0x148>)
 80088c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088c8:	6153      	str	r3, [r2, #20]
 80088ca:	4b46      	ldr	r3, [pc, #280]	; (80089e4 <HAL_ETH_MspInit+0x148>)
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088d2:	61fb      	str	r3, [r7, #28]
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	4b43      	ldr	r3, [pc, #268]	; (80089e4 <HAL_ETH_MspInit+0x148>)
 80088d8:	695b      	ldr	r3, [r3, #20]
 80088da:	4a42      	ldr	r2, [pc, #264]	; (80089e4 <HAL_ETH_MspInit+0x148>)
 80088dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088e0:	6153      	str	r3, [r2, #20]
 80088e2:	4b40      	ldr	r3, [pc, #256]	; (80089e4 <HAL_ETH_MspInit+0x148>)
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088ea:	61bb      	str	r3, [r7, #24]
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	4b3d      	ldr	r3, [pc, #244]	; (80089e4 <HAL_ETH_MspInit+0x148>)
 80088f0:	695b      	ldr	r3, [r3, #20]
 80088f2:	4a3c      	ldr	r2, [pc, #240]	; (80089e4 <HAL_ETH_MspInit+0x148>)
 80088f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088f8:	6153      	str	r3, [r2, #20]
 80088fa:	4b3a      	ldr	r3, [pc, #232]	; (80089e4 <HAL_ETH_MspInit+0x148>)
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008902:	617b      	str	r3, [r7, #20]
 8008904:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008906:	4b37      	ldr	r3, [pc, #220]	; (80089e4 <HAL_ETH_MspInit+0x148>)
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	4a36      	ldr	r2, [pc, #216]	; (80089e4 <HAL_ETH_MspInit+0x148>)
 800890c:	f043 0310 	orr.w	r3, r3, #16
 8008910:	6193      	str	r3, [r2, #24]
 8008912:	4b34      	ldr	r3, [pc, #208]	; (80089e4 <HAL_ETH_MspInit+0x148>)
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	f003 0310 	and.w	r3, r3, #16
 800891a:	613b      	str	r3, [r7, #16]
 800891c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800891e:	4b31      	ldr	r3, [pc, #196]	; (80089e4 <HAL_ETH_MspInit+0x148>)
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	4a30      	ldr	r2, [pc, #192]	; (80089e4 <HAL_ETH_MspInit+0x148>)
 8008924:	f043 0304 	orr.w	r3, r3, #4
 8008928:	6193      	str	r3, [r2, #24]
 800892a:	4b2e      	ldr	r3, [pc, #184]	; (80089e4 <HAL_ETH_MspInit+0x148>)
 800892c:	699b      	ldr	r3, [r3, #24]
 800892e:	f003 0304 	and.w	r3, r3, #4
 8008932:	60fb      	str	r3, [r7, #12]
 8008934:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008936:	4b2b      	ldr	r3, [pc, #172]	; (80089e4 <HAL_ETH_MspInit+0x148>)
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	4a2a      	ldr	r2, [pc, #168]	; (80089e4 <HAL_ETH_MspInit+0x148>)
 800893c:	f043 0308 	orr.w	r3, r3, #8
 8008940:	6193      	str	r3, [r2, #24]
 8008942:	4b28      	ldr	r3, [pc, #160]	; (80089e4 <HAL_ETH_MspInit+0x148>)
 8008944:	699b      	ldr	r3, [r3, #24]
 8008946:	f003 0308 	and.w	r3, r3, #8
 800894a:	60bb      	str	r3, [r7, #8]
 800894c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800894e:	2302      	movs	r3, #2
 8008950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008952:	2302      	movs	r3, #2
 8008954:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008956:	2303      	movs	r3, #3
 8008958:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800895a:	f107 0320 	add.w	r3, r7, #32
 800895e:	4619      	mov	r1, r3
 8008960:	4821      	ldr	r0, [pc, #132]	; (80089e8 <HAL_ETH_MspInit+0x14c>)
 8008962:	f7fb fd71 	bl	8004448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8008966:	2382      	movs	r3, #130	; 0x82
 8008968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800896a:	2300      	movs	r3, #0
 800896c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800896e:	2300      	movs	r3, #0
 8008970:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008972:	f107 0320 	add.w	r3, r7, #32
 8008976:	4619      	mov	r1, r3
 8008978:	481c      	ldr	r0, [pc, #112]	; (80089ec <HAL_ETH_MspInit+0x150>)
 800897a:	f7fb fd65 	bl	8004448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800897e:	2304      	movs	r3, #4
 8008980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008982:	2302      	movs	r3, #2
 8008984:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008986:	2303      	movs	r3, #3
 8008988:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800898a:	f107 0320 	add.w	r3, r7, #32
 800898e:	4619      	mov	r1, r3
 8008990:	4816      	ldr	r0, [pc, #88]	; (80089ec <HAL_ETH_MspInit+0x150>)
 8008992:	f7fb fd59 	bl	8004448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8008996:	2330      	movs	r3, #48	; 0x30
 8008998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800899a:	2300      	movs	r3, #0
 800899c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800899e:	2300      	movs	r3, #0
 80089a0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80089a2:	f107 0320 	add.w	r3, r7, #32
 80089a6:	4619      	mov	r1, r3
 80089a8:	480f      	ldr	r0, [pc, #60]	; (80089e8 <HAL_ETH_MspInit+0x14c>)
 80089aa:	f7fb fd4d 	bl	8004448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80089ae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80089b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089b4:	2302      	movs	r3, #2
 80089b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80089b8:	2303      	movs	r3, #3
 80089ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80089bc:	f107 0320 	add.w	r3, r7, #32
 80089c0:	4619      	mov	r1, r3
 80089c2:	480b      	ldr	r0, [pc, #44]	; (80089f0 <HAL_ETH_MspInit+0x154>)
 80089c4:	f7fb fd40 	bl	8004448 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80089c8:	2200      	movs	r2, #0
 80089ca:	2105      	movs	r1, #5
 80089cc:	203d      	movs	r0, #61	; 0x3d
 80089ce:	f7fa faac 	bl	8002f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80089d2:	203d      	movs	r0, #61	; 0x3d
 80089d4:	f7fa fac5 	bl	8002f62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80089d8:	bf00      	nop
 80089da:	3730      	adds	r7, #48	; 0x30
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	40028000 	.word	0x40028000
 80089e4:	40021000 	.word	0x40021000
 80089e8:	40011000 	.word	0x40011000
 80089ec:	40010800 	.word	0x40010800
 80089f0:	40010c00 	.word	0x40010c00

080089f4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80089fc:	4b04      	ldr	r3, [pc, #16]	; (8008a10 <HAL_ETH_RxCpltCallback+0x1c>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f000 fd11 	bl	8009428 <osSemaphoreRelease>
}
 8008a06:	bf00      	nop
 8008a08:	3708      	adds	r7, #8
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	2000560c 	.word	0x2000560c

08008a14 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008a14:	b5b0      	push	{r4, r5, r7, lr}
 8008a16:	b090      	sub	sp, #64	; 0x40
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008a20:	4b60      	ldr	r3, [pc, #384]	; (8008ba4 <low_level_init+0x190>)
 8008a22:	4a61      	ldr	r2, [pc, #388]	; (8008ba8 <low_level_init+0x194>)
 8008a24:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8008a26:	4b5f      	ldr	r3, [pc, #380]	; (8008ba4 <low_level_init+0x190>)
 8008a28:	2201      	movs	r2, #1
 8008a2a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8008a2c:	4b5d      	ldr	r3, [pc, #372]	; (8008ba4 <low_level_init+0x190>)
 8008a2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008a32:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008a34:	4b5b      	ldr	r3, [pc, #364]	; (8008ba4 <low_level_init+0x190>)
 8008a36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a3a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8008a3c:	4b59      	ldr	r3, [pc, #356]	; (8008ba4 <low_level_init+0x190>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8008a42:	2300      	movs	r3, #0
 8008a44:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8008a48:	2380      	movs	r3, #128	; 0x80
 8008a4a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8008a4e:	23e1      	movs	r3, #225	; 0xe1
 8008a50:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8008a54:	2300      	movs	r3, #0
 8008a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x01;
 8008a60:	2301      	movs	r3, #1
 8008a62:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8008a66:	4a4f      	ldr	r2, [pc, #316]	; (8008ba4 <low_level_init+0x190>)
 8008a68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a6c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8008a6e:	4b4d      	ldr	r3, [pc, #308]	; (8008ba4 <low_level_init+0x190>)
 8008a70:	2201      	movs	r2, #1
 8008a72:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8008a74:	4b4b      	ldr	r3, [pc, #300]	; (8008ba4 <low_level_init+0x190>)
 8008a76:	2200      	movs	r2, #0
 8008a78:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8008a7a:	4b4a      	ldr	r3, [pc, #296]	; (8008ba4 <low_level_init+0x190>)
 8008a7c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008a80:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008a82:	4848      	ldr	r0, [pc, #288]	; (8008ba4 <low_level_init+0x190>)
 8008a84:	f7fa fb92 	bl	80031ac <HAL_ETH_Init>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8008a8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d108      	bne.n	8008aa8 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8008a9c:	f043 0304 	orr.w	r3, r3, #4
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8008aa8:	2304      	movs	r3, #4
 8008aaa:	4a40      	ldr	r2, [pc, #256]	; (8008bac <low_level_init+0x198>)
 8008aac:	4940      	ldr	r1, [pc, #256]	; (8008bb0 <low_level_init+0x19c>)
 8008aae:	483d      	ldr	r0, [pc, #244]	; (8008ba4 <low_level_init+0x190>)
 8008ab0:	f7fa fce8 	bl	8003484 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8008ab4:	2308      	movs	r3, #8
 8008ab6:	4a3f      	ldr	r2, [pc, #252]	; (8008bb4 <low_level_init+0x1a0>)
 8008ab8:	493f      	ldr	r1, [pc, #252]	; (8008bb8 <low_level_init+0x1a4>)
 8008aba:	483a      	ldr	r0, [pc, #232]	; (8008ba4 <low_level_init+0x190>)
 8008abc:	f7fa fd49 	bl	8003552 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2206      	movs	r2, #6
 8008ac4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008ac8:	4b36      	ldr	r3, [pc, #216]	; (8008ba4 <low_level_init+0x190>)
 8008aca:	695b      	ldr	r3, [r3, #20]
 8008acc:	781a      	ldrb	r2, [r3, #0]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008ad4:	4b33      	ldr	r3, [pc, #204]	; (8008ba4 <low_level_init+0x190>)
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	785a      	ldrb	r2, [r3, #1]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008ae0:	4b30      	ldr	r3, [pc, #192]	; (8008ba4 <low_level_init+0x190>)
 8008ae2:	695b      	ldr	r3, [r3, #20]
 8008ae4:	789a      	ldrb	r2, [r3, #2]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008aec:	4b2d      	ldr	r3, [pc, #180]	; (8008ba4 <low_level_init+0x190>)
 8008aee:	695b      	ldr	r3, [r3, #20]
 8008af0:	78da      	ldrb	r2, [r3, #3]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008af8:	4b2a      	ldr	r3, [pc, #168]	; (8008ba4 <low_level_init+0x190>)
 8008afa:	695b      	ldr	r3, [r3, #20]
 8008afc:	791a      	ldrb	r2, [r3, #4]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008b04:	4b27      	ldr	r3, [pc, #156]	; (8008ba4 <low_level_init+0x190>)
 8008b06:	695b      	ldr	r3, [r3, #20]
 8008b08:	795a      	ldrb	r2, [r3, #5]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  /* maximum transfer unit */
  netif->mtu = 1500;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008b16:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8008b1e:	f043 030a 	orr.w	r3, r3, #10
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b2e:	2300      	movs	r3, #0
 8008b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8008b32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008b36:	2101      	movs	r1, #1
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f000 fbf5 	bl	8009328 <osSemaphoreCreate>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	4a1e      	ldr	r2, [pc, #120]	; (8008bbc <low_level_init+0x1a8>)
 8008b42:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8008b44:	4b1e      	ldr	r3, [pc, #120]	; (8008bc0 <low_level_init+0x1ac>)
 8008b46:	f107 040c 	add.w	r4, r7, #12
 8008b4a:	461d      	mov	r5, r3
 8008b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008b54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8008b58:	f107 030c 	add.w	r3, r7, #12
 8008b5c:	6879      	ldr	r1, [r7, #4]
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 fae6 	bl	8009130 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8008b64:	480f      	ldr	r0, [pc, #60]	; (8008ba4 <low_level_init+0x190>)
 8008b66:	f7fb f812 	bl	8003b8e <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8008b6a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008b6e:	461a      	mov	r2, r3
 8008b70:	211d      	movs	r1, #29
 8008b72:	480c      	ldr	r0, [pc, #48]	; (8008ba4 <low_level_init+0x190>)
 8008b74:	f7fa ff3d 	bl	80039f2 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8008b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7a:	f043 0310 	orr.w	r3, r3, #16
 8008b7e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8008b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b82:	461a      	mov	r2, r3
 8008b84:	211d      	movs	r1, #29
 8008b86:	4807      	ldr	r0, [pc, #28]	; (8008ba4 <low_level_init+0x190>)
 8008b88:	f7fa ff9b 	bl	8003ac2 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8008b8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008b90:	461a      	mov	r2, r3
 8008b92:	211d      	movs	r1, #29
 8008b94:	4803      	ldr	r0, [pc, #12]	; (8008ba4 <low_level_init+0x190>)
 8008b96:	f7fa ff2c 	bl	80039f2 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008b9a:	bf00      	nop
 8008b9c:	3740      	adds	r7, #64	; 0x40
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	20005610 	.word	0x20005610
 8008ba8:	40028000 	.word	0x40028000
 8008bac:	20003e3c 	.word	0x20003e3c
 8008bb0:	20000e5c 	.word	0x20000e5c
 8008bb4:	20000e9c 	.word	0x20000e9c
 8008bb8:	20000ddc 	.word	0x20000ddc
 8008bbc:	2000560c 	.word	0x2000560c
 8008bc0:	0801b89c 	.word	0x0801b89c

08008bc4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b08a      	sub	sp, #40	; 0x28
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8008bce:	4b4b      	ldr	r3, [pc, #300]	; (8008cfc <low_level_output+0x138>)
 8008bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8008bde:	2300      	movs	r3, #0
 8008be0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8008be2:	2300      	movs	r3, #0
 8008be4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8008be6:	4b45      	ldr	r3, [pc, #276]	; (8008cfc <low_level_output+0x138>)
 8008be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bea:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8008bec:	2300      	movs	r3, #0
 8008bee:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	623b      	str	r3, [r7, #32]
 8008bf4:	e05a      	b.n	8008cac <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	da03      	bge.n	8008c06 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8008bfe:	23f8      	movs	r3, #248	; 0xf8
 8008c00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8008c04:	e05c      	b.n	8008cc0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	895b      	ldrh	r3, [r3, #10]
 8008c0a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008c10:	e02f      	b.n	8008c72 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8008c12:	69fa      	ldr	r2, [r7, #28]
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	18d0      	adds	r0, r2, r3
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	685a      	ldr	r2, [r3, #4]
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	18d1      	adds	r1, r2, r3
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8008c26:	3304      	adds	r3, #4
 8008c28:	461a      	mov	r2, r3
 8008c2a:	f011 fb6a 	bl	801a302 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	da03      	bge.n	8008c44 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8008c3c:	23f8      	movs	r3, #248	; 0xf8
 8008c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8008c42:	e03d      	b.n	8008cc0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8008c4a:	693a      	ldr	r2, [r7, #16]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	4413      	add	r3, r2
 8008c50:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008c54:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8008c56:	68ba      	ldr	r2, [r7, #8]
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008c60:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8008c62:	697a      	ldr	r2, [r7, #20]
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	1ad3      	subs	r3, r2, r3
 8008c68:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008c6c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	4413      	add	r3, r2
 8008c78:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d8c8      	bhi.n	8008c12 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8008c80:	69fa      	ldr	r2, [r7, #28]
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	18d0      	adds	r0, r2, r3
 8008c86:	6a3b      	ldr	r3, [r7, #32]
 8008c88:	685a      	ldr	r2, [r3, #4]
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	4619      	mov	r1, r3
 8008c92:	f011 fb36 	bl	801a302 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008c96:	693a      	ldr	r2, [r7, #16]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8008c9e:	697a      	ldr	r2, [r7, #20]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8008ca6:	6a3b      	ldr	r3, [r7, #32]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	623b      	str	r3, [r7, #32]
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1a1      	bne.n	8008bf6 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8008cb2:	6979      	ldr	r1, [r7, #20]
 8008cb4:	4811      	ldr	r0, [pc, #68]	; (8008cfc <low_level_output+0x138>)
 8008cb6:	f7fa fcb7 	bl	8003628 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8008cc0:	4b0e      	ldr	r3, [pc, #56]	; (8008cfc <low_level_output+0x138>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	f003 0320 	and.w	r3, r3, #32
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00d      	beq.n	8008cee <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8008cd2:	4b0a      	ldr	r3, [pc, #40]	; (8008cfc <low_level_output+0x138>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cda:	461a      	mov	r2, r3
 8008cdc:	2320      	movs	r3, #32
 8008cde:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8008ce0:	4b06      	ldr	r3, [pc, #24]	; (8008cfc <low_level_output+0x138>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ce8:	461a      	mov	r2, r3
 8008cea:	2300      	movs	r3, #0
 8008cec:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8008cee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3728      	adds	r7, #40	; 0x28
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	20005610 	.word	0x20005610

08008d00 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b08c      	sub	sp, #48	; 0x30
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8008d10:	2300      	movs	r3, #0
 8008d12:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8008d14:	2300      	movs	r3, #0
 8008d16:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8008d20:	2300      	movs	r3, #0
 8008d22:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8008d24:	484e      	ldr	r0, [pc, #312]	; (8008e60 <low_level_input+0x160>)
 8008d26:	f7fa fd67 	bl	80037f8 <HAL_ETH_GetReceivedFrame_IT>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d001      	beq.n	8008d34 <low_level_input+0x34>

    return NULL;
 8008d30:	2300      	movs	r3, #0
 8008d32:	e090      	b.n	8008e56 <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8008d34:	4b4a      	ldr	r3, [pc, #296]	; (8008e60 <low_level_input+0x160>)
 8008d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d38:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8008d3a:	4b49      	ldr	r3, [pc, #292]	; (8008e60 <low_level_input+0x160>)
 8008d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8008d40:	89fb      	ldrh	r3, [r7, #14]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d006      	beq.n	8008d54 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8008d46:	89fb      	ldrh	r3, [r7, #14]
 8008d48:	2203      	movs	r2, #3
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	2004      	movs	r0, #4
 8008d4e:	f006 f971 	bl	800f034 <pbuf_alloc>
 8008d52:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8008d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d04b      	beq.n	8008df2 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008d5a:	4b41      	ldr	r3, [pc, #260]	; (8008e60 <low_level_input+0x160>)
 8008d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d5e:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8008d60:	2300      	movs	r3, #0
 8008d62:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d66:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d68:	e040      	b.n	8008dec <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8008d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6c:	895b      	ldrh	r3, [r3, #10]
 8008d6e:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8008d70:	2300      	movs	r3, #0
 8008d72:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008d74:	e021      	b.n	8008dba <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8008d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d78:	685a      	ldr	r2, [r3, #4]
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	18d0      	adds	r0, r2, r3
 8008d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	18d1      	adds	r1, r2, r3
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8008d8a:	3304      	adds	r3, #4
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	f011 fab8 	bl	801a302 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008d92:	6a3b      	ldr	r3, [r7, #32]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8008d98:	6a3b      	ldr	r3, [r7, #32]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8008d9e:	69fa      	ldr	r2, [r7, #28]
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	4413      	add	r3, r2
 8008da4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008da8:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8008daa:	69ba      	ldr	r2, [r7, #24]
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	1ad3      	subs	r3, r2, r3
 8008db0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008db4:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008dba:	697a      	ldr	r2, [r7, #20]
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d8d6      	bhi.n	8008d76 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8008dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dca:	685a      	ldr	r2, [r3, #4]
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	18d0      	adds	r0, r2, r3
 8008dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	697a      	ldr	r2, [r7, #20]
 8008dd8:	4619      	mov	r1, r3
 8008dda:	f011 fa92 	bl	801a302 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008dde:	69fa      	ldr	r2, [r7, #28]
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	4413      	add	r3, r2
 8008de4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	62bb      	str	r3, [r7, #40]	; 0x28
 8008dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1bb      	bne.n	8008d6a <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008df2:	4b1b      	ldr	r3, [pc, #108]	; (8008e60 <low_level_input+0x160>)
 8008df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df6:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008df8:	2300      	movs	r3, #0
 8008dfa:	613b      	str	r3, [r7, #16]
 8008dfc:	e00b      	b.n	8008e16 <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8008dfe:	6a3b      	ldr	r3, [r7, #32]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008e06:	6a3b      	ldr	r3, [r7, #32]
 8008e08:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008e0a:	6a3b      	ldr	r3, [r7, #32]
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	3301      	adds	r3, #1
 8008e14:	613b      	str	r3, [r7, #16]
 8008e16:	4b12      	ldr	r3, [pc, #72]	; (8008e60 <low_level_input+0x160>)
 8008e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1a:	693a      	ldr	r2, [r7, #16]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d3ee      	bcc.n	8008dfe <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8008e20:	4b0f      	ldr	r3, [pc, #60]	; (8008e60 <low_level_input+0x160>)
 8008e22:	2200      	movs	r2, #0
 8008e24:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8008e26:	4b0e      	ldr	r3, [pc, #56]	; (8008e60 <low_level_input+0x160>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e2e:	695b      	ldr	r3, [r3, #20]
 8008e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00d      	beq.n	8008e54 <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8008e38:	4b09      	ldr	r3, [pc, #36]	; (8008e60 <low_level_input+0x160>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e40:	461a      	mov	r2, r3
 8008e42:	2380      	movs	r3, #128	; 0x80
 8008e44:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8008e46:	4b06      	ldr	r3, [pc, #24]	; (8008e60 <low_level_input+0x160>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e4e:	461a      	mov	r2, r3
 8008e50:	2300      	movs	r3, #0
 8008e52:	6093      	str	r3, [r2, #8]
  }
  return p;
 8008e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3730      	adds	r7, #48	; 0x30
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	20005610 	.word	0x20005610

08008e64 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008e70:	4b12      	ldr	r3, [pc, #72]	; (8008ebc <ethernetif_input+0x58>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f04f 31ff 	mov.w	r1, #4294967295
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f000 fa87 	bl	800938c <osSemaphoreWait>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d1f5      	bne.n	8008e70 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8008e84:	480e      	ldr	r0, [pc, #56]	; (8008ec0 <ethernetif_input+0x5c>)
 8008e86:	f011 f8af 	bl	8019fe8 <sys_mutex_lock>
        p = low_level_input( netif );
 8008e8a:	68f8      	ldr	r0, [r7, #12]
 8008e8c:	f7ff ff38 	bl	8008d00 <low_level_input>
 8008e90:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00a      	beq.n	8008eae <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	691b      	ldr	r3, [r3, #16]
 8008e9c:	68f9      	ldr	r1, [r7, #12]
 8008e9e:	68b8      	ldr	r0, [r7, #8]
 8008ea0:	4798      	blx	r3
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d002      	beq.n	8008eae <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8008ea8:	68b8      	ldr	r0, [r7, #8]
 8008eaa:	f006 fc3b 	bl	800f724 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8008eae:	4804      	ldr	r0, [pc, #16]	; (8008ec0 <ethernetif_input+0x5c>)
 8008eb0:	f011 f8a9 	bl	801a006 <sys_mutex_unlock>
      } while(p!=NULL);
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1e4      	bne.n	8008e84 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008eba:	e7d9      	b.n	8008e70 <ethernetif_input+0xc>
 8008ebc:	2000560c 	.word	0x2000560c
 8008ec0:	2000928c 	.word	0x2000928c

08008ec4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d106      	bne.n	8008ee0 <ethernetif_init+0x1c>
 8008ed2:	4b0e      	ldr	r3, [pc, #56]	; (8008f0c <ethernetif_init+0x48>)
 8008ed4:	f240 2233 	movw	r2, #563	; 0x233
 8008ed8:	490d      	ldr	r1, [pc, #52]	; (8008f10 <ethernetif_init+0x4c>)
 8008eda:	480e      	ldr	r0, [pc, #56]	; (8008f14 <ethernetif_init+0x50>)
 8008edc:	f011 fabc 	bl	801a458 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2273      	movs	r2, #115	; 0x73
 8008ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->name[1] = IFNAME1;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2274      	movs	r2, #116	; 0x74
 8008eec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a09      	ldr	r2, [pc, #36]	; (8008f18 <ethernetif_init+0x54>)
 8008ef4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4a08      	ldr	r2, [pc, #32]	; (8008f1c <ethernetif_init+0x58>)
 8008efa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7ff fd89 	bl	8008a14 <low_level_init>

  return ERR_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	0801b8b8 	.word	0x0801b8b8
 8008f10:	0801b8d4 	.word	0x0801b8d4
 8008f14:	0801b8e4 	.word	0x0801b8e4
 8008f18:	080180a9 	.word	0x080180a9
 8008f1c:	08008bc5 	.word	0x08008bc5

08008f20 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008f24:	f7f9 fe22 	bl	8002b6c <HAL_GetTick>
 8008f28:	4603      	mov	r3, r0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	bd80      	pop	{r7, pc}
	...

08008f30 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008f40:	f107 0308 	add.w	r3, r7, #8
 8008f44:	461a      	mov	r2, r3
 8008f46:	2101      	movs	r1, #1
 8008f48:	4816      	ldr	r0, [pc, #88]	; (8008fa4 <ethernetif_set_link+0x74>)
 8008f4a:	f7fa fd52 	bl	80039f2 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	f003 0304 	and.w	r3, r3, #4
 8008f54:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8008f5e:	f003 0304 	and.w	r3, r3, #4
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d108      	bne.n	8008f78 <ethernetif_set_link+0x48>
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d005      	beq.n	8008f78 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f005 ffa1 	bl	800eeb8 <netif_set_link_up>
 8008f76:	e011      	b.n	8008f9c <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8008f80:	089b      	lsrs	r3, r3, #2
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d007      	beq.n	8008f9c <ethernetif_set_link+0x6c>
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d104      	bne.n	8008f9c <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4618      	mov	r0, r3
 8008f98:	f005 ffbc 	bl	800ef14 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8008f9c:	20c8      	movs	r0, #200	; 0xc8
 8008f9e:	f000 f913 	bl	80091c8 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008fa2:	e7cd      	b.n	8008f40 <ethernetif_set_link+0x10>
 8008fa4:	20005610 	.word	0x20005610

08008fa8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8008fbe:	089b      	lsrs	r3, r3, #2
 8008fc0:	f003 0301 	and.w	r3, r3, #1
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d05d      	beq.n	8009086 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8008fca:	4b34      	ldr	r3, [pc, #208]	; (800909c <ethernetif_update_config+0xf4>)
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d03f      	beq.n	8009052 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8008fd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	4830      	ldr	r0, [pc, #192]	; (800909c <ethernetif_update_config+0xf4>)
 8008fda:	f7fa fd72 	bl	8003ac2 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8008fde:	f7f9 fdc5 	bl	8002b6c <HAL_GetTick>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008fe6:	f107 0308 	add.w	r3, r7, #8
 8008fea:	461a      	mov	r2, r3
 8008fec:	2101      	movs	r1, #1
 8008fee:	482b      	ldr	r0, [pc, #172]	; (800909c <ethernetif_update_config+0xf4>)
 8008ff0:	f7fa fcff 	bl	80039f2 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8008ff4:	f7f9 fdba 	bl	8002b6c <HAL_GetTick>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	1ad3      	subs	r3, r2, r3
 8008ffe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009002:	d828      	bhi.n	8009056 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	f003 0320 	and.w	r3, r3, #32
 800900a:	2b00      	cmp	r3, #0
 800900c:	d0eb      	beq.n	8008fe6 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800900e:	f107 0308 	add.w	r3, r7, #8
 8009012:	461a      	mov	r2, r3
 8009014:	211f      	movs	r1, #31
 8009016:	4821      	ldr	r0, [pc, #132]	; (800909c <ethernetif_update_config+0xf4>)
 8009018:	f7fa fceb 	bl	80039f2 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	f003 0310 	and.w	r3, r3, #16
 8009022:	2b00      	cmp	r3, #0
 8009024:	d004      	beq.n	8009030 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8009026:	4b1d      	ldr	r3, [pc, #116]	; (800909c <ethernetif_update_config+0xf4>)
 8009028:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800902c:	60da      	str	r2, [r3, #12]
 800902e:	e002      	b.n	8009036 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8009030:	4b1a      	ldr	r3, [pc, #104]	; (800909c <ethernetif_update_config+0xf4>)
 8009032:	2200      	movs	r2, #0
 8009034:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	f003 0304 	and.w	r3, r3, #4
 800903c:	2b00      	cmp	r3, #0
 800903e:	d003      	beq.n	8009048 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8009040:	4b16      	ldr	r3, [pc, #88]	; (800909c <ethernetif_update_config+0xf4>)
 8009042:	2200      	movs	r2, #0
 8009044:	609a      	str	r2, [r3, #8]
 8009046:	e016      	b.n	8009076 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8009048:	4b14      	ldr	r3, [pc, #80]	; (800909c <ethernetif_update_config+0xf4>)
 800904a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800904e:	609a      	str	r2, [r3, #8]
 8009050:	e011      	b.n	8009076 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8009052:	bf00      	nop
 8009054:	e000      	b.n	8009058 <ethernetif_update_config+0xb0>
          goto error;
 8009056:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8009058:	4b10      	ldr	r3, [pc, #64]	; (800909c <ethernetif_update_config+0xf4>)
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	08db      	lsrs	r3, r3, #3
 800905e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8009060:	4b0e      	ldr	r3, [pc, #56]	; (800909c <ethernetif_update_config+0xf4>)
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	085b      	lsrs	r3, r3, #1
 8009066:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8009068:	4313      	orrs	r3, r2
 800906a:	b29b      	uxth	r3, r3
 800906c:	461a      	mov	r2, r3
 800906e:	2100      	movs	r1, #0
 8009070:	480a      	ldr	r0, [pc, #40]	; (800909c <ethernetif_update_config+0xf4>)
 8009072:	f7fa fd26 	bl	8003ac2 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8009076:	2100      	movs	r1, #0
 8009078:	4808      	ldr	r0, [pc, #32]	; (800909c <ethernetif_update_config+0xf4>)
 800907a:	f7fa fde7 	bl	8003c4c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800907e:	4807      	ldr	r0, [pc, #28]	; (800909c <ethernetif_update_config+0xf4>)
 8009080:	f7fa fd85 	bl	8003b8e <HAL_ETH_Start>
 8009084:	e002      	b.n	800908c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8009086:	4805      	ldr	r0, [pc, #20]	; (800909c <ethernetif_update_config+0xf4>)
 8009088:	f7fa fdb0 	bl	8003bec <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 f807 	bl	80090a0 <ethernetif_notify_conn_changed>
}
 8009092:	bf00      	nop
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	20005610 	.word	0x20005610

080090a0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80090a8:	bf00      	nop
 80090aa:	370c      	adds	r7, #12
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bc80      	pop	{r7}
 80090b0:	4770      	bx	lr

080090b2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b085      	sub	sp, #20
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	4603      	mov	r3, r0
 80090ba:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80090bc:	2300      	movs	r3, #0
 80090be:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80090c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80090c4:	2b84      	cmp	r3, #132	; 0x84
 80090c6:	d005      	beq.n	80090d4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80090c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	4413      	add	r3, r2
 80090d0:	3303      	adds	r3, #3
 80090d2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80090d4:	68fb      	ldr	r3, [r7, #12]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	bc80      	pop	{r7}
 80090de:	4770      	bx	lr

080090e0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090e6:	f3ef 8305 	mrs	r3, IPSR
 80090ea:	607b      	str	r3, [r7, #4]
  return(result);
 80090ec:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	bf14      	ite	ne
 80090f2:	2301      	movne	r3, #1
 80090f4:	2300      	moveq	r3, #0
 80090f6:	b2db      	uxtb	r3, r3
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bc80      	pop	{r7}
 8009100:	4770      	bx	lr

08009102 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009106:	f001 fd2b 	bl	800ab60 <vTaskStartScheduler>
  
  return osOK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	bd80      	pop	{r7, pc}

08009110 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009114:	f7ff ffe4 	bl	80090e0 <inHandlerMode>
 8009118:	4603      	mov	r3, r0
 800911a:	2b00      	cmp	r3, #0
 800911c:	d003      	beq.n	8009126 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800911e:	f001 fe41 	bl	800ada4 <xTaskGetTickCountFromISR>
 8009122:	4603      	mov	r3, r0
 8009124:	e002      	b.n	800912c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009126:	f001 fe2f 	bl	800ad88 <xTaskGetTickCount>
 800912a:	4603      	mov	r3, r0
  }
}
 800912c:	4618      	mov	r0, r3
 800912e:	bd80      	pop	{r7, pc}

08009130 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009132:	b089      	sub	sp, #36	; 0x24
 8009134:	af04      	add	r7, sp, #16
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	695b      	ldr	r3, [r3, #20]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d020      	beq.n	8009184 <osThreadCreate+0x54>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	699b      	ldr	r3, [r3, #24]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d01c      	beq.n	8009184 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	685c      	ldr	r4, [r3, #4]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681d      	ldr	r5, [r3, #0]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	691e      	ldr	r6, [r3, #16]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800915c:	4618      	mov	r0, r3
 800915e:	f7ff ffa8 	bl	80090b2 <makeFreeRtosPriority>
 8009162:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	695b      	ldr	r3, [r3, #20]
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800916c:	9202      	str	r2, [sp, #8]
 800916e:	9301      	str	r3, [sp, #4]
 8009170:	9100      	str	r1, [sp, #0]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	4632      	mov	r2, r6
 8009176:	4629      	mov	r1, r5
 8009178:	4620      	mov	r0, r4
 800917a:	f001 fb1b 	bl	800a7b4 <xTaskCreateStatic>
 800917e:	4603      	mov	r3, r0
 8009180:	60fb      	str	r3, [r7, #12]
 8009182:	e01c      	b.n	80091be <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	685c      	ldr	r4, [r3, #4]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009190:	b29e      	uxth	r6, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009198:	4618      	mov	r0, r3
 800919a:	f7ff ff8a 	bl	80090b2 <makeFreeRtosPriority>
 800919e:	4602      	mov	r2, r0
 80091a0:	f107 030c 	add.w	r3, r7, #12
 80091a4:	9301      	str	r3, [sp, #4]
 80091a6:	9200      	str	r2, [sp, #0]
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	4632      	mov	r2, r6
 80091ac:	4629      	mov	r1, r5
 80091ae:	4620      	mov	r0, r4
 80091b0:	f001 fb5c 	bl	800a86c <xTaskCreate>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d001      	beq.n	80091be <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80091ba:	2300      	movs	r3, #0
 80091bc:	e000      	b.n	80091c0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80091be:	68fb      	ldr	r3, [r7, #12]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3714      	adds	r7, #20
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080091c8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d001      	beq.n	80091de <osDelay+0x16>
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	e000      	b.n	80091e0 <osDelay+0x18>
 80091de:	2301      	movs	r3, #1
 80091e0:	4618      	mov	r0, r3
 80091e2:	f001 fc89 	bl	800aaf8 <vTaskDelay>
  
  return osOK;
 80091e6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d007      	beq.n	8009210 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	4619      	mov	r1, r3
 8009206:	2001      	movs	r0, #1
 8009208:	f000 fc7a 	bl	8009b00 <xQueueCreateMutexStatic>
 800920c:	4603      	mov	r3, r0
 800920e:	e003      	b.n	8009218 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009210:	2001      	movs	r0, #1
 8009212:	f000 fc5d 	bl	8009ad0 <xQueueCreateMutex>
 8009216:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009218:	4618      	mov	r0, r3
 800921a:	3708      	adds	r7, #8
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800922a:	2300      	movs	r3, #0
 800922c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d101      	bne.n	8009238 <osMutexWait+0x18>
    return osErrorParameter;
 8009234:	2380      	movs	r3, #128	; 0x80
 8009236:	e03a      	b.n	80092ae <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8009238:	2300      	movs	r3, #0
 800923a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009242:	d103      	bne.n	800924c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009244:	f04f 33ff 	mov.w	r3, #4294967295
 8009248:	60fb      	str	r3, [r7, #12]
 800924a:	e009      	b.n	8009260 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d006      	beq.n	8009260 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d101      	bne.n	8009260 <osMutexWait+0x40>
      ticks = 1;
 800925c:	2301      	movs	r3, #1
 800925e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009260:	f7ff ff3e 	bl	80090e0 <inHandlerMode>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d017      	beq.n	800929a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800926a:	f107 0308 	add.w	r3, r7, #8
 800926e:	461a      	mov	r2, r3
 8009270:	2100      	movs	r1, #0
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f001 f870 	bl	800a358 <xQueueReceiveFromISR>
 8009278:	4603      	mov	r3, r0
 800927a:	2b01      	cmp	r3, #1
 800927c:	d001      	beq.n	8009282 <osMutexWait+0x62>
      return osErrorOS;
 800927e:	23ff      	movs	r3, #255	; 0xff
 8009280:	e015      	b.n	80092ae <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d011      	beq.n	80092ac <osMutexWait+0x8c>
 8009288:	4b0b      	ldr	r3, [pc, #44]	; (80092b8 <osMutexWait+0x98>)
 800928a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800928e:	601a      	str	r2, [r3, #0]
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	f3bf 8f6f 	isb	sy
 8009298:	e008      	b.n	80092ac <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800929a:	68f9      	ldr	r1, [r7, #12]
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 ff4f 	bl	800a140 <xQueueSemaphoreTake>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d001      	beq.n	80092ac <osMutexWait+0x8c>
    return osErrorOS;
 80092a8:	23ff      	movs	r3, #255	; 0xff
 80092aa:	e000      	b.n	80092ae <osMutexWait+0x8e>
  }
  
  return osOK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	e000ed04 	.word	0xe000ed04

080092bc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80092c8:	2300      	movs	r3, #0
 80092ca:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80092cc:	f7ff ff08 	bl	80090e0 <inHandlerMode>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d016      	beq.n	8009304 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80092d6:	f107 0308 	add.w	r3, r7, #8
 80092da:	4619      	mov	r1, r3
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 fdc1 	bl	8009e64 <xQueueGiveFromISR>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d001      	beq.n	80092ec <osMutexRelease+0x30>
      return osErrorOS;
 80092e8:	23ff      	movs	r3, #255	; 0xff
 80092ea:	e017      	b.n	800931c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d013      	beq.n	800931a <osMutexRelease+0x5e>
 80092f2:	4b0c      	ldr	r3, [pc, #48]	; (8009324 <osMutexRelease+0x68>)
 80092f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092f8:	601a      	str	r2, [r3, #0]
 80092fa:	f3bf 8f4f 	dsb	sy
 80092fe:	f3bf 8f6f 	isb	sy
 8009302:	e00a      	b.n	800931a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009304:	2300      	movs	r3, #0
 8009306:	2200      	movs	r2, #0
 8009308:	2100      	movs	r1, #0
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fc14 	bl	8009b38 <xQueueGenericSend>
 8009310:	4603      	mov	r3, r0
 8009312:	2b01      	cmp	r3, #1
 8009314:	d001      	beq.n	800931a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009316:	23ff      	movs	r3, #255	; 0xff
 8009318:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800931a:	68fb      	ldr	r3, [r7, #12]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	e000ed04 	.word	0xe000ed04

08009328 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009328:	b580      	push	{r7, lr}
 800932a:	b086      	sub	sp, #24
 800932c:	af02      	add	r7, sp, #8
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00f      	beq.n	800935a <osSemaphoreCreate+0x32>
    if (count == 1) {
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d10a      	bne.n	8009356 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	2203      	movs	r2, #3
 8009346:	9200      	str	r2, [sp, #0]
 8009348:	2200      	movs	r2, #0
 800934a:	2100      	movs	r1, #0
 800934c:	2001      	movs	r0, #1
 800934e:	f000 fad1 	bl	80098f4 <xQueueGenericCreateStatic>
 8009352:	4603      	mov	r3, r0
 8009354:	e016      	b.n	8009384 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009356:	2300      	movs	r3, #0
 8009358:	e014      	b.n	8009384 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d110      	bne.n	8009382 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009360:	2203      	movs	r2, #3
 8009362:	2100      	movs	r1, #0
 8009364:	2001      	movs	r0, #1
 8009366:	f000 fb3c 	bl	80099e2 <xQueueGenericCreate>
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d005      	beq.n	800937e <osSemaphoreCreate+0x56>
 8009372:	2300      	movs	r3, #0
 8009374:	2200      	movs	r2, #0
 8009376:	2100      	movs	r1, #0
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	f000 fbdd 	bl	8009b38 <xQueueGenericSend>
      return sema;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	e000      	b.n	8009384 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009382:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009384:	4618      	mov	r0, r3
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009396:	2300      	movs	r3, #0
 8009398:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d101      	bne.n	80093a4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80093a0:	2380      	movs	r3, #128	; 0x80
 80093a2:	e03a      	b.n	800941a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80093a4:	2300      	movs	r3, #0
 80093a6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ae:	d103      	bne.n	80093b8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80093b0:	f04f 33ff 	mov.w	r3, #4294967295
 80093b4:	60fb      	str	r3, [r7, #12]
 80093b6:	e009      	b.n	80093cc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d006      	beq.n	80093cc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d101      	bne.n	80093cc <osSemaphoreWait+0x40>
      ticks = 1;
 80093c8:	2301      	movs	r3, #1
 80093ca:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80093cc:	f7ff fe88 	bl	80090e0 <inHandlerMode>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d017      	beq.n	8009406 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80093d6:	f107 0308 	add.w	r3, r7, #8
 80093da:	461a      	mov	r2, r3
 80093dc:	2100      	movs	r1, #0
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 ffba 	bl	800a358 <xQueueReceiveFromISR>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d001      	beq.n	80093ee <osSemaphoreWait+0x62>
      return osErrorOS;
 80093ea:	23ff      	movs	r3, #255	; 0xff
 80093ec:	e015      	b.n	800941a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d011      	beq.n	8009418 <osSemaphoreWait+0x8c>
 80093f4:	4b0b      	ldr	r3, [pc, #44]	; (8009424 <osSemaphoreWait+0x98>)
 80093f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093fa:	601a      	str	r2, [r3, #0]
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	f3bf 8f6f 	isb	sy
 8009404:	e008      	b.n	8009418 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009406:	68f9      	ldr	r1, [r7, #12]
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fe99 	bl	800a140 <xQueueSemaphoreTake>
 800940e:	4603      	mov	r3, r0
 8009410:	2b01      	cmp	r3, #1
 8009412:	d001      	beq.n	8009418 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009414:	23ff      	movs	r3, #255	; 0xff
 8009416:	e000      	b.n	800941a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	e000ed04 	.word	0xe000ed04

08009428 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009430:	2300      	movs	r3, #0
 8009432:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009434:	2300      	movs	r3, #0
 8009436:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009438:	f7ff fe52 	bl	80090e0 <inHandlerMode>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d016      	beq.n	8009470 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009442:	f107 0308 	add.w	r3, r7, #8
 8009446:	4619      	mov	r1, r3
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 fd0b 	bl	8009e64 <xQueueGiveFromISR>
 800944e:	4603      	mov	r3, r0
 8009450:	2b01      	cmp	r3, #1
 8009452:	d001      	beq.n	8009458 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009454:	23ff      	movs	r3, #255	; 0xff
 8009456:	e017      	b.n	8009488 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d013      	beq.n	8009486 <osSemaphoreRelease+0x5e>
 800945e:	4b0c      	ldr	r3, [pc, #48]	; (8009490 <osSemaphoreRelease+0x68>)
 8009460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009464:	601a      	str	r2, [r3, #0]
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	f3bf 8f6f 	isb	sy
 800946e:	e00a      	b.n	8009486 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009470:	2300      	movs	r3, #0
 8009472:	2200      	movs	r2, #0
 8009474:	2100      	movs	r1, #0
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fb5e 	bl	8009b38 <xQueueGenericSend>
 800947c:	4603      	mov	r3, r0
 800947e:	2b01      	cmp	r3, #1
 8009480:	d001      	beq.n	8009486 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009482:	23ff      	movs	r3, #255	; 0xff
 8009484:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009486:	68fb      	ldr	r3, [r7, #12]
}
 8009488:	4618      	mov	r0, r3
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}
 8009490:	e000ed04 	.word	0xe000ed04

08009494 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800949c:	f7ff fe20 	bl	80090e0 <inHandlerMode>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d001      	beq.n	80094aa <osSemaphoreDelete+0x16>
    return osErrorISR;
 80094a6:	2382      	movs	r3, #130	; 0x82
 80094a8:	e003      	b.n	80094b2 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f001 f80d 	bl	800a4ca <vQueueDelete>

  return osOK; 
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80094ba:	b590      	push	{r4, r7, lr}
 80094bc:	b085      	sub	sp, #20
 80094be:	af02      	add	r7, sp, #8
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d011      	beq.n	80094f0 <osMessageCreate+0x36>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00d      	beq.n	80094f0 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6818      	ldr	r0, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6859      	ldr	r1, [r3, #4]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	689a      	ldr	r2, [r3, #8]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	2400      	movs	r4, #0
 80094e6:	9400      	str	r4, [sp, #0]
 80094e8:	f000 fa04 	bl	80098f4 <xQueueGenericCreateStatic>
 80094ec:	4603      	mov	r3, r0
 80094ee:	e008      	b.n	8009502 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6818      	ldr	r0, [r3, #0]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	4619      	mov	r1, r3
 80094fc:	f000 fa71 	bl	80099e2 <xQueueGenericCreate>
 8009500:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009502:	4618      	mov	r0, r3
 8009504:	370c      	adds	r7, #12
 8009506:	46bd      	mov	sp, r7
 8009508:	bd90      	pop	{r4, r7, pc}
	...

0800950c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b086      	sub	sp, #24
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009518:	2300      	movs	r3, #0
 800951a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d101      	bne.n	800952a <osMessagePut+0x1e>
    ticks = 1;
 8009526:	2301      	movs	r3, #1
 8009528:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800952a:	f7ff fdd9 	bl	80090e0 <inHandlerMode>
 800952e:	4603      	mov	r3, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	d018      	beq.n	8009566 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009534:	f107 0210 	add.w	r2, r7, #16
 8009538:	f107 0108 	add.w	r1, r7, #8
 800953c:	2300      	movs	r3, #0
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f000 fbf8 	bl	8009d34 <xQueueGenericSendFromISR>
 8009544:	4603      	mov	r3, r0
 8009546:	2b01      	cmp	r3, #1
 8009548:	d001      	beq.n	800954e <osMessagePut+0x42>
      return osErrorOS;
 800954a:	23ff      	movs	r3, #255	; 0xff
 800954c:	e018      	b.n	8009580 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d014      	beq.n	800957e <osMessagePut+0x72>
 8009554:	4b0c      	ldr	r3, [pc, #48]	; (8009588 <osMessagePut+0x7c>)
 8009556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800955a:	601a      	str	r2, [r3, #0]
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	f3bf 8f6f 	isb	sy
 8009564:	e00b      	b.n	800957e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009566:	f107 0108 	add.w	r1, r7, #8
 800956a:	2300      	movs	r3, #0
 800956c:	697a      	ldr	r2, [r7, #20]
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f000 fae2 	bl	8009b38 <xQueueGenericSend>
 8009574:	4603      	mov	r3, r0
 8009576:	2b01      	cmp	r3, #1
 8009578:	d001      	beq.n	800957e <osMessagePut+0x72>
      return osErrorOS;
 800957a:	23ff      	movs	r3, #255	; 0xff
 800957c:	e000      	b.n	8009580 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3718      	adds	r7, #24
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	e000ed04 	.word	0xe000ed04

0800958c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800958c:	b590      	push	{r4, r7, lr}
 800958e:	b08b      	sub	sp, #44	; 0x2c
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800959c:	2300      	movs	r3, #0
 800959e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d10a      	bne.n	80095bc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80095a6:	2380      	movs	r3, #128	; 0x80
 80095a8:	617b      	str	r3, [r7, #20]
    return event;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	461c      	mov	r4, r3
 80095ae:	f107 0314 	add.w	r3, r7, #20
 80095b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80095b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80095ba:	e054      	b.n	8009666 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80095bc:	2300      	movs	r3, #0
 80095be:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80095c0:	2300      	movs	r3, #0
 80095c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ca:	d103      	bne.n	80095d4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80095cc:	f04f 33ff 	mov.w	r3, #4294967295
 80095d0:	627b      	str	r3, [r7, #36]	; 0x24
 80095d2:	e009      	b.n	80095e8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d006      	beq.n	80095e8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80095de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d101      	bne.n	80095e8 <osMessageGet+0x5c>
      ticks = 1;
 80095e4:	2301      	movs	r3, #1
 80095e6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80095e8:	f7ff fd7a 	bl	80090e0 <inHandlerMode>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d01c      	beq.n	800962c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80095f2:	f107 0220 	add.w	r2, r7, #32
 80095f6:	f107 0314 	add.w	r3, r7, #20
 80095fa:	3304      	adds	r3, #4
 80095fc:	4619      	mov	r1, r3
 80095fe:	68b8      	ldr	r0, [r7, #8]
 8009600:	f000 feaa 	bl	800a358 <xQueueReceiveFromISR>
 8009604:	4603      	mov	r3, r0
 8009606:	2b01      	cmp	r3, #1
 8009608:	d102      	bne.n	8009610 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800960a:	2310      	movs	r3, #16
 800960c:	617b      	str	r3, [r7, #20]
 800960e:	e001      	b.n	8009614 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009610:	2300      	movs	r3, #0
 8009612:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009614:	6a3b      	ldr	r3, [r7, #32]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d01d      	beq.n	8009656 <osMessageGet+0xca>
 800961a:	4b15      	ldr	r3, [pc, #84]	; (8009670 <osMessageGet+0xe4>)
 800961c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009620:	601a      	str	r2, [r3, #0]
 8009622:	f3bf 8f4f 	dsb	sy
 8009626:	f3bf 8f6f 	isb	sy
 800962a:	e014      	b.n	8009656 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800962c:	f107 0314 	add.w	r3, r7, #20
 8009630:	3304      	adds	r3, #4
 8009632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009634:	4619      	mov	r1, r3
 8009636:	68b8      	ldr	r0, [r7, #8]
 8009638:	f000 fca2 	bl	8009f80 <xQueueReceive>
 800963c:	4603      	mov	r3, r0
 800963e:	2b01      	cmp	r3, #1
 8009640:	d102      	bne.n	8009648 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009642:	2310      	movs	r3, #16
 8009644:	617b      	str	r3, [r7, #20]
 8009646:	e006      	b.n	8009656 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964a:	2b00      	cmp	r3, #0
 800964c:	d101      	bne.n	8009652 <osMessageGet+0xc6>
 800964e:	2300      	movs	r3, #0
 8009650:	e000      	b.n	8009654 <osMessageGet+0xc8>
 8009652:	2340      	movs	r3, #64	; 0x40
 8009654:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	461c      	mov	r4, r3
 800965a:	f107 0314 	add.w	r3, r7, #20
 800965e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009662:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	372c      	adds	r7, #44	; 0x2c
 800966a:	46bd      	mov	sp, r7
 800966c:	bd90      	pop	{r4, r7, pc}
 800966e:	bf00      	nop
 8009670:	e000ed04 	.word	0xe000ed04

08009674 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800967c:	f7ff fd30 	bl	80090e0 <inHandlerMode>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d004      	beq.n	8009690 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 ff04 	bl	800a494 <uxQueueMessagesWaitingFromISR>
 800968c:	4603      	mov	r3, r0
 800968e:	e003      	b.n	8009698 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 fee1 	bl	800a458 <uxQueueMessagesWaiting>
 8009696:	4603      	mov	r3, r0
  }
}
 8009698:	4618      	mov	r0, r3
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80096a8:	f7ff fd1a 	bl	80090e0 <inHandlerMode>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d001      	beq.n	80096b6 <osMessageDelete+0x16>
    return osErrorISR;
 80096b2:	2382      	movs	r3, #130	; 0x82
 80096b4:	e003      	b.n	80096be <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 ff07 	bl	800a4ca <vQueueDelete>

  return osOK; 
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3708      	adds	r7, #8
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80096c6:	b480      	push	{r7}
 80096c8:	b083      	sub	sp, #12
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f103 0208 	add.w	r2, r3, #8
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f04f 32ff 	mov.w	r2, #4294967295
 80096de:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f103 0208 	add.w	r2, r3, #8
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f103 0208 	add.w	r2, r3, #8
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80096fa:	bf00      	nop
 80096fc:	370c      	adds	r7, #12
 80096fe:	46bd      	mov	sp, r7
 8009700:	bc80      	pop	{r7}
 8009702:	4770      	bx	lr

08009704 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009712:	bf00      	nop
 8009714:	370c      	adds	r7, #12
 8009716:	46bd      	mov	sp, r7
 8009718:	bc80      	pop	{r7}
 800971a:	4770      	bx	lr

0800971c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	68fa      	ldr	r2, [r7, #12]
 8009730:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	689a      	ldr	r2, [r3, #8]
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	683a      	ldr	r2, [r7, #0]
 8009740:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	683a      	ldr	r2, [r7, #0]
 8009746:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	1c5a      	adds	r2, r3, #1
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	601a      	str	r2, [r3, #0]
}
 8009758:	bf00      	nop
 800975a:	3714      	adds	r7, #20
 800975c:	46bd      	mov	sp, r7
 800975e:	bc80      	pop	{r7}
 8009760:	4770      	bx	lr

08009762 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009762:	b480      	push	{r7}
 8009764:	b085      	sub	sp, #20
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009778:	d103      	bne.n	8009782 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	60fb      	str	r3, [r7, #12]
 8009780:	e00c      	b.n	800979c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	3308      	adds	r3, #8
 8009786:	60fb      	str	r3, [r7, #12]
 8009788:	e002      	b.n	8009790 <vListInsert+0x2e>
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	60fb      	str	r3, [r7, #12]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	68ba      	ldr	r2, [r7, #8]
 8009798:	429a      	cmp	r2, r3
 800979a:	d2f6      	bcs.n	800978a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	685a      	ldr	r2, [r3, #4]
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	683a      	ldr	r2, [r7, #0]
 80097aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	68fa      	ldr	r2, [r7, #12]
 80097b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	683a      	ldr	r2, [r7, #0]
 80097b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	1c5a      	adds	r2, r3, #1
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	601a      	str	r2, [r3, #0]
}
 80097c8:	bf00      	nop
 80097ca:	3714      	adds	r7, #20
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bc80      	pop	{r7}
 80097d0:	4770      	bx	lr

080097d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80097d2:	b480      	push	{r7}
 80097d4:	b085      	sub	sp, #20
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	691b      	ldr	r3, [r3, #16]
 80097de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	6892      	ldr	r2, [r2, #8]
 80097e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	6852      	ldr	r2, [r2, #4]
 80097f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d103      	bne.n	8009806 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	689a      	ldr	r2, [r3, #8]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	1e5a      	subs	r2, r3, #1
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
}
 800981a:	4618      	mov	r0, r3
 800981c:	3714      	adds	r7, #20
 800981e:	46bd      	mov	sp, r7
 8009820:	bc80      	pop	{r7}
 8009822:	4770      	bx	lr

08009824 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d10a      	bne.n	800984e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983c:	f383 8811 	msr	BASEPRI, r3
 8009840:	f3bf 8f6f 	isb	sy
 8009844:	f3bf 8f4f 	dsb	sy
 8009848:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800984a:	bf00      	nop
 800984c:	e7fe      	b.n	800984c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800984e:	f002 f8f5 	bl	800ba3c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800985a:	68f9      	ldr	r1, [r7, #12]
 800985c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800985e:	fb01 f303 	mul.w	r3, r1, r3
 8009862:	441a      	add	r2, r3
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2200      	movs	r2, #0
 800986c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800987e:	3b01      	subs	r3, #1
 8009880:	68f9      	ldr	r1, [r7, #12]
 8009882:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009884:	fb01 f303 	mul.w	r3, r1, r3
 8009888:	441a      	add	r2, r3
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	22ff      	movs	r2, #255	; 0xff
 8009892:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	22ff      	movs	r2, #255	; 0xff
 800989a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d114      	bne.n	80098ce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d01a      	beq.n	80098e2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	3310      	adds	r3, #16
 80098b0:	4618      	mov	r0, r3
 80098b2:	f001 fbcd 	bl	800b050 <xTaskRemoveFromEventList>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d012      	beq.n	80098e2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80098bc:	4b0c      	ldr	r3, [pc, #48]	; (80098f0 <xQueueGenericReset+0xcc>)
 80098be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098c2:	601a      	str	r2, [r3, #0]
 80098c4:	f3bf 8f4f 	dsb	sy
 80098c8:	f3bf 8f6f 	isb	sy
 80098cc:	e009      	b.n	80098e2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	3310      	adds	r3, #16
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7ff fef7 	bl	80096c6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	3324      	adds	r3, #36	; 0x24
 80098dc:	4618      	mov	r0, r3
 80098de:	f7ff fef2 	bl	80096c6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80098e2:	f002 f8db 	bl	800ba9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80098e6:	2301      	movs	r3, #1
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	e000ed04 	.word	0xe000ed04

080098f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b08e      	sub	sp, #56	; 0x38
 80098f8:	af02      	add	r7, sp, #8
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	607a      	str	r2, [r7, #4]
 8009900:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d10a      	bne.n	800991e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990c:	f383 8811 	msr	BASEPRI, r3
 8009910:	f3bf 8f6f 	isb	sy
 8009914:	f3bf 8f4f 	dsb	sy
 8009918:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800991a:	bf00      	nop
 800991c:	e7fe      	b.n	800991c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d10a      	bne.n	800993a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009928:	f383 8811 	msr	BASEPRI, r3
 800992c:	f3bf 8f6f 	isb	sy
 8009930:	f3bf 8f4f 	dsb	sy
 8009934:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009936:	bf00      	nop
 8009938:	e7fe      	b.n	8009938 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d002      	beq.n	8009946 <xQueueGenericCreateStatic+0x52>
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d001      	beq.n	800994a <xQueueGenericCreateStatic+0x56>
 8009946:	2301      	movs	r3, #1
 8009948:	e000      	b.n	800994c <xQueueGenericCreateStatic+0x58>
 800994a:	2300      	movs	r3, #0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10a      	bne.n	8009966 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009954:	f383 8811 	msr	BASEPRI, r3
 8009958:	f3bf 8f6f 	isb	sy
 800995c:	f3bf 8f4f 	dsb	sy
 8009960:	623b      	str	r3, [r7, #32]
}
 8009962:	bf00      	nop
 8009964:	e7fe      	b.n	8009964 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d102      	bne.n	8009972 <xQueueGenericCreateStatic+0x7e>
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d101      	bne.n	8009976 <xQueueGenericCreateStatic+0x82>
 8009972:	2301      	movs	r3, #1
 8009974:	e000      	b.n	8009978 <xQueueGenericCreateStatic+0x84>
 8009976:	2300      	movs	r3, #0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10a      	bne.n	8009992 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	61fb      	str	r3, [r7, #28]
}
 800998e:	bf00      	nop
 8009990:	e7fe      	b.n	8009990 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009992:	2348      	movs	r3, #72	; 0x48
 8009994:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	2b48      	cmp	r3, #72	; 0x48
 800999a:	d00a      	beq.n	80099b2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800999c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a0:	f383 8811 	msr	BASEPRI, r3
 80099a4:	f3bf 8f6f 	isb	sy
 80099a8:	f3bf 8f4f 	dsb	sy
 80099ac:	61bb      	str	r3, [r7, #24]
}
 80099ae:	bf00      	nop
 80099b0:	e7fe      	b.n	80099b0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80099b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00d      	beq.n	80099d8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80099bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80099c4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80099c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ca:	9300      	str	r3, [sp, #0]
 80099cc:	4613      	mov	r3, r2
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	68b9      	ldr	r1, [r7, #8]
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f000 f843 	bl	8009a5e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80099d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80099da:	4618      	mov	r0, r3
 80099dc:	3730      	adds	r7, #48	; 0x30
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b08a      	sub	sp, #40	; 0x28
 80099e6:	af02      	add	r7, sp, #8
 80099e8:	60f8      	str	r0, [r7, #12]
 80099ea:	60b9      	str	r1, [r7, #8]
 80099ec:	4613      	mov	r3, r2
 80099ee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d10a      	bne.n	8009a0c <xQueueGenericCreate+0x2a>
	__asm volatile
 80099f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fa:	f383 8811 	msr	BASEPRI, r3
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	f3bf 8f4f 	dsb	sy
 8009a06:	613b      	str	r3, [r7, #16]
}
 8009a08:	bf00      	nop
 8009a0a:	e7fe      	b.n	8009a0a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d102      	bne.n	8009a18 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009a12:	2300      	movs	r3, #0
 8009a14:	61fb      	str	r3, [r7, #28]
 8009a16:	e004      	b.n	8009a22 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	fb02 f303 	mul.w	r3, r2, r3
 8009a20:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	3348      	adds	r3, #72	; 0x48
 8009a26:	4618      	mov	r0, r3
 8009a28:	f002 f908 	bl	800bc3c <pvPortMalloc>
 8009a2c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d00f      	beq.n	8009a54 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8009a34:	69bb      	ldr	r3, [r7, #24]
 8009a36:	3348      	adds	r3, #72	; 0x48
 8009a38:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009a3a:	69bb      	ldr	r3, [r7, #24]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a42:	79fa      	ldrb	r2, [r7, #7]
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	9300      	str	r3, [sp, #0]
 8009a48:	4613      	mov	r3, r2
 8009a4a:	697a      	ldr	r2, [r7, #20]
 8009a4c:	68b9      	ldr	r1, [r7, #8]
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f000 f805 	bl	8009a5e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009a54:	69bb      	ldr	r3, [r7, #24]
	}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3720      	adds	r7, #32
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}

08009a5e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009a5e:	b580      	push	{r7, lr}
 8009a60:	b084      	sub	sp, #16
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	60f8      	str	r0, [r7, #12]
 8009a66:	60b9      	str	r1, [r7, #8]
 8009a68:	607a      	str	r2, [r7, #4]
 8009a6a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d103      	bne.n	8009a7a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	69ba      	ldr	r2, [r7, #24]
 8009a76:	601a      	str	r2, [r3, #0]
 8009a78:	e002      	b.n	8009a80 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	68ba      	ldr	r2, [r7, #8]
 8009a8a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009a8c:	2101      	movs	r1, #1
 8009a8e:	69b8      	ldr	r0, [r7, #24]
 8009a90:	f7ff fec8 	bl	8009824 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009a94:	bf00      	nop
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d00e      	beq.n	8009ac8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009abc:	2300      	movs	r3, #0
 8009abe:	2200      	movs	r2, #0
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f838 	bl	8009b38 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009ac8:	bf00      	nop
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b086      	sub	sp, #24
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009ada:	2301      	movs	r3, #1
 8009adc:	617b      	str	r3, [r7, #20]
 8009ade:	2300      	movs	r3, #0
 8009ae0:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009ae2:	79fb      	ldrb	r3, [r7, #7]
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	6939      	ldr	r1, [r7, #16]
 8009ae8:	6978      	ldr	r0, [r7, #20]
 8009aea:	f7ff ff7a 	bl	80099e2 <xQueueGenericCreate>
 8009aee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009af0:	68f8      	ldr	r0, [r7, #12]
 8009af2:	f7ff ffd3 	bl	8009a9c <prvInitialiseMutex>

		return pxNewQueue;
 8009af6:	68fb      	ldr	r3, [r7, #12]
	}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3718      	adds	r7, #24
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b088      	sub	sp, #32
 8009b04:	af02      	add	r7, sp, #8
 8009b06:	4603      	mov	r3, r0
 8009b08:	6039      	str	r1, [r7, #0]
 8009b0a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	617b      	str	r3, [r7, #20]
 8009b10:	2300      	movs	r3, #0
 8009b12:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009b14:	79fb      	ldrb	r3, [r7, #7]
 8009b16:	9300      	str	r3, [sp, #0]
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	6939      	ldr	r1, [r7, #16]
 8009b1e:	6978      	ldr	r0, [r7, #20]
 8009b20:	f7ff fee8 	bl	80098f4 <xQueueGenericCreateStatic>
 8009b24:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009b26:	68f8      	ldr	r0, [r7, #12]
 8009b28:	f7ff ffb8 	bl	8009a9c <prvInitialiseMutex>

		return pxNewQueue;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
	}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3718      	adds	r7, #24
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
	...

08009b38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b08e      	sub	sp, #56	; 0x38
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	607a      	str	r2, [r7, #4]
 8009b44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009b46:	2300      	movs	r3, #0
 8009b48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d10a      	bne.n	8009b6a <xQueueGenericSend+0x32>
	__asm volatile
 8009b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b58:	f383 8811 	msr	BASEPRI, r3
 8009b5c:	f3bf 8f6f 	isb	sy
 8009b60:	f3bf 8f4f 	dsb	sy
 8009b64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009b66:	bf00      	nop
 8009b68:	e7fe      	b.n	8009b68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d103      	bne.n	8009b78 <xQueueGenericSend+0x40>
 8009b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d101      	bne.n	8009b7c <xQueueGenericSend+0x44>
 8009b78:	2301      	movs	r3, #1
 8009b7a:	e000      	b.n	8009b7e <xQueueGenericSend+0x46>
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d10a      	bne.n	8009b98 <xQueueGenericSend+0x60>
	__asm volatile
 8009b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b86:	f383 8811 	msr	BASEPRI, r3
 8009b8a:	f3bf 8f6f 	isb	sy
 8009b8e:	f3bf 8f4f 	dsb	sy
 8009b92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009b94:	bf00      	nop
 8009b96:	e7fe      	b.n	8009b96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	2b02      	cmp	r3, #2
 8009b9c:	d103      	bne.n	8009ba6 <xQueueGenericSend+0x6e>
 8009b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d101      	bne.n	8009baa <xQueueGenericSend+0x72>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e000      	b.n	8009bac <xQueueGenericSend+0x74>
 8009baa:	2300      	movs	r3, #0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d10a      	bne.n	8009bc6 <xQueueGenericSend+0x8e>
	__asm volatile
 8009bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb4:	f383 8811 	msr	BASEPRI, r3
 8009bb8:	f3bf 8f6f 	isb	sy
 8009bbc:	f3bf 8f4f 	dsb	sy
 8009bc0:	623b      	str	r3, [r7, #32]
}
 8009bc2:	bf00      	nop
 8009bc4:	e7fe      	b.n	8009bc4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009bc6:	f001 fc07 	bl	800b3d8 <xTaskGetSchedulerState>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d102      	bne.n	8009bd6 <xQueueGenericSend+0x9e>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d101      	bne.n	8009bda <xQueueGenericSend+0xa2>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e000      	b.n	8009bdc <xQueueGenericSend+0xa4>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d10a      	bne.n	8009bf6 <xQueueGenericSend+0xbe>
	__asm volatile
 8009be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	61fb      	str	r3, [r7, #28]
}
 8009bf2:	bf00      	nop
 8009bf4:	e7fe      	b.n	8009bf4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009bf6:	f001 ff21 	bl	800ba3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d302      	bcc.n	8009c0c <xQueueGenericSend+0xd4>
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	d129      	bne.n	8009c60 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c0c:	683a      	ldr	r2, [r7, #0]
 8009c0e:	68b9      	ldr	r1, [r7, #8]
 8009c10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c12:	f000 fc94 	bl	800a53e <prvCopyDataToQueue>
 8009c16:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d010      	beq.n	8009c42 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c22:	3324      	adds	r3, #36	; 0x24
 8009c24:	4618      	mov	r0, r3
 8009c26:	f001 fa13 	bl	800b050 <xTaskRemoveFromEventList>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d013      	beq.n	8009c58 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009c30:	4b3f      	ldr	r3, [pc, #252]	; (8009d30 <xQueueGenericSend+0x1f8>)
 8009c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c36:	601a      	str	r2, [r3, #0]
 8009c38:	f3bf 8f4f 	dsb	sy
 8009c3c:	f3bf 8f6f 	isb	sy
 8009c40:	e00a      	b.n	8009c58 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d007      	beq.n	8009c58 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009c48:	4b39      	ldr	r3, [pc, #228]	; (8009d30 <xQueueGenericSend+0x1f8>)
 8009c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c4e:	601a      	str	r2, [r3, #0]
 8009c50:	f3bf 8f4f 	dsb	sy
 8009c54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009c58:	f001 ff20 	bl	800ba9c <vPortExitCritical>
				return pdPASS;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e063      	b.n	8009d28 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d103      	bne.n	8009c6e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c66:	f001 ff19 	bl	800ba9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	e05c      	b.n	8009d28 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d106      	bne.n	8009c82 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c74:	f107 0314 	add.w	r3, r7, #20
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f001 fa4b 	bl	800b114 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c82:	f001 ff0b 	bl	800ba9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c86:	f000 ffd5 	bl	800ac34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c8a:	f001 fed7 	bl	800ba3c <vPortEnterCritical>
 8009c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c94:	b25b      	sxtb	r3, r3
 8009c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c9a:	d103      	bne.n	8009ca4 <xQueueGenericSend+0x16c>
 8009c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009caa:	b25b      	sxtb	r3, r3
 8009cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb0:	d103      	bne.n	8009cba <xQueueGenericSend+0x182>
 8009cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cba:	f001 feef 	bl	800ba9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009cbe:	1d3a      	adds	r2, r7, #4
 8009cc0:	f107 0314 	add.w	r3, r7, #20
 8009cc4:	4611      	mov	r1, r2
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f001 fa3a 	bl	800b140 <xTaskCheckForTimeOut>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d124      	bne.n	8009d1c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009cd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cd4:	f000 fd2b 	bl	800a72e <prvIsQueueFull>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d018      	beq.n	8009d10 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce0:	3310      	adds	r3, #16
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	4611      	mov	r1, r2
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f001 f98e 	bl	800b008 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009cec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cee:	f000 fcb6 	bl	800a65e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009cf2:	f000 ffad 	bl	800ac50 <xTaskResumeAll>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f47f af7c 	bne.w	8009bf6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009cfe:	4b0c      	ldr	r3, [pc, #48]	; (8009d30 <xQueueGenericSend+0x1f8>)
 8009d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d04:	601a      	str	r2, [r3, #0]
 8009d06:	f3bf 8f4f 	dsb	sy
 8009d0a:	f3bf 8f6f 	isb	sy
 8009d0e:	e772      	b.n	8009bf6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009d10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d12:	f000 fca4 	bl	800a65e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d16:	f000 ff9b 	bl	800ac50 <xTaskResumeAll>
 8009d1a:	e76c      	b.n	8009bf6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009d1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d1e:	f000 fc9e 	bl	800a65e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d22:	f000 ff95 	bl	800ac50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009d26:	2300      	movs	r3, #0
		}
	}
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3738      	adds	r7, #56	; 0x38
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	e000ed04 	.word	0xe000ed04

08009d34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b08e      	sub	sp, #56	; 0x38
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	607a      	str	r2, [r7, #4]
 8009d40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d10a      	bne.n	8009d62 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d50:	f383 8811 	msr	BASEPRI, r3
 8009d54:	f3bf 8f6f 	isb	sy
 8009d58:	f3bf 8f4f 	dsb	sy
 8009d5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d5e:	bf00      	nop
 8009d60:	e7fe      	b.n	8009d60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d103      	bne.n	8009d70 <xQueueGenericSendFromISR+0x3c>
 8009d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d101      	bne.n	8009d74 <xQueueGenericSendFromISR+0x40>
 8009d70:	2301      	movs	r3, #1
 8009d72:	e000      	b.n	8009d76 <xQueueGenericSendFromISR+0x42>
 8009d74:	2300      	movs	r3, #0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d10a      	bne.n	8009d90 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7e:	f383 8811 	msr	BASEPRI, r3
 8009d82:	f3bf 8f6f 	isb	sy
 8009d86:	f3bf 8f4f 	dsb	sy
 8009d8a:	623b      	str	r3, [r7, #32]
}
 8009d8c:	bf00      	nop
 8009d8e:	e7fe      	b.n	8009d8e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d103      	bne.n	8009d9e <xQueueGenericSendFromISR+0x6a>
 8009d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d101      	bne.n	8009da2 <xQueueGenericSendFromISR+0x6e>
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e000      	b.n	8009da4 <xQueueGenericSendFromISR+0x70>
 8009da2:	2300      	movs	r3, #0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d10a      	bne.n	8009dbe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dac:	f383 8811 	msr	BASEPRI, r3
 8009db0:	f3bf 8f6f 	isb	sy
 8009db4:	f3bf 8f4f 	dsb	sy
 8009db8:	61fb      	str	r3, [r7, #28]
}
 8009dba:	bf00      	nop
 8009dbc:	e7fe      	b.n	8009dbc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009dbe:	f001 feff 	bl	800bbc0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009dc2:	f3ef 8211 	mrs	r2, BASEPRI
 8009dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dca:	f383 8811 	msr	BASEPRI, r3
 8009dce:	f3bf 8f6f 	isb	sy
 8009dd2:	f3bf 8f4f 	dsb	sy
 8009dd6:	61ba      	str	r2, [r7, #24]
 8009dd8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009dda:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d302      	bcc.n	8009df0 <xQueueGenericSendFromISR+0xbc>
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	2b02      	cmp	r3, #2
 8009dee:	d12c      	bne.n	8009e4a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009dfa:	683a      	ldr	r2, [r7, #0]
 8009dfc:	68b9      	ldr	r1, [r7, #8]
 8009dfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e00:	f000 fb9d 	bl	800a53e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009e04:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e0c:	d112      	bne.n	8009e34 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d016      	beq.n	8009e44 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e18:	3324      	adds	r3, #36	; 0x24
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f001 f918 	bl	800b050 <xTaskRemoveFromEventList>
 8009e20:	4603      	mov	r3, r0
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d00e      	beq.n	8009e44 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00b      	beq.n	8009e44 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	601a      	str	r2, [r3, #0]
 8009e32:	e007      	b.n	8009e44 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009e34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009e38:	3301      	adds	r3, #1
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	b25a      	sxtb	r2, r3
 8009e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009e44:	2301      	movs	r3, #1
 8009e46:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009e48:	e001      	b.n	8009e4e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	637b      	str	r3, [r7, #52]	; 0x34
 8009e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e50:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009e58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3738      	adds	r7, #56	; 0x38
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b08e      	sub	sp, #56	; 0x38
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d10a      	bne.n	8009e8e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7c:	f383 8811 	msr	BASEPRI, r3
 8009e80:	f3bf 8f6f 	isb	sy
 8009e84:	f3bf 8f4f 	dsb	sy
 8009e88:	623b      	str	r3, [r7, #32]
}
 8009e8a:	bf00      	nop
 8009e8c:	e7fe      	b.n	8009e8c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00a      	beq.n	8009eac <xQueueGiveFromISR+0x48>
	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9a:	f383 8811 	msr	BASEPRI, r3
 8009e9e:	f3bf 8f6f 	isb	sy
 8009ea2:	f3bf 8f4f 	dsb	sy
 8009ea6:	61fb      	str	r3, [r7, #28]
}
 8009ea8:	bf00      	nop
 8009eaa:	e7fe      	b.n	8009eaa <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8009eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d103      	bne.n	8009ebc <xQueueGiveFromISR+0x58>
 8009eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d101      	bne.n	8009ec0 <xQueueGiveFromISR+0x5c>
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	e000      	b.n	8009ec2 <xQueueGiveFromISR+0x5e>
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d10a      	bne.n	8009edc <xQueueGiveFromISR+0x78>
	__asm volatile
 8009ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eca:	f383 8811 	msr	BASEPRI, r3
 8009ece:	f3bf 8f6f 	isb	sy
 8009ed2:	f3bf 8f4f 	dsb	sy
 8009ed6:	61bb      	str	r3, [r7, #24]
}
 8009ed8:	bf00      	nop
 8009eda:	e7fe      	b.n	8009eda <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009edc:	f001 fe70 	bl	800bbc0 <vPortValidateInterruptPriority>
	__asm volatile
 8009ee0:	f3ef 8211 	mrs	r2, BASEPRI
 8009ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee8:	f383 8811 	msr	BASEPRI, r3
 8009eec:	f3bf 8f6f 	isb	sy
 8009ef0:	f3bf 8f4f 	dsb	sy
 8009ef4:	617a      	str	r2, [r7, #20]
 8009ef6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009ef8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009efa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f00:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d22b      	bcs.n	8009f64 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f18:	1c5a      	adds	r2, r3, #1
 8009f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f26:	d112      	bne.n	8009f4e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d016      	beq.n	8009f5e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f32:	3324      	adds	r3, #36	; 0x24
 8009f34:	4618      	mov	r0, r3
 8009f36:	f001 f88b 	bl	800b050 <xTaskRemoveFromEventList>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00e      	beq.n	8009f5e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d00b      	beq.n	8009f5e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	601a      	str	r2, [r3, #0]
 8009f4c:	e007      	b.n	8009f5e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f52:	3301      	adds	r3, #1
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	b25a      	sxtb	r2, r3
 8009f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	637b      	str	r3, [r7, #52]	; 0x34
 8009f62:	e001      	b.n	8009f68 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009f64:	2300      	movs	r3, #0
 8009f66:	637b      	str	r3, [r7, #52]	; 0x34
 8009f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f6a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f383 8811 	msr	BASEPRI, r3
}
 8009f72:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3738      	adds	r7, #56	; 0x38
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
	...

08009f80 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b08c      	sub	sp, #48	; 0x30
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d10a      	bne.n	8009fb0 <xQueueReceive+0x30>
	__asm volatile
 8009f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9e:	f383 8811 	msr	BASEPRI, r3
 8009fa2:	f3bf 8f6f 	isb	sy
 8009fa6:	f3bf 8f4f 	dsb	sy
 8009faa:	623b      	str	r3, [r7, #32]
}
 8009fac:	bf00      	nop
 8009fae:	e7fe      	b.n	8009fae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d103      	bne.n	8009fbe <xQueueReceive+0x3e>
 8009fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d101      	bne.n	8009fc2 <xQueueReceive+0x42>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e000      	b.n	8009fc4 <xQueueReceive+0x44>
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d10a      	bne.n	8009fde <xQueueReceive+0x5e>
	__asm volatile
 8009fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fcc:	f383 8811 	msr	BASEPRI, r3
 8009fd0:	f3bf 8f6f 	isb	sy
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	61fb      	str	r3, [r7, #28]
}
 8009fda:	bf00      	nop
 8009fdc:	e7fe      	b.n	8009fdc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009fde:	f001 f9fb 	bl	800b3d8 <xTaskGetSchedulerState>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d102      	bne.n	8009fee <xQueueReceive+0x6e>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d101      	bne.n	8009ff2 <xQueueReceive+0x72>
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e000      	b.n	8009ff4 <xQueueReceive+0x74>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10a      	bne.n	800a00e <xQueueReceive+0x8e>
	__asm volatile
 8009ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	61bb      	str	r3, [r7, #24]
}
 800a00a:	bf00      	nop
 800a00c:	e7fe      	b.n	800a00c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a00e:	f001 fd15 	bl	800ba3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a016:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d01f      	beq.n	800a05e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a01e:	68b9      	ldr	r1, [r7, #8]
 800a020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a022:	f000 faf6 	bl	800a612 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a028:	1e5a      	subs	r2, r3, #1
 800a02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a030:	691b      	ldr	r3, [r3, #16]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00f      	beq.n	800a056 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a038:	3310      	adds	r3, #16
 800a03a:	4618      	mov	r0, r3
 800a03c:	f001 f808 	bl	800b050 <xTaskRemoveFromEventList>
 800a040:	4603      	mov	r3, r0
 800a042:	2b00      	cmp	r3, #0
 800a044:	d007      	beq.n	800a056 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a046:	4b3d      	ldr	r3, [pc, #244]	; (800a13c <xQueueReceive+0x1bc>)
 800a048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a04c:	601a      	str	r2, [r3, #0]
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a056:	f001 fd21 	bl	800ba9c <vPortExitCritical>
				return pdPASS;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e069      	b.n	800a132 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d103      	bne.n	800a06c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a064:	f001 fd1a 	bl	800ba9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a068:	2300      	movs	r3, #0
 800a06a:	e062      	b.n	800a132 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d106      	bne.n	800a080 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a072:	f107 0310 	add.w	r3, r7, #16
 800a076:	4618      	mov	r0, r3
 800a078:	f001 f84c 	bl	800b114 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a07c:	2301      	movs	r3, #1
 800a07e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a080:	f001 fd0c 	bl	800ba9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a084:	f000 fdd6 	bl	800ac34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a088:	f001 fcd8 	bl	800ba3c <vPortEnterCritical>
 800a08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a092:	b25b      	sxtb	r3, r3
 800a094:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a098:	d103      	bne.n	800a0a2 <xQueueReceive+0x122>
 800a09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09c:	2200      	movs	r2, #0
 800a09e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0a8:	b25b      	sxtb	r3, r3
 800a0aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ae:	d103      	bne.n	800a0b8 <xQueueReceive+0x138>
 800a0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0b8:	f001 fcf0 	bl	800ba9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a0bc:	1d3a      	adds	r2, r7, #4
 800a0be:	f107 0310 	add.w	r3, r7, #16
 800a0c2:	4611      	mov	r1, r2
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f001 f83b 	bl	800b140 <xTaskCheckForTimeOut>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d123      	bne.n	800a118 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0d2:	f000 fb16 	bl	800a702 <prvIsQueueEmpty>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d017      	beq.n	800a10c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0de:	3324      	adds	r3, #36	; 0x24
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	4611      	mov	r1, r2
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f000 ff8f 	bl	800b008 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a0ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0ec:	f000 fab7 	bl	800a65e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a0f0:	f000 fdae 	bl	800ac50 <xTaskResumeAll>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d189      	bne.n	800a00e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a0fa:	4b10      	ldr	r3, [pc, #64]	; (800a13c <xQueueReceive+0x1bc>)
 800a0fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a100:	601a      	str	r2, [r3, #0]
 800a102:	f3bf 8f4f 	dsb	sy
 800a106:	f3bf 8f6f 	isb	sy
 800a10a:	e780      	b.n	800a00e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a10c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a10e:	f000 faa6 	bl	800a65e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a112:	f000 fd9d 	bl	800ac50 <xTaskResumeAll>
 800a116:	e77a      	b.n	800a00e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a11a:	f000 faa0 	bl	800a65e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a11e:	f000 fd97 	bl	800ac50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a124:	f000 faed 	bl	800a702 <prvIsQueueEmpty>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	f43f af6f 	beq.w	800a00e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a130:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a132:	4618      	mov	r0, r3
 800a134:	3730      	adds	r7, #48	; 0x30
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	e000ed04 	.word	0xe000ed04

0800a140 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b08e      	sub	sp, #56	; 0x38
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a14a:	2300      	movs	r3, #0
 800a14c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a152:	2300      	movs	r3, #0
 800a154:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d10a      	bne.n	800a172 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a160:	f383 8811 	msr	BASEPRI, r3
 800a164:	f3bf 8f6f 	isb	sy
 800a168:	f3bf 8f4f 	dsb	sy
 800a16c:	623b      	str	r3, [r7, #32]
}
 800a16e:	bf00      	nop
 800a170:	e7fe      	b.n	800a170 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00a      	beq.n	800a190 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17e:	f383 8811 	msr	BASEPRI, r3
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	f3bf 8f4f 	dsb	sy
 800a18a:	61fb      	str	r3, [r7, #28]
}
 800a18c:	bf00      	nop
 800a18e:	e7fe      	b.n	800a18e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a190:	f001 f922 	bl	800b3d8 <xTaskGetSchedulerState>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d102      	bne.n	800a1a0 <xQueueSemaphoreTake+0x60>
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d101      	bne.n	800a1a4 <xQueueSemaphoreTake+0x64>
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	e000      	b.n	800a1a6 <xQueueSemaphoreTake+0x66>
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d10a      	bne.n	800a1c0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ae:	f383 8811 	msr	BASEPRI, r3
 800a1b2:	f3bf 8f6f 	isb	sy
 800a1b6:	f3bf 8f4f 	dsb	sy
 800a1ba:	61bb      	str	r3, [r7, #24]
}
 800a1bc:	bf00      	nop
 800a1be:	e7fe      	b.n	800a1be <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1c0:	f001 fc3c 	bl	800ba3c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d024      	beq.n	800a21a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d2:	1e5a      	subs	r2, r3, #1
 800a1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d104      	bne.n	800a1ea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800a1e0:	f001 fac4 	bl	800b76c <pvTaskIncrementMutexHeldCount>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ec:	691b      	ldr	r3, [r3, #16]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00f      	beq.n	800a212 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f4:	3310      	adds	r3, #16
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f000 ff2a 	bl	800b050 <xTaskRemoveFromEventList>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d007      	beq.n	800a212 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a202:	4b54      	ldr	r3, [pc, #336]	; (800a354 <xQueueSemaphoreTake+0x214>)
 800a204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a208:	601a      	str	r2, [r3, #0]
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a212:	f001 fc43 	bl	800ba9c <vPortExitCritical>
				return pdPASS;
 800a216:	2301      	movs	r3, #1
 800a218:	e097      	b.n	800a34a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d111      	bne.n	800a244 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00a      	beq.n	800a23c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22a:	f383 8811 	msr	BASEPRI, r3
 800a22e:	f3bf 8f6f 	isb	sy
 800a232:	f3bf 8f4f 	dsb	sy
 800a236:	617b      	str	r3, [r7, #20]
}
 800a238:	bf00      	nop
 800a23a:	e7fe      	b.n	800a23a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a23c:	f001 fc2e 	bl	800ba9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a240:	2300      	movs	r3, #0
 800a242:	e082      	b.n	800a34a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a246:	2b00      	cmp	r3, #0
 800a248:	d106      	bne.n	800a258 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a24a:	f107 030c 	add.w	r3, r7, #12
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 ff60 	bl	800b114 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a254:	2301      	movs	r3, #1
 800a256:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a258:	f001 fc20 	bl	800ba9c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a25c:	f000 fcea 	bl	800ac34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a260:	f001 fbec 	bl	800ba3c <vPortEnterCritical>
 800a264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a266:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a26a:	b25b      	sxtb	r3, r3
 800a26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a270:	d103      	bne.n	800a27a <xQueueSemaphoreTake+0x13a>
 800a272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a274:	2200      	movs	r2, #0
 800a276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a27c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a280:	b25b      	sxtb	r3, r3
 800a282:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a286:	d103      	bne.n	800a290 <xQueueSemaphoreTake+0x150>
 800a288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28a:	2200      	movs	r2, #0
 800a28c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a290:	f001 fc04 	bl	800ba9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a294:	463a      	mov	r2, r7
 800a296:	f107 030c 	add.w	r3, r7, #12
 800a29a:	4611      	mov	r1, r2
 800a29c:	4618      	mov	r0, r3
 800a29e:	f000 ff4f 	bl	800b140 <xTaskCheckForTimeOut>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d132      	bne.n	800a30e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a2a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a2aa:	f000 fa2a 	bl	800a702 <prvIsQueueEmpty>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d026      	beq.n	800a302 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d109      	bne.n	800a2d0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a2bc:	f001 fbbe 	bl	800ba3c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800a2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f001 f8a5 	bl	800b414 <xTaskPriorityInherit>
 800a2ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a2cc:	f001 fbe6 	bl	800ba9c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d2:	3324      	adds	r3, #36	; 0x24
 800a2d4:	683a      	ldr	r2, [r7, #0]
 800a2d6:	4611      	mov	r1, r2
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f000 fe95 	bl	800b008 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a2de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a2e0:	f000 f9bd 	bl	800a65e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a2e4:	f000 fcb4 	bl	800ac50 <xTaskResumeAll>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	f47f af68 	bne.w	800a1c0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a2f0:	4b18      	ldr	r3, [pc, #96]	; (800a354 <xQueueSemaphoreTake+0x214>)
 800a2f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2f6:	601a      	str	r2, [r3, #0]
 800a2f8:	f3bf 8f4f 	dsb	sy
 800a2fc:	f3bf 8f6f 	isb	sy
 800a300:	e75e      	b.n	800a1c0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a302:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a304:	f000 f9ab 	bl	800a65e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a308:	f000 fca2 	bl	800ac50 <xTaskResumeAll>
 800a30c:	e758      	b.n	800a1c0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a30e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a310:	f000 f9a5 	bl	800a65e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a314:	f000 fc9c 	bl	800ac50 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a318:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a31a:	f000 f9f2 	bl	800a702 <prvIsQueueEmpty>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	f43f af4d 	beq.w	800a1c0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d00d      	beq.n	800a348 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a32c:	f001 fb86 	bl	800ba3c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a330:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a332:	f000 f8ed 	bl	800a510 <prvGetDisinheritPriorityAfterTimeout>
 800a336:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800a338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a33e:	4618      	mov	r0, r3
 800a340:	f001 f974 	bl	800b62c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a344:	f001 fbaa 	bl	800ba9c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a348:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3738      	adds	r7, #56	; 0x38
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	e000ed04 	.word	0xe000ed04

0800a358 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b08e      	sub	sp, #56	; 0x38
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d10a      	bne.n	800a384 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	623b      	str	r3, [r7, #32]
}
 800a380:	bf00      	nop
 800a382:	e7fe      	b.n	800a382 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d103      	bne.n	800a392 <xQueueReceiveFromISR+0x3a>
 800a38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d101      	bne.n	800a396 <xQueueReceiveFromISR+0x3e>
 800a392:	2301      	movs	r3, #1
 800a394:	e000      	b.n	800a398 <xQueueReceiveFromISR+0x40>
 800a396:	2300      	movs	r3, #0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d10a      	bne.n	800a3b2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a0:	f383 8811 	msr	BASEPRI, r3
 800a3a4:	f3bf 8f6f 	isb	sy
 800a3a8:	f3bf 8f4f 	dsb	sy
 800a3ac:	61fb      	str	r3, [r7, #28]
}
 800a3ae:	bf00      	nop
 800a3b0:	e7fe      	b.n	800a3b0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3b2:	f001 fc05 	bl	800bbc0 <vPortValidateInterruptPriority>
	__asm volatile
 800a3b6:	f3ef 8211 	mrs	r2, BASEPRI
 800a3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3be:	f383 8811 	msr	BASEPRI, r3
 800a3c2:	f3bf 8f6f 	isb	sy
 800a3c6:	f3bf 8f4f 	dsb	sy
 800a3ca:	61ba      	str	r2, [r7, #24]
 800a3cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a3ce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d02f      	beq.n	800a43e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a3e8:	68b9      	ldr	r1, [r7, #8]
 800a3ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3ec:	f000 f911 	bl	800a612 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f2:	1e5a      	subs	r2, r3, #1
 800a3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a3f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a400:	d112      	bne.n	800a428 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a404:	691b      	ldr	r3, [r3, #16]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d016      	beq.n	800a438 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40c:	3310      	adds	r3, #16
 800a40e:	4618      	mov	r0, r3
 800a410:	f000 fe1e 	bl	800b050 <xTaskRemoveFromEventList>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00e      	beq.n	800a438 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d00b      	beq.n	800a438 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2201      	movs	r2, #1
 800a424:	601a      	str	r2, [r3, #0]
 800a426:	e007      	b.n	800a438 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a42c:	3301      	adds	r3, #1
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	b25a      	sxtb	r2, r3
 800a432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a438:	2301      	movs	r3, #1
 800a43a:	637b      	str	r3, [r7, #52]	; 0x34
 800a43c:	e001      	b.n	800a442 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a43e:	2300      	movs	r3, #0
 800a440:	637b      	str	r3, [r7, #52]	; 0x34
 800a442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a444:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	f383 8811 	msr	BASEPRI, r3
}
 800a44c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a450:	4618      	mov	r0, r3
 800a452:	3738      	adds	r7, #56	; 0x38
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d10a      	bne.n	800a47c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800a466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46a:	f383 8811 	msr	BASEPRI, r3
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	f3bf 8f4f 	dsb	sy
 800a476:	60bb      	str	r3, [r7, #8]
}
 800a478:	bf00      	nop
 800a47a:	e7fe      	b.n	800a47a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800a47c:	f001 fade 	bl	800ba3c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a484:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a486:	f001 fb09 	bl	800ba9c <vPortExitCritical>

	return uxReturn;
 800a48a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a48c:	4618      	mov	r0, r3
 800a48e:	3710      	adds	r7, #16
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800a494:	b480      	push	{r7}
 800a496:	b085      	sub	sp, #20
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d10a      	bne.n	800a4b8 <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 800a4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a6:	f383 8811 	msr	BASEPRI, r3
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	60bb      	str	r3, [r7, #8]
}
 800a4b4:	bf00      	nop
 800a4b6:	e7fe      	b.n	800a4b6 <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4bc:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 800a4be:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3714      	adds	r7, #20
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bc80      	pop	{r7}
 800a4c8:	4770      	bx	lr

0800a4ca <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b084      	sub	sp, #16
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d10a      	bne.n	800a4f2 <vQueueDelete+0x28>
	__asm volatile
 800a4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e0:	f383 8811 	msr	BASEPRI, r3
 800a4e4:	f3bf 8f6f 	isb	sy
 800a4e8:	f3bf 8f4f 	dsb	sy
 800a4ec:	60bb      	str	r3, [r7, #8]
}
 800a4ee:	bf00      	nop
 800a4f0:	e7fe      	b.n	800a4f0 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f000 f934 	bl	800a760 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d102      	bne.n	800a508 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f001 fc5e 	bl	800bdc4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a508:	bf00      	nop
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a510:	b480      	push	{r7}
 800a512:	b085      	sub	sp, #20
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d006      	beq.n	800a52e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f1c3 0307 	rsb	r3, r3, #7
 800a52a:	60fb      	str	r3, [r7, #12]
 800a52c:	e001      	b.n	800a532 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a52e:	2300      	movs	r3, #0
 800a530:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a532:	68fb      	ldr	r3, [r7, #12]
	}
 800a534:	4618      	mov	r0, r3
 800a536:	3714      	adds	r7, #20
 800a538:	46bd      	mov	sp, r7
 800a53a:	bc80      	pop	{r7}
 800a53c:	4770      	bx	lr

0800a53e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b086      	sub	sp, #24
 800a542:	af00      	add	r7, sp, #0
 800a544:	60f8      	str	r0, [r7, #12]
 800a546:	60b9      	str	r1, [r7, #8]
 800a548:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a54a:	2300      	movs	r3, #0
 800a54c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a552:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d10d      	bne.n	800a578 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d14d      	bne.n	800a600 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	4618      	mov	r0, r3
 800a56a:	f000 ffd9 	bl	800b520 <xTaskPriorityDisinherit>
 800a56e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2200      	movs	r2, #0
 800a574:	605a      	str	r2, [r3, #4]
 800a576:	e043      	b.n	800a600 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d119      	bne.n	800a5b2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	6898      	ldr	r0, [r3, #8]
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a586:	461a      	mov	r2, r3
 800a588:	68b9      	ldr	r1, [r7, #8]
 800a58a:	f00f feba 	bl	801a302 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	689a      	ldr	r2, [r3, #8]
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a596:	441a      	add	r2, r3
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	689a      	ldr	r2, [r3, #8]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d32b      	bcc.n	800a600 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	609a      	str	r2, [r3, #8]
 800a5b0:	e026      	b.n	800a600 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	68d8      	ldr	r0, [r3, #12]
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	68b9      	ldr	r1, [r7, #8]
 800a5be:	f00f fea0 	bl	801a302 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	68da      	ldr	r2, [r3, #12]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ca:	425b      	negs	r3, r3
 800a5cc:	441a      	add	r2, r3
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	68da      	ldr	r2, [r3, #12]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d207      	bcs.n	800a5ee <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	685a      	ldr	r2, [r3, #4]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e6:	425b      	negs	r3, r3
 800a5e8:	441a      	add	r2, r3
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2b02      	cmp	r3, #2
 800a5f2:	d105      	bne.n	800a600 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d002      	beq.n	800a600 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	3b01      	subs	r3, #1
 800a5fe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	1c5a      	adds	r2, r3, #1
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a608:	697b      	ldr	r3, [r7, #20]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3718      	adds	r7, #24
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b082      	sub	sp, #8
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
 800a61a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a620:	2b00      	cmp	r3, #0
 800a622:	d018      	beq.n	800a656 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	68da      	ldr	r2, [r3, #12]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a62c:	441a      	add	r2, r3
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	68da      	ldr	r2, [r3, #12]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d303      	bcc.n	800a646 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	68d9      	ldr	r1, [r3, #12]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a64e:	461a      	mov	r2, r3
 800a650:	6838      	ldr	r0, [r7, #0]
 800a652:	f00f fe56 	bl	801a302 <memcpy>
	}
}
 800a656:	bf00      	nop
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b084      	sub	sp, #16
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a666:	f001 f9e9 	bl	800ba3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a670:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a672:	e011      	b.n	800a698 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d012      	beq.n	800a6a2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	3324      	adds	r3, #36	; 0x24
 800a680:	4618      	mov	r0, r3
 800a682:	f000 fce5 	bl	800b050 <xTaskRemoveFromEventList>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d001      	beq.n	800a690 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a68c:	f000 fdba 	bl	800b204 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a690:	7bfb      	ldrb	r3, [r7, #15]
 800a692:	3b01      	subs	r3, #1
 800a694:	b2db      	uxtb	r3, r3
 800a696:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	dce9      	bgt.n	800a674 <prvUnlockQueue+0x16>
 800a6a0:	e000      	b.n	800a6a4 <prvUnlockQueue+0x46>
					break;
 800a6a2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	22ff      	movs	r2, #255	; 0xff
 800a6a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a6ac:	f001 f9f6 	bl	800ba9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a6b0:	f001 f9c4 	bl	800ba3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6ba:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6bc:	e011      	b.n	800a6e2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	691b      	ldr	r3, [r3, #16]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d012      	beq.n	800a6ec <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	3310      	adds	r3, #16
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f000 fcc0 	bl	800b050 <xTaskRemoveFromEventList>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d001      	beq.n	800a6da <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a6d6:	f000 fd95 	bl	800b204 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a6da:	7bbb      	ldrb	r3, [r7, #14]
 800a6dc:	3b01      	subs	r3, #1
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	dce9      	bgt.n	800a6be <prvUnlockQueue+0x60>
 800a6ea:	e000      	b.n	800a6ee <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a6ec:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	22ff      	movs	r2, #255	; 0xff
 800a6f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a6f6:	f001 f9d1 	bl	800ba9c <vPortExitCritical>
}
 800a6fa:	bf00      	nop
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b084      	sub	sp, #16
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a70a:	f001 f997 	bl	800ba3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a712:	2b00      	cmp	r3, #0
 800a714:	d102      	bne.n	800a71c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a716:	2301      	movs	r3, #1
 800a718:	60fb      	str	r3, [r7, #12]
 800a71a:	e001      	b.n	800a720 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a71c:	2300      	movs	r3, #0
 800a71e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a720:	f001 f9bc 	bl	800ba9c <vPortExitCritical>

	return xReturn;
 800a724:	68fb      	ldr	r3, [r7, #12]
}
 800a726:	4618      	mov	r0, r3
 800a728:	3710      	adds	r7, #16
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}

0800a72e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b084      	sub	sp, #16
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a736:	f001 f981 	bl	800ba3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a742:	429a      	cmp	r2, r3
 800a744:	d102      	bne.n	800a74c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a746:	2301      	movs	r3, #1
 800a748:	60fb      	str	r3, [r7, #12]
 800a74a:	e001      	b.n	800a750 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a74c:	2300      	movs	r3, #0
 800a74e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a750:	f001 f9a4 	bl	800ba9c <vPortExitCritical>

	return xReturn;
 800a754:	68fb      	ldr	r3, [r7, #12]
}
 800a756:	4618      	mov	r0, r3
 800a758:	3710      	adds	r7, #16
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
	...

0800a760 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a760:	b480      	push	{r7}
 800a762:	b085      	sub	sp, #20
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a768:	2300      	movs	r3, #0
 800a76a:	60fb      	str	r3, [r7, #12]
 800a76c:	e016      	b.n	800a79c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a76e:	4a10      	ldr	r2, [pc, #64]	; (800a7b0 <vQueueUnregisterQueue+0x50>)
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	00db      	lsls	r3, r3, #3
 800a774:	4413      	add	r3, r2
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d10b      	bne.n	800a796 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a77e:	4a0c      	ldr	r2, [pc, #48]	; (800a7b0 <vQueueUnregisterQueue+0x50>)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2100      	movs	r1, #0
 800a784:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a788:	4a09      	ldr	r2, [pc, #36]	; (800a7b0 <vQueueUnregisterQueue+0x50>)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	00db      	lsls	r3, r3, #3
 800a78e:	4413      	add	r3, r2
 800a790:	2200      	movs	r2, #0
 800a792:	605a      	str	r2, [r3, #4]
				break;
 800a794:	e006      	b.n	800a7a4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	3301      	adds	r3, #1
 800a79a:	60fb      	str	r3, [r7, #12]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2b07      	cmp	r3, #7
 800a7a0:	d9e5      	bls.n	800a76e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a7a2:	bf00      	nop
 800a7a4:	bf00      	nop
 800a7a6:	3714      	adds	r7, #20
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bc80      	pop	{r7}
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	20005658 	.word	0x20005658

0800a7b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b08e      	sub	sp, #56	; 0x38
 800a7b8:	af04      	add	r7, sp, #16
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	607a      	str	r2, [r7, #4]
 800a7c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a7c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d10a      	bne.n	800a7de <xTaskCreateStatic+0x2a>
	__asm volatile
 800a7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7cc:	f383 8811 	msr	BASEPRI, r3
 800a7d0:	f3bf 8f6f 	isb	sy
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	623b      	str	r3, [r7, #32]
}
 800a7da:	bf00      	nop
 800a7dc:	e7fe      	b.n	800a7dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d10a      	bne.n	800a7fa <xTaskCreateStatic+0x46>
	__asm volatile
 800a7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e8:	f383 8811 	msr	BASEPRI, r3
 800a7ec:	f3bf 8f6f 	isb	sy
 800a7f0:	f3bf 8f4f 	dsb	sy
 800a7f4:	61fb      	str	r3, [r7, #28]
}
 800a7f6:	bf00      	nop
 800a7f8:	e7fe      	b.n	800a7f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a7fa:	23b4      	movs	r3, #180	; 0xb4
 800a7fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	2bb4      	cmp	r3, #180	; 0xb4
 800a802:	d00a      	beq.n	800a81a <xTaskCreateStatic+0x66>
	__asm volatile
 800a804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a808:	f383 8811 	msr	BASEPRI, r3
 800a80c:	f3bf 8f6f 	isb	sy
 800a810:	f3bf 8f4f 	dsb	sy
 800a814:	61bb      	str	r3, [r7, #24]
}
 800a816:	bf00      	nop
 800a818:	e7fe      	b.n	800a818 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d01e      	beq.n	800a85e <xTaskCreateStatic+0xaa>
 800a820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a822:	2b00      	cmp	r3, #0
 800a824:	d01b      	beq.n	800a85e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a828:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a82e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a832:	2202      	movs	r2, #2
 800a834:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a838:	2300      	movs	r3, #0
 800a83a:	9303      	str	r3, [sp, #12]
 800a83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83e:	9302      	str	r3, [sp, #8]
 800a840:	f107 0314 	add.w	r3, r7, #20
 800a844:	9301      	str	r3, [sp, #4]
 800a846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a848:	9300      	str	r3, [sp, #0]
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	68b9      	ldr	r1, [r7, #8]
 800a850:	68f8      	ldr	r0, [r7, #12]
 800a852:	f000 f851 	bl	800a8f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a856:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a858:	f000 f8e4 	bl	800aa24 <prvAddNewTaskToReadyList>
 800a85c:	e001      	b.n	800a862 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800a85e:	2300      	movs	r3, #0
 800a860:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a862:	697b      	ldr	r3, [r7, #20]
	}
 800a864:	4618      	mov	r0, r3
 800a866:	3728      	adds	r7, #40	; 0x28
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b08c      	sub	sp, #48	; 0x30
 800a870:	af04      	add	r7, sp, #16
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	603b      	str	r3, [r7, #0]
 800a878:	4613      	mov	r3, r2
 800a87a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a87c:	88fb      	ldrh	r3, [r7, #6]
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	4618      	mov	r0, r3
 800a882:	f001 f9db 	bl	800bc3c <pvPortMalloc>
 800a886:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00e      	beq.n	800a8ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a88e:	20b4      	movs	r0, #180	; 0xb4
 800a890:	f001 f9d4 	bl	800bc3c <pvPortMalloc>
 800a894:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d003      	beq.n	800a8a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	697a      	ldr	r2, [r7, #20]
 800a8a0:	631a      	str	r2, [r3, #48]	; 0x30
 800a8a2:	e005      	b.n	800a8b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a8a4:	6978      	ldr	r0, [r7, #20]
 800a8a6:	f001 fa8d 	bl	800bdc4 <vPortFree>
 800a8aa:	e001      	b.n	800a8b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d017      	beq.n	800a8e6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a8be:	88fa      	ldrh	r2, [r7, #6]
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	9303      	str	r3, [sp, #12]
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	9302      	str	r3, [sp, #8]
 800a8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ca:	9301      	str	r3, [sp, #4]
 800a8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ce:	9300      	str	r3, [sp, #0]
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	68b9      	ldr	r1, [r7, #8]
 800a8d4:	68f8      	ldr	r0, [r7, #12]
 800a8d6:	f000 f80f 	bl	800a8f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a8da:	69f8      	ldr	r0, [r7, #28]
 800a8dc:	f000 f8a2 	bl	800aa24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	61bb      	str	r3, [r7, #24]
 800a8e4:	e002      	b.n	800a8ec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a8e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a8ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a8ec:	69bb      	ldr	r3, [r7, #24]
	}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3720      	adds	r7, #32
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
	...

0800a8f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b088      	sub	sp, #32
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	60b9      	str	r1, [r7, #8]
 800a902:	607a      	str	r2, [r7, #4]
 800a904:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a910:	3b01      	subs	r3, #1
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	4413      	add	r3, r2
 800a916:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	f023 0307 	bic.w	r3, r3, #7
 800a91e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a920:	69bb      	ldr	r3, [r7, #24]
 800a922:	f003 0307 	and.w	r3, r3, #7
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00a      	beq.n	800a940 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92e:	f383 8811 	msr	BASEPRI, r3
 800a932:	f3bf 8f6f 	isb	sy
 800a936:	f3bf 8f4f 	dsb	sy
 800a93a:	617b      	str	r3, [r7, #20]
}
 800a93c:	bf00      	nop
 800a93e:	e7fe      	b.n	800a93e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a940:	2300      	movs	r3, #0
 800a942:	61fb      	str	r3, [r7, #28]
 800a944:	e012      	b.n	800a96c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a946:	68ba      	ldr	r2, [r7, #8]
 800a948:	69fb      	ldr	r3, [r7, #28]
 800a94a:	4413      	add	r3, r2
 800a94c:	7819      	ldrb	r1, [r3, #0]
 800a94e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a950:	69fb      	ldr	r3, [r7, #28]
 800a952:	4413      	add	r3, r2
 800a954:	3334      	adds	r3, #52	; 0x34
 800a956:	460a      	mov	r2, r1
 800a958:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a95a:	68ba      	ldr	r2, [r7, #8]
 800a95c:	69fb      	ldr	r3, [r7, #28]
 800a95e:	4413      	add	r3, r2
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d006      	beq.n	800a974 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a966:	69fb      	ldr	r3, [r7, #28]
 800a968:	3301      	adds	r3, #1
 800a96a:	61fb      	str	r3, [r7, #28]
 800a96c:	69fb      	ldr	r3, [r7, #28]
 800a96e:	2b0f      	cmp	r3, #15
 800a970:	d9e9      	bls.n	800a946 <prvInitialiseNewTask+0x4e>
 800a972:	e000      	b.n	800a976 <prvInitialiseNewTask+0x7e>
		{
			break;
 800a974:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a978:	2200      	movs	r2, #0
 800a97a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a980:	2b06      	cmp	r3, #6
 800a982:	d901      	bls.n	800a988 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a984:	2306      	movs	r3, #6
 800a986:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a98c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a992:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a996:	2200      	movs	r2, #0
 800a998:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99c:	3304      	adds	r3, #4
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fe feb0 	bl	8009704 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a6:	3318      	adds	r3, #24
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7fe feab 	bl	8009704 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b6:	f1c3 0207 	rsb	r2, r3, #7
 800a9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d6:	334c      	adds	r3, #76	; 0x4c
 800a9d8:	2260      	movs	r2, #96	; 0x60
 800a9da:	2100      	movs	r1, #0
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f00f fc9e 	bl	801a31e <memset>
 800a9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e4:	4a0c      	ldr	r2, [pc, #48]	; (800aa18 <prvInitialiseNewTask+0x120>)
 800a9e6:	651a      	str	r2, [r3, #80]	; 0x50
 800a9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ea:	4a0c      	ldr	r2, [pc, #48]	; (800aa1c <prvInitialiseNewTask+0x124>)
 800a9ec:	655a      	str	r2, [r3, #84]	; 0x54
 800a9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f0:	4a0b      	ldr	r2, [pc, #44]	; (800aa20 <prvInitialiseNewTask+0x128>)
 800a9f2:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a9f4:	683a      	ldr	r2, [r7, #0]
 800a9f6:	68f9      	ldr	r1, [r7, #12]
 800a9f8:	69b8      	ldr	r0, [r7, #24]
 800a9fa:	f000 ff31 	bl	800b860 <pxPortInitialiseStack>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa02:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800aa04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d002      	beq.n	800aa10 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aa0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa10:	bf00      	nop
 800aa12:	3720      	adds	r7, #32
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	0801e650 	.word	0x0801e650
 800aa1c:	0801e670 	.word	0x0801e670
 800aa20:	0801e630 	.word	0x0801e630

0800aa24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aa2c:	f001 f806 	bl	800ba3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aa30:	4b2a      	ldr	r3, [pc, #168]	; (800aadc <prvAddNewTaskToReadyList+0xb8>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	3301      	adds	r3, #1
 800aa36:	4a29      	ldr	r2, [pc, #164]	; (800aadc <prvAddNewTaskToReadyList+0xb8>)
 800aa38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aa3a:	4b29      	ldr	r3, [pc, #164]	; (800aae0 <prvAddNewTaskToReadyList+0xbc>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d109      	bne.n	800aa56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aa42:	4a27      	ldr	r2, [pc, #156]	; (800aae0 <prvAddNewTaskToReadyList+0xbc>)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aa48:	4b24      	ldr	r3, [pc, #144]	; (800aadc <prvAddNewTaskToReadyList+0xb8>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d110      	bne.n	800aa72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aa50:	f000 fbfc 	bl	800b24c <prvInitialiseTaskLists>
 800aa54:	e00d      	b.n	800aa72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aa56:	4b23      	ldr	r3, [pc, #140]	; (800aae4 <prvAddNewTaskToReadyList+0xc0>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d109      	bne.n	800aa72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aa5e:	4b20      	ldr	r3, [pc, #128]	; (800aae0 <prvAddNewTaskToReadyList+0xbc>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d802      	bhi.n	800aa72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aa6c:	4a1c      	ldr	r2, [pc, #112]	; (800aae0 <prvAddNewTaskToReadyList+0xbc>)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aa72:	4b1d      	ldr	r3, [pc, #116]	; (800aae8 <prvAddNewTaskToReadyList+0xc4>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	3301      	adds	r3, #1
 800aa78:	4a1b      	ldr	r2, [pc, #108]	; (800aae8 <prvAddNewTaskToReadyList+0xc4>)
 800aa7a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa80:	2201      	movs	r2, #1
 800aa82:	409a      	lsls	r2, r3
 800aa84:	4b19      	ldr	r3, [pc, #100]	; (800aaec <prvAddNewTaskToReadyList+0xc8>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	4a18      	ldr	r2, [pc, #96]	; (800aaec <prvAddNewTaskToReadyList+0xc8>)
 800aa8c:	6013      	str	r3, [r2, #0]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa92:	4613      	mov	r3, r2
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	4413      	add	r3, r2
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	4a15      	ldr	r2, [pc, #84]	; (800aaf0 <prvAddNewTaskToReadyList+0xcc>)
 800aa9c:	441a      	add	r2, r3
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	3304      	adds	r3, #4
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	4610      	mov	r0, r2
 800aaa6:	f7fe fe39 	bl	800971c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aaaa:	f000 fff7 	bl	800ba9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aaae:	4b0d      	ldr	r3, [pc, #52]	; (800aae4 <prvAddNewTaskToReadyList+0xc0>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00e      	beq.n	800aad4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aab6:	4b0a      	ldr	r3, [pc, #40]	; (800aae0 <prvAddNewTaskToReadyList+0xbc>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d207      	bcs.n	800aad4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aac4:	4b0b      	ldr	r3, [pc, #44]	; (800aaf4 <prvAddNewTaskToReadyList+0xd0>)
 800aac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaca:	601a      	str	r2, [r3, #0]
 800aacc:	f3bf 8f4f 	dsb	sy
 800aad0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aad4:	bf00      	nop
 800aad6:	3708      	adds	r7, #8
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	20005798 	.word	0x20005798
 800aae0:	20005698 	.word	0x20005698
 800aae4:	200057a4 	.word	0x200057a4
 800aae8:	200057b4 	.word	0x200057b4
 800aaec:	200057a0 	.word	0x200057a0
 800aaf0:	2000569c 	.word	0x2000569c
 800aaf4:	e000ed04 	.word	0xe000ed04

0800aaf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ab00:	2300      	movs	r3, #0
 800ab02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d017      	beq.n	800ab3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ab0a:	4b13      	ldr	r3, [pc, #76]	; (800ab58 <vTaskDelay+0x60>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d00a      	beq.n	800ab28 <vTaskDelay+0x30>
	__asm volatile
 800ab12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab16:	f383 8811 	msr	BASEPRI, r3
 800ab1a:	f3bf 8f6f 	isb	sy
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	60bb      	str	r3, [r7, #8]
}
 800ab24:	bf00      	nop
 800ab26:	e7fe      	b.n	800ab26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ab28:	f000 f884 	bl	800ac34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 fe30 	bl	800b794 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ab34:	f000 f88c 	bl	800ac50 <xTaskResumeAll>
 800ab38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d107      	bne.n	800ab50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ab40:	4b06      	ldr	r3, [pc, #24]	; (800ab5c <vTaskDelay+0x64>)
 800ab42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab46:	601a      	str	r2, [r3, #0]
 800ab48:	f3bf 8f4f 	dsb	sy
 800ab4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ab50:	bf00      	nop
 800ab52:	3710      	adds	r7, #16
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	200057c0 	.word	0x200057c0
 800ab5c:	e000ed04 	.word	0xe000ed04

0800ab60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b08a      	sub	sp, #40	; 0x28
 800ab64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ab66:	2300      	movs	r3, #0
 800ab68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ab6e:	463a      	mov	r2, r7
 800ab70:	1d39      	adds	r1, r7, #4
 800ab72:	f107 0308 	add.w	r3, r7, #8
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7f7 fa94 	bl	80020a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ab7c:	6839      	ldr	r1, [r7, #0]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	68ba      	ldr	r2, [r7, #8]
 800ab82:	9202      	str	r2, [sp, #8]
 800ab84:	9301      	str	r3, [sp, #4]
 800ab86:	2300      	movs	r3, #0
 800ab88:	9300      	str	r3, [sp, #0]
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	460a      	mov	r2, r1
 800ab8e:	4921      	ldr	r1, [pc, #132]	; (800ac14 <vTaskStartScheduler+0xb4>)
 800ab90:	4821      	ldr	r0, [pc, #132]	; (800ac18 <vTaskStartScheduler+0xb8>)
 800ab92:	f7ff fe0f 	bl	800a7b4 <xTaskCreateStatic>
 800ab96:	4603      	mov	r3, r0
 800ab98:	4a20      	ldr	r2, [pc, #128]	; (800ac1c <vTaskStartScheduler+0xbc>)
 800ab9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ab9c:	4b1f      	ldr	r3, [pc, #124]	; (800ac1c <vTaskStartScheduler+0xbc>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d002      	beq.n	800abaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aba4:	2301      	movs	r3, #1
 800aba6:	617b      	str	r3, [r7, #20]
 800aba8:	e001      	b.n	800abae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800abaa:	2300      	movs	r3, #0
 800abac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d11b      	bne.n	800abec <vTaskStartScheduler+0x8c>
	__asm volatile
 800abb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	613b      	str	r3, [r7, #16]
}
 800abc6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800abc8:	4b15      	ldr	r3, [pc, #84]	; (800ac20 <vTaskStartScheduler+0xc0>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	334c      	adds	r3, #76	; 0x4c
 800abce:	4a15      	ldr	r2, [pc, #84]	; (800ac24 <vTaskStartScheduler+0xc4>)
 800abd0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800abd2:	4b15      	ldr	r3, [pc, #84]	; (800ac28 <vTaskStartScheduler+0xc8>)
 800abd4:	f04f 32ff 	mov.w	r2, #4294967295
 800abd8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800abda:	4b14      	ldr	r3, [pc, #80]	; (800ac2c <vTaskStartScheduler+0xcc>)
 800abdc:	2201      	movs	r2, #1
 800abde:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800abe0:	4b13      	ldr	r3, [pc, #76]	; (800ac30 <vTaskStartScheduler+0xd0>)
 800abe2:	2200      	movs	r2, #0
 800abe4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800abe6:	f000 feb7 	bl	800b958 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800abea:	e00e      	b.n	800ac0a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abf2:	d10a      	bne.n	800ac0a <vTaskStartScheduler+0xaa>
	__asm volatile
 800abf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf8:	f383 8811 	msr	BASEPRI, r3
 800abfc:	f3bf 8f6f 	isb	sy
 800ac00:	f3bf 8f4f 	dsb	sy
 800ac04:	60fb      	str	r3, [r7, #12]
}
 800ac06:	bf00      	nop
 800ac08:	e7fe      	b.n	800ac08 <vTaskStartScheduler+0xa8>
}
 800ac0a:	bf00      	nop
 800ac0c:	3718      	adds	r7, #24
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	0801b90c 	.word	0x0801b90c
 800ac18:	0800b21d 	.word	0x0800b21d
 800ac1c:	200057bc 	.word	0x200057bc
 800ac20:	20005698 	.word	0x20005698
 800ac24:	20000020 	.word	0x20000020
 800ac28:	200057b8 	.word	0x200057b8
 800ac2c:	200057a4 	.word	0x200057a4
 800ac30:	2000579c 	.word	0x2000579c

0800ac34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ac34:	b480      	push	{r7}
 800ac36:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ac38:	4b04      	ldr	r3, [pc, #16]	; (800ac4c <vTaskSuspendAll+0x18>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	4a03      	ldr	r2, [pc, #12]	; (800ac4c <vTaskSuspendAll+0x18>)
 800ac40:	6013      	str	r3, [r2, #0]
}
 800ac42:	bf00      	nop
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bc80      	pop	{r7}
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop
 800ac4c:	200057c0 	.word	0x200057c0

0800ac50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ac56:	2300      	movs	r3, #0
 800ac58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ac5e:	4b41      	ldr	r3, [pc, #260]	; (800ad64 <xTaskResumeAll+0x114>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d10a      	bne.n	800ac7c <xTaskResumeAll+0x2c>
	__asm volatile
 800ac66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6a:	f383 8811 	msr	BASEPRI, r3
 800ac6e:	f3bf 8f6f 	isb	sy
 800ac72:	f3bf 8f4f 	dsb	sy
 800ac76:	603b      	str	r3, [r7, #0]
}
 800ac78:	bf00      	nop
 800ac7a:	e7fe      	b.n	800ac7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ac7c:	f000 fede 	bl	800ba3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ac80:	4b38      	ldr	r3, [pc, #224]	; (800ad64 <xTaskResumeAll+0x114>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	3b01      	subs	r3, #1
 800ac86:	4a37      	ldr	r2, [pc, #220]	; (800ad64 <xTaskResumeAll+0x114>)
 800ac88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac8a:	4b36      	ldr	r3, [pc, #216]	; (800ad64 <xTaskResumeAll+0x114>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d161      	bne.n	800ad56 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ac92:	4b35      	ldr	r3, [pc, #212]	; (800ad68 <xTaskResumeAll+0x118>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d05d      	beq.n	800ad56 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac9a:	e02e      	b.n	800acfa <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ac9c:	4b33      	ldr	r3, [pc, #204]	; (800ad6c <xTaskResumeAll+0x11c>)
 800ac9e:	68db      	ldr	r3, [r3, #12]
 800aca0:	68db      	ldr	r3, [r3, #12]
 800aca2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	3318      	adds	r3, #24
 800aca8:	4618      	mov	r0, r3
 800acaa:	f7fe fd92 	bl	80097d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	3304      	adds	r3, #4
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7fe fd8d 	bl	80097d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acbc:	2201      	movs	r2, #1
 800acbe:	409a      	lsls	r2, r3
 800acc0:	4b2b      	ldr	r3, [pc, #172]	; (800ad70 <xTaskResumeAll+0x120>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4313      	orrs	r3, r2
 800acc6:	4a2a      	ldr	r2, [pc, #168]	; (800ad70 <xTaskResumeAll+0x120>)
 800acc8:	6013      	str	r3, [r2, #0]
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acce:	4613      	mov	r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	4413      	add	r3, r2
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	4a27      	ldr	r2, [pc, #156]	; (800ad74 <xTaskResumeAll+0x124>)
 800acd8:	441a      	add	r2, r3
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	3304      	adds	r3, #4
 800acde:	4619      	mov	r1, r3
 800ace0:	4610      	mov	r0, r2
 800ace2:	f7fe fd1b 	bl	800971c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acea:	4b23      	ldr	r3, [pc, #140]	; (800ad78 <xTaskResumeAll+0x128>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d302      	bcc.n	800acfa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800acf4:	4b21      	ldr	r3, [pc, #132]	; (800ad7c <xTaskResumeAll+0x12c>)
 800acf6:	2201      	movs	r2, #1
 800acf8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800acfa:	4b1c      	ldr	r3, [pc, #112]	; (800ad6c <xTaskResumeAll+0x11c>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d1cc      	bne.n	800ac9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d001      	beq.n	800ad0c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ad08:	f000 fb42 	bl	800b390 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ad0c:	4b1c      	ldr	r3, [pc, #112]	; (800ad80 <xTaskResumeAll+0x130>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d010      	beq.n	800ad3a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ad18:	f000 f856 	bl	800adc8 <xTaskIncrementTick>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d002      	beq.n	800ad28 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ad22:	4b16      	ldr	r3, [pc, #88]	; (800ad7c <xTaskResumeAll+0x12c>)
 800ad24:	2201      	movs	r2, #1
 800ad26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d1f1      	bne.n	800ad18 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800ad34:	4b12      	ldr	r3, [pc, #72]	; (800ad80 <xTaskResumeAll+0x130>)
 800ad36:	2200      	movs	r2, #0
 800ad38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ad3a:	4b10      	ldr	r3, [pc, #64]	; (800ad7c <xTaskResumeAll+0x12c>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d009      	beq.n	800ad56 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ad42:	2301      	movs	r3, #1
 800ad44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ad46:	4b0f      	ldr	r3, [pc, #60]	; (800ad84 <xTaskResumeAll+0x134>)
 800ad48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad4c:	601a      	str	r2, [r3, #0]
 800ad4e:	f3bf 8f4f 	dsb	sy
 800ad52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ad56:	f000 fea1 	bl	800ba9c <vPortExitCritical>

	return xAlreadyYielded;
 800ad5a:	68bb      	ldr	r3, [r7, #8]
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3710      	adds	r7, #16
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	200057c0 	.word	0x200057c0
 800ad68:	20005798 	.word	0x20005798
 800ad6c:	20005758 	.word	0x20005758
 800ad70:	200057a0 	.word	0x200057a0
 800ad74:	2000569c 	.word	0x2000569c
 800ad78:	20005698 	.word	0x20005698
 800ad7c:	200057ac 	.word	0x200057ac
 800ad80:	200057a8 	.word	0x200057a8
 800ad84:	e000ed04 	.word	0xe000ed04

0800ad88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ad8e:	4b04      	ldr	r3, [pc, #16]	; (800ada0 <xTaskGetTickCount+0x18>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ad94:	687b      	ldr	r3, [r7, #4]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	370c      	adds	r7, #12
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bc80      	pop	{r7}
 800ad9e:	4770      	bx	lr
 800ada0:	2000579c 	.word	0x2000579c

0800ada4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800adaa:	f000 ff09 	bl	800bbc0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800adae:	2300      	movs	r3, #0
 800adb0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800adb2:	4b04      	ldr	r3, [pc, #16]	; (800adc4 <xTaskGetTickCountFromISR+0x20>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800adb8:	683b      	ldr	r3, [r7, #0]
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	2000579c 	.word	0x2000579c

0800adc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b086      	sub	sp, #24
 800adcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800adce:	2300      	movs	r3, #0
 800add0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800add2:	4b51      	ldr	r3, [pc, #324]	; (800af18 <xTaskIncrementTick+0x150>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	f040 808d 	bne.w	800aef6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800addc:	4b4f      	ldr	r3, [pc, #316]	; (800af1c <xTaskIncrementTick+0x154>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	3301      	adds	r3, #1
 800ade2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ade4:	4a4d      	ldr	r2, [pc, #308]	; (800af1c <xTaskIncrementTick+0x154>)
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d120      	bne.n	800ae32 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800adf0:	4b4b      	ldr	r3, [pc, #300]	; (800af20 <xTaskIncrementTick+0x158>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00a      	beq.n	800ae10 <xTaskIncrementTick+0x48>
	__asm volatile
 800adfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adfe:	f383 8811 	msr	BASEPRI, r3
 800ae02:	f3bf 8f6f 	isb	sy
 800ae06:	f3bf 8f4f 	dsb	sy
 800ae0a:	603b      	str	r3, [r7, #0]
}
 800ae0c:	bf00      	nop
 800ae0e:	e7fe      	b.n	800ae0e <xTaskIncrementTick+0x46>
 800ae10:	4b43      	ldr	r3, [pc, #268]	; (800af20 <xTaskIncrementTick+0x158>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	60fb      	str	r3, [r7, #12]
 800ae16:	4b43      	ldr	r3, [pc, #268]	; (800af24 <xTaskIncrementTick+0x15c>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a41      	ldr	r2, [pc, #260]	; (800af20 <xTaskIncrementTick+0x158>)
 800ae1c:	6013      	str	r3, [r2, #0]
 800ae1e:	4a41      	ldr	r2, [pc, #260]	; (800af24 <xTaskIncrementTick+0x15c>)
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	6013      	str	r3, [r2, #0]
 800ae24:	4b40      	ldr	r3, [pc, #256]	; (800af28 <xTaskIncrementTick+0x160>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	4a3f      	ldr	r2, [pc, #252]	; (800af28 <xTaskIncrementTick+0x160>)
 800ae2c:	6013      	str	r3, [r2, #0]
 800ae2e:	f000 faaf 	bl	800b390 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ae32:	4b3e      	ldr	r3, [pc, #248]	; (800af2c <xTaskIncrementTick+0x164>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	693a      	ldr	r2, [r7, #16]
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d34d      	bcc.n	800aed8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae3c:	4b38      	ldr	r3, [pc, #224]	; (800af20 <xTaskIncrementTick+0x158>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d101      	bne.n	800ae4a <xTaskIncrementTick+0x82>
 800ae46:	2301      	movs	r3, #1
 800ae48:	e000      	b.n	800ae4c <xTaskIncrementTick+0x84>
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d004      	beq.n	800ae5a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae50:	4b36      	ldr	r3, [pc, #216]	; (800af2c <xTaskIncrementTick+0x164>)
 800ae52:	f04f 32ff 	mov.w	r2, #4294967295
 800ae56:	601a      	str	r2, [r3, #0]
					break;
 800ae58:	e03e      	b.n	800aed8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ae5a:	4b31      	ldr	r3, [pc, #196]	; (800af20 <xTaskIncrementTick+0x158>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	68db      	ldr	r3, [r3, #12]
 800ae62:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ae6a:	693a      	ldr	r2, [r7, #16]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d203      	bcs.n	800ae7a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ae72:	4a2e      	ldr	r2, [pc, #184]	; (800af2c <xTaskIncrementTick+0x164>)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6013      	str	r3, [r2, #0]
						break;
 800ae78:	e02e      	b.n	800aed8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	3304      	adds	r3, #4
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7fe fca7 	bl	80097d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d004      	beq.n	800ae96 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	3318      	adds	r3, #24
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7fe fc9e 	bl	80097d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	409a      	lsls	r2, r3
 800ae9e:	4b24      	ldr	r3, [pc, #144]	; (800af30 <xTaskIncrementTick+0x168>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4313      	orrs	r3, r2
 800aea4:	4a22      	ldr	r2, [pc, #136]	; (800af30 <xTaskIncrementTick+0x168>)
 800aea6:	6013      	str	r3, [r2, #0]
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeac:	4613      	mov	r3, r2
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	4413      	add	r3, r2
 800aeb2:	009b      	lsls	r3, r3, #2
 800aeb4:	4a1f      	ldr	r2, [pc, #124]	; (800af34 <xTaskIncrementTick+0x16c>)
 800aeb6:	441a      	add	r2, r3
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	3304      	adds	r3, #4
 800aebc:	4619      	mov	r1, r3
 800aebe:	4610      	mov	r0, r2
 800aec0:	f7fe fc2c 	bl	800971c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aec8:	4b1b      	ldr	r3, [pc, #108]	; (800af38 <xTaskIncrementTick+0x170>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aece:	429a      	cmp	r2, r3
 800aed0:	d3b4      	bcc.n	800ae3c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800aed2:	2301      	movs	r3, #1
 800aed4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aed6:	e7b1      	b.n	800ae3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aed8:	4b17      	ldr	r3, [pc, #92]	; (800af38 <xTaskIncrementTick+0x170>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aede:	4915      	ldr	r1, [pc, #84]	; (800af34 <xTaskIncrementTick+0x16c>)
 800aee0:	4613      	mov	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	4413      	add	r3, r2
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	440b      	add	r3, r1
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d907      	bls.n	800af00 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800aef0:	2301      	movs	r3, #1
 800aef2:	617b      	str	r3, [r7, #20]
 800aef4:	e004      	b.n	800af00 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800aef6:	4b11      	ldr	r3, [pc, #68]	; (800af3c <xTaskIncrementTick+0x174>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	3301      	adds	r3, #1
 800aefc:	4a0f      	ldr	r2, [pc, #60]	; (800af3c <xTaskIncrementTick+0x174>)
 800aefe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800af00:	4b0f      	ldr	r3, [pc, #60]	; (800af40 <xTaskIncrementTick+0x178>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d001      	beq.n	800af0c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800af08:	2301      	movs	r3, #1
 800af0a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800af0c:	697b      	ldr	r3, [r7, #20]
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3718      	adds	r7, #24
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	200057c0 	.word	0x200057c0
 800af1c:	2000579c 	.word	0x2000579c
 800af20:	20005750 	.word	0x20005750
 800af24:	20005754 	.word	0x20005754
 800af28:	200057b0 	.word	0x200057b0
 800af2c:	200057b8 	.word	0x200057b8
 800af30:	200057a0 	.word	0x200057a0
 800af34:	2000569c 	.word	0x2000569c
 800af38:	20005698 	.word	0x20005698
 800af3c:	200057a8 	.word	0x200057a8
 800af40:	200057ac 	.word	0x200057ac

0800af44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800af44:	b480      	push	{r7}
 800af46:	b087      	sub	sp, #28
 800af48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800af4a:	4b29      	ldr	r3, [pc, #164]	; (800aff0 <vTaskSwitchContext+0xac>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d003      	beq.n	800af5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800af52:	4b28      	ldr	r3, [pc, #160]	; (800aff4 <vTaskSwitchContext+0xb0>)
 800af54:	2201      	movs	r2, #1
 800af56:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800af58:	e044      	b.n	800afe4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800af5a:	4b26      	ldr	r3, [pc, #152]	; (800aff4 <vTaskSwitchContext+0xb0>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800af60:	4b25      	ldr	r3, [pc, #148]	; (800aff8 <vTaskSwitchContext+0xb4>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	fab3 f383 	clz	r3, r3
 800af6c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800af6e:	7afb      	ldrb	r3, [r7, #11]
 800af70:	f1c3 031f 	rsb	r3, r3, #31
 800af74:	617b      	str	r3, [r7, #20]
 800af76:	4921      	ldr	r1, [pc, #132]	; (800affc <vTaskSwitchContext+0xb8>)
 800af78:	697a      	ldr	r2, [r7, #20]
 800af7a:	4613      	mov	r3, r2
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	4413      	add	r3, r2
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	440b      	add	r3, r1
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d10a      	bne.n	800afa0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800af8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8e:	f383 8811 	msr	BASEPRI, r3
 800af92:	f3bf 8f6f 	isb	sy
 800af96:	f3bf 8f4f 	dsb	sy
 800af9a:	607b      	str	r3, [r7, #4]
}
 800af9c:	bf00      	nop
 800af9e:	e7fe      	b.n	800af9e <vTaskSwitchContext+0x5a>
 800afa0:	697a      	ldr	r2, [r7, #20]
 800afa2:	4613      	mov	r3, r2
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	4413      	add	r3, r2
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	4a14      	ldr	r2, [pc, #80]	; (800affc <vTaskSwitchContext+0xb8>)
 800afac:	4413      	add	r3, r2
 800afae:	613b      	str	r3, [r7, #16]
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	685a      	ldr	r2, [r3, #4]
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	605a      	str	r2, [r3, #4]
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	685a      	ldr	r2, [r3, #4]
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	3308      	adds	r3, #8
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d104      	bne.n	800afd0 <vTaskSwitchContext+0x8c>
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	685a      	ldr	r2, [r3, #4]
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	605a      	str	r2, [r3, #4]
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	68db      	ldr	r3, [r3, #12]
 800afd6:	4a0a      	ldr	r2, [pc, #40]	; (800b000 <vTaskSwitchContext+0xbc>)
 800afd8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800afda:	4b09      	ldr	r3, [pc, #36]	; (800b000 <vTaskSwitchContext+0xbc>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	334c      	adds	r3, #76	; 0x4c
 800afe0:	4a08      	ldr	r2, [pc, #32]	; (800b004 <vTaskSwitchContext+0xc0>)
 800afe2:	6013      	str	r3, [r2, #0]
}
 800afe4:	bf00      	nop
 800afe6:	371c      	adds	r7, #28
 800afe8:	46bd      	mov	sp, r7
 800afea:	bc80      	pop	{r7}
 800afec:	4770      	bx	lr
 800afee:	bf00      	nop
 800aff0:	200057c0 	.word	0x200057c0
 800aff4:	200057ac 	.word	0x200057ac
 800aff8:	200057a0 	.word	0x200057a0
 800affc:	2000569c 	.word	0x2000569c
 800b000:	20005698 	.word	0x20005698
 800b004:	20000020 	.word	0x20000020

0800b008 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d10a      	bne.n	800b02e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b01c:	f383 8811 	msr	BASEPRI, r3
 800b020:	f3bf 8f6f 	isb	sy
 800b024:	f3bf 8f4f 	dsb	sy
 800b028:	60fb      	str	r3, [r7, #12]
}
 800b02a:	bf00      	nop
 800b02c:	e7fe      	b.n	800b02c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b02e:	4b07      	ldr	r3, [pc, #28]	; (800b04c <vTaskPlaceOnEventList+0x44>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	3318      	adds	r3, #24
 800b034:	4619      	mov	r1, r3
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f7fe fb93 	bl	8009762 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b03c:	2101      	movs	r1, #1
 800b03e:	6838      	ldr	r0, [r7, #0]
 800b040:	f000 fba8 	bl	800b794 <prvAddCurrentTaskToDelayedList>
}
 800b044:	bf00      	nop
 800b046:	3710      	adds	r7, #16
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	20005698 	.word	0x20005698

0800b050 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b086      	sub	sp, #24
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	68db      	ldr	r3, [r3, #12]
 800b05e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d10a      	bne.n	800b07c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06a:	f383 8811 	msr	BASEPRI, r3
 800b06e:	f3bf 8f6f 	isb	sy
 800b072:	f3bf 8f4f 	dsb	sy
 800b076:	60fb      	str	r3, [r7, #12]
}
 800b078:	bf00      	nop
 800b07a:	e7fe      	b.n	800b07a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	3318      	adds	r3, #24
 800b080:	4618      	mov	r0, r3
 800b082:	f7fe fba6 	bl	80097d2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b086:	4b1d      	ldr	r3, [pc, #116]	; (800b0fc <xTaskRemoveFromEventList+0xac>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d11c      	bne.n	800b0c8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	3304      	adds	r3, #4
 800b092:	4618      	mov	r0, r3
 800b094:	f7fe fb9d 	bl	80097d2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b09c:	2201      	movs	r2, #1
 800b09e:	409a      	lsls	r2, r3
 800b0a0:	4b17      	ldr	r3, [pc, #92]	; (800b100 <xTaskRemoveFromEventList+0xb0>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	4a16      	ldr	r2, [pc, #88]	; (800b100 <xTaskRemoveFromEventList+0xb0>)
 800b0a8:	6013      	str	r3, [r2, #0]
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	4413      	add	r3, r2
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	4a13      	ldr	r2, [pc, #76]	; (800b104 <xTaskRemoveFromEventList+0xb4>)
 800b0b8:	441a      	add	r2, r3
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	3304      	adds	r3, #4
 800b0be:	4619      	mov	r1, r3
 800b0c0:	4610      	mov	r0, r2
 800b0c2:	f7fe fb2b 	bl	800971c <vListInsertEnd>
 800b0c6:	e005      	b.n	800b0d4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	3318      	adds	r3, #24
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	480e      	ldr	r0, [pc, #56]	; (800b108 <xTaskRemoveFromEventList+0xb8>)
 800b0d0:	f7fe fb24 	bl	800971c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0d8:	4b0c      	ldr	r3, [pc, #48]	; (800b10c <xTaskRemoveFromEventList+0xbc>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d905      	bls.n	800b0ee <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b0e6:	4b0a      	ldr	r3, [pc, #40]	; (800b110 <xTaskRemoveFromEventList+0xc0>)
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	601a      	str	r2, [r3, #0]
 800b0ec:	e001      	b.n	800b0f2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b0f2:	697b      	ldr	r3, [r7, #20]
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3718      	adds	r7, #24
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	200057c0 	.word	0x200057c0
 800b100:	200057a0 	.word	0x200057a0
 800b104:	2000569c 	.word	0x2000569c
 800b108:	20005758 	.word	0x20005758
 800b10c:	20005698 	.word	0x20005698
 800b110:	200057ac 	.word	0x200057ac

0800b114 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b11c:	4b06      	ldr	r3, [pc, #24]	; (800b138 <vTaskInternalSetTimeOutState+0x24>)
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b124:	4b05      	ldr	r3, [pc, #20]	; (800b13c <vTaskInternalSetTimeOutState+0x28>)
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	605a      	str	r2, [r3, #4]
}
 800b12c:	bf00      	nop
 800b12e:	370c      	adds	r7, #12
 800b130:	46bd      	mov	sp, r7
 800b132:	bc80      	pop	{r7}
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	200057b0 	.word	0x200057b0
 800b13c:	2000579c 	.word	0x2000579c

0800b140 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b088      	sub	sp, #32
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d10a      	bne.n	800b166 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b154:	f383 8811 	msr	BASEPRI, r3
 800b158:	f3bf 8f6f 	isb	sy
 800b15c:	f3bf 8f4f 	dsb	sy
 800b160:	613b      	str	r3, [r7, #16]
}
 800b162:	bf00      	nop
 800b164:	e7fe      	b.n	800b164 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d10a      	bne.n	800b182 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b170:	f383 8811 	msr	BASEPRI, r3
 800b174:	f3bf 8f6f 	isb	sy
 800b178:	f3bf 8f4f 	dsb	sy
 800b17c:	60fb      	str	r3, [r7, #12]
}
 800b17e:	bf00      	nop
 800b180:	e7fe      	b.n	800b180 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b182:	f000 fc5b 	bl	800ba3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b186:	4b1d      	ldr	r3, [pc, #116]	; (800b1fc <xTaskCheckForTimeOut+0xbc>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	69ba      	ldr	r2, [r7, #24]
 800b192:	1ad3      	subs	r3, r2, r3
 800b194:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b19e:	d102      	bne.n	800b1a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	61fb      	str	r3, [r7, #28]
 800b1a4:	e023      	b.n	800b1ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	4b15      	ldr	r3, [pc, #84]	; (800b200 <xTaskCheckForTimeOut+0xc0>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d007      	beq.n	800b1c2 <xTaskCheckForTimeOut+0x82>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	69ba      	ldr	r2, [r7, #24]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d302      	bcc.n	800b1c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	61fb      	str	r3, [r7, #28]
 800b1c0:	e015      	b.n	800b1ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	697a      	ldr	r2, [r7, #20]
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d20b      	bcs.n	800b1e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	1ad2      	subs	r2, r2, r3
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f7ff ff9b 	bl	800b114 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	61fb      	str	r3, [r7, #28]
 800b1e2:	e004      	b.n	800b1ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b1ee:	f000 fc55 	bl	800ba9c <vPortExitCritical>

	return xReturn;
 800b1f2:	69fb      	ldr	r3, [r7, #28]
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3720      	adds	r7, #32
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	2000579c 	.word	0x2000579c
 800b200:	200057b0 	.word	0x200057b0

0800b204 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b204:	b480      	push	{r7}
 800b206:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b208:	4b03      	ldr	r3, [pc, #12]	; (800b218 <vTaskMissedYield+0x14>)
 800b20a:	2201      	movs	r2, #1
 800b20c:	601a      	str	r2, [r3, #0]
}
 800b20e:	bf00      	nop
 800b210:	46bd      	mov	sp, r7
 800b212:	bc80      	pop	{r7}
 800b214:	4770      	bx	lr
 800b216:	bf00      	nop
 800b218:	200057ac 	.word	0x200057ac

0800b21c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b224:	f000 f852 	bl	800b2cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b228:	4b06      	ldr	r3, [pc, #24]	; (800b244 <prvIdleTask+0x28>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d9f9      	bls.n	800b224 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b230:	4b05      	ldr	r3, [pc, #20]	; (800b248 <prvIdleTask+0x2c>)
 800b232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b236:	601a      	str	r2, [r3, #0]
 800b238:	f3bf 8f4f 	dsb	sy
 800b23c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b240:	e7f0      	b.n	800b224 <prvIdleTask+0x8>
 800b242:	bf00      	nop
 800b244:	2000569c 	.word	0x2000569c
 800b248:	e000ed04 	.word	0xe000ed04

0800b24c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b252:	2300      	movs	r3, #0
 800b254:	607b      	str	r3, [r7, #4]
 800b256:	e00c      	b.n	800b272 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b258:	687a      	ldr	r2, [r7, #4]
 800b25a:	4613      	mov	r3, r2
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	4413      	add	r3, r2
 800b260:	009b      	lsls	r3, r3, #2
 800b262:	4a12      	ldr	r2, [pc, #72]	; (800b2ac <prvInitialiseTaskLists+0x60>)
 800b264:	4413      	add	r3, r2
 800b266:	4618      	mov	r0, r3
 800b268:	f7fe fa2d 	bl	80096c6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	3301      	adds	r3, #1
 800b270:	607b      	str	r3, [r7, #4]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2b06      	cmp	r3, #6
 800b276:	d9ef      	bls.n	800b258 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b278:	480d      	ldr	r0, [pc, #52]	; (800b2b0 <prvInitialiseTaskLists+0x64>)
 800b27a:	f7fe fa24 	bl	80096c6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b27e:	480d      	ldr	r0, [pc, #52]	; (800b2b4 <prvInitialiseTaskLists+0x68>)
 800b280:	f7fe fa21 	bl	80096c6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b284:	480c      	ldr	r0, [pc, #48]	; (800b2b8 <prvInitialiseTaskLists+0x6c>)
 800b286:	f7fe fa1e 	bl	80096c6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b28a:	480c      	ldr	r0, [pc, #48]	; (800b2bc <prvInitialiseTaskLists+0x70>)
 800b28c:	f7fe fa1b 	bl	80096c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b290:	480b      	ldr	r0, [pc, #44]	; (800b2c0 <prvInitialiseTaskLists+0x74>)
 800b292:	f7fe fa18 	bl	80096c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b296:	4b0b      	ldr	r3, [pc, #44]	; (800b2c4 <prvInitialiseTaskLists+0x78>)
 800b298:	4a05      	ldr	r2, [pc, #20]	; (800b2b0 <prvInitialiseTaskLists+0x64>)
 800b29a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b29c:	4b0a      	ldr	r3, [pc, #40]	; (800b2c8 <prvInitialiseTaskLists+0x7c>)
 800b29e:	4a05      	ldr	r2, [pc, #20]	; (800b2b4 <prvInitialiseTaskLists+0x68>)
 800b2a0:	601a      	str	r2, [r3, #0]
}
 800b2a2:	bf00      	nop
 800b2a4:	3708      	adds	r7, #8
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	2000569c 	.word	0x2000569c
 800b2b0:	20005728 	.word	0x20005728
 800b2b4:	2000573c 	.word	0x2000573c
 800b2b8:	20005758 	.word	0x20005758
 800b2bc:	2000576c 	.word	0x2000576c
 800b2c0:	20005784 	.word	0x20005784
 800b2c4:	20005750 	.word	0x20005750
 800b2c8:	20005754 	.word	0x20005754

0800b2cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b2d2:	e019      	b.n	800b308 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b2d4:	f000 fbb2 	bl	800ba3c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b2d8:	4b10      	ldr	r3, [pc, #64]	; (800b31c <prvCheckTasksWaitingTermination+0x50>)
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	68db      	ldr	r3, [r3, #12]
 800b2de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	3304      	adds	r3, #4
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f7fe fa74 	bl	80097d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b2ea:	4b0d      	ldr	r3, [pc, #52]	; (800b320 <prvCheckTasksWaitingTermination+0x54>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	4a0b      	ldr	r2, [pc, #44]	; (800b320 <prvCheckTasksWaitingTermination+0x54>)
 800b2f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b2f4:	4b0b      	ldr	r3, [pc, #44]	; (800b324 <prvCheckTasksWaitingTermination+0x58>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	3b01      	subs	r3, #1
 800b2fa:	4a0a      	ldr	r2, [pc, #40]	; (800b324 <prvCheckTasksWaitingTermination+0x58>)
 800b2fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b2fe:	f000 fbcd 	bl	800ba9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 f810 	bl	800b328 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b308:	4b06      	ldr	r3, [pc, #24]	; (800b324 <prvCheckTasksWaitingTermination+0x58>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d1e1      	bne.n	800b2d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b310:	bf00      	nop
 800b312:	bf00      	nop
 800b314:	3708      	adds	r7, #8
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	2000576c 	.word	0x2000576c
 800b320:	20005798 	.word	0x20005798
 800b324:	20005780 	.word	0x20005780

0800b328 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	334c      	adds	r3, #76	; 0x4c
 800b334:	4618      	mov	r0, r3
 800b336:	f00f f8f3 	bl	801a520 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b340:	2b00      	cmp	r3, #0
 800b342:	d108      	bne.n	800b356 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b348:	4618      	mov	r0, r3
 800b34a:	f000 fd3b 	bl	800bdc4 <vPortFree>
				vPortFree( pxTCB );
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 fd38 	bl	800bdc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b354:	e018      	b.n	800b388 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d103      	bne.n	800b368 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 fd2f 	bl	800bdc4 <vPortFree>
	}
 800b366:	e00f      	b.n	800b388 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b36e:	2b02      	cmp	r3, #2
 800b370:	d00a      	beq.n	800b388 <prvDeleteTCB+0x60>
	__asm volatile
 800b372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b376:	f383 8811 	msr	BASEPRI, r3
 800b37a:	f3bf 8f6f 	isb	sy
 800b37e:	f3bf 8f4f 	dsb	sy
 800b382:	60fb      	str	r3, [r7, #12]
}
 800b384:	bf00      	nop
 800b386:	e7fe      	b.n	800b386 <prvDeleteTCB+0x5e>
	}
 800b388:	bf00      	nop
 800b38a:	3710      	adds	r7, #16
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b396:	4b0e      	ldr	r3, [pc, #56]	; (800b3d0 <prvResetNextTaskUnblockTime+0x40>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d101      	bne.n	800b3a4 <prvResetNextTaskUnblockTime+0x14>
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	e000      	b.n	800b3a6 <prvResetNextTaskUnblockTime+0x16>
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d004      	beq.n	800b3b4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b3aa:	4b0a      	ldr	r3, [pc, #40]	; (800b3d4 <prvResetNextTaskUnblockTime+0x44>)
 800b3ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b3b0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b3b2:	e008      	b.n	800b3c6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b3b4:	4b06      	ldr	r3, [pc, #24]	; (800b3d0 <prvResetNextTaskUnblockTime+0x40>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	68db      	ldr	r3, [r3, #12]
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	4a04      	ldr	r2, [pc, #16]	; (800b3d4 <prvResetNextTaskUnblockTime+0x44>)
 800b3c4:	6013      	str	r3, [r2, #0]
}
 800b3c6:	bf00      	nop
 800b3c8:	370c      	adds	r7, #12
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bc80      	pop	{r7}
 800b3ce:	4770      	bx	lr
 800b3d0:	20005750 	.word	0x20005750
 800b3d4:	200057b8 	.word	0x200057b8

0800b3d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b3de:	4b0b      	ldr	r3, [pc, #44]	; (800b40c <xTaskGetSchedulerState+0x34>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d102      	bne.n	800b3ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	607b      	str	r3, [r7, #4]
 800b3ea:	e008      	b.n	800b3fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3ec:	4b08      	ldr	r3, [pc, #32]	; (800b410 <xTaskGetSchedulerState+0x38>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d102      	bne.n	800b3fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b3f4:	2302      	movs	r3, #2
 800b3f6:	607b      	str	r3, [r7, #4]
 800b3f8:	e001      	b.n	800b3fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b3fe:	687b      	ldr	r3, [r7, #4]
	}
 800b400:	4618      	mov	r0, r3
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	bc80      	pop	{r7}
 800b408:	4770      	bx	lr
 800b40a:	bf00      	nop
 800b40c:	200057a4 	.word	0x200057a4
 800b410:	200057c0 	.word	0x200057c0

0800b414 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b420:	2300      	movs	r3, #0
 800b422:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d06e      	beq.n	800b508 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b42e:	4b39      	ldr	r3, [pc, #228]	; (800b514 <xTaskPriorityInherit+0x100>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b434:	429a      	cmp	r2, r3
 800b436:	d25e      	bcs.n	800b4f6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	699b      	ldr	r3, [r3, #24]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	db06      	blt.n	800b44e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b440:	4b34      	ldr	r3, [pc, #208]	; (800b514 <xTaskPriorityInherit+0x100>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b446:	f1c3 0207 	rsb	r2, r3, #7
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	6959      	ldr	r1, [r3, #20]
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b456:	4613      	mov	r3, r2
 800b458:	009b      	lsls	r3, r3, #2
 800b45a:	4413      	add	r3, r2
 800b45c:	009b      	lsls	r3, r3, #2
 800b45e:	4a2e      	ldr	r2, [pc, #184]	; (800b518 <xTaskPriorityInherit+0x104>)
 800b460:	4413      	add	r3, r2
 800b462:	4299      	cmp	r1, r3
 800b464:	d101      	bne.n	800b46a <xTaskPriorityInherit+0x56>
 800b466:	2301      	movs	r3, #1
 800b468:	e000      	b.n	800b46c <xTaskPriorityInherit+0x58>
 800b46a:	2300      	movs	r3, #0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d03a      	beq.n	800b4e6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	3304      	adds	r3, #4
 800b474:	4618      	mov	r0, r3
 800b476:	f7fe f9ac 	bl	80097d2 <uxListRemove>
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d115      	bne.n	800b4ac <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b484:	4924      	ldr	r1, [pc, #144]	; (800b518 <xTaskPriorityInherit+0x104>)
 800b486:	4613      	mov	r3, r2
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	4413      	add	r3, r2
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	440b      	add	r3, r1
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d10a      	bne.n	800b4ac <xTaskPriorityInherit+0x98>
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49a:	2201      	movs	r2, #1
 800b49c:	fa02 f303 	lsl.w	r3, r2, r3
 800b4a0:	43da      	mvns	r2, r3
 800b4a2:	4b1e      	ldr	r3, [pc, #120]	; (800b51c <xTaskPriorityInherit+0x108>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4013      	ands	r3, r2
 800b4a8:	4a1c      	ldr	r2, [pc, #112]	; (800b51c <xTaskPriorityInherit+0x108>)
 800b4aa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b4ac:	4b19      	ldr	r3, [pc, #100]	; (800b514 <xTaskPriorityInherit+0x100>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	409a      	lsls	r2, r3
 800b4be:	4b17      	ldr	r3, [pc, #92]	; (800b51c <xTaskPriorityInherit+0x108>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	4a15      	ldr	r2, [pc, #84]	; (800b51c <xTaskPriorityInherit+0x108>)
 800b4c6:	6013      	str	r3, [r2, #0]
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4cc:	4613      	mov	r3, r2
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	4413      	add	r3, r2
 800b4d2:	009b      	lsls	r3, r3, #2
 800b4d4:	4a10      	ldr	r2, [pc, #64]	; (800b518 <xTaskPriorityInherit+0x104>)
 800b4d6:	441a      	add	r2, r3
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	3304      	adds	r3, #4
 800b4dc:	4619      	mov	r1, r3
 800b4de:	4610      	mov	r0, r2
 800b4e0:	f7fe f91c 	bl	800971c <vListInsertEnd>
 800b4e4:	e004      	b.n	800b4f0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b4e6:	4b0b      	ldr	r3, [pc, #44]	; (800b514 <xTaskPriorityInherit+0x100>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	60fb      	str	r3, [r7, #12]
 800b4f4:	e008      	b.n	800b508 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b4fa:	4b06      	ldr	r3, [pc, #24]	; (800b514 <xTaskPriorityInherit+0x100>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b500:	429a      	cmp	r2, r3
 800b502:	d201      	bcs.n	800b508 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b504:	2301      	movs	r3, #1
 800b506:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b508:	68fb      	ldr	r3, [r7, #12]
	}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3710      	adds	r7, #16
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop
 800b514:	20005698 	.word	0x20005698
 800b518:	2000569c 	.word	0x2000569c
 800b51c:	200057a0 	.word	0x200057a0

0800b520 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b520:	b580      	push	{r7, lr}
 800b522:	b086      	sub	sp, #24
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b52c:	2300      	movs	r3, #0
 800b52e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d06e      	beq.n	800b614 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b536:	4b3a      	ldr	r3, [pc, #232]	; (800b620 <xTaskPriorityDisinherit+0x100>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	693a      	ldr	r2, [r7, #16]
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d00a      	beq.n	800b556 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b544:	f383 8811 	msr	BASEPRI, r3
 800b548:	f3bf 8f6f 	isb	sy
 800b54c:	f3bf 8f4f 	dsb	sy
 800b550:	60fb      	str	r3, [r7, #12]
}
 800b552:	bf00      	nop
 800b554:	e7fe      	b.n	800b554 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d10a      	bne.n	800b574 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b562:	f383 8811 	msr	BASEPRI, r3
 800b566:	f3bf 8f6f 	isb	sy
 800b56a:	f3bf 8f4f 	dsb	sy
 800b56e:	60bb      	str	r3, [r7, #8]
}
 800b570:	bf00      	nop
 800b572:	e7fe      	b.n	800b572 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b578:	1e5a      	subs	r2, r3, #1
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b586:	429a      	cmp	r2, r3
 800b588:	d044      	beq.n	800b614 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d140      	bne.n	800b614 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	3304      	adds	r3, #4
 800b596:	4618      	mov	r0, r3
 800b598:	f7fe f91b 	bl	80097d2 <uxListRemove>
 800b59c:	4603      	mov	r3, r0
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d115      	bne.n	800b5ce <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5a6:	491f      	ldr	r1, [pc, #124]	; (800b624 <xTaskPriorityDisinherit+0x104>)
 800b5a8:	4613      	mov	r3, r2
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	4413      	add	r3, r2
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	440b      	add	r3, r1
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10a      	bne.n	800b5ce <xTaskPriorityDisinherit+0xae>
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5bc:	2201      	movs	r2, #1
 800b5be:	fa02 f303 	lsl.w	r3, r2, r3
 800b5c2:	43da      	mvns	r2, r3
 800b5c4:	4b18      	ldr	r3, [pc, #96]	; (800b628 <xTaskPriorityDisinherit+0x108>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4013      	ands	r3, r2
 800b5ca:	4a17      	ldr	r2, [pc, #92]	; (800b628 <xTaskPriorityDisinherit+0x108>)
 800b5cc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5da:	f1c3 0207 	rsb	r2, r3, #7
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	409a      	lsls	r2, r3
 800b5ea:	4b0f      	ldr	r3, [pc, #60]	; (800b628 <xTaskPriorityDisinherit+0x108>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	4a0d      	ldr	r2, [pc, #52]	; (800b628 <xTaskPriorityDisinherit+0x108>)
 800b5f2:	6013      	str	r3, [r2, #0]
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f8:	4613      	mov	r3, r2
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	4413      	add	r3, r2
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	4a08      	ldr	r2, [pc, #32]	; (800b624 <xTaskPriorityDisinherit+0x104>)
 800b602:	441a      	add	r2, r3
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	3304      	adds	r3, #4
 800b608:	4619      	mov	r1, r3
 800b60a:	4610      	mov	r0, r2
 800b60c:	f7fe f886 	bl	800971c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b610:	2301      	movs	r3, #1
 800b612:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b614:	697b      	ldr	r3, [r7, #20]
	}
 800b616:	4618      	mov	r0, r3
 800b618:	3718      	adds	r7, #24
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	20005698 	.word	0x20005698
 800b624:	2000569c 	.word	0x2000569c
 800b628:	200057a0 	.word	0x200057a0

0800b62c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b088      	sub	sp, #32
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b63a:	2301      	movs	r3, #1
 800b63c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2b00      	cmp	r3, #0
 800b642:	f000 8088 	beq.w	800b756 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b646:	69bb      	ldr	r3, [r7, #24]
 800b648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d10a      	bne.n	800b664 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b652:	f383 8811 	msr	BASEPRI, r3
 800b656:	f3bf 8f6f 	isb	sy
 800b65a:	f3bf 8f4f 	dsb	sy
 800b65e:	60fb      	str	r3, [r7, #12]
}
 800b660:	bf00      	nop
 800b662:	e7fe      	b.n	800b662 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b664:	69bb      	ldr	r3, [r7, #24]
 800b666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b668:	683a      	ldr	r2, [r7, #0]
 800b66a:	429a      	cmp	r2, r3
 800b66c:	d902      	bls.n	800b674 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	61fb      	str	r3, [r7, #28]
 800b672:	e002      	b.n	800b67a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b674:	69bb      	ldr	r3, [r7, #24]
 800b676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b678:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b67e:	69fa      	ldr	r2, [r7, #28]
 800b680:	429a      	cmp	r2, r3
 800b682:	d068      	beq.n	800b756 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b684:	69bb      	ldr	r3, [r7, #24]
 800b686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b688:	697a      	ldr	r2, [r7, #20]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d163      	bne.n	800b756 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b68e:	4b34      	ldr	r3, [pc, #208]	; (800b760 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	69ba      	ldr	r2, [r7, #24]
 800b694:	429a      	cmp	r2, r3
 800b696:	d10a      	bne.n	800b6ae <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800b698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b69c:	f383 8811 	msr	BASEPRI, r3
 800b6a0:	f3bf 8f6f 	isb	sy
 800b6a4:	f3bf 8f4f 	dsb	sy
 800b6a8:	60bb      	str	r3, [r7, #8]
}
 800b6aa:	bf00      	nop
 800b6ac:	e7fe      	b.n	800b6ac <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	69fa      	ldr	r2, [r7, #28]
 800b6b8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b6ba:	69bb      	ldr	r3, [r7, #24]
 800b6bc:	699b      	ldr	r3, [r3, #24]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	db04      	blt.n	800b6cc <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6c2:	69fb      	ldr	r3, [r7, #28]
 800b6c4:	f1c3 0207 	rsb	r2, r3, #7
 800b6c8:	69bb      	ldr	r3, [r7, #24]
 800b6ca:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b6cc:	69bb      	ldr	r3, [r7, #24]
 800b6ce:	6959      	ldr	r1, [r3, #20]
 800b6d0:	693a      	ldr	r2, [r7, #16]
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	4413      	add	r3, r2
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	4a22      	ldr	r2, [pc, #136]	; (800b764 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b6dc:	4413      	add	r3, r2
 800b6de:	4299      	cmp	r1, r3
 800b6e0:	d101      	bne.n	800b6e6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	e000      	b.n	800b6e8 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d034      	beq.n	800b756 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6ec:	69bb      	ldr	r3, [r7, #24]
 800b6ee:	3304      	adds	r3, #4
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f7fe f86e 	bl	80097d2 <uxListRemove>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d115      	bne.n	800b728 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b6fc:	69bb      	ldr	r3, [r7, #24]
 800b6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b700:	4918      	ldr	r1, [pc, #96]	; (800b764 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b702:	4613      	mov	r3, r2
 800b704:	009b      	lsls	r3, r3, #2
 800b706:	4413      	add	r3, r2
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	440b      	add	r3, r1
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d10a      	bne.n	800b728 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800b712:	69bb      	ldr	r3, [r7, #24]
 800b714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b716:	2201      	movs	r2, #1
 800b718:	fa02 f303 	lsl.w	r3, r2, r3
 800b71c:	43da      	mvns	r2, r3
 800b71e:	4b12      	ldr	r3, [pc, #72]	; (800b768 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4013      	ands	r3, r2
 800b724:	4a10      	ldr	r2, [pc, #64]	; (800b768 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800b726:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b728:	69bb      	ldr	r3, [r7, #24]
 800b72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b72c:	2201      	movs	r2, #1
 800b72e:	409a      	lsls	r2, r3
 800b730:	4b0d      	ldr	r3, [pc, #52]	; (800b768 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4313      	orrs	r3, r2
 800b736:	4a0c      	ldr	r2, [pc, #48]	; (800b768 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800b738:	6013      	str	r3, [r2, #0]
 800b73a:	69bb      	ldr	r3, [r7, #24]
 800b73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b73e:	4613      	mov	r3, r2
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	4413      	add	r3, r2
 800b744:	009b      	lsls	r3, r3, #2
 800b746:	4a07      	ldr	r2, [pc, #28]	; (800b764 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b748:	441a      	add	r2, r3
 800b74a:	69bb      	ldr	r3, [r7, #24]
 800b74c:	3304      	adds	r3, #4
 800b74e:	4619      	mov	r1, r3
 800b750:	4610      	mov	r0, r2
 800b752:	f7fd ffe3 	bl	800971c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b756:	bf00      	nop
 800b758:	3720      	adds	r7, #32
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	20005698 	.word	0x20005698
 800b764:	2000569c 	.word	0x2000569c
 800b768:	200057a0 	.word	0x200057a0

0800b76c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800b76c:	b480      	push	{r7}
 800b76e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b770:	4b07      	ldr	r3, [pc, #28]	; (800b790 <pvTaskIncrementMutexHeldCount+0x24>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d004      	beq.n	800b782 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b778:	4b05      	ldr	r3, [pc, #20]	; (800b790 <pvTaskIncrementMutexHeldCount+0x24>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b77e:	3201      	adds	r2, #1
 800b780:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800b782:	4b03      	ldr	r3, [pc, #12]	; (800b790 <pvTaskIncrementMutexHeldCount+0x24>)
 800b784:	681b      	ldr	r3, [r3, #0]
	}
 800b786:	4618      	mov	r0, r3
 800b788:	46bd      	mov	sp, r7
 800b78a:	bc80      	pop	{r7}
 800b78c:	4770      	bx	lr
 800b78e:	bf00      	nop
 800b790:	20005698 	.word	0x20005698

0800b794 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b79e:	4b29      	ldr	r3, [pc, #164]	; (800b844 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7a4:	4b28      	ldr	r3, [pc, #160]	; (800b848 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	3304      	adds	r3, #4
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7fe f811 	bl	80097d2 <uxListRemove>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d10b      	bne.n	800b7ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800b7b6:	4b24      	ldr	r3, [pc, #144]	; (800b848 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7bc:	2201      	movs	r2, #1
 800b7be:	fa02 f303 	lsl.w	r3, r2, r3
 800b7c2:	43da      	mvns	r2, r3
 800b7c4:	4b21      	ldr	r3, [pc, #132]	; (800b84c <prvAddCurrentTaskToDelayedList+0xb8>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4013      	ands	r3, r2
 800b7ca:	4a20      	ldr	r2, [pc, #128]	; (800b84c <prvAddCurrentTaskToDelayedList+0xb8>)
 800b7cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d4:	d10a      	bne.n	800b7ec <prvAddCurrentTaskToDelayedList+0x58>
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d007      	beq.n	800b7ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7dc:	4b1a      	ldr	r3, [pc, #104]	; (800b848 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	3304      	adds	r3, #4
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	481a      	ldr	r0, [pc, #104]	; (800b850 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b7e6:	f7fd ff99 	bl	800971c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b7ea:	e026      	b.n	800b83a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4413      	add	r3, r2
 800b7f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b7f4:	4b14      	ldr	r3, [pc, #80]	; (800b848 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	68ba      	ldr	r2, [r7, #8]
 800b7fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b7fc:	68ba      	ldr	r2, [r7, #8]
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	429a      	cmp	r2, r3
 800b802:	d209      	bcs.n	800b818 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b804:	4b13      	ldr	r3, [pc, #76]	; (800b854 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	4b0f      	ldr	r3, [pc, #60]	; (800b848 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	3304      	adds	r3, #4
 800b80e:	4619      	mov	r1, r3
 800b810:	4610      	mov	r0, r2
 800b812:	f7fd ffa6 	bl	8009762 <vListInsert>
}
 800b816:	e010      	b.n	800b83a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b818:	4b0f      	ldr	r3, [pc, #60]	; (800b858 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	4b0a      	ldr	r3, [pc, #40]	; (800b848 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	3304      	adds	r3, #4
 800b822:	4619      	mov	r1, r3
 800b824:	4610      	mov	r0, r2
 800b826:	f7fd ff9c 	bl	8009762 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b82a:	4b0c      	ldr	r3, [pc, #48]	; (800b85c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	68ba      	ldr	r2, [r7, #8]
 800b830:	429a      	cmp	r2, r3
 800b832:	d202      	bcs.n	800b83a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b834:	4a09      	ldr	r2, [pc, #36]	; (800b85c <prvAddCurrentTaskToDelayedList+0xc8>)
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	6013      	str	r3, [r2, #0]
}
 800b83a:	bf00      	nop
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	2000579c 	.word	0x2000579c
 800b848:	20005698 	.word	0x20005698
 800b84c:	200057a0 	.word	0x200057a0
 800b850:	20005784 	.word	0x20005784
 800b854:	20005754 	.word	0x20005754
 800b858:	20005750 	.word	0x20005750
 800b85c:	200057b8 	.word	0x200057b8

0800b860 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b860:	b480      	push	{r7}
 800b862:	b085      	sub	sp, #20
 800b864:	af00      	add	r7, sp, #0
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	60b9      	str	r1, [r7, #8]
 800b86a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	3b04      	subs	r3, #4
 800b870:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b878:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	3b04      	subs	r3, #4
 800b87e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	f023 0201 	bic.w	r2, r3, #1
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	3b04      	subs	r3, #4
 800b88e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b890:	4a08      	ldr	r2, [pc, #32]	; (800b8b4 <pxPortInitialiseStack+0x54>)
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	3b14      	subs	r3, #20
 800b89a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	3b20      	subs	r3, #32
 800b8a6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3714      	adds	r7, #20
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bc80      	pop	{r7}
 800b8b2:	4770      	bx	lr
 800b8b4:	0800b8b9 	.word	0x0800b8b9

0800b8b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b8c2:	4b12      	ldr	r3, [pc, #72]	; (800b90c <prvTaskExitError+0x54>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ca:	d00a      	beq.n	800b8e2 <prvTaskExitError+0x2a>
	__asm volatile
 800b8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d0:	f383 8811 	msr	BASEPRI, r3
 800b8d4:	f3bf 8f6f 	isb	sy
 800b8d8:	f3bf 8f4f 	dsb	sy
 800b8dc:	60fb      	str	r3, [r7, #12]
}
 800b8de:	bf00      	nop
 800b8e0:	e7fe      	b.n	800b8e0 <prvTaskExitError+0x28>
	__asm volatile
 800b8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e6:	f383 8811 	msr	BASEPRI, r3
 800b8ea:	f3bf 8f6f 	isb	sy
 800b8ee:	f3bf 8f4f 	dsb	sy
 800b8f2:	60bb      	str	r3, [r7, #8]
}
 800b8f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b8f6:	bf00      	nop
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d0fc      	beq.n	800b8f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b8fe:	bf00      	nop
 800b900:	bf00      	nop
 800b902:	3714      	adds	r7, #20
 800b904:	46bd      	mov	sp, r7
 800b906:	bc80      	pop	{r7}
 800b908:	4770      	bx	lr
 800b90a:	bf00      	nop
 800b90c:	2000000c 	.word	0x2000000c

0800b910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b910:	4b07      	ldr	r3, [pc, #28]	; (800b930 <pxCurrentTCBConst2>)
 800b912:	6819      	ldr	r1, [r3, #0]
 800b914:	6808      	ldr	r0, [r1, #0]
 800b916:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b91a:	f380 8809 	msr	PSP, r0
 800b91e:	f3bf 8f6f 	isb	sy
 800b922:	f04f 0000 	mov.w	r0, #0
 800b926:	f380 8811 	msr	BASEPRI, r0
 800b92a:	f04e 0e0d 	orr.w	lr, lr, #13
 800b92e:	4770      	bx	lr

0800b930 <pxCurrentTCBConst2>:
 800b930:	20005698 	.word	0x20005698
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b934:	bf00      	nop
 800b936:	bf00      	nop

0800b938 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b938:	4806      	ldr	r0, [pc, #24]	; (800b954 <prvPortStartFirstTask+0x1c>)
 800b93a:	6800      	ldr	r0, [r0, #0]
 800b93c:	6800      	ldr	r0, [r0, #0]
 800b93e:	f380 8808 	msr	MSP, r0
 800b942:	b662      	cpsie	i
 800b944:	b661      	cpsie	f
 800b946:	f3bf 8f4f 	dsb	sy
 800b94a:	f3bf 8f6f 	isb	sy
 800b94e:	df00      	svc	0
 800b950:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b952:	bf00      	nop
 800b954:	e000ed08 	.word	0xe000ed08

0800b958 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b95e:	4b32      	ldr	r3, [pc, #200]	; (800ba28 <xPortStartScheduler+0xd0>)
 800b960:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	b2db      	uxtb	r3, r3
 800b968:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	22ff      	movs	r2, #255	; 0xff
 800b96e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	b2db      	uxtb	r3, r3
 800b976:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b978:	78fb      	ldrb	r3, [r7, #3]
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b980:	b2da      	uxtb	r2, r3
 800b982:	4b2a      	ldr	r3, [pc, #168]	; (800ba2c <xPortStartScheduler+0xd4>)
 800b984:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b986:	4b2a      	ldr	r3, [pc, #168]	; (800ba30 <xPortStartScheduler+0xd8>)
 800b988:	2207      	movs	r2, #7
 800b98a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b98c:	e009      	b.n	800b9a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b98e:	4b28      	ldr	r3, [pc, #160]	; (800ba30 <xPortStartScheduler+0xd8>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	3b01      	subs	r3, #1
 800b994:	4a26      	ldr	r2, [pc, #152]	; (800ba30 <xPortStartScheduler+0xd8>)
 800b996:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b998:	78fb      	ldrb	r3, [r7, #3]
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	005b      	lsls	r3, r3, #1
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b9a2:	78fb      	ldrb	r3, [r7, #3]
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9aa:	2b80      	cmp	r3, #128	; 0x80
 800b9ac:	d0ef      	beq.n	800b98e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b9ae:	4b20      	ldr	r3, [pc, #128]	; (800ba30 <xPortStartScheduler+0xd8>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f1c3 0307 	rsb	r3, r3, #7
 800b9b6:	2b04      	cmp	r3, #4
 800b9b8:	d00a      	beq.n	800b9d0 <xPortStartScheduler+0x78>
	__asm volatile
 800b9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9be:	f383 8811 	msr	BASEPRI, r3
 800b9c2:	f3bf 8f6f 	isb	sy
 800b9c6:	f3bf 8f4f 	dsb	sy
 800b9ca:	60bb      	str	r3, [r7, #8]
}
 800b9cc:	bf00      	nop
 800b9ce:	e7fe      	b.n	800b9ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b9d0:	4b17      	ldr	r3, [pc, #92]	; (800ba30 <xPortStartScheduler+0xd8>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	021b      	lsls	r3, r3, #8
 800b9d6:	4a16      	ldr	r2, [pc, #88]	; (800ba30 <xPortStartScheduler+0xd8>)
 800b9d8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b9da:	4b15      	ldr	r3, [pc, #84]	; (800ba30 <xPortStartScheduler+0xd8>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b9e2:	4a13      	ldr	r2, [pc, #76]	; (800ba30 <xPortStartScheduler+0xd8>)
 800b9e4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	b2da      	uxtb	r2, r3
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b9ee:	4b11      	ldr	r3, [pc, #68]	; (800ba34 <xPortStartScheduler+0xdc>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4a10      	ldr	r2, [pc, #64]	; (800ba34 <xPortStartScheduler+0xdc>)
 800b9f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b9f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b9fa:	4b0e      	ldr	r3, [pc, #56]	; (800ba34 <xPortStartScheduler+0xdc>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4a0d      	ldr	r2, [pc, #52]	; (800ba34 <xPortStartScheduler+0xdc>)
 800ba00:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ba04:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ba06:	f000 f8b9 	bl	800bb7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ba0a:	4b0b      	ldr	r3, [pc, #44]	; (800ba38 <xPortStartScheduler+0xe0>)
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ba10:	f7ff ff92 	bl	800b938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ba14:	f7ff fa96 	bl	800af44 <vTaskSwitchContext>
	prvTaskExitError();
 800ba18:	f7ff ff4e 	bl	800b8b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ba1c:	2300      	movs	r3, #0
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3710      	adds	r7, #16
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	e000e400 	.word	0xe000e400
 800ba2c:	200057c4 	.word	0x200057c4
 800ba30:	200057c8 	.word	0x200057c8
 800ba34:	e000ed20 	.word	0xe000ed20
 800ba38:	2000000c 	.word	0x2000000c

0800ba3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b083      	sub	sp, #12
 800ba40:	af00      	add	r7, sp, #0
	__asm volatile
 800ba42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba46:	f383 8811 	msr	BASEPRI, r3
 800ba4a:	f3bf 8f6f 	isb	sy
 800ba4e:	f3bf 8f4f 	dsb	sy
 800ba52:	607b      	str	r3, [r7, #4]
}
 800ba54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ba56:	4b0f      	ldr	r3, [pc, #60]	; (800ba94 <vPortEnterCritical+0x58>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	4a0d      	ldr	r2, [pc, #52]	; (800ba94 <vPortEnterCritical+0x58>)
 800ba5e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ba60:	4b0c      	ldr	r3, [pc, #48]	; (800ba94 <vPortEnterCritical+0x58>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d10f      	bne.n	800ba88 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ba68:	4b0b      	ldr	r3, [pc, #44]	; (800ba98 <vPortEnterCritical+0x5c>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d00a      	beq.n	800ba88 <vPortEnterCritical+0x4c>
	__asm volatile
 800ba72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba76:	f383 8811 	msr	BASEPRI, r3
 800ba7a:	f3bf 8f6f 	isb	sy
 800ba7e:	f3bf 8f4f 	dsb	sy
 800ba82:	603b      	str	r3, [r7, #0]
}
 800ba84:	bf00      	nop
 800ba86:	e7fe      	b.n	800ba86 <vPortEnterCritical+0x4a>
	}
}
 800ba88:	bf00      	nop
 800ba8a:	370c      	adds	r7, #12
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bc80      	pop	{r7}
 800ba90:	4770      	bx	lr
 800ba92:	bf00      	nop
 800ba94:	2000000c 	.word	0x2000000c
 800ba98:	e000ed04 	.word	0xe000ed04

0800ba9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b083      	sub	sp, #12
 800baa0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800baa2:	4b11      	ldr	r3, [pc, #68]	; (800bae8 <vPortExitCritical+0x4c>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d10a      	bne.n	800bac0 <vPortExitCritical+0x24>
	__asm volatile
 800baaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baae:	f383 8811 	msr	BASEPRI, r3
 800bab2:	f3bf 8f6f 	isb	sy
 800bab6:	f3bf 8f4f 	dsb	sy
 800baba:	607b      	str	r3, [r7, #4]
}
 800babc:	bf00      	nop
 800babe:	e7fe      	b.n	800babe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bac0:	4b09      	ldr	r3, [pc, #36]	; (800bae8 <vPortExitCritical+0x4c>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	3b01      	subs	r3, #1
 800bac6:	4a08      	ldr	r2, [pc, #32]	; (800bae8 <vPortExitCritical+0x4c>)
 800bac8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800baca:	4b07      	ldr	r3, [pc, #28]	; (800bae8 <vPortExitCritical+0x4c>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d105      	bne.n	800bade <vPortExitCritical+0x42>
 800bad2:	2300      	movs	r3, #0
 800bad4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	f383 8811 	msr	BASEPRI, r3
}
 800badc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bade:	bf00      	nop
 800bae0:	370c      	adds	r7, #12
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bc80      	pop	{r7}
 800bae6:	4770      	bx	lr
 800bae8:	2000000c 	.word	0x2000000c
 800baec:	00000000 	.word	0x00000000

0800baf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800baf0:	f3ef 8009 	mrs	r0, PSP
 800baf4:	f3bf 8f6f 	isb	sy
 800baf8:	4b0d      	ldr	r3, [pc, #52]	; (800bb30 <pxCurrentTCBConst>)
 800bafa:	681a      	ldr	r2, [r3, #0]
 800bafc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bb00:	6010      	str	r0, [r2, #0]
 800bb02:	e92d 4008 	stmdb	sp!, {r3, lr}
 800bb06:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bb0a:	f380 8811 	msr	BASEPRI, r0
 800bb0e:	f7ff fa19 	bl	800af44 <vTaskSwitchContext>
 800bb12:	f04f 0000 	mov.w	r0, #0
 800bb16:	f380 8811 	msr	BASEPRI, r0
 800bb1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bb1e:	6819      	ldr	r1, [r3, #0]
 800bb20:	6808      	ldr	r0, [r1, #0]
 800bb22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bb26:	f380 8809 	msr	PSP, r0
 800bb2a:	f3bf 8f6f 	isb	sy
 800bb2e:	4770      	bx	lr

0800bb30 <pxCurrentTCBConst>:
 800bb30:	20005698 	.word	0x20005698
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bb34:	bf00      	nop
 800bb36:	bf00      	nop

0800bb38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
	__asm volatile
 800bb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb42:	f383 8811 	msr	BASEPRI, r3
 800bb46:	f3bf 8f6f 	isb	sy
 800bb4a:	f3bf 8f4f 	dsb	sy
 800bb4e:	607b      	str	r3, [r7, #4]
}
 800bb50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bb52:	f7ff f939 	bl	800adc8 <xTaskIncrementTick>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d003      	beq.n	800bb64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bb5c:	4b06      	ldr	r3, [pc, #24]	; (800bb78 <SysTick_Handler+0x40>)
 800bb5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb62:	601a      	str	r2, [r3, #0]
 800bb64:	2300      	movs	r3, #0
 800bb66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	f383 8811 	msr	BASEPRI, r3
}
 800bb6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bb70:	bf00      	nop
 800bb72:	3708      	adds	r7, #8
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	e000ed04 	.word	0xe000ed04

0800bb7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bb80:	4b0a      	ldr	r3, [pc, #40]	; (800bbac <vPortSetupTimerInterrupt+0x30>)
 800bb82:	2200      	movs	r2, #0
 800bb84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bb86:	4b0a      	ldr	r3, [pc, #40]	; (800bbb0 <vPortSetupTimerInterrupt+0x34>)
 800bb88:	2200      	movs	r2, #0
 800bb8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bb8c:	4b09      	ldr	r3, [pc, #36]	; (800bbb4 <vPortSetupTimerInterrupt+0x38>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a09      	ldr	r2, [pc, #36]	; (800bbb8 <vPortSetupTimerInterrupt+0x3c>)
 800bb92:	fba2 2303 	umull	r2, r3, r2, r3
 800bb96:	099b      	lsrs	r3, r3, #6
 800bb98:	4a08      	ldr	r2, [pc, #32]	; (800bbbc <vPortSetupTimerInterrupt+0x40>)
 800bb9a:	3b01      	subs	r3, #1
 800bb9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bb9e:	4b03      	ldr	r3, [pc, #12]	; (800bbac <vPortSetupTimerInterrupt+0x30>)
 800bba0:	2207      	movs	r2, #7
 800bba2:	601a      	str	r2, [r3, #0]
}
 800bba4:	bf00      	nop
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bc80      	pop	{r7}
 800bbaa:	4770      	bx	lr
 800bbac:	e000e010 	.word	0xe000e010
 800bbb0:	e000e018 	.word	0xe000e018
 800bbb4:	20000000 	.word	0x20000000
 800bbb8:	10624dd3 	.word	0x10624dd3
 800bbbc:	e000e014 	.word	0xe000e014

0800bbc0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bbc6:	f3ef 8305 	mrs	r3, IPSR
 800bbca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2b0f      	cmp	r3, #15
 800bbd0:	d914      	bls.n	800bbfc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bbd2:	4a16      	ldr	r2, [pc, #88]	; (800bc2c <vPortValidateInterruptPriority+0x6c>)
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	4413      	add	r3, r2
 800bbd8:	781b      	ldrb	r3, [r3, #0]
 800bbda:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bbdc:	4b14      	ldr	r3, [pc, #80]	; (800bc30 <vPortValidateInterruptPriority+0x70>)
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	7afa      	ldrb	r2, [r7, #11]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d20a      	bcs.n	800bbfc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bbe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbea:	f383 8811 	msr	BASEPRI, r3
 800bbee:	f3bf 8f6f 	isb	sy
 800bbf2:	f3bf 8f4f 	dsb	sy
 800bbf6:	607b      	str	r3, [r7, #4]
}
 800bbf8:	bf00      	nop
 800bbfa:	e7fe      	b.n	800bbfa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bbfc:	4b0d      	ldr	r3, [pc, #52]	; (800bc34 <vPortValidateInterruptPriority+0x74>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bc04:	4b0c      	ldr	r3, [pc, #48]	; (800bc38 <vPortValidateInterruptPriority+0x78>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d90a      	bls.n	800bc22 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bc0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc10:	f383 8811 	msr	BASEPRI, r3
 800bc14:	f3bf 8f6f 	isb	sy
 800bc18:	f3bf 8f4f 	dsb	sy
 800bc1c:	603b      	str	r3, [r7, #0]
}
 800bc1e:	bf00      	nop
 800bc20:	e7fe      	b.n	800bc20 <vPortValidateInterruptPriority+0x60>
	}
 800bc22:	bf00      	nop
 800bc24:	3714      	adds	r7, #20
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bc80      	pop	{r7}
 800bc2a:	4770      	bx	lr
 800bc2c:	e000e3f0 	.word	0xe000e3f0
 800bc30:	200057c4 	.word	0x200057c4
 800bc34:	e000ed0c 	.word	0xe000ed0c
 800bc38:	200057c8 	.word	0x200057c8

0800bc3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b08a      	sub	sp, #40	; 0x28
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bc44:	2300      	movs	r3, #0
 800bc46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bc48:	f7fe fff4 	bl	800ac34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bc4c:	4b58      	ldr	r3, [pc, #352]	; (800bdb0 <pvPortMalloc+0x174>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d101      	bne.n	800bc58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bc54:	f000 f910 	bl	800be78 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bc58:	4b56      	ldr	r3, [pc, #344]	; (800bdb4 <pvPortMalloc+0x178>)
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	4013      	ands	r3, r2
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	f040 808e 	bne.w	800bd82 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d01d      	beq.n	800bca8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bc6c:	2208      	movs	r2, #8
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	4413      	add	r3, r2
 800bc72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f003 0307 	and.w	r3, r3, #7
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d014      	beq.n	800bca8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f023 0307 	bic.w	r3, r3, #7
 800bc84:	3308      	adds	r3, #8
 800bc86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f003 0307 	and.w	r3, r3, #7
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00a      	beq.n	800bca8 <pvPortMalloc+0x6c>
	__asm volatile
 800bc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc96:	f383 8811 	msr	BASEPRI, r3
 800bc9a:	f3bf 8f6f 	isb	sy
 800bc9e:	f3bf 8f4f 	dsb	sy
 800bca2:	617b      	str	r3, [r7, #20]
}
 800bca4:	bf00      	nop
 800bca6:	e7fe      	b.n	800bca6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d069      	beq.n	800bd82 <pvPortMalloc+0x146>
 800bcae:	4b42      	ldr	r3, [pc, #264]	; (800bdb8 <pvPortMalloc+0x17c>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d864      	bhi.n	800bd82 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bcb8:	4b40      	ldr	r3, [pc, #256]	; (800bdbc <pvPortMalloc+0x180>)
 800bcba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bcbc:	4b3f      	ldr	r3, [pc, #252]	; (800bdbc <pvPortMalloc+0x180>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bcc2:	e004      	b.n	800bcce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d903      	bls.n	800bce0 <pvPortMalloc+0xa4>
 800bcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d1f1      	bne.n	800bcc4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bce0:	4b33      	ldr	r3, [pc, #204]	; (800bdb0 <pvPortMalloc+0x174>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d04b      	beq.n	800bd82 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bcea:	6a3b      	ldr	r3, [r7, #32]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2208      	movs	r2, #8
 800bcf0:	4413      	add	r3, r2
 800bcf2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf6:	681a      	ldr	r2, [r3, #0]
 800bcf8:	6a3b      	ldr	r3, [r7, #32]
 800bcfa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfe:	685a      	ldr	r2, [r3, #4]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	1ad2      	subs	r2, r2, r3
 800bd04:	2308      	movs	r3, #8
 800bd06:	005b      	lsls	r3, r3, #1
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d91f      	bls.n	800bd4c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bd0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	4413      	add	r3, r2
 800bd12:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd14:	69bb      	ldr	r3, [r7, #24]
 800bd16:	f003 0307 	and.w	r3, r3, #7
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d00a      	beq.n	800bd34 <pvPortMalloc+0xf8>
	__asm volatile
 800bd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd22:	f383 8811 	msr	BASEPRI, r3
 800bd26:	f3bf 8f6f 	isb	sy
 800bd2a:	f3bf 8f4f 	dsb	sy
 800bd2e:	613b      	str	r3, [r7, #16]
}
 800bd30:	bf00      	nop
 800bd32:	e7fe      	b.n	800bd32 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd36:	685a      	ldr	r2, [r3, #4]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	1ad2      	subs	r2, r2, r3
 800bd3c:	69bb      	ldr	r3, [r7, #24]
 800bd3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bd46:	69b8      	ldr	r0, [r7, #24]
 800bd48:	f000 f8f8 	bl	800bf3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bd4c:	4b1a      	ldr	r3, [pc, #104]	; (800bdb8 <pvPortMalloc+0x17c>)
 800bd4e:	681a      	ldr	r2, [r3, #0]
 800bd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	1ad3      	subs	r3, r2, r3
 800bd56:	4a18      	ldr	r2, [pc, #96]	; (800bdb8 <pvPortMalloc+0x17c>)
 800bd58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bd5a:	4b17      	ldr	r3, [pc, #92]	; (800bdb8 <pvPortMalloc+0x17c>)
 800bd5c:	681a      	ldr	r2, [r3, #0]
 800bd5e:	4b18      	ldr	r3, [pc, #96]	; (800bdc0 <pvPortMalloc+0x184>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d203      	bcs.n	800bd6e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bd66:	4b14      	ldr	r3, [pc, #80]	; (800bdb8 <pvPortMalloc+0x17c>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	4a15      	ldr	r2, [pc, #84]	; (800bdc0 <pvPortMalloc+0x184>)
 800bd6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd70:	685a      	ldr	r2, [r3, #4]
 800bd72:	4b10      	ldr	r3, [pc, #64]	; (800bdb4 <pvPortMalloc+0x178>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	431a      	orrs	r2, r3
 800bd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7e:	2200      	movs	r2, #0
 800bd80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bd82:	f7fe ff65 	bl	800ac50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd86:	69fb      	ldr	r3, [r7, #28]
 800bd88:	f003 0307 	and.w	r3, r3, #7
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d00a      	beq.n	800bda6 <pvPortMalloc+0x16a>
	__asm volatile
 800bd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd94:	f383 8811 	msr	BASEPRI, r3
 800bd98:	f3bf 8f6f 	isb	sy
 800bd9c:	f3bf 8f4f 	dsb	sy
 800bda0:	60fb      	str	r3, [r7, #12]
}
 800bda2:	bf00      	nop
 800bda4:	e7fe      	b.n	800bda4 <pvPortMalloc+0x168>
	return pvReturn;
 800bda6:	69fb      	ldr	r3, [r7, #28]
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3728      	adds	r7, #40	; 0x28
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}
 800bdb0:	2000926c 	.word	0x2000926c
 800bdb4:	20009278 	.word	0x20009278
 800bdb8:	20009270 	.word	0x20009270
 800bdbc:	20009264 	.word	0x20009264
 800bdc0:	20009274 	.word	0x20009274

0800bdc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b086      	sub	sp, #24
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d048      	beq.n	800be68 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bdd6:	2308      	movs	r3, #8
 800bdd8:	425b      	negs	r3, r3
 800bdda:	697a      	ldr	r2, [r7, #20]
 800bddc:	4413      	add	r3, r2
 800bdde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	685a      	ldr	r2, [r3, #4]
 800bde8:	4b21      	ldr	r3, [pc, #132]	; (800be70 <vPortFree+0xac>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	4013      	ands	r3, r2
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d10a      	bne.n	800be08 <vPortFree+0x44>
	__asm volatile
 800bdf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf6:	f383 8811 	msr	BASEPRI, r3
 800bdfa:	f3bf 8f6f 	isb	sy
 800bdfe:	f3bf 8f4f 	dsb	sy
 800be02:	60fb      	str	r3, [r7, #12]
}
 800be04:	bf00      	nop
 800be06:	e7fe      	b.n	800be06 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d00a      	beq.n	800be26 <vPortFree+0x62>
	__asm volatile
 800be10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be14:	f383 8811 	msr	BASEPRI, r3
 800be18:	f3bf 8f6f 	isb	sy
 800be1c:	f3bf 8f4f 	dsb	sy
 800be20:	60bb      	str	r3, [r7, #8]
}
 800be22:	bf00      	nop
 800be24:	e7fe      	b.n	800be24 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	685a      	ldr	r2, [r3, #4]
 800be2a:	4b11      	ldr	r3, [pc, #68]	; (800be70 <vPortFree+0xac>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	4013      	ands	r3, r2
 800be30:	2b00      	cmp	r3, #0
 800be32:	d019      	beq.n	800be68 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d115      	bne.n	800be68 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	685a      	ldr	r2, [r3, #4]
 800be40:	4b0b      	ldr	r3, [pc, #44]	; (800be70 <vPortFree+0xac>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	43db      	mvns	r3, r3
 800be46:	401a      	ands	r2, r3
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800be4c:	f7fe fef2 	bl	800ac34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	685a      	ldr	r2, [r3, #4]
 800be54:	4b07      	ldr	r3, [pc, #28]	; (800be74 <vPortFree+0xb0>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	4413      	add	r3, r2
 800be5a:	4a06      	ldr	r2, [pc, #24]	; (800be74 <vPortFree+0xb0>)
 800be5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800be5e:	6938      	ldr	r0, [r7, #16]
 800be60:	f000 f86c 	bl	800bf3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800be64:	f7fe fef4 	bl	800ac50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800be68:	bf00      	nop
 800be6a:	3718      	adds	r7, #24
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}
 800be70:	20009278 	.word	0x20009278
 800be74:	20009270 	.word	0x20009270

0800be78 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800be78:	b480      	push	{r7}
 800be7a:	b085      	sub	sp, #20
 800be7c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800be7e:	f643 2398 	movw	r3, #15000	; 0x3a98
 800be82:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800be84:	4b27      	ldr	r3, [pc, #156]	; (800bf24 <prvHeapInit+0xac>)
 800be86:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f003 0307 	and.w	r3, r3, #7
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00c      	beq.n	800beac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	3307      	adds	r3, #7
 800be96:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f023 0307 	bic.w	r3, r3, #7
 800be9e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bea0:	68ba      	ldr	r2, [r7, #8]
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	1ad3      	subs	r3, r2, r3
 800bea6:	4a1f      	ldr	r2, [pc, #124]	; (800bf24 <prvHeapInit+0xac>)
 800bea8:	4413      	add	r3, r2
 800beaa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800beb0:	4a1d      	ldr	r2, [pc, #116]	; (800bf28 <prvHeapInit+0xb0>)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800beb6:	4b1c      	ldr	r3, [pc, #112]	; (800bf28 <prvHeapInit+0xb0>)
 800beb8:	2200      	movs	r2, #0
 800beba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	68ba      	ldr	r2, [r7, #8]
 800bec0:	4413      	add	r3, r2
 800bec2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bec4:	2208      	movs	r2, #8
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	1a9b      	subs	r3, r3, r2
 800beca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	f023 0307 	bic.w	r3, r3, #7
 800bed2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	4a15      	ldr	r2, [pc, #84]	; (800bf2c <prvHeapInit+0xb4>)
 800bed8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800beda:	4b14      	ldr	r3, [pc, #80]	; (800bf2c <prvHeapInit+0xb4>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	2200      	movs	r2, #0
 800bee0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bee2:	4b12      	ldr	r3, [pc, #72]	; (800bf2c <prvHeapInit+0xb4>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2200      	movs	r2, #0
 800bee8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	68fa      	ldr	r2, [r7, #12]
 800bef2:	1ad2      	subs	r2, r2, r3
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bef8:	4b0c      	ldr	r3, [pc, #48]	; (800bf2c <prvHeapInit+0xb4>)
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	4a0a      	ldr	r2, [pc, #40]	; (800bf30 <prvHeapInit+0xb8>)
 800bf06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	4a09      	ldr	r2, [pc, #36]	; (800bf34 <prvHeapInit+0xbc>)
 800bf0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bf10:	4b09      	ldr	r3, [pc, #36]	; (800bf38 <prvHeapInit+0xc0>)
 800bf12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bf16:	601a      	str	r2, [r3, #0]
}
 800bf18:	bf00      	nop
 800bf1a:	3714      	adds	r7, #20
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bc80      	pop	{r7}
 800bf20:	4770      	bx	lr
 800bf22:	bf00      	nop
 800bf24:	200057cc 	.word	0x200057cc
 800bf28:	20009264 	.word	0x20009264
 800bf2c:	2000926c 	.word	0x2000926c
 800bf30:	20009274 	.word	0x20009274
 800bf34:	20009270 	.word	0x20009270
 800bf38:	20009278 	.word	0x20009278

0800bf3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b085      	sub	sp, #20
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bf44:	4b27      	ldr	r3, [pc, #156]	; (800bfe4 <prvInsertBlockIntoFreeList+0xa8>)
 800bf46:	60fb      	str	r3, [r7, #12]
 800bf48:	e002      	b.n	800bf50 <prvInsertBlockIntoFreeList+0x14>
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	60fb      	str	r3, [r7, #12]
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	687a      	ldr	r2, [r7, #4]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d8f7      	bhi.n	800bf4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	68ba      	ldr	r2, [r7, #8]
 800bf64:	4413      	add	r3, r2
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d108      	bne.n	800bf7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	685a      	ldr	r2, [r3, #4]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	441a      	add	r2, r3
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	68ba      	ldr	r2, [r7, #8]
 800bf88:	441a      	add	r2, r3
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d118      	bne.n	800bfc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681a      	ldr	r2, [r3, #0]
 800bf96:	4b14      	ldr	r3, [pc, #80]	; (800bfe8 <prvInsertBlockIntoFreeList+0xac>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d00d      	beq.n	800bfba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	685a      	ldr	r2, [r3, #4]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	441a      	add	r2, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	681a      	ldr	r2, [r3, #0]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	601a      	str	r2, [r3, #0]
 800bfb8:	e008      	b.n	800bfcc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bfba:	4b0b      	ldr	r3, [pc, #44]	; (800bfe8 <prvInsertBlockIntoFreeList+0xac>)
 800bfbc:	681a      	ldr	r2, [r3, #0]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	601a      	str	r2, [r3, #0]
 800bfc2:	e003      	b.n	800bfcc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bfcc:	68fa      	ldr	r2, [r7, #12]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d002      	beq.n	800bfda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bfda:	bf00      	nop
 800bfdc:	3714      	adds	r7, #20
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bc80      	pop	{r7}
 800bfe2:	4770      	bx	lr
 800bfe4:	20009264 	.word	0x20009264
 800bfe8:	2000926c 	.word	0x2000926c

0800bfec <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	330c      	adds	r3, #12
 800bffc:	461a      	mov	r2, r3
 800bffe:	6839      	ldr	r1, [r7, #0]
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f002 f92f 	bl	800e264 <tcpip_send_msg_wait_sem>
 800c006:	4603      	mov	r3, r0
 800c008:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c00a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d103      	bne.n	800c01a <netconn_apimsg+0x2e>
    return apimsg->err;
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c018:	e001      	b.n	800c01e <netconn_apimsg+0x32>
  }
  return err;
 800c01a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3710      	adds	r7, #16
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}
	...

0800c028 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b08a      	sub	sp, #40	; 0x28
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	4603      	mov	r3, r0
 800c030:	603a      	str	r2, [r7, #0]
 800c032:	71fb      	strb	r3, [r7, #7]
 800c034:	460b      	mov	r3, r1
 800c036:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800c038:	79fb      	ldrb	r3, [r7, #7]
 800c03a:	6839      	ldr	r1, [r7, #0]
 800c03c:	4618      	mov	r0, r3
 800c03e:	f000 ff83 	bl	800cf48 <netconn_alloc>
 800c042:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 800c044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c046:	2b00      	cmp	r3, #0
 800c048:	d054      	beq.n	800c0f4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800c04a:	79bb      	ldrb	r3, [r7, #6]
 800c04c:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 800c04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c050:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800c052:	f107 030c 	add.w	r3, r7, #12
 800c056:	4619      	mov	r1, r3
 800c058:	4829      	ldr	r0, [pc, #164]	; (800c100 <netconn_new_with_proto_and_callback+0xd8>)
 800c05a:	f7ff ffc7 	bl	800bfec <netconn_apimsg>
 800c05e:	4603      	mov	r3, r0
 800c060:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 800c064:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d043      	beq.n	800c0f4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800c06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d005      	beq.n	800c080 <netconn_new_with_proto_and_callback+0x58>
 800c074:	4b23      	ldr	r3, [pc, #140]	; (800c104 <netconn_new_with_proto_and_callback+0xdc>)
 800c076:	2289      	movs	r2, #137	; 0x89
 800c078:	4923      	ldr	r1, [pc, #140]	; (800c108 <netconn_new_with_proto_and_callback+0xe0>)
 800c07a:	4824      	ldr	r0, [pc, #144]	; (800c10c <netconn_new_with_proto_and_callback+0xe4>)
 800c07c:	f00e f9ec 	bl	801a458 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800c080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c082:	3310      	adds	r3, #16
 800c084:	4618      	mov	r0, r3
 800c086:	f00d feda 	bl	8019e3e <sys_mbox_valid>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d105      	bne.n	800c09c <netconn_new_with_proto_and_callback+0x74>
 800c090:	4b1c      	ldr	r3, [pc, #112]	; (800c104 <netconn_new_with_proto_and_callback+0xdc>)
 800c092:	228a      	movs	r2, #138	; 0x8a
 800c094:	491e      	ldr	r1, [pc, #120]	; (800c110 <netconn_new_with_proto_and_callback+0xe8>)
 800c096:	481d      	ldr	r0, [pc, #116]	; (800c10c <netconn_new_with_proto_and_callback+0xe4>)
 800c098:	f00e f9de 	bl	801a458 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800c09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09e:	3314      	adds	r3, #20
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f00d fecc 	bl	8019e3e <sys_mbox_valid>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d005      	beq.n	800c0b8 <netconn_new_with_proto_and_callback+0x90>
 800c0ac:	4b15      	ldr	r3, [pc, #84]	; (800c104 <netconn_new_with_proto_and_callback+0xdc>)
 800c0ae:	228c      	movs	r2, #140	; 0x8c
 800c0b0:	4918      	ldr	r1, [pc, #96]	; (800c114 <netconn_new_with_proto_and_callback+0xec>)
 800c0b2:	4816      	ldr	r0, [pc, #88]	; (800c10c <netconn_new_with_proto_and_callback+0xe4>)
 800c0b4:	f00e f9d0 	bl	801a458 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800c0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ba:	330c      	adds	r3, #12
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f00d ff4d 	bl	8019f5c <sys_sem_valid>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d105      	bne.n	800c0d4 <netconn_new_with_proto_and_callback+0xac>
 800c0c8:	4b0e      	ldr	r3, [pc, #56]	; (800c104 <netconn_new_with_proto_and_callback+0xdc>)
 800c0ca:	228f      	movs	r2, #143	; 0x8f
 800c0cc:	4912      	ldr	r1, [pc, #72]	; (800c118 <netconn_new_with_proto_and_callback+0xf0>)
 800c0ce:	480f      	ldr	r0, [pc, #60]	; (800c10c <netconn_new_with_proto_and_callback+0xe4>)
 800c0d0:	f00e f9c2 	bl	801a458 <iprintf>
      sys_sem_free(&conn->op_completed);
 800c0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d6:	330c      	adds	r3, #12
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f00d ff32 	bl	8019f42 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800c0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e0:	3310      	adds	r3, #16
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f00d fe0e 	bl	8019d04 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800c0e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c0ea:	2007      	movs	r0, #7
 800c0ec:	f002 fd58 	bl	800eba0 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	e000      	b.n	800c0f6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800c0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3728      	adds	r7, #40	; 0x28
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
 800c0fe:	bf00      	nop
 800c100:	0800cef1 	.word	0x0800cef1
 800c104:	0801b914 	.word	0x0801b914
 800c108:	0801b948 	.word	0x0801b948
 800c10c:	0801b96c 	.word	0x0801b96c
 800c110:	0801b994 	.word	0x0801b994
 800c114:	0801b9ac 	.word	0x0801b9ac
 800c118:	0801b9d0 	.word	0x0801b9d0

0800c11c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b088      	sub	sp, #32
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d101      	bne.n	800c12e <netconn_delete+0x12>
    return ERR_OK;
 800c12a:	2300      	movs	r3, #0
 800c12c:	e016      	b.n	800c15c <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800c132:	2329      	movs	r3, #41	; 0x29
 800c134:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800c136:	f107 0308 	add.w	r3, r7, #8
 800c13a:	4619      	mov	r1, r3
 800c13c:	4809      	ldr	r0, [pc, #36]	; (800c164 <netconn_delete+0x48>)
 800c13e:	f7ff ff55 	bl	800bfec <netconn_apimsg>
 800c142:	4603      	mov	r3, r0
 800c144:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800c146:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d002      	beq.n	800c154 <netconn_delete+0x38>
    return err;
 800c14e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c152:	e003      	b.n	800c15c <netconn_delete+0x40>
  }

  netconn_free(conn);
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 ff67 	bl	800d028 <netconn_free>

  return ERR_OK;
 800c15a:	2300      	movs	r3, #0
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3720      	adds	r7, #32
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	0800d4b5 	.word	0x0800d4b5

0800c168 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b08a      	sub	sp, #40	; 0x28
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	4613      	mov	r3, r2
 800c174:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d108      	bne.n	800c18e <netconn_bind+0x26>
 800c17c:	4b11      	ldr	r3, [pc, #68]	; (800c1c4 <netconn_bind+0x5c>)
 800c17e:	22ff      	movs	r2, #255	; 0xff
 800c180:	4911      	ldr	r1, [pc, #68]	; (800c1c8 <netconn_bind+0x60>)
 800c182:	4812      	ldr	r0, [pc, #72]	; (800c1cc <netconn_bind+0x64>)
 800c184:	f00e f968 	bl	801a458 <iprintf>
 800c188:	f06f 030f 	mvn.w	r3, #15
 800c18c:	e015      	b.n	800c1ba <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d101      	bne.n	800c198 <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 800c194:	4b0e      	ldr	r3, [pc, #56]	; (800c1d0 <netconn_bind+0x68>)
 800c196:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800c1a0:	88fb      	ldrh	r3, [r7, #6]
 800c1a2:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800c1a4:	f107 0310 	add.w	r3, r7, #16
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	480a      	ldr	r0, [pc, #40]	; (800c1d4 <netconn_bind+0x6c>)
 800c1ac:	f7ff ff1e 	bl	800bfec <netconn_apimsg>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 800c1b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3728      	adds	r7, #40	; 0x28
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	0801b914 	.word	0x0801b914
 800c1c8:	0801ba4c 	.word	0x0801ba4c
 800c1cc:	0801b96c 	.word	0x0801b96c
 800c1d0:	0801e610 	.word	0x0801e610
 800c1d4:	0800d6b9 	.word	0x0800d6b9

0800c1d8 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b088      	sub	sp, #32
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d109      	bne.n	800c1fe <netconn_listen_with_backlog+0x26>
 800c1ea:	4b0d      	ldr	r3, [pc, #52]	; (800c220 <netconn_listen_with_backlog+0x48>)
 800c1ec:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c1f0:	490c      	ldr	r1, [pc, #48]	; (800c224 <netconn_listen_with_backlog+0x4c>)
 800c1f2:	480d      	ldr	r0, [pc, #52]	; (800c228 <netconn_listen_with_backlog+0x50>)
 800c1f4:	f00e f930 	bl	801a458 <iprintf>
 800c1f8:	f06f 030f 	mvn.w	r3, #15
 800c1fc:	e00b      	b.n	800c216 <netconn_listen_with_backlog+0x3e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800c202:	f107 0308 	add.w	r3, r7, #8
 800c206:	4619      	mov	r1, r3
 800c208:	4808      	ldr	r0, [pc, #32]	; (800c22c <netconn_listen_with_backlog+0x54>)
 800c20a:	f7ff feef 	bl	800bfec <netconn_apimsg>
 800c20e:	4603      	mov	r3, r0
 800c210:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800c212:	f997 301f 	ldrsb.w	r3, [r7, #31]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800c216:	4618      	mov	r0, r3
 800c218:	3720      	adds	r7, #32
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}
 800c21e:	bf00      	nop
 800c220:	0801b914 	.word	0x0801b914
 800c224:	0801baac 	.word	0x0801baac
 800c228:	0801b96c 	.word	0x0801b96c
 800c22c:	0800d77d 	.word	0x0800d77d

0800c230 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b086      	sub	sp, #24
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d109      	bne.n	800c254 <netconn_accept+0x24>
 800c240:	4b34      	ldr	r3, [pc, #208]	; (800c314 <netconn_accept+0xe4>)
 800c242:	f240 128d 	movw	r2, #397	; 0x18d
 800c246:	4934      	ldr	r1, [pc, #208]	; (800c318 <netconn_accept+0xe8>)
 800c248:	4834      	ldr	r0, [pc, #208]	; (800c31c <netconn_accept+0xec>)
 800c24a:	f00e f905 	bl	801a458 <iprintf>
 800c24e:	f06f 030f 	mvn.w	r3, #15
 800c252:	e05b      	b.n	800c30c <netconn_accept+0xdc>
  *new_conn = NULL;
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	2200      	movs	r2, #0
 800c258:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d109      	bne.n	800c274 <netconn_accept+0x44>
 800c260:	4b2c      	ldr	r3, [pc, #176]	; (800c314 <netconn_accept+0xe4>)
 800c262:	f240 128f 	movw	r2, #399	; 0x18f
 800c266:	492e      	ldr	r1, [pc, #184]	; (800c320 <netconn_accept+0xf0>)
 800c268:	482c      	ldr	r0, [pc, #176]	; (800c31c <netconn_accept+0xec>)
 800c26a:	f00e f8f5 	bl	801a458 <iprintf>
 800c26e:	f06f 030f 	mvn.w	r3, #15
 800c272:	e04b      	b.n	800c30c <netconn_accept+0xdc>

  if (ERR_IS_FATAL(conn->last_err)) {
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800c27a:	f113 0f0c 	cmn.w	r3, #12
 800c27e:	da03      	bge.n	800c288 <netconn_accept+0x58>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800c286:	e041      	b.n	800c30c <netconn_accept+0xdc>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	3314      	adds	r3, #20
 800c28c:	4618      	mov	r0, r3
 800c28e:	f00d fdd6 	bl	8019e3e <sys_mbox_valid>
 800c292:	4603      	mov	r3, r0
 800c294:	2b00      	cmp	r3, #0
 800c296:	d102      	bne.n	800c29e <netconn_accept+0x6e>
    return ERR_CLSD;
 800c298:	f06f 030e 	mvn.w	r3, #14
 800c29c:	e036      	b.n	800c30c <netconn_accept+0xdc>
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	3314      	adds	r3, #20
 800c2a2:	f107 010c 	add.w	r1, r7, #12
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f00d fd6d 	bl	8019d88 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	617b      	str	r3, [r7, #20]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d005      	beq.n	800c2c6 <netconn_accept+0x96>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2be:	2200      	movs	r2, #0
 800c2c0:	2101      	movs	r1, #1
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	4798      	blx	r3

  if (accept_ptr == &netconn_aborted) {
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	4a16      	ldr	r2, [pc, #88]	; (800c324 <netconn_accept+0xf4>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d102      	bne.n	800c2d4 <netconn_accept+0xa4>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
 800c2ce:	f06f 030c 	mvn.w	r3, #12
 800c2d2:	e01b      	b.n	800c30c <netconn_accept+0xdc>
  }
  if (newconn == NULL) {
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d114      	bne.n	800c304 <netconn_accept+0xd4>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d00e      	beq.n	800c2fe <netconn_accept+0xce>
 800c2e0:	f00d fec4 	bl	801a06c <sys_arch_protect>
 800c2e4:	6138      	str	r0, [r7, #16]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800c2ec:	f113 0f0c 	cmn.w	r3, #12
 800c2f0:	db02      	blt.n	800c2f8 <netconn_accept+0xc8>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	22f1      	movs	r2, #241	; 0xf1
 800c2f6:	721a      	strb	r2, [r3, #8]
 800c2f8:	6938      	ldr	r0, [r7, #16]
 800c2fa:	f00d fec5 	bl	801a088 <sys_arch_unprotect>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
 800c2fe:	f06f 030e 	mvn.w	r3, #14
 800c302:	e003      	b.n	800c30c <netconn_accept+0xdc>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	697a      	ldr	r2, [r7, #20]
 800c308:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800c30a:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3718      	adds	r7, #24
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}
 800c314:	0801b914 	.word	0x0801b914
 800c318:	0801bacc 	.word	0x0801bacc
 800c31c:	0801b96c 	.word	0x0801b96c
 800c320:	0801baec 	.word	0x0801baec
 800c324:	2000927c 	.word	0x2000927c

0800c328 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b08a      	sub	sp, #40	; 0x28
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 800c332:	2300      	movs	r3, #0
 800c334:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d109      	bne.n	800c350 <netconn_recv_data+0x28>
 800c33c:	4b5c      	ldr	r3, [pc, #368]	; (800c4b0 <netconn_recv_data+0x188>)
 800c33e:	f240 12e7 	movw	r2, #487	; 0x1e7
 800c342:	495c      	ldr	r1, [pc, #368]	; (800c4b4 <netconn_recv_data+0x18c>)
 800c344:	485c      	ldr	r0, [pc, #368]	; (800c4b8 <netconn_recv_data+0x190>)
 800c346:	f00e f887 	bl	801a458 <iprintf>
 800c34a:	f06f 030f 	mvn.w	r3, #15
 800c34e:	e0aa      	b.n	800c4a6 <netconn_recv_data+0x17e>
  *new_buf = NULL;
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	2200      	movs	r2, #0
 800c354:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d109      	bne.n	800c370 <netconn_recv_data+0x48>
 800c35c:	4b54      	ldr	r3, [pc, #336]	; (800c4b0 <netconn_recv_data+0x188>)
 800c35e:	f240 12e9 	movw	r2, #489	; 0x1e9
 800c362:	4956      	ldr	r1, [pc, #344]	; (800c4bc <netconn_recv_data+0x194>)
 800c364:	4854      	ldr	r0, [pc, #336]	; (800c4b8 <netconn_recv_data+0x190>)
 800c366:	f00e f877 	bl	801a458 <iprintf>
 800c36a:	f06f 030f 	mvn.w	r3, #15
 800c36e:	e09a      	b.n	800c4a6 <netconn_recv_data+0x17e>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c378:	2b10      	cmp	r3, #16
 800c37a:	d115      	bne.n	800c3a8 <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	3310      	adds	r3, #16
 800c380:	4618      	mov	r0, r3
 800c382:	f00d fd5c 	bl	8019e3e <sys_mbox_valid>
 800c386:	4603      	mov	r3, r0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d10d      	bne.n	800c3a8 <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	3314      	adds	r3, #20
 800c390:	4618      	mov	r0, r3
 800c392:	f00d fd54 	bl	8019e3e <sys_mbox_valid>
 800c396:	4603      	mov	r3, r0
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d002      	beq.n	800c3a2 <netconn_recv_data+0x7a>
 800c39c:	f06f 030a 	mvn.w	r3, #10
 800c3a0:	e081      	b.n	800c4a6 <netconn_recv_data+0x17e>
 800c3a2:	f06f 030e 	mvn.w	r3, #14
 800c3a6:	e07e      	b.n	800c4a6 <netconn_recv_data+0x17e>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	3310      	adds	r3, #16
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f00d fd46 	bl	8019e3e <sys_mbox_valid>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d109      	bne.n	800c3cc <netconn_recv_data+0xa4>
 800c3b8:	4b3d      	ldr	r3, [pc, #244]	; (800c4b0 <netconn_recv_data+0x188>)
 800c3ba:	f240 12f5 	movw	r2, #501	; 0x1f5
 800c3be:	4940      	ldr	r1, [pc, #256]	; (800c4c0 <netconn_recv_data+0x198>)
 800c3c0:	483d      	ldr	r0, [pc, #244]	; (800c4b8 <netconn_recv_data+0x190>)
 800c3c2:	f00e f849 	bl	801a458 <iprintf>
 800c3c6:	f06f 030a 	mvn.w	r3, #10
 800c3ca:	e06c      	b.n	800c4a6 <netconn_recv_data+0x17e>

  if (ERR_IS_FATAL(conn->last_err)) {
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800c3d2:	f113 0f0c 	cmn.w	r3, #12
 800c3d6:	da03      	bge.n	800c3e0 <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800c3de:	e062      	b.n	800c4a6 <netconn_recv_data+0x17e>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	3310      	adds	r3, #16
 800c3e4:	f107 0120 	add.w	r1, r7, #32
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f00d fccc 	bl	8019d88 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	781b      	ldrb	r3, [r3, #0]
 800c3f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c3f8:	2b10      	cmp	r3, #16
 800c3fa:	d138      	bne.n	800c46e <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 800c400:	6a3b      	ldr	r3, [r7, #32]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d003      	beq.n	800c40e <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 800c406:	6a3b      	ldr	r3, [r7, #32]
 800c408:	891b      	ldrh	r3, [r3, #8]
 800c40a:	617b      	str	r3, [r7, #20]
 800c40c:	e001      	b.n	800c412 <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 800c40e:	2301      	movs	r3, #1
 800c410:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 800c412:	f107 030c 	add.w	r3, r7, #12
 800c416:	4619      	mov	r1, r3
 800c418:	482a      	ldr	r0, [pc, #168]	; (800c4c4 <netconn_recv_data+0x19c>)
 800c41a:	f7ff fde7 	bl	800bfec <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 800c41e:	6a3b      	ldr	r3, [r7, #32]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d120      	bne.n	800c466 <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d005      	beq.n	800c438 <netconn_recv_data+0x110>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c430:	2200      	movs	r2, #0
 800c432:	2101      	movs	r1, #1
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d10b      	bne.n	800c458 <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d003      	beq.n	800c452 <netconn_recv_data+0x12a>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800c450:	e029      	b.n	800c4a6 <netconn_recv_data+0x17e>
 800c452:	f06f 030d 	mvn.w	r3, #13
 800c456:	e026      	b.n	800c4a6 <netconn_recv_data+0x17e>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800c458:	2101      	movs	r1, #1
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 f926 	bl	800c6ac <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800c460:	f06f 030e 	mvn.w	r3, #14
 800c464:	e01f      	b.n	800c4a6 <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800c466:	6a3b      	ldr	r3, [r7, #32]
 800c468:	891b      	ldrh	r3, [r3, #8]
 800c46a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c46c:	e00d      	b.n	800c48a <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800c46e:	6a3b      	ldr	r3, [r7, #32]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d106      	bne.n	800c482 <netconn_recv_data+0x15a>
 800c474:	4b0e      	ldr	r3, [pc, #56]	; (800c4b0 <netconn_recv_data+0x188>)
 800c476:	f240 223e 	movw	r2, #574	; 0x23e
 800c47a:	4913      	ldr	r1, [pc, #76]	; (800c4c8 <netconn_recv_data+0x1a0>)
 800c47c:	480e      	ldr	r0, [pc, #56]	; (800c4b8 <netconn_recv_data+0x190>)
 800c47e:	f00d ffeb 	bl	801a458 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 800c482:	6a3b      	ldr	r3, [r7, #32]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	891b      	ldrh	r3, [r3, #8]
 800c488:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d005      	beq.n	800c49e <netconn_recv_data+0x176>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c496:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c498:	2101      	movs	r1, #1
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800c49e:	6a3a      	ldr	r2, [r7, #32]
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800c4a4:	2300      	movs	r3, #0
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3728      	adds	r7, #40	; 0x28
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	0801b914 	.word	0x0801b914
 800c4b4:	0801bb0c 	.word	0x0801bb0c
 800c4b8:	0801b96c 	.word	0x0801b96c
 800c4bc:	0801bb2c 	.word	0x0801bb2c
 800c4c0:	0801bb48 	.word	0x0801bb48
 800c4c4:	0800d901 	.word	0x0800d901
 800c4c8:	0801bb68 	.word	0x0801bb68

0800c4cc <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b086      	sub	sp, #24
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d109      	bne.n	800c4f4 <netconn_recv+0x28>
 800c4e0:	4b31      	ldr	r3, [pc, #196]	; (800c5a8 <netconn_recv+0xdc>)
 800c4e2:	f44f 721d 	mov.w	r2, #628	; 0x274
 800c4e6:	4931      	ldr	r1, [pc, #196]	; (800c5ac <netconn_recv+0xe0>)
 800c4e8:	4831      	ldr	r0, [pc, #196]	; (800c5b0 <netconn_recv+0xe4>)
 800c4ea:	f00d ffb5 	bl	801a458 <iprintf>
 800c4ee:	f06f 030f 	mvn.w	r3, #15
 800c4f2:	e054      	b.n	800c59e <netconn_recv+0xd2>
  *new_buf = NULL;
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d109      	bne.n	800c514 <netconn_recv+0x48>
 800c500:	4b29      	ldr	r3, [pc, #164]	; (800c5a8 <netconn_recv+0xdc>)
 800c502:	f240 2276 	movw	r2, #630	; 0x276
 800c506:	492b      	ldr	r1, [pc, #172]	; (800c5b4 <netconn_recv+0xe8>)
 800c508:	4829      	ldr	r0, [pc, #164]	; (800c5b0 <netconn_recv+0xe4>)
 800c50a:	f00d ffa5 	bl	801a458 <iprintf>
 800c50e:	f06f 030f 	mvn.w	r3, #15
 800c512:	e044      	b.n	800c59e <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c51c:	2b10      	cmp	r3, #16
 800c51e:	d139      	bne.n	800c594 <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800c520:	2300      	movs	r3, #0
 800c522:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800c524:	2006      	movs	r0, #6
 800c526:	f002 fae9 	bl	800eafc <memp_malloc>
 800c52a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d102      	bne.n	800c538 <netconn_recv+0x6c>
      return ERR_MEM;
 800c532:	f04f 33ff 	mov.w	r3, #4294967295
 800c536:	e032      	b.n	800c59e <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 800c538:	f107 030c 	add.w	r3, r7, #12
 800c53c:	4619      	mov	r1, r3
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f7ff fef2 	bl	800c328 <netconn_recv_data>
 800c544:	4603      	mov	r3, r0
 800c546:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800c548:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d006      	beq.n	800c55e <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 800c550:	6979      	ldr	r1, [r7, #20]
 800c552:	2006      	movs	r0, #6
 800c554:	f002 fb24 	bl	800eba0 <memp_free>
      return err;
 800c558:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c55c:	e01f      	b.n	800c59e <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d106      	bne.n	800c572 <netconn_recv+0xa6>
 800c564:	4b10      	ldr	r3, [pc, #64]	; (800c5a8 <netconn_recv+0xdc>)
 800c566:	f240 228a 	movw	r2, #650	; 0x28a
 800c56a:	4913      	ldr	r1, [pc, #76]	; (800c5b8 <netconn_recv+0xec>)
 800c56c:	4810      	ldr	r0, [pc, #64]	; (800c5b0 <netconn_recv+0xe4>)
 800c56e:	f00d ff73 	bl	801a458 <iprintf>

    buf->p = p;
 800c572:	68fa      	ldr	r2, [r7, #12]
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800c578:	68fa      	ldr	r2, [r7, #12]
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	2200      	movs	r2, #0
 800c582:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	2200      	movs	r2, #0
 800c588:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	697a      	ldr	r2, [r7, #20]
 800c58e:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800c590:	2300      	movs	r3, #0
 800c592:	e004      	b.n	800c59e <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 800c594:	6839      	ldr	r1, [r7, #0]
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f7ff fec6 	bl	800c328 <netconn_recv_data>
 800c59c:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3718      	adds	r7, #24
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	0801b914 	.word	0x0801b914
 800c5ac:	0801bb0c 	.word	0x0801bb0c
 800c5b0:	0801b96c 	.word	0x0801b96c
 800c5b4:	0801bb2c 	.word	0x0801bb2c
 800c5b8:	0801bb74 	.word	0x0801bb74

0800c5bc <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b08a      	sub	sp, #40	; 0x28
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	607a      	str	r2, [r7, #4]
 800c5c8:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d109      	bne.n	800c5e4 <netconn_write_partly+0x28>
 800c5d0:	4b31      	ldr	r3, [pc, #196]	; (800c698 <netconn_write_partly+0xdc>)
 800c5d2:	f240 22e6 	movw	r2, #742	; 0x2e6
 800c5d6:	4931      	ldr	r1, [pc, #196]	; (800c69c <netconn_write_partly+0xe0>)
 800c5d8:	4831      	ldr	r0, [pc, #196]	; (800c6a0 <netconn_write_partly+0xe4>)
 800c5da:	f00d ff3d 	bl	801a458 <iprintf>
 800c5de:	f06f 030f 	mvn.w	r3, #15
 800c5e2:	e054      	b.n	800c68e <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c5ec:	2b10      	cmp	r3, #16
 800c5ee:	d009      	beq.n	800c604 <netconn_write_partly+0x48>
 800c5f0:	4b29      	ldr	r3, [pc, #164]	; (800c698 <netconn_write_partly+0xdc>)
 800c5f2:	f240 22e7 	movw	r2, #743	; 0x2e7
 800c5f6:	492b      	ldr	r1, [pc, #172]	; (800c6a4 <netconn_write_partly+0xe8>)
 800c5f8:	4829      	ldr	r0, [pc, #164]	; (800c6a0 <netconn_write_partly+0xe4>)
 800c5fa:	f00d ff2d 	bl	801a458 <iprintf>
 800c5fe:	f06f 0305 	mvn.w	r3, #5
 800c602:	e044      	b.n	800c68e <netconn_write_partly+0xd2>
  if (size == 0) {
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d101      	bne.n	800c60e <netconn_write_partly+0x52>
    return ERR_OK;
 800c60a:	2300      	movs	r3, #0
 800c60c:	e03f      	b.n	800c68e <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	7f1b      	ldrb	r3, [r3, #28]
 800c612:	f003 0302 	and.w	r3, r3, #2
 800c616:	2b00      	cmp	r3, #0
 800c618:	d104      	bne.n	800c624 <netconn_write_partly+0x68>
 800c61a:	78fb      	ldrb	r3, [r7, #3]
 800c61c:	f003 0304 	and.w	r3, r3, #4
 800c620:	2b00      	cmp	r3, #0
 800c622:	d001      	beq.n	800c628 <netconn_write_partly+0x6c>
 800c624:	2301      	movs	r3, #1
 800c626:	e000      	b.n	800c62a <netconn_write_partly+0x6e>
 800c628:	2300      	movs	r3, #0
 800c62a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800c62e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c632:	2b00      	cmp	r3, #0
 800c634:	d005      	beq.n	800c642 <netconn_write_partly+0x86>
 800c636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d102      	bne.n	800c642 <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800c63c:	f06f 0305 	mvn.w	r3, #5
 800c640:	e025      	b.n	800c68e <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800c64a:	78fb      	ldrb	r3, [r7, #3]
 800c64c:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800c654:	f107 0310 	add.w	r3, r7, #16
 800c658:	4619      	mov	r1, r3
 800c65a:	4813      	ldr	r0, [pc, #76]	; (800c6a8 <netconn_write_partly+0xec>)
 800c65c:	f7ff fcc6 	bl	800bfec <netconn_apimsg>
 800c660:	4603      	mov	r3, r0
 800c662:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 800c666:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d10d      	bne.n	800c68a <netconn_write_partly+0xce>
 800c66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c670:	2b00      	cmp	r3, #0
 800c672:	d00a      	beq.n	800c68a <netconn_write_partly+0xce>
    if (dontblock) {
 800c674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d003      	beq.n	800c684 <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 800c67c:	69fa      	ldr	r2, [r7, #28]
 800c67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c680:	601a      	str	r2, [r3, #0]
 800c682:	e002      	b.n	800c68a <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 800c684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c686:	687a      	ldr	r2, [r7, #4]
 800c688:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800c68a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3728      	adds	r7, #40	; 0x28
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
 800c696:	bf00      	nop
 800c698:	0801b914 	.word	0x0801b914
 800c69c:	0801bb9c 	.word	0x0801bb9c
 800c6a0:	0801b96c 	.word	0x0801b96c
 800c6a4:	0801bbb8 	.word	0x0801bbb8
 800c6a8:	0800dce1 	.word	0x0800dce1

0800c6ac <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b088      	sub	sp, #32
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d109      	bne.n	800c6d2 <netconn_close_shutdown+0x26>
 800c6be:	4b0f      	ldr	r3, [pc, #60]	; (800c6fc <netconn_close_shutdown+0x50>)
 800c6c0:	f44f 724a 	mov.w	r2, #808	; 0x328
 800c6c4:	490e      	ldr	r1, [pc, #56]	; (800c700 <netconn_close_shutdown+0x54>)
 800c6c6:	480f      	ldr	r0, [pc, #60]	; (800c704 <netconn_close_shutdown+0x58>)
 800c6c8:	f00d fec6 	bl	801a458 <iprintf>
 800c6cc:	f06f 030f 	mvn.w	r3, #15
 800c6d0:	e00f      	b.n	800c6f2 <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800c6d6:	78fb      	ldrb	r3, [r7, #3]
 800c6d8:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800c6da:	2329      	movs	r3, #41	; 0x29
 800c6dc:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800c6de:	f107 0308 	add.w	r3, r7, #8
 800c6e2:	4619      	mov	r1, r3
 800c6e4:	4808      	ldr	r0, [pc, #32]	; (800c708 <netconn_close_shutdown+0x5c>)
 800c6e6:	f7ff fc81 	bl	800bfec <netconn_apimsg>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800c6ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3720      	adds	r7, #32
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
 800c6fa:	bf00      	nop
 800c6fc:	0801b914 	.word	0x0801b914
 800c700:	0801bbdc 	.word	0x0801bbdc
 800c704:	0801b96c 	.word	0x0801b96c
 800c708:	0800de41 	.word	0x0800de41

0800c70c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800c714:	2103      	movs	r1, #3
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f7ff ffc8 	bl	800c6ac <netconn_close_shutdown>
 800c71c:	4603      	mov	r3, r0
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3708      	adds	r7, #8
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
	...

0800c728 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b088      	sub	sp, #32
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	60f8      	str	r0, [r7, #12]
 800c730:	60b9      	str	r1, [r7, #8]
 800c732:	607a      	str	r2, [r7, #4]
 800c734:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d105      	bne.n	800c748 <recv_udp+0x20>
 800c73c:	4b34      	ldr	r3, [pc, #208]	; (800c810 <recv_udp+0xe8>)
 800c73e:	22b1      	movs	r2, #177	; 0xb1
 800c740:	4934      	ldr	r1, [pc, #208]	; (800c814 <recv_udp+0xec>)
 800c742:	4835      	ldr	r0, [pc, #212]	; (800c818 <recv_udp+0xf0>)
 800c744:	f00d fe88 	bl	801a458 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d105      	bne.n	800c75a <recv_udp+0x32>
 800c74e:	4b30      	ldr	r3, [pc, #192]	; (800c810 <recv_udp+0xe8>)
 800c750:	22b2      	movs	r2, #178	; 0xb2
 800c752:	4932      	ldr	r1, [pc, #200]	; (800c81c <recv_udp+0xf4>)
 800c754:	4830      	ldr	r0, [pc, #192]	; (800c818 <recv_udp+0xf0>)
 800c756:	f00d fe7f 	bl	801a458 <iprintf>
  conn = (struct netconn *)arg;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800c75e:	69fb      	ldr	r3, [r7, #28]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d103      	bne.n	800c76c <recv_udp+0x44>
    pbuf_free(p);
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f002 ffdd 	bl	800f724 <pbuf_free>
    return;
 800c76a:	e04d      	b.n	800c808 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800c76c:	69fb      	ldr	r3, [r7, #28]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	68ba      	ldr	r2, [r7, #8]
 800c772:	429a      	cmp	r2, r3
 800c774:	d005      	beq.n	800c782 <recv_udp+0x5a>
 800c776:	4b26      	ldr	r3, [pc, #152]	; (800c810 <recv_udp+0xe8>)
 800c778:	22ba      	movs	r2, #186	; 0xba
 800c77a:	4929      	ldr	r1, [pc, #164]	; (800c820 <recv_udp+0xf8>)
 800c77c:	4826      	ldr	r0, [pc, #152]	; (800c818 <recv_udp+0xf0>)
 800c77e:	f00d fe6b 	bl	801a458 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 800c782:	69fb      	ldr	r3, [r7, #28]
 800c784:	3310      	adds	r3, #16
 800c786:	4618      	mov	r0, r3
 800c788:	f00d fb59 	bl	8019e3e <sys_mbox_valid>
 800c78c:	4603      	mov	r3, r0
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d103      	bne.n	800c79a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f002 ffc6 	bl	800f724 <pbuf_free>
    return;
 800c798:	e036      	b.n	800c808 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800c79a:	2006      	movs	r0, #6
 800c79c:	f002 f9ae 	bl	800eafc <memp_malloc>
 800c7a0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800c7a2:	69bb      	ldr	r3, [r7, #24]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d103      	bne.n	800c7b0 <recv_udp+0x88>
    pbuf_free(p);
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f002 ffbb 	bl	800f724 <pbuf_free>
    return;
 800c7ae:	e02b      	b.n	800c808 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800c7b0:	69bb      	ldr	r3, [r7, #24]
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800c7b6:	69bb      	ldr	r3, [r7, #24]
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d002      	beq.n	800c7c8 <recv_udp+0xa0>
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	e000      	b.n	800c7ca <recv_udp+0xa2>
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	69ba      	ldr	r2, [r7, #24]
 800c7cc:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800c7ce:	69bb      	ldr	r3, [r7, #24]
 800c7d0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800c7d2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	891b      	ldrh	r3, [r3, #8]
 800c7d8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800c7da:	69fb      	ldr	r3, [r7, #28]
 800c7dc:	3310      	adds	r3, #16
 800c7de:	69b9      	ldr	r1, [r7, #24]
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f00d fab7 	bl	8019d54 <sys_mbox_trypost>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d003      	beq.n	800c7f4 <recv_udp+0xcc>
    netbuf_delete(buf);
 800c7ec:	69b8      	ldr	r0, [r7, #24]
 800c7ee:	f001 fbcf 	bl	800df90 <netbuf_delete>
    return;
 800c7f2:	e009      	b.n	800c808 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800c7f4:	69fb      	ldr	r3, [r7, #28]
 800c7f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d005      	beq.n	800c808 <recv_udp+0xe0>
 800c7fc:	69fb      	ldr	r3, [r7, #28]
 800c7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c800:	8afa      	ldrh	r2, [r7, #22]
 800c802:	2100      	movs	r1, #0
 800c804:	69f8      	ldr	r0, [r7, #28]
 800c806:	4798      	blx	r3
  }
}
 800c808:	3720      	adds	r7, #32
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	0801bbf8 	.word	0x0801bbf8
 800c814:	0801bc2c 	.word	0x0801bc2c
 800c818:	0801bc50 	.word	0x0801bc50
 800c81c:	0801bc78 	.word	0x0801bc78
 800c820:	0801bc98 	.word	0x0801bc98

0800c824 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b088      	sub	sp, #32
 800c828:	af00      	add	r7, sp, #0
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	60b9      	str	r1, [r7, #8]
 800c82e:	607a      	str	r2, [r7, #4]
 800c830:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d105      	bne.n	800c844 <recv_tcp+0x20>
 800c838:	4b39      	ldr	r3, [pc, #228]	; (800c920 <recv_tcp+0xfc>)
 800c83a:	22f9      	movs	r2, #249	; 0xf9
 800c83c:	4939      	ldr	r1, [pc, #228]	; (800c924 <recv_tcp+0x100>)
 800c83e:	483a      	ldr	r0, [pc, #232]	; (800c928 <recv_tcp+0x104>)
 800c840:	f00d fe0a 	bl	801a458 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d105      	bne.n	800c856 <recv_tcp+0x32>
 800c84a:	4b35      	ldr	r3, [pc, #212]	; (800c920 <recv_tcp+0xfc>)
 800c84c:	22fa      	movs	r2, #250	; 0xfa
 800c84e:	4937      	ldr	r1, [pc, #220]	; (800c92c <recv_tcp+0x108>)
 800c850:	4835      	ldr	r0, [pc, #212]	; (800c928 <recv_tcp+0x104>)
 800c852:	f00d fe01 	bl	801a458 <iprintf>
  conn = (struct netconn *)arg;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800c85a:	69bb      	ldr	r3, [r7, #24]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d102      	bne.n	800c866 <recv_tcp+0x42>
    return ERR_VAL;
 800c860:	f06f 0305 	mvn.w	r3, #5
 800c864:	e057      	b.n	800c916 <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800c866:	69bb      	ldr	r3, [r7, #24]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	68ba      	ldr	r2, [r7, #8]
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d006      	beq.n	800c87e <recv_tcp+0x5a>
 800c870:	4b2b      	ldr	r3, [pc, #172]	; (800c920 <recv_tcp+0xfc>)
 800c872:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c876:	492e      	ldr	r1, [pc, #184]	; (800c930 <recv_tcp+0x10c>)
 800c878:	482b      	ldr	r0, [pc, #172]	; (800c928 <recv_tcp+0x104>)
 800c87a:	f00d fded 	bl	801a458 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 800c87e:	69bb      	ldr	r3, [r7, #24]
 800c880:	3310      	adds	r3, #16
 800c882:	4618      	mov	r0, r3
 800c884:	f00d fadb 	bl	8019e3e <sys_mbox_valid>
 800c888:	4603      	mov	r3, r0
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d10d      	bne.n	800c8aa <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d008      	beq.n	800c8a6 <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	891b      	ldrh	r3, [r3, #8]
 800c898:	4619      	mov	r1, r3
 800c89a:	68b8      	ldr	r0, [r7, #8]
 800c89c:	f003 fe30 	bl	8010500 <tcp_recved>
      pbuf_free(p);
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f002 ff3f 	bl	800f724 <pbuf_free>
    }
    return ERR_OK;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	e035      	b.n	800c916 <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 800c8aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d011      	beq.n	800c8d6 <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 800c8b2:	69bb      	ldr	r3, [r7, #24]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d00e      	beq.n	800c8d6 <recv_tcp+0xb2>
 800c8b8:	f00d fbd8 	bl	801a06c <sys_arch_protect>
 800c8bc:	6178      	str	r0, [r7, #20]
 800c8be:	69bb      	ldr	r3, [r7, #24]
 800c8c0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800c8c4:	f113 0f0c 	cmn.w	r3, #12
 800c8c8:	db02      	blt.n	800c8d0 <recv_tcp+0xac>
 800c8ca:	69bb      	ldr	r3, [r7, #24]
 800c8cc:	78fa      	ldrb	r2, [r7, #3]
 800c8ce:	721a      	strb	r2, [r3, #8]
 800c8d0:	6978      	ldr	r0, [r7, #20]
 800c8d2:	f00d fbd9 	bl	801a088 <sys_arch_unprotect>
  }

  if (p != NULL) {
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d003      	beq.n	800c8e4 <recv_tcp+0xc0>
    len = p->tot_len;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	891b      	ldrh	r3, [r3, #8]
 800c8e0:	83fb      	strh	r3, [r7, #30]
 800c8e2:	e001      	b.n	800c8e8 <recv_tcp+0xc4>
  } else {
    len = 0;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 800c8e8:	69bb      	ldr	r3, [r7, #24]
 800c8ea:	3310      	adds	r3, #16
 800c8ec:	6879      	ldr	r1, [r7, #4]
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f00d fa30 	bl	8019d54 <sys_mbox_trypost>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d002      	beq.n	800c900 <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800c8fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c8fe:	e00a      	b.n	800c916 <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800c900:	69bb      	ldr	r3, [r7, #24]
 800c902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c904:	2b00      	cmp	r3, #0
 800c906:	d005      	beq.n	800c914 <recv_tcp+0xf0>
 800c908:	69bb      	ldr	r3, [r7, #24]
 800c90a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c90c:	8bfa      	ldrh	r2, [r7, #30]
 800c90e:	2100      	movs	r1, #0
 800c910:	69b8      	ldr	r0, [r7, #24]
 800c912:	4798      	blx	r3
  }

  return ERR_OK;
 800c914:	2300      	movs	r3, #0
}
 800c916:	4618      	mov	r0, r3
 800c918:	3720      	adds	r7, #32
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
 800c91e:	bf00      	nop
 800c920:	0801bbf8 	.word	0x0801bbf8
 800c924:	0801bcb8 	.word	0x0801bcb8
 800c928:	0801bc50 	.word	0x0801bc50
 800c92c:	0801bcdc 	.word	0x0801bcdc
 800c930:	0801bcfc 	.word	0x0801bcfc

0800c934 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b084      	sub	sp, #16
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d106      	bne.n	800c956 <poll_tcp+0x22>
 800c948:	4b29      	ldr	r3, [pc, #164]	; (800c9f0 <poll_tcp+0xbc>)
 800c94a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800c94e:	4929      	ldr	r1, [pc, #164]	; (800c9f4 <poll_tcp+0xc0>)
 800c950:	4829      	ldr	r0, [pc, #164]	; (800c9f8 <poll_tcp+0xc4>)
 800c952:	f00d fd81 	bl	801a458 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	785b      	ldrb	r3, [r3, #1]
 800c95a:	2b01      	cmp	r3, #1
 800c95c:	d104      	bne.n	800c968 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800c95e:	2101      	movs	r1, #1
 800c960:	68f8      	ldr	r0, [r7, #12]
 800c962:	f001 f819 	bl	800d998 <lwip_netconn_do_writemore>
 800c966:	e016      	b.n	800c996 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	785b      	ldrb	r3, [r3, #1]
 800c96c:	2b04      	cmp	r3, #4
 800c96e:	d112      	bne.n	800c996 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c974:	2b00      	cmp	r3, #0
 800c976:	d00a      	beq.n	800c98e <poll_tcp+0x5a>
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c97c:	7a5b      	ldrb	r3, [r3, #9]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d005      	beq.n	800c98e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c986:	7a5a      	ldrb	r2, [r3, #9]
 800c988:	3a01      	subs	r2, #1
 800c98a:	b2d2      	uxtb	r2, r2
 800c98c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800c98e:	2101      	movs	r1, #1
 800c990:	68f8      	ldr	r0, [r7, #12]
 800c992:	f000 fc13 	bl	800d1bc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	7f1b      	ldrb	r3, [r3, #28]
 800c99a:	f003 0310 	and.w	r3, r3, #16
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d021      	beq.n	800c9e6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d01d      	beq.n	800c9e6 <poll_tcp+0xb2>
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c9b2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800c9b6:	d316      	bcc.n	800c9e6 <poll_tcp+0xb2>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c9c0:	2b04      	cmp	r3, #4
 800c9c2:	d810      	bhi.n	800c9e6 <poll_tcp+0xb2>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	7f1b      	ldrb	r3, [r3, #28]
 800c9c8:	f023 0310 	bic.w	r3, r3, #16
 800c9cc:	b2da      	uxtb	r2, r3
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d005      	beq.n	800c9e6 <poll_tcp+0xb2>
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9de:	2200      	movs	r2, #0
 800c9e0:	2102      	movs	r1, #2
 800c9e2:	68f8      	ldr	r0, [r7, #12]
 800c9e4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800c9e6:	2300      	movs	r3, #0
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3710      	adds	r7, #16
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}
 800c9f0:	0801bbf8 	.word	0x0801bbf8
 800c9f4:	0801bd1c 	.word	0x0801bd1c
 800c9f8:	0801bc50 	.word	0x0801bc50

0800c9fc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b086      	sub	sp, #24
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	60f8      	str	r0, [r7, #12]
 800ca04:	60b9      	str	r1, [r7, #8]
 800ca06:	4613      	mov	r3, r2
 800ca08:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d106      	bne.n	800ca22 <sent_tcp+0x26>
 800ca14:	4b20      	ldr	r3, [pc, #128]	; (800ca98 <sent_tcp+0x9c>)
 800ca16:	f240 1261 	movw	r2, #353	; 0x161
 800ca1a:	4920      	ldr	r1, [pc, #128]	; (800ca9c <sent_tcp+0xa0>)
 800ca1c:	4820      	ldr	r0, [pc, #128]	; (800caa0 <sent_tcp+0xa4>)
 800ca1e:	f00d fd1b 	bl	801a458 <iprintf>

  if (conn) {
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d032      	beq.n	800ca8e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	785b      	ldrb	r3, [r3, #1]
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	d104      	bne.n	800ca3a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ca30:	2101      	movs	r1, #1
 800ca32:	6978      	ldr	r0, [r7, #20]
 800ca34:	f000 ffb0 	bl	800d998 <lwip_netconn_do_writemore>
 800ca38:	e007      	b.n	800ca4a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	785b      	ldrb	r3, [r3, #1]
 800ca3e:	2b04      	cmp	r3, #4
 800ca40:	d103      	bne.n	800ca4a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ca42:	2101      	movs	r1, #1
 800ca44:	6978      	ldr	r0, [r7, #20]
 800ca46:	f000 fbb9 	bl	800d1bc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	685b      	ldr	r3, [r3, #4]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d01d      	beq.n	800ca8e <sent_tcp+0x92>
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ca5a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ca5e:	d316      	bcc.n	800ca8e <sent_tcp+0x92>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	685b      	ldr	r3, [r3, #4]
 800ca64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ca68:	2b04      	cmp	r3, #4
 800ca6a:	d810      	bhi.n	800ca8e <sent_tcp+0x92>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	7f1b      	ldrb	r3, [r3, #28]
 800ca70:	f023 0310 	bic.w	r3, r3, #16
 800ca74:	b2da      	uxtb	r2, r3
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d005      	beq.n	800ca8e <sent_tcp+0x92>
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca86:	88fa      	ldrh	r2, [r7, #6]
 800ca88:	2102      	movs	r1, #2
 800ca8a:	6978      	ldr	r0, [r7, #20]
 800ca8c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ca8e:	2300      	movs	r3, #0
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3718      	adds	r7, #24
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}
 800ca98:	0801bbf8 	.word	0x0801bbf8
 800ca9c:	0801bd1c 	.word	0x0801bd1c
 800caa0:	0801bc50 	.word	0x0801bc50

0800caa4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b08a      	sub	sp, #40	; 0x28
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	460b      	mov	r3, r1
 800caae:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800cab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d106      	bne.n	800cac8 <err_tcp+0x24>
 800caba:	4b6c      	ldr	r3, [pc, #432]	; (800cc6c <err_tcp+0x1c8>)
 800cabc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800cac0:	496b      	ldr	r1, [pc, #428]	; (800cc70 <err_tcp+0x1cc>)
 800cac2:	486c      	ldr	r0, [pc, #432]	; (800cc74 <err_tcp+0x1d0>)
 800cac4:	f00d fcc8 	bl	801a458 <iprintf>

  conn->pcb.tcp = NULL;
 800cac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caca:	2200      	movs	r2, #0
 800cacc:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800cace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad0:	785b      	ldrb	r3, [r3, #1]
 800cad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 800cad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad8:	2200      	movs	r2, #0
 800cada:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 800cadc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cae0:	2b04      	cmp	r3, #4
 800cae2:	d114      	bne.n	800cb0e <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 800cae4:	2300      	movs	r3, #0
 800cae6:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 800cae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caea:	2b00      	cmp	r3, #0
 800caec:	d018      	beq.n	800cb20 <err_tcp+0x7c>
 800caee:	f00d fabd 	bl	801a06c <sys_arch_protect>
 800caf2:	61b8      	str	r0, [r7, #24]
 800caf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800cafa:	f113 0f0c 	cmn.w	r3, #12
 800cafe:	db02      	blt.n	800cb06 <err_tcp+0x62>
 800cb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb02:	2200      	movs	r2, #0
 800cb04:	721a      	strb	r2, [r3, #8]
 800cb06:	69b8      	ldr	r0, [r7, #24]
 800cb08:	f00d fabe 	bl	801a088 <sys_arch_unprotect>
 800cb0c:	e008      	b.n	800cb20 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 800cb0e:	f00d faad 	bl	801a06c <sys_arch_protect>
 800cb12:	61f8      	str	r0, [r7, #28]
 800cb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb16:	78fa      	ldrb	r2, [r7, #3]
 800cb18:	721a      	strb	r2, [r3, #8]
 800cb1a:	69f8      	ldr	r0, [r7, #28]
 800cb1c:	f00d fab4 	bl	801a088 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800cb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d005      	beq.n	800cb34 <err_tcp+0x90>
 800cb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	2104      	movs	r1, #4
 800cb30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb32:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800cb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d005      	beq.n	800cb48 <err_tcp+0xa4>
 800cb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb40:	2200      	movs	r2, #0
 800cb42:	2100      	movs	r1, #0
 800cb44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb46:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800cb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d005      	beq.n	800cb5c <err_tcp+0xb8>
 800cb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb54:	2200      	movs	r2, #0
 800cb56:	2102      	movs	r1, #2
 800cb58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb5a:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800cb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5e:	3310      	adds	r3, #16
 800cb60:	4618      	mov	r0, r3
 800cb62:	f00d f96c 	bl	8019e3e <sys_mbox_valid>
 800cb66:	4603      	mov	r3, r0
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d005      	beq.n	800cb78 <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 800cb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb6e:	3310      	adds	r3, #16
 800cb70:	2100      	movs	r1, #0
 800cb72:	4618      	mov	r0, r3
 800cb74:	f00d f8ee 	bl	8019d54 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800cb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7a:	3314      	adds	r3, #20
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f00d f95e 	bl	8019e3e <sys_mbox_valid>
 800cb82:	4603      	mov	r3, r0
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d005      	beq.n	800cb94 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 800cb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8a:	3314      	adds	r3, #20
 800cb8c:	2100      	movs	r1, #0
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f00d f8e0 	bl	8019d54 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800cb94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cb98:	2b01      	cmp	r3, #1
 800cb9a:	d007      	beq.n	800cbac <err_tcp+0x108>
 800cb9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cba0:	2b04      	cmp	r3, #4
 800cba2:	d003      	beq.n	800cbac <err_tcp+0x108>
 800cba4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cba8:	2b03      	cmp	r3, #3
 800cbaa:	d14d      	bne.n	800cc48 <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800cbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbae:	7f1b      	ldrb	r3, [r3, #28]
 800cbb0:	f003 0304 	and.w	r3, r3, #4
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	bf14      	ite	ne
 800cbb8:	2301      	movne	r3, #1
 800cbba:	2300      	moveq	r3, #0
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800cbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc2:	7f1b      	ldrb	r3, [r3, #28]
 800cbc4:	f023 0304 	bic.w	r3, r3, #4
 800cbc8:	b2da      	uxtb	r2, r3
 800cbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbcc:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d145      	bne.n	800cc60 <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800cbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d106      	bne.n	800cbea <err_tcp+0x146>
 800cbdc:	4b23      	ldr	r3, [pc, #140]	; (800cc6c <err_tcp+0x1c8>)
 800cbde:	f240 12b3 	movw	r2, #435	; 0x1b3
 800cbe2:	4925      	ldr	r1, [pc, #148]	; (800cc78 <err_tcp+0x1d4>)
 800cbe4:	4823      	ldr	r0, [pc, #140]	; (800cc74 <err_tcp+0x1d0>)
 800cbe6:	f00d fc37 	bl	801a458 <iprintf>
      conn->current_msg->err = err;
 800cbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbee:	78fa      	ldrb	r2, [r7, #3]
 800cbf0:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800cbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	330c      	adds	r3, #12
 800cbfa:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800cbfc:	6938      	ldr	r0, [r7, #16]
 800cbfe:	f00d f9ad 	bl	8019f5c <sys_sem_valid>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d106      	bne.n	800cc16 <err_tcp+0x172>
 800cc08:	4b18      	ldr	r3, [pc, #96]	; (800cc6c <err_tcp+0x1c8>)
 800cc0a:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800cc0e:	491b      	ldr	r1, [pc, #108]	; (800cc7c <err_tcp+0x1d8>)
 800cc10:	4818      	ldr	r0, [pc, #96]	; (800cc74 <err_tcp+0x1d0>)
 800cc12:	f00d fc21 	bl	801a458 <iprintf>
      conn->current_msg = NULL;
 800cc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc18:	2200      	movs	r2, #0
 800cc1a:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 800cc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d00e      	beq.n	800cc40 <err_tcp+0x19c>
 800cc22:	f00d fa23 	bl	801a06c <sys_arch_protect>
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc2a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800cc2e:	f113 0f0c 	cmn.w	r3, #12
 800cc32:	db02      	blt.n	800cc3a <err_tcp+0x196>
 800cc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc36:	78fa      	ldrb	r2, [r7, #3]
 800cc38:	721a      	strb	r2, [r3, #8]
 800cc3a:	68f8      	ldr	r0, [r7, #12]
 800cc3c:	f00d fa24 	bl	801a088 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 800cc40:	6938      	ldr	r0, [r7, #16]
 800cc42:	f00d f971 	bl	8019f28 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800cc46:	e00b      	b.n	800cc60 <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800cc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d008      	beq.n	800cc62 <err_tcp+0x1be>
 800cc50:	4b06      	ldr	r3, [pc, #24]	; (800cc6c <err_tcp+0x1c8>)
 800cc52:	f240 12bd 	movw	r2, #445	; 0x1bd
 800cc56:	490a      	ldr	r1, [pc, #40]	; (800cc80 <err_tcp+0x1dc>)
 800cc58:	4806      	ldr	r0, [pc, #24]	; (800cc74 <err_tcp+0x1d0>)
 800cc5a:	f00d fbfd 	bl	801a458 <iprintf>
  }
}
 800cc5e:	e000      	b.n	800cc62 <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 800cc60:	bf00      	nop
}
 800cc62:	bf00      	nop
 800cc64:	3728      	adds	r7, #40	; 0x28
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
 800cc6a:	bf00      	nop
 800cc6c:	0801bbf8 	.word	0x0801bbf8
 800cc70:	0801bd1c 	.word	0x0801bd1c
 800cc74:	0801bc50 	.word	0x0801bc50
 800cc78:	0801bd2c 	.word	0x0801bd2c
 800cc7c:	0801bd48 	.word	0x0801bd48
 800cc80:	0801bd64 	.word	0x0801bd64

0800cc84 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800cc92:	6879      	ldr	r1, [r7, #4]
 800cc94:	68f8      	ldr	r0, [r7, #12]
 800cc96:	f004 fa17 	bl	80110c8 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800cc9a:	490a      	ldr	r1, [pc, #40]	; (800ccc4 <setup_tcp+0x40>)
 800cc9c:	68f8      	ldr	r0, [r7, #12]
 800cc9e:	f004 fa23 	bl	80110e8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800cca2:	4909      	ldr	r1, [pc, #36]	; (800ccc8 <setup_tcp+0x44>)
 800cca4:	68f8      	ldr	r0, [r7, #12]
 800cca6:	f004 fa41 	bl	801112c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800ccaa:	2202      	movs	r2, #2
 800ccac:	4907      	ldr	r1, [pc, #28]	; (800cccc <setup_tcp+0x48>)
 800ccae:	68f8      	ldr	r0, [r7, #12]
 800ccb0:	f004 fa94 	bl	80111dc <tcp_poll>
  tcp_err(pcb, err_tcp);
 800ccb4:	4906      	ldr	r1, [pc, #24]	; (800ccd0 <setup_tcp+0x4c>)
 800ccb6:	68f8      	ldr	r0, [r7, #12]
 800ccb8:	f004 fa58 	bl	801116c <tcp_err>
}
 800ccbc:	bf00      	nop
 800ccbe:	3710      	adds	r7, #16
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}
 800ccc4:	0800c825 	.word	0x0800c825
 800ccc8:	0800c9fd 	.word	0x0800c9fd
 800cccc:	0800c935 	.word	0x0800c935
 800ccd0:	0800caa5 	.word	0x0800caa5

0800ccd4 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b088      	sub	sp, #32
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	60f8      	str	r0, [r7, #12]
 800ccdc:	60b9      	str	r1, [r7, #8]
 800ccde:	4613      	mov	r3, r2
 800cce0:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800cce6:	69fb      	ldr	r3, [r7, #28]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d102      	bne.n	800ccf2 <accept_function+0x1e>
    return ERR_VAL;
 800ccec:	f06f 0305 	mvn.w	r3, #5
 800ccf0:	e08d      	b.n	800ce0e <accept_function+0x13a>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	3314      	adds	r3, #20
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f00d f8a1 	bl	8019e3e <sys_mbox_valid>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d102      	bne.n	800cd08 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800cd02:	f06f 0305 	mvn.w	r3, #5
 800cd06:	e082      	b.n	800ce0e <accept_function+0x13a>
  }

  if (newpcb == NULL) {
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d115      	bne.n	800cd3a <accept_function+0x66>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800cd0e:	69fb      	ldr	r3, [r7, #28]
 800cd10:	3314      	adds	r3, #20
 800cd12:	4941      	ldr	r1, [pc, #260]	; (800ce18 <accept_function+0x144>)
 800cd14:	4618      	mov	r0, r3
 800cd16:	f00d f81d 	bl	8019d54 <sys_mbox_trypost>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d109      	bne.n	800cd34 <accept_function+0x60>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800cd20:	69fb      	ldr	r3, [r7, #28]
 800cd22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d005      	beq.n	800cd34 <accept_function+0x60>
 800cd28:	69fb      	ldr	r3, [r7, #28]
 800cd2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	2100      	movs	r1, #0
 800cd30:	69f8      	ldr	r0, [r7, #28]
 800cd32:	4798      	blx	r3
    }
    return ERR_VAL;
 800cd34:	f06f 0305 	mvn.w	r3, #5
 800cd38:	e069      	b.n	800ce0e <accept_function+0x13a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800cd3a:	69fb      	ldr	r3, [r7, #28]
 800cd3c:	781a      	ldrb	r2, [r3, #0]
 800cd3e:	69fb      	ldr	r3, [r7, #28]
 800cd40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd42:	4619      	mov	r1, r3
 800cd44:	4610      	mov	r0, r2
 800cd46:	f000 f8ff 	bl	800cf48 <netconn_alloc>
 800cd4a:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800cd4c:	69bb      	ldr	r3, [r7, #24]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d115      	bne.n	800cd7e <accept_function+0xaa>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800cd52:	69fb      	ldr	r3, [r7, #28]
 800cd54:	3314      	adds	r3, #20
 800cd56:	4930      	ldr	r1, [pc, #192]	; (800ce18 <accept_function+0x144>)
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f00c fffb 	bl	8019d54 <sys_mbox_trypost>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d109      	bne.n	800cd78 <accept_function+0xa4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800cd64:	69fb      	ldr	r3, [r7, #28]
 800cd66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d005      	beq.n	800cd78 <accept_function+0xa4>
 800cd6c:	69fb      	ldr	r3, [r7, #28]
 800cd6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd70:	2200      	movs	r2, #0
 800cd72:	2100      	movs	r1, #0
 800cd74:	69f8      	ldr	r0, [r7, #28]
 800cd76:	4798      	blx	r3
    }
    return ERR_MEM;
 800cd78:	f04f 33ff 	mov.w	r3, #4294967295
 800cd7c:	e047      	b.n	800ce0e <accept_function+0x13a>
  }
  newconn->pcb.tcp = newpcb;
 800cd7e:	69bb      	ldr	r3, [r7, #24]
 800cd80:	68ba      	ldr	r2, [r7, #8]
 800cd82:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800cd84:	69b8      	ldr	r0, [r7, #24]
 800cd86:	f7ff ff7d 	bl	800cc84 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 800cd8a:	69bb      	ldr	r3, [r7, #24]
 800cd8c:	79fa      	ldrb	r2, [r7, #7]
 800cd8e:	721a      	strb	r2, [r3, #8]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800cd90:	69fb      	ldr	r3, [r7, #28]
 800cd92:	3314      	adds	r3, #20
 800cd94:	69b9      	ldr	r1, [r7, #24]
 800cd96:	4618      	mov	r0, r3
 800cd98:	f00c ffdc 	bl	8019d54 <sys_mbox_trypost>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d02a      	beq.n	800cdf8 <accept_function+0x124>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 800cda2:	69bb      	ldr	r3, [r7, #24]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800cda8:	2100      	movs	r1, #0
 800cdaa:	6978      	ldr	r0, [r7, #20]
 800cdac:	f004 f98c 	bl	80110c8 <tcp_arg>
    tcp_recv(pcb, NULL);
 800cdb0:	2100      	movs	r1, #0
 800cdb2:	6978      	ldr	r0, [r7, #20]
 800cdb4:	f004 f998 	bl	80110e8 <tcp_recv>
    tcp_sent(pcb, NULL);
 800cdb8:	2100      	movs	r1, #0
 800cdba:	6978      	ldr	r0, [r7, #20]
 800cdbc:	f004 f9b6 	bl	801112c <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	2100      	movs	r1, #0
 800cdc4:	6978      	ldr	r0, [r7, #20]
 800cdc6:	f004 fa09 	bl	80111dc <tcp_poll>
    tcp_err(pcb, NULL);
 800cdca:	2100      	movs	r1, #0
 800cdcc:	6978      	ldr	r0, [r7, #20]
 800cdce:	f004 f9cd 	bl	801116c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800cdd2:	69bb      	ldr	r3, [r7, #24]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800cdd8:	69bb      	ldr	r3, [r7, #24]
 800cdda:	3310      	adds	r3, #16
 800cddc:	4618      	mov	r0, r3
 800cdde:	f00c ff91 	bl	8019d04 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800cde2:	69bb      	ldr	r3, [r7, #24]
 800cde4:	3310      	adds	r3, #16
 800cde6:	4618      	mov	r0, r3
 800cde8:	f00d f839 	bl	8019e5e <sys_mbox_set_invalid>
    netconn_free(newconn);
 800cdec:	69b8      	ldr	r0, [r7, #24]
 800cdee:	f000 f91b 	bl	800d028 <netconn_free>
    return ERR_MEM;
 800cdf2:	f04f 33ff 	mov.w	r3, #4294967295
 800cdf6:	e00a      	b.n	800ce0e <accept_function+0x13a>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800cdf8:	69fb      	ldr	r3, [r7, #28]
 800cdfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d005      	beq.n	800ce0c <accept_function+0x138>
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce04:	2200      	movs	r2, #0
 800ce06:	2100      	movs	r1, #0
 800ce08:	69f8      	ldr	r0, [r7, #28]
 800ce0a:	4798      	blx	r3
  }

  return ERR_OK;
 800ce0c:	2300      	movs	r3, #0
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3720      	adds	r7, #32
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
 800ce16:	bf00      	nop
 800ce18:	2000927c 	.word	0x2000927c

0800ce1c <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800ce1c:	b590      	push	{r4, r7, lr}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800ce24:	2300      	movs	r3, #0
 800ce26:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d006      	beq.n	800ce40 <pcb_new+0x24>
 800ce32:	4b2b      	ldr	r3, [pc, #172]	; (800cee0 <pcb_new+0xc4>)
 800ce34:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800ce38:	492a      	ldr	r1, [pc, #168]	; (800cee4 <pcb_new+0xc8>)
 800ce3a:	482b      	ldr	r0, [pc, #172]	; (800cee8 <pcb_new+0xcc>)
 800ce3c:	f00d fb0c 	bl	801a458 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce4a:	2b10      	cmp	r3, #16
 800ce4c:	d022      	beq.n	800ce94 <pcb_new+0x78>
 800ce4e:	2b20      	cmp	r3, #32
 800ce50:	d133      	bne.n	800ceba <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681c      	ldr	r4, [r3, #0]
 800ce56:	7bfb      	ldrb	r3, [r7, #15]
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f008 fde2 	bl	8015a22 <udp_new_ip_type>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	685b      	ldr	r3, [r3, #4]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d02a      	beq.n	800cec2 <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	2b22      	cmp	r3, #34	; 0x22
 800ce74:	d104      	bne.n	800ce80 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	685b      	ldr	r3, [r3, #4]
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	6858      	ldr	r0, [r3, #4]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	4917      	ldr	r1, [pc, #92]	; (800ceec <pcb_new+0xd0>)
 800ce8e:	f008 fd6d 	bl	801596c <udp_recv>
    }
    break;
 800ce92:	e016      	b.n	800cec2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681c      	ldr	r4, [r3, #0]
 800ce98:	7bfb      	ldrb	r3, [r7, #15]
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f004 f906 	bl	80110ac <tcp_new_ip_type>
 800cea0:	4603      	mov	r3, r0
 800cea2:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d00b      	beq.n	800cec6 <pcb_new+0xaa>
      setup_tcp(msg->conn);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7ff fee6 	bl	800cc84 <setup_tcp>
    }
    break;
 800ceb8:	e005      	b.n	800cec6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	22fa      	movs	r2, #250	; 0xfa
 800cebe:	711a      	strb	r2, [r3, #4]
    return;
 800cec0:	e00a      	b.n	800ced8 <pcb_new+0xbc>
    break;
 800cec2:	bf00      	nop
 800cec4:	e000      	b.n	800cec8 <pcb_new+0xac>
    break;
 800cec6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d102      	bne.n	800ced8 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	22ff      	movs	r2, #255	; 0xff
 800ced6:	711a      	strb	r2, [r3, #4]
  }
}
 800ced8:	3714      	adds	r7, #20
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd90      	pop	{r4, r7, pc}
 800cede:	bf00      	nop
 800cee0:	0801bbf8 	.word	0x0801bbf8
 800cee4:	0801bd80 	.word	0x0801bd80
 800cee8:	0801bc50 	.word	0x0801bc50
 800ceec:	0800c729 	.word	0x0800c729

0800cef0 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b084      	sub	sp, #16
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2200      	movs	r2, #0
 800cf00:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	685b      	ldr	r3, [r3, #4]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d102      	bne.n	800cf12 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800cf0c:	68f8      	ldr	r0, [r7, #12]
 800cf0e:	f7ff ff85 	bl	800ce1c <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d012      	beq.n	800cf40 <lwip_netconn_do_newconn+0x50>
 800cf1a:	f00d f8a7 	bl	801a06c <sys_arch_protect>
 800cf1e:	60b8      	str	r0, [r7, #8]
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800cf28:	f113 0f0c 	cmn.w	r3, #12
 800cf2c:	db05      	blt.n	800cf3a <lwip_netconn_do_newconn+0x4a>
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	68fa      	ldr	r2, [r7, #12]
 800cf34:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800cf38:	721a      	strb	r2, [r3, #8]
 800cf3a:	68b8      	ldr	r0, [r7, #8]
 800cf3c:	f00d f8a4 	bl	801a088 <sys_arch_unprotect>
}
 800cf40:	bf00      	nop
 800cf42:	3710      	adds	r7, #16
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b084      	sub	sp, #16
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	4603      	mov	r3, r0
 800cf50:	6039      	str	r1, [r7, #0]
 800cf52:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800cf54:	2007      	movs	r0, #7
 800cf56:	f001 fdd1 	bl	800eafc <memp_malloc>
 800cf5a:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d101      	bne.n	800cf66 <netconn_alloc+0x1e>
    return NULL;
 800cf62:	2300      	movs	r3, #0
 800cf64:	e055      	b.n	800d012 <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	2200      	movs	r2, #0
 800cf6a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	79fa      	ldrb	r2, [r7, #7]
 800cf70:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	2200      	movs	r2, #0
 800cf76:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 800cf78:	79fb      	ldrb	r3, [r7, #7]
 800cf7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf7e:	2b10      	cmp	r3, #16
 800cf80:	d004      	beq.n	800cf8c <netconn_alloc+0x44>
 800cf82:	2b20      	cmp	r3, #32
 800cf84:	d105      	bne.n	800cf92 <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 800cf86:	2306      	movs	r3, #6
 800cf88:	60fb      	str	r3, [r7, #12]
    break;
 800cf8a:	e00a      	b.n	800cfa2 <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 800cf8c:	2306      	movs	r3, #6
 800cf8e:	60fb      	str	r3, [r7, #12]
    break;
 800cf90:	e007      	b.n	800cfa2 <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800cf92:	4b22      	ldr	r3, [pc, #136]	; (800d01c <netconn_alloc+0xd4>)
 800cf94:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800cf98:	4921      	ldr	r1, [pc, #132]	; (800d020 <netconn_alloc+0xd8>)
 800cf9a:	4822      	ldr	r0, [pc, #136]	; (800d024 <netconn_alloc+0xdc>)
 800cf9c:	f00d fa5c 	bl	801a458 <iprintf>
    goto free_and_return;
 800cfa0:	e032      	b.n	800d008 <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	3310      	adds	r3, #16
 800cfa6:	68f9      	ldr	r1, [r7, #12]
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f00c fe89 	bl	8019cc0 <sys_mbox_new>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d128      	bne.n	800d006 <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	330c      	adds	r3, #12
 800cfb8:	2100      	movs	r1, #0
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f00c ff5b 	bl	8019e76 <sys_sem_new>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d005      	beq.n	800cfd2 <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	3310      	adds	r3, #16
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f00c fe9a 	bl	8019d04 <sys_mbox_free>
    goto free_and_return;
 800cfd0:	e01a      	b.n	800d008 <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	3314      	adds	r3, #20
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f00c ff41 	bl	8019e5e <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	f04f 32ff 	mov.w	r2, #4294967295
 800cfe8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	683a      	ldr	r2, [r7, #0]
 800cfee:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	2200      	movs	r2, #0
 800cff4:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	2200      	movs	r2, #0
 800cffa:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	2200      	movs	r2, #0
 800d000:	771a      	strb	r2, [r3, #28]
  return conn;
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	e005      	b.n	800d012 <netconn_alloc+0xca>
    goto free_and_return;
 800d006:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800d008:	68b9      	ldr	r1, [r7, #8]
 800d00a:	2007      	movs	r0, #7
 800d00c:	f001 fdc8 	bl	800eba0 <memp_free>
  return NULL;
 800d010:	2300      	movs	r3, #0
}
 800d012:	4618      	mov	r0, r3
 800d014:	3710      	adds	r7, #16
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	0801bbf8 	.word	0x0801bbf8
 800d020:	0801bda0 	.word	0x0801bda0
 800d024:	0801bc50 	.word	0x0801bc50

0800d028 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	685b      	ldr	r3, [r3, #4]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d006      	beq.n	800d046 <netconn_free+0x1e>
 800d038:	4b1b      	ldr	r3, [pc, #108]	; (800d0a8 <netconn_free+0x80>)
 800d03a:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800d03e:	491b      	ldr	r1, [pc, #108]	; (800d0ac <netconn_free+0x84>)
 800d040:	481b      	ldr	r0, [pc, #108]	; (800d0b0 <netconn_free+0x88>)
 800d042:	f00d fa09 	bl	801a458 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	3310      	adds	r3, #16
 800d04a:	4618      	mov	r0, r3
 800d04c:	f00c fef7 	bl	8019e3e <sys_mbox_valid>
 800d050:	4603      	mov	r3, r0
 800d052:	2b00      	cmp	r3, #0
 800d054:	d006      	beq.n	800d064 <netconn_free+0x3c>
 800d056:	4b14      	ldr	r3, [pc, #80]	; (800d0a8 <netconn_free+0x80>)
 800d058:	f240 22e1 	movw	r2, #737	; 0x2e1
 800d05c:	4915      	ldr	r1, [pc, #84]	; (800d0b4 <netconn_free+0x8c>)
 800d05e:	4814      	ldr	r0, [pc, #80]	; (800d0b0 <netconn_free+0x88>)
 800d060:	f00d f9fa 	bl	801a458 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	3314      	adds	r3, #20
 800d068:	4618      	mov	r0, r3
 800d06a:	f00c fee8 	bl	8019e3e <sys_mbox_valid>
 800d06e:	4603      	mov	r3, r0
 800d070:	2b00      	cmp	r3, #0
 800d072:	d006      	beq.n	800d082 <netconn_free+0x5a>
 800d074:	4b0c      	ldr	r3, [pc, #48]	; (800d0a8 <netconn_free+0x80>)
 800d076:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d07a:	490f      	ldr	r1, [pc, #60]	; (800d0b8 <netconn_free+0x90>)
 800d07c:	480c      	ldr	r0, [pc, #48]	; (800d0b0 <netconn_free+0x88>)
 800d07e:	f00d f9eb 	bl	801a458 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	330c      	adds	r3, #12
 800d086:	4618      	mov	r0, r3
 800d088:	f00c ff5b 	bl	8019f42 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	330c      	adds	r3, #12
 800d090:	4618      	mov	r0, r3
 800d092:	f00c ff73 	bl	8019f7c <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800d096:	6879      	ldr	r1, [r7, #4]
 800d098:	2007      	movs	r0, #7
 800d09a:	f001 fd81 	bl	800eba0 <memp_free>
}
 800d09e:	bf00      	nop
 800d0a0:	3708      	adds	r7, #8
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}
 800d0a6:	bf00      	nop
 800d0a8:	0801bbf8 	.word	0x0801bbf8
 800d0ac:	0801bdc8 	.word	0x0801bdc8
 800d0b0:	0801bc50 	.word	0x0801bc50
 800d0b4:	0801bdf8 	.word	0x0801bdf8
 800d0b8:	0801be34 	.word	0x0801be34

0800d0bc <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b086      	sub	sp, #24
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	3310      	adds	r3, #16
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f00c feb8 	bl	8019e3e <sys_mbox_valid>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d035      	beq.n	800d140 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d0d4:	e01e      	b.n	800d114 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	781b      	ldrb	r3, [r3, #0]
 800d0da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d0de:	2b10      	cmp	r3, #16
 800d0e0:	d114      	bne.n	800d10c <netconn_drain+0x50>
        if (mem != NULL) {
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d015      	beq.n	800d114 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	685b      	ldr	r3, [r3, #4]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d007      	beq.n	800d104 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	685a      	ldr	r2, [r3, #4]
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	891b      	ldrh	r3, [r3, #8]
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	4610      	mov	r0, r2
 800d100:	f003 f9fe 	bl	8010500 <tcp_recved>
          }
          pbuf_free(p);
 800d104:	6978      	ldr	r0, [r7, #20]
 800d106:	f002 fb0d 	bl	800f724 <pbuf_free>
 800d10a:	e003      	b.n	800d114 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	4618      	mov	r0, r3
 800d110:	f000 ff3e 	bl	800df90 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	3310      	adds	r3, #16
 800d118:	f107 020c 	add.w	r2, r7, #12
 800d11c:	4611      	mov	r1, r2
 800d11e:	4618      	mov	r0, r3
 800d120:	f00c fe71 	bl	8019e06 <sys_arch_mbox_tryfetch>
 800d124:	4603      	mov	r3, r0
 800d126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d12a:	d1d4      	bne.n	800d0d6 <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	3310      	adds	r3, #16
 800d130:	4618      	mov	r0, r3
 800d132:	f00c fde7 	bl	8019d04 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	3310      	adds	r3, #16
 800d13a:	4618      	mov	r0, r3
 800d13c:	f00c fe8f 	bl	8019e5e <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	3314      	adds	r3, #20
 800d144:	4618      	mov	r0, r3
 800d146:	f00c fe7a 	bl	8019e3e <sys_mbox_valid>
 800d14a:	4603      	mov	r3, r0
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d02e      	beq.n	800d1ae <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d150:	e017      	b.n	800d182 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	4a18      	ldr	r2, [pc, #96]	; (800d1b8 <netconn_drain+0xfc>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d013      	beq.n	800d182 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 800d15e:	6938      	ldr	r0, [r7, #16]
 800d160:	f7ff ffac 	bl	800d0bc <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	685b      	ldr	r3, [r3, #4]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d007      	beq.n	800d17c <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	4618      	mov	r0, r3
 800d172:	f003 f831 	bl	80101d8 <tcp_abort>
          newconn->pcb.tcp = NULL;
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	2200      	movs	r2, #0
 800d17a:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 800d17c:	6938      	ldr	r0, [r7, #16]
 800d17e:	f7ff ff53 	bl	800d028 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	3314      	adds	r3, #20
 800d186:	f107 020c 	add.w	r2, r7, #12
 800d18a:	4611      	mov	r1, r2
 800d18c:	4618      	mov	r0, r3
 800d18e:	f00c fe3a 	bl	8019e06 <sys_arch_mbox_tryfetch>
 800d192:	4603      	mov	r3, r0
 800d194:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d198:	d1db      	bne.n	800d152 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	3314      	adds	r3, #20
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f00c fdb0 	bl	8019d04 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	3314      	adds	r3, #20
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f00c fe58 	bl	8019e5e <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800d1ae:	bf00      	nop
 800d1b0:	3718      	adds	r7, #24
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	2000927c 	.word	0x2000927c

0800d1bc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b088      	sub	sp, #32
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d106      	bne.n	800d1e0 <lwip_netconn_do_close_internal+0x24>
 800d1d2:	4b90      	ldr	r3, [pc, #576]	; (800d414 <lwip_netconn_do_close_internal+0x258>)
 800d1d4:	f240 3243 	movw	r2, #835	; 0x343
 800d1d8:	498f      	ldr	r1, [pc, #572]	; (800d418 <lwip_netconn_do_close_internal+0x25c>)
 800d1da:	4890      	ldr	r0, [pc, #576]	; (800d41c <lwip_netconn_do_close_internal+0x260>)
 800d1dc:	f00d f93c 	bl	801a458 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d1e8:	2b10      	cmp	r3, #16
 800d1ea:	d006      	beq.n	800d1fa <lwip_netconn_do_close_internal+0x3e>
 800d1ec:	4b89      	ldr	r3, [pc, #548]	; (800d414 <lwip_netconn_do_close_internal+0x258>)
 800d1ee:	f44f 7251 	mov.w	r2, #836	; 0x344
 800d1f2:	498b      	ldr	r1, [pc, #556]	; (800d420 <lwip_netconn_do_close_internal+0x264>)
 800d1f4:	4889      	ldr	r0, [pc, #548]	; (800d41c <lwip_netconn_do_close_internal+0x260>)
 800d1f6:	f00d f92f 	bl	801a458 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	785b      	ldrb	r3, [r3, #1]
 800d1fe:	2b04      	cmp	r3, #4
 800d200:	d006      	beq.n	800d210 <lwip_netconn_do_close_internal+0x54>
 800d202:	4b84      	ldr	r3, [pc, #528]	; (800d414 <lwip_netconn_do_close_internal+0x258>)
 800d204:	f240 3245 	movw	r2, #837	; 0x345
 800d208:	4986      	ldr	r1, [pc, #536]	; (800d424 <lwip_netconn_do_close_internal+0x268>)
 800d20a:	4884      	ldr	r0, [pc, #528]	; (800d41c <lwip_netconn_do_close_internal+0x260>)
 800d20c:	f00d f924 	bl	801a458 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d106      	bne.n	800d226 <lwip_netconn_do_close_internal+0x6a>
 800d218:	4b7e      	ldr	r3, [pc, #504]	; (800d414 <lwip_netconn_do_close_internal+0x258>)
 800d21a:	f240 3246 	movw	r2, #838	; 0x346
 800d21e:	4982      	ldr	r1, [pc, #520]	; (800d428 <lwip_netconn_do_close_internal+0x26c>)
 800d220:	487e      	ldr	r0, [pc, #504]	; (800d41c <lwip_netconn_do_close_internal+0x260>)
 800d222:	f00d f919 	bl	801a458 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d106      	bne.n	800d23c <lwip_netconn_do_close_internal+0x80>
 800d22e:	4b79      	ldr	r3, [pc, #484]	; (800d414 <lwip_netconn_do_close_internal+0x258>)
 800d230:	f240 3247 	movw	r2, #839	; 0x347
 800d234:	497d      	ldr	r1, [pc, #500]	; (800d42c <lwip_netconn_do_close_internal+0x270>)
 800d236:	4879      	ldr	r0, [pc, #484]	; (800d41c <lwip_netconn_do_close_internal+0x260>)
 800d238:	f00d f90e 	bl	801a458 <iprintf>

  tpcb = conn->pcb.tcp;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	685b      	ldr	r3, [r3, #4]
 800d240:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d246:	7a1b      	ldrb	r3, [r3, #8]
 800d248:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 800d24a:	7dfb      	ldrb	r3, [r7, #23]
 800d24c:	f003 0301 	and.w	r3, r3, #1
 800d250:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 800d252:	7dfb      	ldrb	r3, [r7, #23]
 800d254:	f003 0302 	and.w	r3, r3, #2
 800d258:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800d25a:	7dfb      	ldrb	r3, [r7, #23]
 800d25c:	2b03      	cmp	r3, #3
 800d25e:	d102      	bne.n	800d266 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 800d260:	2301      	movs	r3, #1
 800d262:	77bb      	strb	r3, [r7, #30]
 800d264:	e01f      	b.n	800d2a6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800d266:	7dbb      	ldrb	r3, [r7, #22]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d00e      	beq.n	800d28a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800d26c:	69bb      	ldr	r3, [r7, #24]
 800d26e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800d270:	2b05      	cmp	r3, #5
 800d272:	d007      	beq.n	800d284 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800d274:	69bb      	ldr	r3, [r7, #24]
 800d276:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800d278:	2b06      	cmp	r3, #6
 800d27a:	d003      	beq.n	800d284 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800d27c:	69bb      	ldr	r3, [r7, #24]
 800d27e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800d280:	2b08      	cmp	r3, #8
 800d282:	d102      	bne.n	800d28a <lwip_netconn_do_close_internal+0xce>
    close = 1;
 800d284:	2301      	movs	r3, #1
 800d286:	77bb      	strb	r3, [r7, #30]
 800d288:	e00d      	b.n	800d2a6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800d28a:	7d7b      	ldrb	r3, [r7, #21]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d008      	beq.n	800d2a2 <lwip_netconn_do_close_internal+0xe6>
 800d290:	69bb      	ldr	r3, [r7, #24]
 800d292:	7e9b      	ldrb	r3, [r3, #26]
 800d294:	f003 0310 	and.w	r3, r3, #16
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d002      	beq.n	800d2a2 <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 800d29c:	2301      	movs	r3, #1
 800d29e:	77bb      	strb	r3, [r7, #30]
 800d2a0:	e001      	b.n	800d2a6 <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 800d2a6:	7fbb      	ldrb	r3, [r7, #30]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d003      	beq.n	800d2b4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800d2ac:	2100      	movs	r1, #0
 800d2ae:	69b8      	ldr	r0, [r7, #24]
 800d2b0:	f003 ff0a 	bl	80110c8 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800d2b4:	69bb      	ldr	r3, [r7, #24]
 800d2b6:	7d1b      	ldrb	r3, [r3, #20]
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	d104      	bne.n	800d2c6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800d2bc:	2100      	movs	r1, #0
 800d2be:	69b8      	ldr	r0, [r7, #24]
 800d2c0:	f003 ff76 	bl	80111b0 <tcp_accept>
 800d2c4:	e01d      	b.n	800d302 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800d2c6:	7dbb      	ldrb	r3, [r7, #22]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d007      	beq.n	800d2dc <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800d2cc:	2100      	movs	r1, #0
 800d2ce:	69b8      	ldr	r0, [r7, #24]
 800d2d0:	f003 ff0a 	bl	80110e8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800d2d4:	2100      	movs	r1, #0
 800d2d6:	69b8      	ldr	r0, [r7, #24]
 800d2d8:	f003 ff6a 	bl	80111b0 <tcp_accept>
    }
    if (shut_tx) {
 800d2dc:	7d7b      	ldrb	r3, [r7, #21]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d003      	beq.n	800d2ea <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800d2e2:	2100      	movs	r1, #0
 800d2e4:	69b8      	ldr	r0, [r7, #24]
 800d2e6:	f003 ff21 	bl	801112c <tcp_sent>
    }
    if (close) {
 800d2ea:	7fbb      	ldrb	r3, [r7, #30]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d008      	beq.n	800d302 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	2100      	movs	r1, #0
 800d2f4:	69b8      	ldr	r0, [r7, #24]
 800d2f6:	f003 ff71 	bl	80111dc <tcp_poll>
      tcp_err(tpcb, NULL);
 800d2fa:	2100      	movs	r1, #0
 800d2fc:	69b8      	ldr	r0, [r7, #24]
 800d2fe:	f003 ff35 	bl	801116c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 800d302:	7fbb      	ldrb	r3, [r7, #30]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d005      	beq.n	800d314 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800d308:	69b8      	ldr	r0, [r7, #24]
 800d30a:	f002 fe53 	bl	800ffb4 <tcp_close>
 800d30e:	4603      	mov	r3, r0
 800d310:	77fb      	strb	r3, [r7, #31]
 800d312:	e007      	b.n	800d324 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800d314:	7dbb      	ldrb	r3, [r7, #22]
 800d316:	7d7a      	ldrb	r2, [r7, #21]
 800d318:	4619      	mov	r1, r3
 800d31a:	69b8      	ldr	r0, [r7, #24]
 800d31c:	f002 fe62 	bl	800ffe4 <tcp_shutdown>
 800d320:	4603      	mov	r3, r0
 800d322:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 800d324:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d102      	bne.n	800d332 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800d32c:	2301      	movs	r3, #1
 800d32e:	777b      	strb	r3, [r7, #29]
 800d330:	e016      	b.n	800d360 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800d332:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d33a:	d10f      	bne.n	800d35c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d340:	7a5b      	ldrb	r3, [r3, #9]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d10c      	bne.n	800d360 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800d346:	2301      	movs	r3, #1
 800d348:	777b      	strb	r3, [r7, #29]
        if (close) {
 800d34a:	7fbb      	ldrb	r3, [r7, #30]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d007      	beq.n	800d360 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800d350:	69b8      	ldr	r0, [r7, #24]
 800d352:	f002 ff41 	bl	80101d8 <tcp_abort>
          err = ERR_OK;
 800d356:	2300      	movs	r3, #0
 800d358:	77fb      	strb	r3, [r7, #31]
 800d35a:	e001      	b.n	800d360 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800d35c:	2301      	movs	r3, #1
 800d35e:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 800d360:	7f7b      	ldrb	r3, [r7, #29]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d064      	beq.n	800d430 <lwip_netconn_do_close_internal+0x274>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	330c      	adds	r3, #12
 800d36e:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d374:	7ffa      	ldrb	r2, [r7, #31]
 800d376:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2200      	movs	r2, #0
 800d37c:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2200      	movs	r2, #0
 800d382:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800d384:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d129      	bne.n	800d3e0 <lwip_netconn_do_close_internal+0x224>
      if (close) {
 800d38c:	7fbb      	ldrb	r3, [r7, #30]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d00c      	beq.n	800d3ac <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2200      	movs	r2, #0
 800d396:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d005      	beq.n	800d3ac <lwip_netconn_do_close_internal+0x1f0>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	2104      	movs	r1, #4
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	4798      	blx	r3
      }
      if (shut_rx) {
 800d3ac:	7dbb      	ldrb	r3, [r7, #22]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d009      	beq.n	800d3c6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d005      	beq.n	800d3c6 <lwip_netconn_do_close_internal+0x20a>
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3be:	2200      	movs	r2, #0
 800d3c0:	2100      	movs	r1, #0
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	4798      	blx	r3
      }
      if (shut_tx) {
 800d3c6:	7d7b      	ldrb	r3, [r7, #21]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d009      	beq.n	800d3e0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d005      	beq.n	800d3e0 <lwip_netconn_do_close_internal+0x224>
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3d8:	2200      	movs	r2, #0
 800d3da:	2102      	movs	r1, #2
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d00e      	beq.n	800d404 <lwip_netconn_do_close_internal+0x248>
 800d3e6:	f00c fe41 	bl	801a06c <sys_arch_protect>
 800d3ea:	60f8      	str	r0, [r7, #12]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d3f2:	f113 0f0c 	cmn.w	r3, #12
 800d3f6:	db02      	blt.n	800d3fe <lwip_netconn_do_close_internal+0x242>
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	7ffa      	ldrb	r2, [r7, #31]
 800d3fc:	721a      	strb	r2, [r3, #8]
 800d3fe:	68f8      	ldr	r0, [r7, #12]
 800d400:	f00c fe42 	bl	801a088 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800d404:	78fb      	ldrb	r3, [r7, #3]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d002      	beq.n	800d410 <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800d40a:	6938      	ldr	r0, [r7, #16]
 800d40c:	f00c fd8c 	bl	8019f28 <sys_sem_signal>
    }
    return ERR_OK;
 800d410:	2300      	movs	r3, #0
 800d412:	e03c      	b.n	800d48e <lwip_netconn_do_close_internal+0x2d2>
 800d414:	0801bbf8 	.word	0x0801bbf8
 800d418:	0801be70 	.word	0x0801be70
 800d41c:	0801bc50 	.word	0x0801bc50
 800d420:	0801be80 	.word	0x0801be80
 800d424:	0801bea0 	.word	0x0801bea0
 800d428:	0801bec4 	.word	0x0801bec4
 800d42c:	0801bd2c 	.word	0x0801bd2c
  }
  if (!close_finished) {
 800d430:	7f7b      	ldrb	r3, [r7, #29]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d11e      	bne.n	800d474 <lwip_netconn_do_close_internal+0x2b8>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800d436:	69bb      	ldr	r3, [r7, #24]
 800d438:	7d1b      	ldrb	r3, [r3, #20]
 800d43a:	2b01      	cmp	r3, #1
 800d43c:	d106      	bne.n	800d44c <lwip_netconn_do_close_internal+0x290>
 800d43e:	4b16      	ldr	r3, [pc, #88]	; (800d498 <lwip_netconn_do_close_internal+0x2dc>)
 800d440:	f240 32e3 	movw	r2, #995	; 0x3e3
 800d444:	4915      	ldr	r1, [pc, #84]	; (800d49c <lwip_netconn_do_close_internal+0x2e0>)
 800d446:	4816      	ldr	r0, [pc, #88]	; (800d4a0 <lwip_netconn_do_close_internal+0x2e4>)
 800d448:	f00d f806 	bl	801a458 <iprintf>
    if (shut_tx) {
 800d44c:	7d7b      	ldrb	r3, [r7, #21]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d003      	beq.n	800d45a <lwip_netconn_do_close_internal+0x29e>
      tcp_sent(tpcb, sent_tcp);
 800d452:	4914      	ldr	r1, [pc, #80]	; (800d4a4 <lwip_netconn_do_close_internal+0x2e8>)
 800d454:	69b8      	ldr	r0, [r7, #24]
 800d456:	f003 fe69 	bl	801112c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800d45a:	2201      	movs	r2, #1
 800d45c:	4912      	ldr	r1, [pc, #72]	; (800d4a8 <lwip_netconn_do_close_internal+0x2ec>)
 800d45e:	69b8      	ldr	r0, [r7, #24]
 800d460:	f003 febc 	bl	80111dc <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800d464:	4911      	ldr	r1, [pc, #68]	; (800d4ac <lwip_netconn_do_close_internal+0x2f0>)
 800d466:	69b8      	ldr	r0, [r7, #24]
 800d468:	f003 fe80 	bl	801116c <tcp_err>
    tcp_arg(tpcb, conn);
 800d46c:	6879      	ldr	r1, [r7, #4]
 800d46e:	69b8      	ldr	r0, [r7, #24]
 800d470:	f003 fe2a 	bl	80110c8 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800d474:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d106      	bne.n	800d48a <lwip_netconn_do_close_internal+0x2ce>
 800d47c:	4b06      	ldr	r3, [pc, #24]	; (800d498 <lwip_netconn_do_close_internal+0x2dc>)
 800d47e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800d482:	490b      	ldr	r1, [pc, #44]	; (800d4b0 <lwip_netconn_do_close_internal+0x2f4>)
 800d484:	4806      	ldr	r0, [pc, #24]	; (800d4a0 <lwip_netconn_do_close_internal+0x2e4>)
 800d486:	f00c ffe7 	bl	801a458 <iprintf>
  return err;
 800d48a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d48e:	4618      	mov	r0, r3
 800d490:	3720      	adds	r7, #32
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
 800d496:	bf00      	nop
 800d498:	0801bbf8 	.word	0x0801bbf8
 800d49c:	0801bed8 	.word	0x0801bed8
 800d4a0:	0801bc50 	.word	0x0801bc50
 800d4a4:	0800c9fd 	.word	0x0800c9fd
 800d4a8:	0800c935 	.word	0x0800c935
 800d4ac:	0800caa5 	.word	0x0800caa5
 800d4b0:	0801befc 	.word	0x0801befc

0800d4b4 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b086      	sub	sp, #24
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	785b      	ldrb	r3, [r3, #1]
 800d4c6:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800d4c8:	7cfb      	ldrb	r3, [r7, #19]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d00d      	beq.n	800d4ea <lwip_netconn_do_delconn+0x36>
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	781b      	ldrb	r3, [r3, #0]
 800d4d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d4d8:	2b10      	cmp	r3, #16
 800d4da:	d006      	beq.n	800d4ea <lwip_netconn_do_delconn+0x36>
 800d4dc:	4b6f      	ldr	r3, [pc, #444]	; (800d69c <lwip_netconn_do_delconn+0x1e8>)
 800d4de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d4e2:	496f      	ldr	r1, [pc, #444]	; (800d6a0 <lwip_netconn_do_delconn+0x1ec>)
 800d4e4:	486f      	ldr	r0, [pc, #444]	; (800d6a4 <lwip_netconn_do_delconn+0x1f0>)
 800d4e6:	f00c ffb7 	bl	801a458 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800d4ea:	7cfb      	ldrb	r3, [r7, #19]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d005      	beq.n	800d4fc <lwip_netconn_do_delconn+0x48>
 800d4f0:	7cfb      	ldrb	r3, [r7, #19]
 800d4f2:	2b02      	cmp	r3, #2
 800d4f4:	d002      	beq.n	800d4fc <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800d4f6:	7cfb      	ldrb	r3, [r7, #19]
 800d4f8:	2b03      	cmp	r3, #3
 800d4fa:	d109      	bne.n	800d510 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800d4fc:	7cfb      	ldrb	r3, [r7, #19]
 800d4fe:	2b03      	cmp	r3, #3
 800d500:	d10a      	bne.n	800d518 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	7f1b      	ldrb	r3, [r3, #28]
 800d508:	f003 0304 	and.w	r3, r3, #4
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d103      	bne.n	800d518 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	22fb      	movs	r2, #251	; 0xfb
 800d514:	711a      	strb	r2, [r3, #4]
 800d516:	e09c      	b.n	800d652 <lwip_netconn_do_delconn+0x19e>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800d518:	7cfb      	ldrb	r3, [r7, #19]
 800d51a:	2b03      	cmp	r3, #3
 800d51c:	d10d      	bne.n	800d53a <lwip_netconn_do_delconn+0x86>
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	7f1b      	ldrb	r3, [r3, #28]
 800d524:	f003 0304 	and.w	r3, r3, #4
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d106      	bne.n	800d53a <lwip_netconn_do_delconn+0x86>
 800d52c:	4b5b      	ldr	r3, [pc, #364]	; (800d69c <lwip_netconn_do_delconn+0x1e8>)
 800d52e:	f240 421e 	movw	r2, #1054	; 0x41e
 800d532:	495d      	ldr	r1, [pc, #372]	; (800d6a8 <lwip_netconn_do_delconn+0x1f4>)
 800d534:	485b      	ldr	r0, [pc, #364]	; (800d6a4 <lwip_netconn_do_delconn+0x1f0>)
 800d536:	f00c ff8f 	bl	801a458 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	2200      	movs	r2, #0
 800d53e:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	4618      	mov	r0, r3
 800d546:	f7ff fdb9 	bl	800d0bc <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	685b      	ldr	r3, [r3, #4]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d064      	beq.n	800d61e <lwip_netconn_do_delconn+0x16a>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d55e:	2b10      	cmp	r3, #16
 800d560:	d00d      	beq.n	800d57e <lwip_netconn_do_delconn+0xca>
 800d562:	2b20      	cmp	r3, #32
 800d564:	d156      	bne.n	800d614 <lwip_netconn_do_delconn+0x160>
        raw_remove(msg->conn->pcb.raw);
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        msg->conn->pcb.udp->recv_arg = NULL;
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	2200      	movs	r2, #0
 800d56e:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	685b      	ldr	r3, [r3, #4]
 800d576:	4618      	mov	r0, r3
 800d578:	f008 fa0a 	bl	8015990 <udp_remove>
        break;
 800d57c:	e04b      	b.n	800d616 <lwip_netconn_do_delconn+0x162>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d584:	2b00      	cmp	r3, #0
 800d586:	d104      	bne.n	800d592 <lwip_netconn_do_delconn+0xde>
 800d588:	697b      	ldr	r3, [r7, #20]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	6a1b      	ldr	r3, [r3, #32]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d006      	beq.n	800d5a0 <lwip_netconn_do_delconn+0xec>
 800d592:	4b42      	ldr	r3, [pc, #264]	; (800d69c <lwip_netconn_do_delconn+0x1e8>)
 800d594:	f240 4234 	movw	r2, #1076	; 0x434
 800d598:	4944      	ldr	r1, [pc, #272]	; (800d6ac <lwip_netconn_do_delconn+0x1f8>)
 800d59a:	4842      	ldr	r0, [pc, #264]	; (800d6a4 <lwip_netconn_do_delconn+0x1f0>)
 800d59c:	f00c ff5c 	bl	801a458 <iprintf>
          msg->conn->write_offset == 0);
        msg->conn->state = NETCONN_CLOSE;
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	2204      	movs	r2, #4
 800d5a6:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	2203      	movs	r2, #3
 800d5ac:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	697a      	ldr	r2, [r7, #20]
 800d5b4:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	2100      	movs	r1, #0
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7ff fdfd 	bl	800d1bc <lwip_netconn_do_close_internal>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d065      	beq.n	800d694 <lwip_netconn_do_delconn+0x1e0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	785b      	ldrb	r3, [r3, #1]
 800d5ce:	2b04      	cmp	r3, #4
 800d5d0:	d006      	beq.n	800d5e0 <lwip_netconn_do_delconn+0x12c>
 800d5d2:	4b32      	ldr	r3, [pc, #200]	; (800d69c <lwip_netconn_do_delconn+0x1e8>)
 800d5d4:	f240 423b 	movw	r2, #1083	; 0x43b
 800d5d8:	4935      	ldr	r1, [pc, #212]	; (800d6b0 <lwip_netconn_do_delconn+0x1fc>)
 800d5da:	4832      	ldr	r0, [pc, #200]	; (800d6a4 <lwip_netconn_do_delconn+0x1f0>)
 800d5dc:	f00c ff3c 	bl	801a458 <iprintf>
          UNLOCK_TCPIP_CORE();
 800d5e0:	4834      	ldr	r0, [pc, #208]	; (800d6b4 <lwip_netconn_do_delconn+0x200>)
 800d5e2:	f00c fd10 	bl	801a006 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	330c      	adds	r3, #12
 800d5ec:	2100      	movs	r1, #0
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f00c fc69 	bl	8019ec6 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800d5f4:	482f      	ldr	r0, [pc, #188]	; (800d6b4 <lwip_netconn_do_delconn+0x200>)
 800d5f6:	f00c fcf7 	bl	8019fe8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	785b      	ldrb	r3, [r3, #1]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d047      	beq.n	800d694 <lwip_netconn_do_delconn+0x1e0>
 800d604:	4b25      	ldr	r3, [pc, #148]	; (800d69c <lwip_netconn_do_delconn+0x1e8>)
 800d606:	f240 423f 	movw	r2, #1087	; 0x43f
 800d60a:	4929      	ldr	r1, [pc, #164]	; (800d6b0 <lwip_netconn_do_delconn+0x1fc>)
 800d60c:	4825      	ldr	r0, [pc, #148]	; (800d6a4 <lwip_netconn_do_delconn+0x1f0>)
 800d60e:	f00c ff23 	bl	801a458 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
 800d612:	e03f      	b.n	800d694 <lwip_netconn_do_delconn+0x1e0>
#endif /* LWIP_TCP */
      default:
        break;
 800d614:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	2200      	movs	r2, #0
 800d61c:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d624:	2b00      	cmp	r3, #0
 800d626:	d007      	beq.n	800d638 <lwip_netconn_do_delconn+0x184>
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d62e:	697a      	ldr	r2, [r7, #20]
 800d630:	6810      	ldr	r0, [r2, #0]
 800d632:	2200      	movs	r2, #0
 800d634:	2100      	movs	r1, #0
 800d636:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d007      	beq.n	800d652 <lwip_netconn_do_delconn+0x19e>
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d648:	697a      	ldr	r2, [r7, #20]
 800d64a:	6810      	ldr	r0, [r2, #0]
 800d64c:	2200      	movs	r2, #0
 800d64e:	2102      	movs	r1, #2
 800d650:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	330c      	adds	r3, #12
 800d658:	4618      	mov	r0, r3
 800d65a:	f00c fc7f 	bl	8019f5c <sys_sem_valid>
 800d65e:	4603      	mov	r3, r0
 800d660:	2b00      	cmp	r3, #0
 800d662:	d018      	beq.n	800d696 <lwip_netconn_do_delconn+0x1e2>
    TCPIP_APIMSG_ACK(msg);
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d014      	beq.n	800d696 <lwip_netconn_do_delconn+0x1e2>
 800d66c:	f00c fcfe 	bl	801a06c <sys_arch_protect>
 800d670:	60f8      	str	r0, [r7, #12]
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d67a:	f113 0f0c 	cmn.w	r3, #12
 800d67e:	db05      	blt.n	800d68c <lwip_netconn_do_delconn+0x1d8>
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	697a      	ldr	r2, [r7, #20]
 800d686:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800d68a:	721a      	strb	r2, [r3, #8]
 800d68c:	68f8      	ldr	r0, [r7, #12]
 800d68e:	f00c fcfb 	bl	801a088 <sys_arch_unprotect>
 800d692:	e000      	b.n	800d696 <lwip_netconn_do_delconn+0x1e2>
        return;
 800d694:	bf00      	nop
  }
}
 800d696:	3718      	adds	r7, #24
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}
 800d69c:	0801bbf8 	.word	0x0801bbf8
 800d6a0:	0801bf0c 	.word	0x0801bf0c
 800d6a4:	0801bc50 	.word	0x0801bc50
 800d6a8:	0801bf20 	.word	0x0801bf20
 800d6ac:	0801bf40 	.word	0x0801bf40
 800d6b0:	0801bf5c 	.word	0x0801bf5c
 800d6b4:	2000928c 	.word	0x2000928c

0800d6b8 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b084      	sub	sp, #16
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d6cc:	f113 0f0c 	cmn.w	r3, #12
 800d6d0:	da06      	bge.n	800d6e0 <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	711a      	strb	r2, [r3, #4]
 800d6de:	e031      	b.n	800d744 <lwip_netconn_do_bind+0x8c>
  } else {
    msg->err = ERR_VAL;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	22fa      	movs	r2, #250	; 0xfa
 800d6e4:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d026      	beq.n	800d73e <lwip_netconn_do_bind+0x86>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	781b      	ldrb	r3, [r3, #0]
 800d6f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d6fa:	2b10      	cmp	r3, #16
 800d6fc:	d010      	beq.n	800d720 <lwip_netconn_do_bind+0x68>
 800d6fe:	2b20      	cmp	r3, #32
 800d700:	d11f      	bne.n	800d742 <lwip_netconn_do_bind+0x8a>
        msg->err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	6858      	ldr	r0, [r3, #4]
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	6899      	ldr	r1, [r3, #8]
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	899b      	ldrh	r3, [r3, #12]
 800d710:	461a      	mov	r2, r3
 800d712:	f008 f865 	bl	80157e0 <udp_bind>
 800d716:	4603      	mov	r3, r0
 800d718:	461a      	mov	r2, r3
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	711a      	strb	r2, [r3, #4]
        break;
 800d71e:	e011      	b.n	800d744 <lwip_netconn_do_bind+0x8c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	6858      	ldr	r0, [r3, #4]
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	6899      	ldr	r1, [r3, #8]
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	899b      	ldrh	r3, [r3, #12]
 800d72e:	461a      	mov	r2, r3
 800d730:	f002 fd5e 	bl	80101f0 <tcp_bind>
 800d734:	4603      	mov	r3, r0
 800d736:	461a      	mov	r2, r3
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	711a      	strb	r2, [r3, #4]
        break;
 800d73c:	e002      	b.n	800d744 <lwip_netconn_do_bind+0x8c>
#endif /* LWIP_TCP */
      default:
        break;
      }
    }
 800d73e:	bf00      	nop
 800d740:	e000      	b.n	800d744 <lwip_netconn_do_bind+0x8c>
        break;
 800d742:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d012      	beq.n	800d772 <lwip_netconn_do_bind+0xba>
 800d74c:	f00c fc8e 	bl	801a06c <sys_arch_protect>
 800d750:	60b8      	str	r0, [r7, #8]
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d75a:	f113 0f0c 	cmn.w	r3, #12
 800d75e:	db05      	blt.n	800d76c <lwip_netconn_do_bind+0xb4>
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	68fa      	ldr	r2, [r7, #12]
 800d766:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800d76a:	721a      	strb	r2, [r3, #8]
 800d76c:	68b8      	ldr	r0, [r7, #8]
 800d76e:	f00c fc8b 	bl	801a088 <sys_arch_unprotect>
}
 800d772:	bf00      	nop
 800d774:	3710      	adds	r7, #16
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
	...

0800d77c <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b088      	sub	sp, #32
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	61fb      	str	r3, [r7, #28]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800d788:	69fb      	ldr	r3, [r7, #28]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d790:	f113 0f0c 	cmn.w	r3, #12
 800d794:	da06      	bge.n	800d7a4 <lwip_netconn_do_listen+0x28>
    msg->err = msg->conn->last_err;
 800d796:	69fb      	ldr	r3, [r7, #28]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800d79e:	69fb      	ldr	r3, [r7, #28]
 800d7a0:	711a      	strb	r2, [r3, #4]
 800d7a2:	e090      	b.n	800d8c6 <lwip_netconn_do_listen+0x14a>
  } else {
    msg->err = ERR_CONN;
 800d7a4:	69fb      	ldr	r3, [r7, #28]
 800d7a6:	22f5      	movs	r2, #245	; 0xf5
 800d7a8:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800d7aa:	69fb      	ldr	r3, [r7, #28]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	f000 8088 	beq.w	800d8c6 <lwip_netconn_do_listen+0x14a>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800d7b6:	69fb      	ldr	r3, [r7, #28]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d7c0:	2b10      	cmp	r3, #16
 800d7c2:	d17d      	bne.n	800d8c0 <lwip_netconn_do_listen+0x144>
        if (msg->conn->state == NETCONN_NONE) {
 800d7c4:	69fb      	ldr	r3, [r7, #28]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	785b      	ldrb	r3, [r3, #1]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d16f      	bne.n	800d8ae <lwip_netconn_do_listen+0x132>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 800d7ce:	69fb      	ldr	r3, [r7, #28]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	685b      	ldr	r3, [r3, #4]
 800d7d4:	7d1b      	ldrb	r3, [r3, #20]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d003      	beq.n	800d7e2 <lwip_netconn_do_listen+0x66>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 800d7da:	69fb      	ldr	r3, [r7, #28]
 800d7dc:	22fa      	movs	r2, #250	; 0xfa
 800d7de:	711a      	strb	r2, [r3, #4]
 800d7e0:	e071      	b.n	800d8c6 <lwip_netconn_do_listen+0x14a>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800d7e2:	23ff      	movs	r3, #255	; 0xff
 800d7e4:	76fb      	strb	r3, [r7, #27]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800d7e6:	69fb      	ldr	r3, [r7, #28]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	685b      	ldr	r3, [r3, #4]
 800d7ec:	f107 020f 	add.w	r2, r7, #15
 800d7f0:	7ef9      	ldrb	r1, [r7, #27]
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f002 fd9e 	bl	8010334 <tcp_listen_with_backlog_and_err>
 800d7f8:	6178      	str	r0, [r7, #20]

            if (lpcb == NULL) {
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d104      	bne.n	800d80a <lwip_netconn_do_listen+0x8e>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
 800d800:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	711a      	strb	r2, [r3, #4]
 800d808:	e05d      	b.n	800d8c6 <lwip_netconn_do_listen+0x14a>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800d80a:	69fb      	ldr	r3, [r7, #28]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	3310      	adds	r3, #16
 800d810:	4618      	mov	r0, r3
 800d812:	f00c fb14 	bl	8019e3e <sys_mbox_valid>
 800d816:	4603      	mov	r3, r0
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d00b      	beq.n	800d834 <lwip_netconn_do_listen+0xb8>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	3310      	adds	r3, #16
 800d822:	4618      	mov	r0, r3
 800d824:	f00c fa6e 	bl	8019d04 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 800d828:	69fb      	ldr	r3, [r7, #28]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	3310      	adds	r3, #16
 800d82e:	4618      	mov	r0, r3
 800d830:	f00c fb15 	bl	8019e5e <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 800d834:	69fb      	ldr	r3, [r7, #28]
 800d836:	2200      	movs	r2, #0
 800d838:	711a      	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800d83a:	69fb      	ldr	r3, [r7, #28]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	3314      	adds	r3, #20
 800d840:	4618      	mov	r0, r3
 800d842:	f00c fafc 	bl	8019e3e <sys_mbox_valid>
 800d846:	4603      	mov	r3, r0
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d10a      	bne.n	800d862 <lwip_netconn_do_listen+0xe6>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800d84c:	69fb      	ldr	r3, [r7, #28]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	3314      	adds	r3, #20
 800d852:	2106      	movs	r1, #6
 800d854:	4618      	mov	r0, r3
 800d856:	f00c fa33 	bl	8019cc0 <sys_mbox_new>
 800d85a:	4603      	mov	r3, r0
 800d85c:	461a      	mov	r2, r3
 800d85e:	69fb      	ldr	r3, [r7, #28]
 800d860:	711a      	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
 800d862:	69fb      	ldr	r3, [r7, #28]
 800d864:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d118      	bne.n	800d89e <lwip_netconn_do_listen+0x122>
                msg->conn->state = NETCONN_LISTEN;
 800d86c:	69fb      	ldr	r3, [r7, #28]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	2202      	movs	r2, #2
 800d872:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 800d874:	69fb      	ldr	r3, [r7, #28]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	697a      	ldr	r2, [r7, #20]
 800d87a:	605a      	str	r2, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800d87c:	69fb      	ldr	r3, [r7, #28]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	685a      	ldr	r2, [r3, #4]
 800d882:	69fb      	ldr	r3, [r7, #28]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	4619      	mov	r1, r3
 800d888:	4610      	mov	r0, r2
 800d88a:	f003 fc1d 	bl	80110c8 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 800d88e:	69fb      	ldr	r3, [r7, #28]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	685b      	ldr	r3, [r3, #4]
 800d894:	4919      	ldr	r1, [pc, #100]	; (800d8fc <lwip_netconn_do_listen+0x180>)
 800d896:	4618      	mov	r0, r3
 800d898:	f003 fc8a 	bl	80111b0 <tcp_accept>
 800d89c:	e013      	b.n	800d8c6 <lwip_netconn_do_listen+0x14a>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 800d89e:	6978      	ldr	r0, [r7, #20]
 800d8a0:	f002 fb88 	bl	800ffb4 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 800d8a4:	69fb      	ldr	r3, [r7, #28]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	605a      	str	r2, [r3, #4]
 800d8ac:	e00b      	b.n	800d8c6 <lwip_netconn_do_listen+0x14a>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
 800d8ae:	69fb      	ldr	r3, [r7, #28]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	785b      	ldrb	r3, [r3, #1]
 800d8b4:	2b02      	cmp	r3, #2
 800d8b6:	d106      	bne.n	800d8c6 <lwip_netconn_do_listen+0x14a>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
 800d8b8:	69fb      	ldr	r3, [r7, #28]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	711a      	strb	r2, [r3, #4]
 800d8be:	e002      	b.n	800d8c6 <lwip_netconn_do_listen+0x14a>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
 800d8c0:	69fb      	ldr	r3, [r7, #28]
 800d8c2:	22f0      	movs	r2, #240	; 0xf0
 800d8c4:	711a      	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800d8c6:	69fb      	ldr	r3, [r7, #28]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d012      	beq.n	800d8f4 <lwip_netconn_do_listen+0x178>
 800d8ce:	f00c fbcd 	bl	801a06c <sys_arch_protect>
 800d8d2:	6138      	str	r0, [r7, #16]
 800d8d4:	69fb      	ldr	r3, [r7, #28]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d8dc:	f113 0f0c 	cmn.w	r3, #12
 800d8e0:	db05      	blt.n	800d8ee <lwip_netconn_do_listen+0x172>
 800d8e2:	69fb      	ldr	r3, [r7, #28]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	69fa      	ldr	r2, [r7, #28]
 800d8e8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800d8ec:	721a      	strb	r2, [r3, #8]
 800d8ee:	6938      	ldr	r0, [r7, #16]
 800d8f0:	f00c fbca 	bl	801a088 <sys_arch_unprotect>
}
 800d8f4:	bf00      	nop
 800d8f6:	3720      	adds	r7, #32
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}
 800d8fc:	0800ccd5 	.word	0x0800ccd5

0800d900 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b086      	sub	sp, #24
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800d90c:	693b      	ldr	r3, [r7, #16]
 800d90e:	2200      	movs	r2, #0
 800d910:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800d912:	693b      	ldr	r3, [r7, #16]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	685b      	ldr	r3, [r3, #4]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d022      	beq.n	800d962 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	781b      	ldrb	r3, [r3, #0]
 800d922:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d926:	2b10      	cmp	r3, #16
 800d928:	d11b      	bne.n	800d962 <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	689b      	ldr	r3, [r3, #8]
 800d92e:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d936:	d202      	bcs.n	800d93e <lwip_netconn_do_recv+0x3e>
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	e001      	b.n	800d942 <lwip_netconn_do_recv+0x42>
 800d93e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d942:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	685b      	ldr	r3, [r3, #4]
 800d94a:	89fa      	ldrh	r2, [r7, #14]
 800d94c:	4611      	mov	r1, r2
 800d94e:	4618      	mov	r0, r3
 800d950:	f002 fdd6 	bl	8010500 <tcp_recved>
        remaining -= recved;
 800d954:	89fb      	ldrh	r3, [r7, #14]
 800d956:	697a      	ldr	r2, [r7, #20]
 800d958:	1ad3      	subs	r3, r2, r3
 800d95a:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d1e6      	bne.n	800d930 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d012      	beq.n	800d990 <lwip_netconn_do_recv+0x90>
 800d96a:	f00c fb7f 	bl	801a06c <sys_arch_protect>
 800d96e:	60b8      	str	r0, [r7, #8]
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d978:	f113 0f0c 	cmn.w	r3, #12
 800d97c:	db05      	blt.n	800d98a <lwip_netconn_do_recv+0x8a>
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	693a      	ldr	r2, [r7, #16]
 800d984:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800d988:	721a      	strb	r2, [r3, #8]
 800d98a:	68b8      	ldr	r0, [r7, #8]
 800d98c:	f00c fb7c 	bl	801a088 <sys_arch_unprotect>
}
 800d990:	bf00      	nop
 800d992:	3718      	adds	r7, #24
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}

0800d998 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b08a      	sub	sp, #40	; 0x28
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	460b      	mov	r3, r1
 800d9a2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d106      	bne.n	800d9be <lwip_netconn_do_writemore+0x26>
 800d9b0:	4b9b      	ldr	r3, [pc, #620]	; (800dc20 <lwip_netconn_do_writemore+0x288>)
 800d9b2:	f240 52e3 	movw	r2, #1507	; 0x5e3
 800d9b6:	499b      	ldr	r1, [pc, #620]	; (800dc24 <lwip_netconn_do_writemore+0x28c>)
 800d9b8:	489b      	ldr	r0, [pc, #620]	; (800dc28 <lwip_netconn_do_writemore+0x290>)
 800d9ba:	f00c fd4d 	bl	801a458 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	785b      	ldrb	r3, [r3, #1]
 800d9c2:	2b01      	cmp	r3, #1
 800d9c4:	d006      	beq.n	800d9d4 <lwip_netconn_do_writemore+0x3c>
 800d9c6:	4b96      	ldr	r3, [pc, #600]	; (800dc20 <lwip_netconn_do_writemore+0x288>)
 800d9c8:	f240 52e4 	movw	r2, #1508	; 0x5e4
 800d9cc:	4997      	ldr	r1, [pc, #604]	; (800dc2c <lwip_netconn_do_writemore+0x294>)
 800d9ce:	4896      	ldr	r0, [pc, #600]	; (800dc28 <lwip_netconn_do_writemore+0x290>)
 800d9d0:	f00c fd42 	bl	801a458 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d106      	bne.n	800d9ea <lwip_netconn_do_writemore+0x52>
 800d9dc:	4b90      	ldr	r3, [pc, #576]	; (800dc20 <lwip_netconn_do_writemore+0x288>)
 800d9de:	f240 52e5 	movw	r2, #1509	; 0x5e5
 800d9e2:	4993      	ldr	r1, [pc, #588]	; (800dc30 <lwip_netconn_do_writemore+0x298>)
 800d9e4:	4890      	ldr	r0, [pc, #576]	; (800dc28 <lwip_netconn_do_writemore+0x290>)
 800d9e6:	f00c fd37 	bl	801a458 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d106      	bne.n	800da00 <lwip_netconn_do_writemore+0x68>
 800d9f2:	4b8b      	ldr	r3, [pc, #556]	; (800dc20 <lwip_netconn_do_writemore+0x288>)
 800d9f4:	f240 52e6 	movw	r2, #1510	; 0x5e6
 800d9f8:	498e      	ldr	r1, [pc, #568]	; (800dc34 <lwip_netconn_do_writemore+0x29c>)
 800d9fa:	488b      	ldr	r0, [pc, #556]	; (800dc28 <lwip_netconn_do_writemore+0x290>)
 800d9fc:	f00c fd2c 	bl	801a458 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6a1a      	ldr	r2, [r3, #32]
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da08:	68db      	ldr	r3, [r3, #12]
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d306      	bcc.n	800da1c <lwip_netconn_do_writemore+0x84>
 800da0e:	4b84      	ldr	r3, [pc, #528]	; (800dc20 <lwip_netconn_do_writemore+0x288>)
 800da10:	f240 52e7 	movw	r2, #1511	; 0x5e7
 800da14:	4988      	ldr	r1, [pc, #544]	; (800dc38 <lwip_netconn_do_writemore+0x2a0>)
 800da16:	4884      	ldr	r0, [pc, #528]	; (800dc28 <lwip_netconn_do_writemore+0x290>)
 800da18:	f00c fd1e 	bl	801a458 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da20:	7c1b      	ldrb	r3, [r3, #16]
 800da22:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	7f1b      	ldrb	r3, [r3, #28]
 800da2a:	f003 0302 	and.w	r3, r3, #2
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d105      	bne.n	800da3e <lwip_netconn_do_writemore+0xa6>
 800da32:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800da36:	f003 0304 	and.w	r3, r3, #4
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d001      	beq.n	800da42 <lwip_netconn_do_writemore+0xaa>
 800da3e:	2301      	movs	r3, #1
 800da40:	e000      	b.n	800da44 <lwip_netconn_do_writemore+0xac>
 800da42:	2300      	movs	r3, #0
 800da44:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da4c:	689a      	ldr	r2, [r3, #8]
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6a1b      	ldr	r3, [r3, #32]
 800da52:	4413      	add	r3, r2
 800da54:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da5a:	68da      	ldr	r2, [r3, #12]
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6a1b      	ldr	r3, [r3, #32]
 800da60:	1ad3      	subs	r3, r2, r3
 800da62:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 800da64:	69bb      	ldr	r3, [r7, #24]
 800da66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da6a:	d309      	bcc.n	800da80 <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 800da6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800da70:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 800da72:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800da76:	f043 0302 	orr.w	r3, r3, #2
 800da7a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800da7e:	e001      	b.n	800da84 <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 800da80:	69bb      	ldr	r3, [r7, #24]
 800da82:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	685b      	ldr	r3, [r3, #4]
 800da88:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800da8c:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 800da8e:	8afa      	ldrh	r2, [r7, #22]
 800da90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da92:	429a      	cmp	r2, r3
 800da94:	d212      	bcs.n	800dabc <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 800da96:	8afb      	ldrh	r3, [r7, #22]
 800da98:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 800da9a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d006      	beq.n	800dab0 <lwip_netconn_do_writemore+0x118>
        if (!len) {
 800daa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d109      	bne.n	800dabc <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 800daa8:	23f9      	movs	r3, #249	; 0xf9
 800daaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 800daae:	e02a      	b.n	800db06 <lwip_netconn_do_writemore+0x16e>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 800dab0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800dab4:	f043 0302 	orr.w	r3, r3, #2
 800dab8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6a1a      	ldr	r2, [r3, #32]
 800dac0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dac2:	441a      	add	r2, r3
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dac8:	68db      	ldr	r3, [r3, #12]
 800daca:	429a      	cmp	r2, r3
 800dacc:	d906      	bls.n	800dadc <lwip_netconn_do_writemore+0x144>
 800dace:	4b54      	ldr	r3, [pc, #336]	; (800dc20 <lwip_netconn_do_writemore+0x288>)
 800dad0:	f240 6213 	movw	r2, #1555	; 0x613
 800dad4:	4959      	ldr	r1, [pc, #356]	; (800dc3c <lwip_netconn_do_writemore+0x2a4>)
 800dad6:	4854      	ldr	r0, [pc, #336]	; (800dc28 <lwip_netconn_do_writemore+0x290>)
 800dad8:	f00c fcbe 	bl	801a458 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6858      	ldr	r0, [r3, #4]
 800dae0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800dae4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dae6:	69f9      	ldr	r1, [r7, #28]
 800dae8:	f006 f926 	bl	8013d38 <tcp_write>
 800daec:	4603      	mov	r3, r0
 800daee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800daf2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d004      	beq.n	800db04 <lwip_netconn_do_writemore+0x16c>
 800dafa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dafe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db02:	d133      	bne.n	800db6c <lwip_netconn_do_writemore+0x1d4>
err_mem:
 800db04:	bf00      	nop
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 800db06:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d017      	beq.n	800db3e <lwip_netconn_do_writemore+0x1a6>
 800db0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db14:	68db      	ldr	r3, [r3, #12]
 800db16:	429a      	cmp	r2, r3
 800db18:	d211      	bcs.n	800db3e <lwip_netconn_do_writemore+0x1a6>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d005      	beq.n	800db2e <lwip_netconn_do_writemore+0x196>
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800db28:	2103      	movs	r1, #3
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	7f1b      	ldrb	r3, [r3, #28]
 800db32:	f043 0310 	orr.w	r3, r3, #16
 800db36:	b2da      	uxtb	r2, r3
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	771a      	strb	r2, [r3, #28]
 800db3c:	e016      	b.n	800db6c <lwip_netconn_do_writemore+0x1d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	685b      	ldr	r3, [r3, #4]
 800db42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800db46:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800db4a:	d305      	bcc.n	800db58 <lwip_netconn_do_writemore+0x1c0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800db54:	2b04      	cmp	r3, #4
 800db56:	d909      	bls.n	800db6c <lwip_netconn_do_writemore+0x1d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d005      	beq.n	800db6c <lwip_netconn_do_writemore+0x1d4>
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800db66:	2103      	movs	r1, #3
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800db6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800db70:	2b00      	cmp	r3, #0
 800db72:	d134      	bne.n	800dbde <lwip_netconn_do_writemore+0x246>
      err_t out_err;
      conn->write_offset += len;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6a1a      	ldr	r2, [r3, #32]
 800db78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db7a:	441a      	add	r2, r3
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6a1a      	ldr	r2, [r3, #32]
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db88:	68db      	ldr	r3, [r3, #12]
 800db8a:	429a      	cmp	r2, r3
 800db8c:	d003      	beq.n	800db96 <lwip_netconn_do_writemore+0x1fe>
 800db8e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800db92:	2b00      	cmp	r3, #0
 800db94:	d007      	beq.n	800dba6 <lwip_netconn_do_writemore+0x20e>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db9a:	687a      	ldr	r2, [r7, #4]
 800db9c:	6a12      	ldr	r2, [r2, #32]
 800db9e:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 800dba0:	2301      	movs	r3, #1
 800dba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f006 fd76 	bl	801469c <tcp_output>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800dbb4:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800dbb8:	f113 0f0c 	cmn.w	r3, #12
 800dbbc:	db04      	blt.n	800dbc8 <lwip_netconn_do_writemore+0x230>
 800dbbe:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800dbc2:	f113 0f04 	cmn.w	r3, #4
 800dbc6:	d151      	bne.n	800dc6c <lwip_netconn_do_writemore+0x2d4>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800dbc8:	7d3b      	ldrb	r3, [r7, #20]
 800dbca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800dbce:	2301      	movs	r3, #1
 800dbd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbd8:	2200      	movs	r2, #0
 800dbda:	60da      	str	r2, [r3, #12]
 800dbdc:	e046      	b.n	800dc6c <lwip_netconn_do_writemore+0x2d4>
      }
    } else if (err == ERR_MEM) {
 800dbde:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dbe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbe6:	d13a      	bne.n	800dc5e <lwip_netconn_do_writemore+0x2c6>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	685b      	ldr	r3, [r3, #4]
 800dbec:	4618      	mov	r0, r3
 800dbee:	f006 fd55 	bl	801469c <tcp_output>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800dbf6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800dbfa:	f113 0f0c 	cmn.w	r3, #12
 800dbfe:	db04      	blt.n	800dc0a <lwip_netconn_do_writemore+0x272>
 800dc00:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800dc04:	f113 0f04 	cmn.w	r3, #4
 800dc08:	d11a      	bne.n	800dc40 <lwip_netconn_do_writemore+0x2a8>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800dc0a:	7d7b      	ldrb	r3, [r7, #21]
 800dc0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800dc10:	2301      	movs	r3, #1
 800dc12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	60da      	str	r2, [r3, #12]
 800dc1e:	e025      	b.n	800dc6c <lwip_netconn_do_writemore+0x2d4>
 800dc20:	0801bbf8 	.word	0x0801bbf8
 800dc24:	0801bd1c 	.word	0x0801bd1c
 800dc28:	0801bc50 	.word	0x0801bc50
 800dc2c:	0801bffc 	.word	0x0801bffc
 800dc30:	0801bd2c 	.word	0x0801bd2c
 800dc34:	0801c01c 	.word	0x0801c01c
 800dc38:	0801c034 	.word	0x0801c034
 800dc3c:	0801c068 	.word	0x0801c068
      } else if (dontblock) {
 800dc40:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d011      	beq.n	800dc6c <lwip_netconn_do_writemore+0x2d4>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 800dc48:	23f9      	movs	r3, #249	; 0xf9
 800dc4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800dc4e:	2301      	movs	r3, #1
 800dc50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc58:	2200      	movs	r2, #0
 800dc5a:	60da      	str	r2, [r3, #12]
 800dc5c:	e006      	b.n	800dc6c <lwip_netconn_do_writemore+0x2d4>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800dc5e:	2301      	movs	r3, #1
 800dc60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc68:	2200      	movs	r2, #0
 800dc6a:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 800dc6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d02c      	beq.n	800dcce <lwip_netconn_do_writemore+0x336>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	330c      	adds	r3, #12
 800dc7c:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc82:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dc86:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2200      	movs	r2, #0
 800dc92:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2200      	movs	r2, #0
 800dc98:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d00f      	beq.n	800dcc0 <lwip_netconn_do_writemore+0x328>
 800dca0:	f00c f9e4 	bl	801a06c <sys_arch_protect>
 800dca4:	60f8      	str	r0, [r7, #12]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800dcac:	f113 0f0c 	cmn.w	r3, #12
 800dcb0:	db03      	blt.n	800dcba <lwip_netconn_do_writemore+0x322>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dcb8:	721a      	strb	r2, [r3, #8]
 800dcba:	68f8      	ldr	r0, [r7, #12]
 800dcbc:	f00c f9e4 	bl	801a088 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800dcc0:	78fb      	ldrb	r3, [r7, #3]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d006      	beq.n	800dcd4 <lwip_netconn_do_writemore+0x33c>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800dcc6:	6938      	ldr	r0, [r7, #16]
 800dcc8:	f00c f92e 	bl	8019f28 <sys_sem_signal>
 800dccc:	e002      	b.n	800dcd4 <lwip_netconn_do_writemore+0x33c>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800dcce:	f04f 33ff 	mov.w	r3, #4294967295
 800dcd2:	e000      	b.n	800dcd6 <lwip_netconn_do_writemore+0x33e>
  }
#endif
  return ERR_OK;
 800dcd4:	2300      	movs	r3, #0
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3728      	adds	r7, #40	; 0x28
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
 800dcde:	bf00      	nop

0800dce0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b084      	sub	sp, #16
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800dcf4:	f113 0f0c 	cmn.w	r3, #12
 800dcf8:	da06      	bge.n	800dd08 <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	711a      	strb	r2, [r3, #4]
 800dd06:	e072      	b.n	800ddee <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dd12:	2b10      	cmp	r3, #16
 800dd14:	d168      	bne.n	800dde8 <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	785b      	ldrb	r3, [r3, #1]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d003      	beq.n	800dd28 <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	22fb      	movs	r2, #251	; 0xfb
 800dd24:	711a      	strb	r2, [r3, #4]
 800dd26:	e062      	b.n	800ddee <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d056      	beq.n	800dde0 <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	2201      	movs	r2, #1
 800dd38:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d104      	bne.n	800dd4e <lwip_netconn_do_write+0x6e>
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	6a1b      	ldr	r3, [r3, #32]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d006      	beq.n	800dd5c <lwip_netconn_do_write+0x7c>
 800dd4e:	4b36      	ldr	r3, [pc, #216]	; (800de28 <lwip_netconn_do_write+0x148>)
 800dd50:	f240 6282 	movw	r2, #1666	; 0x682
 800dd54:	4935      	ldr	r1, [pc, #212]	; (800de2c <lwip_netconn_do_write+0x14c>)
 800dd56:	4836      	ldr	r0, [pc, #216]	; (800de30 <lwip_netconn_do_write+0x150>)
 800dd58:	f00c fb7e 	bl	801a458 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	68db      	ldr	r3, [r3, #12]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d106      	bne.n	800dd72 <lwip_netconn_do_write+0x92>
 800dd64:	4b30      	ldr	r3, [pc, #192]	; (800de28 <lwip_netconn_do_write+0x148>)
 800dd66:	f240 6284 	movw	r2, #1668	; 0x684
 800dd6a:	4932      	ldr	r1, [pc, #200]	; (800de34 <lwip_netconn_do_write+0x154>)
 800dd6c:	4830      	ldr	r0, [pc, #192]	; (800de30 <lwip_netconn_do_write+0x150>)
 800dd6e:	f00c fb73 	bl	801a458 <iprintf>
        msg->conn->current_msg = msg;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	68fa      	ldr	r2, [r7, #12]
 800dd78:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	2100      	movs	r1, #0
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7ff fe05 	bl	800d998 <lwip_netconn_do_writemore>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d044      	beq.n	800de1e <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	785b      	ldrb	r3, [r3, #1]
 800dd9a:	2b01      	cmp	r3, #1
 800dd9c:	d006      	beq.n	800ddac <lwip_netconn_do_write+0xcc>
 800dd9e:	4b22      	ldr	r3, [pc, #136]	; (800de28 <lwip_netconn_do_write+0x148>)
 800dda0:	f240 6289 	movw	r2, #1673	; 0x689
 800dda4:	4924      	ldr	r1, [pc, #144]	; (800de38 <lwip_netconn_do_write+0x158>)
 800dda6:	4822      	ldr	r0, [pc, #136]	; (800de30 <lwip_netconn_do_write+0x150>)
 800dda8:	f00c fb56 	bl	801a458 <iprintf>
          UNLOCK_TCPIP_CORE();
 800ddac:	4823      	ldr	r0, [pc, #140]	; (800de3c <lwip_netconn_do_write+0x15c>)
 800ddae:	f00c f92a 	bl	801a006 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	330c      	adds	r3, #12
 800ddb8:	2100      	movs	r1, #0
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f00c f883 	bl	8019ec6 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800ddc0:	481e      	ldr	r0, [pc, #120]	; (800de3c <lwip_netconn_do_write+0x15c>)
 800ddc2:	f00c f911 	bl	8019fe8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	785b      	ldrb	r3, [r3, #1]
 800ddcc:	2b01      	cmp	r3, #1
 800ddce:	d126      	bne.n	800de1e <lwip_netconn_do_write+0x13e>
 800ddd0:	4b15      	ldr	r3, [pc, #84]	; (800de28 <lwip_netconn_do_write+0x148>)
 800ddd2:	f240 628d 	movw	r2, #1677	; 0x68d
 800ddd6:	4918      	ldr	r1, [pc, #96]	; (800de38 <lwip_netconn_do_write+0x158>)
 800ddd8:	4815      	ldr	r0, [pc, #84]	; (800de30 <lwip_netconn_do_write+0x150>)
 800ddda:	f00c fb3d 	bl	801a458 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800ddde:	e01e      	b.n	800de1e <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	22f5      	movs	r2, #245	; 0xf5
 800dde4:	711a      	strb	r2, [r3, #4]
 800dde6:	e002      	b.n	800ddee <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	22fa      	movs	r2, #250	; 0xfa
 800ddec:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d014      	beq.n	800de20 <lwip_netconn_do_write+0x140>
 800ddf6:	f00c f939 	bl	801a06c <sys_arch_protect>
 800ddfa:	60b8      	str	r0, [r7, #8]
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800de04:	f113 0f0c 	cmn.w	r3, #12
 800de08:	db05      	blt.n	800de16 <lwip_netconn_do_write+0x136>
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	68fa      	ldr	r2, [r7, #12]
 800de10:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800de14:	721a      	strb	r2, [r3, #8]
 800de16:	68b8      	ldr	r0, [r7, #8]
 800de18:	f00c f936 	bl	801a088 <sys_arch_unprotect>
 800de1c:	e000      	b.n	800de20 <lwip_netconn_do_write+0x140>
        return;
 800de1e:	bf00      	nop
}
 800de20:	3710      	adds	r7, #16
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}
 800de26:	bf00      	nop
 800de28:	0801bbf8 	.word	0x0801bbf8
 800de2c:	0801bf40 	.word	0x0801bf40
 800de30:	0801bc50 	.word	0x0801bc50
 800de34:	0801c094 	.word	0x0801c094
 800de38:	0801bf5c 	.word	0x0801bf5c
 800de3c:	2000928c 	.word	0x2000928c

0800de40 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b086      	sub	sp, #24
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800de4c:	697b      	ldr	r3, [r7, #20]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	785b      	ldrb	r3, [r3, #1]
 800de52:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	685b      	ldr	r3, [r3, #4]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d06e      	beq.n	800df3c <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800de68:	2b10      	cmp	r3, #16
 800de6a:	d167      	bne.n	800df3c <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800de70:	2b03      	cmp	r3, #3
 800de72:	d002      	beq.n	800de7a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800de74:	7cfb      	ldrb	r3, [r7, #19]
 800de76:	2b02      	cmp	r3, #2
 800de78:	d060      	beq.n	800df3c <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800de7a:	7cfb      	ldrb	r3, [r7, #19]
 800de7c:	2b03      	cmp	r3, #3
 800de7e:	d103      	bne.n	800de88 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	22f5      	movs	r2, #245	; 0xf5
 800de84:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800de86:	e05c      	b.n	800df42 <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 800de88:	7cfb      	ldrb	r3, [r7, #19]
 800de8a:	2b01      	cmp	r3, #1
 800de8c:	d103      	bne.n	800de96 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	22fb      	movs	r2, #251	; 0xfb
 800de92:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800de94:	e055      	b.n	800df42 <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	7a1b      	ldrb	r3, [r3, #8]
 800de9a:	f003 0301 	and.w	r3, r3, #1
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d004      	beq.n	800deac <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7ff f908 	bl	800d0bc <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800deac:	697b      	ldr	r3, [r7, #20]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d104      	bne.n	800dec0 <lwip_netconn_do_close+0x80>
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	6a1b      	ldr	r3, [r3, #32]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d006      	beq.n	800dece <lwip_netconn_do_close+0x8e>
 800dec0:	4b2e      	ldr	r3, [pc, #184]	; (800df7c <lwip_netconn_do_close+0x13c>)
 800dec2:	f240 721b 	movw	r2, #1819	; 0x71b
 800dec6:	492e      	ldr	r1, [pc, #184]	; (800df80 <lwip_netconn_do_close+0x140>)
 800dec8:	482e      	ldr	r0, [pc, #184]	; (800df84 <lwip_netconn_do_close+0x144>)
 800deca:	f00c fac5 	bl	801a458 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	2204      	movs	r2, #4
 800ded4:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	697a      	ldr	r2, [r7, #20]
 800dedc:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	2100      	movs	r1, #0
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7ff f969 	bl	800d1bc <lwip_netconn_do_close_internal>
 800deea:	4603      	mov	r3, r0
 800deec:	2b00      	cmp	r3, #0
 800deee:	d040      	beq.n	800df72 <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	785b      	ldrb	r3, [r3, #1]
 800def6:	2b04      	cmp	r3, #4
 800def8:	d006      	beq.n	800df08 <lwip_netconn_do_close+0xc8>
 800defa:	4b20      	ldr	r3, [pc, #128]	; (800df7c <lwip_netconn_do_close+0x13c>)
 800defc:	f240 7221 	movw	r2, #1825	; 0x721
 800df00:	4921      	ldr	r1, [pc, #132]	; (800df88 <lwip_netconn_do_close+0x148>)
 800df02:	4820      	ldr	r0, [pc, #128]	; (800df84 <lwip_netconn_do_close+0x144>)
 800df04:	f00c faa8 	bl	801a458 <iprintf>
        UNLOCK_TCPIP_CORE();
 800df08:	4820      	ldr	r0, [pc, #128]	; (800df8c <lwip_netconn_do_close+0x14c>)
 800df0a:	f00c f87c 	bl	801a006 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	330c      	adds	r3, #12
 800df14:	2100      	movs	r1, #0
 800df16:	4618      	mov	r0, r3
 800df18:	f00b ffd5 	bl	8019ec6 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800df1c:	481b      	ldr	r0, [pc, #108]	; (800df8c <lwip_netconn_do_close+0x14c>)
 800df1e:	f00c f863 	bl	8019fe8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	785b      	ldrb	r3, [r3, #1]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d022      	beq.n	800df72 <lwip_netconn_do_close+0x132>
 800df2c:	4b13      	ldr	r3, [pc, #76]	; (800df7c <lwip_netconn_do_close+0x13c>)
 800df2e:	f240 7225 	movw	r2, #1829	; 0x725
 800df32:	4915      	ldr	r1, [pc, #84]	; (800df88 <lwip_netconn_do_close+0x148>)
 800df34:	4813      	ldr	r0, [pc, #76]	; (800df84 <lwip_netconn_do_close+0x144>)
 800df36:	f00c fa8f 	bl	801a458 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800df3a:	e01a      	b.n	800df72 <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	22f5      	movs	r2, #245	; 0xf5
 800df40:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d014      	beq.n	800df74 <lwip_netconn_do_close+0x134>
 800df4a:	f00c f88f 	bl	801a06c <sys_arch_protect>
 800df4e:	60f8      	str	r0, [r7, #12]
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800df58:	f113 0f0c 	cmn.w	r3, #12
 800df5c:	db05      	blt.n	800df6a <lwip_netconn_do_close+0x12a>
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	697a      	ldr	r2, [r7, #20]
 800df64:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800df68:	721a      	strb	r2, [r3, #8]
 800df6a:	68f8      	ldr	r0, [r7, #12]
 800df6c:	f00c f88c 	bl	801a088 <sys_arch_unprotect>
 800df70:	e000      	b.n	800df74 <lwip_netconn_do_close+0x134>
      return;
 800df72:	bf00      	nop
}
 800df74:	3718      	adds	r7, #24
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
 800df7a:	bf00      	nop
 800df7c:	0801bbf8 	.word	0x0801bbf8
 800df80:	0801bf40 	.word	0x0801bf40
 800df84:	0801bc50 	.word	0x0801bc50
 800df88:	0801bf5c 	.word	0x0801bf5c
 800df8c:	2000928c 	.word	0x2000928c

0800df90 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b082      	sub	sp, #8
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d013      	beq.n	800dfc6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d00b      	beq.n	800dfbe <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f001 fbba 	bl	800f724 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	605a      	str	r2, [r3, #4]
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	685a      	ldr	r2, [r3, #4]
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800dfbe:	6879      	ldr	r1, [r7, #4]
 800dfc0:	2006      	movs	r0, #6
 800dfc2:	f000 fded 	bl	800eba0 <memp_free>
  }
}
 800dfc6:	bf00      	nop
 800dfc8:	3708      	adds	r7, #8
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}
	...

0800dfd0 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d108      	bne.n	800dff0 <netbuf_next+0x20>
 800dfde:	4b11      	ldr	r3, [pc, #68]	; (800e024 <netbuf_next+0x54>)
 800dfe0:	22dc      	movs	r2, #220	; 0xdc
 800dfe2:	4911      	ldr	r1, [pc, #68]	; (800e028 <netbuf_next+0x58>)
 800dfe4:	4811      	ldr	r0, [pc, #68]	; (800e02c <netbuf_next+0x5c>)
 800dfe6:	f00c fa37 	bl	801a458 <iprintf>
 800dfea:	f04f 33ff 	mov.w	r3, #4294967295
 800dfee:	e014      	b.n	800e01a <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	685b      	ldr	r3, [r3, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d102      	bne.n	800e000 <netbuf_next+0x30>
    return -1;
 800dffa:	f04f 33ff 	mov.w	r3, #4294967295
 800dffe:	e00c      	b.n	800e01a <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	681a      	ldr	r2, [r3, #0]
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	685b      	ldr	r3, [r3, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d101      	bne.n	800e018 <netbuf_next+0x48>
    return 1;
 800e014:	2301      	movs	r3, #1
 800e016:	e000      	b.n	800e01a <netbuf_next+0x4a>
  }
  return 0;
 800e018:	2300      	movs	r3, #0
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	3708      	adds	r7, #8
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}
 800e022:	bf00      	nop
 800e024:	0801c0c0 	.word	0x0801c0c0
 800e028:	0801c220 	.word	0x0801c220
 800e02c:	0801c110 	.word	0x0801c110

0800e030 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b084      	sub	sp, #16
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800e038:	4b2b      	ldr	r3, [pc, #172]	; (800e0e8 <tcpip_thread+0xb8>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d005      	beq.n	800e04c <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800e040:	4b29      	ldr	r3, [pc, #164]	; (800e0e8 <tcpip_thread+0xb8>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	4a29      	ldr	r2, [pc, #164]	; (800e0ec <tcpip_thread+0xbc>)
 800e046:	6812      	ldr	r2, [r2, #0]
 800e048:	4610      	mov	r0, r2
 800e04a:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800e04c:	4828      	ldr	r0, [pc, #160]	; (800e0f0 <tcpip_thread+0xc0>)
 800e04e:	f00b ffcb 	bl	8019fe8 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800e052:	4827      	ldr	r0, [pc, #156]	; (800e0f0 <tcpip_thread+0xc0>)
 800e054:	f00b ffd7 	bl	801a006 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800e058:	f107 030c 	add.w	r3, r7, #12
 800e05c:	4619      	mov	r1, r3
 800e05e:	4825      	ldr	r0, [pc, #148]	; (800e0f4 <tcpip_thread+0xc4>)
 800e060:	f007 f962 	bl	8015328 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800e064:	4822      	ldr	r0, [pc, #136]	; (800e0f0 <tcpip_thread+0xc0>)
 800e066:	f00b ffbf 	bl	8019fe8 <sys_mutex_lock>
    if (msg == NULL) {
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d106      	bne.n	800e07e <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e070:	4b21      	ldr	r3, [pc, #132]	; (800e0f8 <tcpip_thread+0xc8>)
 800e072:	2269      	movs	r2, #105	; 0x69
 800e074:	4921      	ldr	r1, [pc, #132]	; (800e0fc <tcpip_thread+0xcc>)
 800e076:	4822      	ldr	r0, [pc, #136]	; (800e100 <tcpip_thread+0xd0>)
 800e078:	f00c f9ee 	bl	801a458 <iprintf>
      continue;
 800e07c:	e032      	b.n	800e0e4 <tcpip_thread+0xb4>
    }
    switch (msg->type) {
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	2b04      	cmp	r3, #4
 800e084:	d020      	beq.n	800e0c8 <tcpip_thread+0x98>
 800e086:	2b04      	cmp	r3, #4
 800e088:	dc25      	bgt.n	800e0d6 <tcpip_thread+0xa6>
 800e08a:	2b02      	cmp	r3, #2
 800e08c:	d002      	beq.n	800e094 <tcpip_thread+0x64>
 800e08e:	2b03      	cmp	r3, #3
 800e090:	d00e      	beq.n	800e0b0 <tcpip_thread+0x80>
 800e092:	e020      	b.n	800e0d6 <tcpip_thread+0xa6>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	68db      	ldr	r3, [r3, #12]
 800e098:	68fa      	ldr	r2, [r7, #12]
 800e09a:	6850      	ldr	r0, [r2, #4]
 800e09c:	68fa      	ldr	r2, [r7, #12]
 800e09e:	6892      	ldr	r2, [r2, #8]
 800e0a0:	4611      	mov	r1, r2
 800e0a2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	4619      	mov	r1, r3
 800e0a8:	2009      	movs	r0, #9
 800e0aa:	f000 fd79 	bl	800eba0 <memp_free>
      break;
 800e0ae:	e019      	b.n	800e0e4 <tcpip_thread+0xb4>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	68fa      	ldr	r2, [r7, #12]
 800e0b6:	6892      	ldr	r2, [r2, #8]
 800e0b8:	4610      	mov	r0, r2
 800e0ba:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	4619      	mov	r1, r3
 800e0c0:	2008      	movs	r0, #8
 800e0c2:	f000 fd6d 	bl	800eba0 <memp_free>
      break;
 800e0c6:	e00d      	b.n	800e0e4 <tcpip_thread+0xb4>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	685b      	ldr	r3, [r3, #4]
 800e0cc:	68fa      	ldr	r2, [r7, #12]
 800e0ce:	6892      	ldr	r2, [r2, #8]
 800e0d0:	4610      	mov	r0, r2
 800e0d2:	4798      	blx	r3
      break;
 800e0d4:	e006      	b.n	800e0e4 <tcpip_thread+0xb4>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e0d6:	4b08      	ldr	r3, [pc, #32]	; (800e0f8 <tcpip_thread+0xc8>)
 800e0d8:	229b      	movs	r2, #155	; 0x9b
 800e0da:	4908      	ldr	r1, [pc, #32]	; (800e0fc <tcpip_thread+0xcc>)
 800e0dc:	4808      	ldr	r0, [pc, #32]	; (800e100 <tcpip_thread+0xd0>)
 800e0de:	f00c f9bb 	bl	801a458 <iprintf>
      break;
 800e0e2:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 800e0e4:	e7b5      	b.n	800e052 <tcpip_thread+0x22>
 800e0e6:	bf00      	nop
 800e0e8:	20009280 	.word	0x20009280
 800e0ec:	20009284 	.word	0x20009284
 800e0f0:	2000928c 	.word	0x2000928c
 800e0f4:	20009288 	.word	0x20009288
 800e0f8:	0801c258 	.word	0x0801c258
 800e0fc:	0801c288 	.word	0x0801c288
 800e100:	0801c2a8 	.word	0x0801c2a8

0800e104 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b086      	sub	sp, #24
 800e108:	af00      	add	r7, sp, #0
 800e10a:	60f8      	str	r0, [r7, #12]
 800e10c:	60b9      	str	r1, [r7, #8]
 800e10e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800e110:	481a      	ldr	r0, [pc, #104]	; (800e17c <tcpip_inpkt+0x78>)
 800e112:	f00b fe94 	bl	8019e3e <sys_mbox_valid>
 800e116:	4603      	mov	r3, r0
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d105      	bne.n	800e128 <tcpip_inpkt+0x24>
 800e11c:	4b18      	ldr	r3, [pc, #96]	; (800e180 <tcpip_inpkt+0x7c>)
 800e11e:	22b5      	movs	r2, #181	; 0xb5
 800e120:	4918      	ldr	r1, [pc, #96]	; (800e184 <tcpip_inpkt+0x80>)
 800e122:	4819      	ldr	r0, [pc, #100]	; (800e188 <tcpip_inpkt+0x84>)
 800e124:	f00c f998 	bl	801a458 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800e128:	2009      	movs	r0, #9
 800e12a:	f000 fce7 	bl	800eafc <memp_malloc>
 800e12e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d102      	bne.n	800e13c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800e136:	f04f 33ff 	mov.w	r3, #4294967295
 800e13a:	e01a      	b.n	800e172 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	2202      	movs	r2, #2
 800e140:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	68fa      	ldr	r2, [r7, #12]
 800e146:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	68ba      	ldr	r2, [r7, #8]
 800e14c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	687a      	ldr	r2, [r7, #4]
 800e152:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800e154:	6979      	ldr	r1, [r7, #20]
 800e156:	4809      	ldr	r0, [pc, #36]	; (800e17c <tcpip_inpkt+0x78>)
 800e158:	f00b fdfc 	bl	8019d54 <sys_mbox_trypost>
 800e15c:	4603      	mov	r3, r0
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d006      	beq.n	800e170 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e162:	6979      	ldr	r1, [r7, #20]
 800e164:	2009      	movs	r0, #9
 800e166:	f000 fd1b 	bl	800eba0 <memp_free>
    return ERR_MEM;
 800e16a:	f04f 33ff 	mov.w	r3, #4294967295
 800e16e:	e000      	b.n	800e172 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800e170:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800e172:	4618      	mov	r0, r3
 800e174:	3718      	adds	r7, #24
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}
 800e17a:	bf00      	nop
 800e17c:	20009288 	.word	0x20009288
 800e180:	0801c258 	.word	0x0801c258
 800e184:	0801c2d0 	.word	0x0801c2d0
 800e188:	0801c2a8 	.word	0x0801c2a8

0800e18c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b082      	sub	sp, #8
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800e19c:	f003 0318 	and.w	r3, r3, #24
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d006      	beq.n	800e1b2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800e1a4:	4a08      	ldr	r2, [pc, #32]	; (800e1c8 <tcpip_input+0x3c>)
 800e1a6:	6839      	ldr	r1, [r7, #0]
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f7ff ffab 	bl	800e104 <tcpip_inpkt>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	e005      	b.n	800e1be <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800e1b2:	4a06      	ldr	r2, [pc, #24]	; (800e1cc <tcpip_input+0x40>)
 800e1b4:	6839      	ldr	r1, [r7, #0]
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f7ff ffa4 	bl	800e104 <tcpip_inpkt>
 800e1bc:	4603      	mov	r3, r0
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3708      	adds	r7, #8
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}
 800e1c6:	bf00      	nop
 800e1c8:	08019b05 	.word	0x08019b05
 800e1cc:	08018a85 	.word	0x08018a85

0800e1d0 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b086      	sub	sp, #24
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	60f8      	str	r0, [r7, #12]
 800e1d8:	60b9      	str	r1, [r7, #8]
 800e1da:	4613      	mov	r3, r2
 800e1dc:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800e1de:	481d      	ldr	r0, [pc, #116]	; (800e254 <tcpip_callback_with_block+0x84>)
 800e1e0:	f00b fe2d 	bl	8019e3e <sys_mbox_valid>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d105      	bne.n	800e1f6 <tcpip_callback_with_block+0x26>
 800e1ea:	4b1b      	ldr	r3, [pc, #108]	; (800e258 <tcpip_callback_with_block+0x88>)
 800e1ec:	22ee      	movs	r2, #238	; 0xee
 800e1ee:	491b      	ldr	r1, [pc, #108]	; (800e25c <tcpip_callback_with_block+0x8c>)
 800e1f0:	481b      	ldr	r0, [pc, #108]	; (800e260 <tcpip_callback_with_block+0x90>)
 800e1f2:	f00c f931 	bl	801a458 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800e1f6:	2008      	movs	r0, #8
 800e1f8:	f000 fc80 	bl	800eafc <memp_malloc>
 800e1fc:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d102      	bne.n	800e20a <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 800e204:	f04f 33ff 	mov.w	r3, #4294967295
 800e208:	e01f      	b.n	800e24a <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	2203      	movs	r2, #3
 800e20e:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	68fa      	ldr	r2, [r7, #12]
 800e214:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	68ba      	ldr	r2, [r7, #8]
 800e21a:	609a      	str	r2, [r3, #8]
  if (block) {
 800e21c:	79fb      	ldrb	r3, [r7, #7]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d004      	beq.n	800e22c <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 800e222:	6979      	ldr	r1, [r7, #20]
 800e224:	480b      	ldr	r0, [pc, #44]	; (800e254 <tcpip_callback_with_block+0x84>)
 800e226:	f00b fd7f 	bl	8019d28 <sys_mbox_post>
 800e22a:	e00d      	b.n	800e248 <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800e22c:	6979      	ldr	r1, [r7, #20]
 800e22e:	4809      	ldr	r0, [pc, #36]	; (800e254 <tcpip_callback_with_block+0x84>)
 800e230:	f00b fd90 	bl	8019d54 <sys_mbox_trypost>
 800e234:	4603      	mov	r3, r0
 800e236:	2b00      	cmp	r3, #0
 800e238:	d006      	beq.n	800e248 <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800e23a:	6979      	ldr	r1, [r7, #20]
 800e23c:	2008      	movs	r0, #8
 800e23e:	f000 fcaf 	bl	800eba0 <memp_free>
      return ERR_MEM;
 800e242:	f04f 33ff 	mov.w	r3, #4294967295
 800e246:	e000      	b.n	800e24a <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800e248:	2300      	movs	r3, #0
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3718      	adds	r7, #24
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}
 800e252:	bf00      	nop
 800e254:	20009288 	.word	0x20009288
 800e258:	0801c258 	.word	0x0801c258
 800e25c:	0801c2d0 	.word	0x0801c2d0
 800e260:	0801c2a8 	.word	0x0801c2a8

0800e264 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b084      	sub	sp, #16
 800e268:	af00      	add	r7, sp, #0
 800e26a:	60f8      	str	r0, [r7, #12]
 800e26c:	60b9      	str	r1, [r7, #8]
 800e26e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800e270:	4806      	ldr	r0, [pc, #24]	; (800e28c <tcpip_send_msg_wait_sem+0x28>)
 800e272:	f00b feb9 	bl	8019fe8 <sys_mutex_lock>
  fn(apimsg);
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	68b8      	ldr	r0, [r7, #8]
 800e27a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800e27c:	4803      	ldr	r0, [pc, #12]	; (800e28c <tcpip_send_msg_wait_sem+0x28>)
 800e27e:	f00b fec2 	bl	801a006 <sys_mutex_unlock>
  return ERR_OK;
 800e282:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800e284:	4618      	mov	r0, r3
 800e286:	3710      	adds	r7, #16
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}
 800e28c:	2000928c 	.word	0x2000928c

0800e290 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b084      	sub	sp, #16
 800e294:	af02      	add	r7, sp, #8
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	6039      	str	r1, [r7, #0]
  lwip_init();
 800e29a:	f000 f868 	bl	800e36e <lwip_init>

  tcpip_init_done = initfunc;
 800e29e:	4a17      	ldr	r2, [pc, #92]	; (800e2fc <tcpip_init+0x6c>)
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800e2a4:	4a16      	ldr	r2, [pc, #88]	; (800e300 <tcpip_init+0x70>)
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800e2aa:	2106      	movs	r1, #6
 800e2ac:	4815      	ldr	r0, [pc, #84]	; (800e304 <tcpip_init+0x74>)
 800e2ae:	f00b fd07 	bl	8019cc0 <sys_mbox_new>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d006      	beq.n	800e2c6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800e2b8:	4b13      	ldr	r3, [pc, #76]	; (800e308 <tcpip_init+0x78>)
 800e2ba:	f240 12d5 	movw	r2, #469	; 0x1d5
 800e2be:	4913      	ldr	r1, [pc, #76]	; (800e30c <tcpip_init+0x7c>)
 800e2c0:	4813      	ldr	r0, [pc, #76]	; (800e310 <tcpip_init+0x80>)
 800e2c2:	f00c f8c9 	bl	801a458 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800e2c6:	4813      	ldr	r0, [pc, #76]	; (800e314 <tcpip_init+0x84>)
 800e2c8:	f00b fe72 	bl	8019fb0 <sys_mutex_new>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d006      	beq.n	800e2e0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800e2d2:	4b0d      	ldr	r3, [pc, #52]	; (800e308 <tcpip_init+0x78>)
 800e2d4:	f240 12d9 	movw	r2, #473	; 0x1d9
 800e2d8:	490f      	ldr	r1, [pc, #60]	; (800e318 <tcpip_init+0x88>)
 800e2da:	480d      	ldr	r0, [pc, #52]	; (800e310 <tcpip_init+0x80>)
 800e2dc:	f00c f8bc 	bl	801a458 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	9300      	str	r3, [sp, #0]
 800e2e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	490c      	ldr	r1, [pc, #48]	; (800e31c <tcpip_init+0x8c>)
 800e2ec:	480c      	ldr	r0, [pc, #48]	; (800e320 <tcpip_init+0x90>)
 800e2ee:	f00b fe97 	bl	801a020 <sys_thread_new>
}
 800e2f2:	bf00      	nop
 800e2f4:	3708      	adds	r7, #8
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}
 800e2fa:	bf00      	nop
 800e2fc:	20009280 	.word	0x20009280
 800e300:	20009284 	.word	0x20009284
 800e304:	20009288 	.word	0x20009288
 800e308:	0801c258 	.word	0x0801c258
 800e30c:	0801c2e0 	.word	0x0801c2e0
 800e310:	0801c2a8 	.word	0x0801c2a8
 800e314:	2000928c 	.word	0x2000928c
 800e318:	0801c304 	.word	0x0801c304
 800e31c:	0800e031 	.word	0x0800e031
 800e320:	0801c328 	.word	0x0801c328

0800e324 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800e324:	b480      	push	{r7}
 800e326:	b083      	sub	sp, #12
 800e328:	af00      	add	r7, sp, #0
 800e32a:	4603      	mov	r3, r0
 800e32c:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800e32e:	88fb      	ldrh	r3, [r7, #6]
 800e330:	ba5b      	rev16	r3, r3
 800e332:	b29b      	uxth	r3, r3
}
 800e334:	4618      	mov	r0, r3
 800e336:	370c      	adds	r7, #12
 800e338:	46bd      	mov	sp, r7
 800e33a:	bc80      	pop	{r7}
 800e33c:	4770      	bx	lr

0800e33e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800e33e:	b480      	push	{r7}
 800e340:	b083      	sub	sp, #12
 800e342:	af00      	add	r7, sp, #0
 800e344:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	061a      	lsls	r2, r3, #24
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	021b      	lsls	r3, r3, #8
 800e34e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e352:	431a      	orrs	r2, r3
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	0a1b      	lsrs	r3, r3, #8
 800e358:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e35c:	431a      	orrs	r2, r3
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	0e1b      	lsrs	r3, r3, #24
 800e362:	4313      	orrs	r3, r2
}
 800e364:	4618      	mov	r0, r3
 800e366:	370c      	adds	r7, #12
 800e368:	46bd      	mov	sp, r7
 800e36a:	bc80      	pop	{r7}
 800e36c:	4770      	bx	lr

0800e36e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800e36e:	b580      	push	{r7, lr}
 800e370:	b082      	sub	sp, #8
 800e372:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800e374:	2300      	movs	r3, #0
 800e376:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800e378:	f00b fe0c 	bl	8019f94 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800e37c:	f000 f8a6 	bl	800e4cc <mem_init>
  memp_init();
 800e380:	f000 fb70 	bl	800ea64 <memp_init>
  pbuf_init();
  netif_init();
 800e384:	f000 fc36 	bl	800ebf4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800e388:	f006 fff4 	bl	8015374 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800e38c:	f001 fc4e 	bl	800fc2c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800e390:	f006 fe86 	bl	80150a0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800e394:	bf00      	nop
 800e396:	3708      	adds	r7, #8
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}

0800e39c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b084      	sub	sp, #16
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800e3a4:	4b40      	ldr	r3, [pc, #256]	; (800e4a8 <plug_holes+0x10c>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d206      	bcs.n	800e3bc <plug_holes+0x20>
 800e3ae:	4b3f      	ldr	r3, [pc, #252]	; (800e4ac <plug_holes+0x110>)
 800e3b0:	f240 125d 	movw	r2, #349	; 0x15d
 800e3b4:	493e      	ldr	r1, [pc, #248]	; (800e4b0 <plug_holes+0x114>)
 800e3b6:	483f      	ldr	r0, [pc, #252]	; (800e4b4 <plug_holes+0x118>)
 800e3b8:	f00c f84e 	bl	801a458 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800e3bc:	4b3e      	ldr	r3, [pc, #248]	; (800e4b8 <plug_holes+0x11c>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	687a      	ldr	r2, [r7, #4]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d306      	bcc.n	800e3d4 <plug_holes+0x38>
 800e3c6:	4b39      	ldr	r3, [pc, #228]	; (800e4ac <plug_holes+0x110>)
 800e3c8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e3cc:	493b      	ldr	r1, [pc, #236]	; (800e4bc <plug_holes+0x120>)
 800e3ce:	4839      	ldr	r0, [pc, #228]	; (800e4b4 <plug_holes+0x118>)
 800e3d0:	f00c f842 	bl	801a458 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	791b      	ldrb	r3, [r3, #4]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d006      	beq.n	800e3ea <plug_holes+0x4e>
 800e3dc:	4b33      	ldr	r3, [pc, #204]	; (800e4ac <plug_holes+0x110>)
 800e3de:	f240 125f 	movw	r2, #351	; 0x15f
 800e3e2:	4937      	ldr	r1, [pc, #220]	; (800e4c0 <plug_holes+0x124>)
 800e3e4:	4833      	ldr	r0, [pc, #204]	; (800e4b4 <plug_holes+0x118>)
 800e3e6:	f00c f837 	bl	801a458 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	881b      	ldrh	r3, [r3, #0]
 800e3ee:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e3f2:	d906      	bls.n	800e402 <plug_holes+0x66>
 800e3f4:	4b2d      	ldr	r3, [pc, #180]	; (800e4ac <plug_holes+0x110>)
 800e3f6:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800e3fa:	4932      	ldr	r1, [pc, #200]	; (800e4c4 <plug_holes+0x128>)
 800e3fc:	482d      	ldr	r0, [pc, #180]	; (800e4b4 <plug_holes+0x118>)
 800e3fe:	f00c f82b 	bl	801a458 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800e402:	4b29      	ldr	r3, [pc, #164]	; (800e4a8 <plug_holes+0x10c>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	687a      	ldr	r2, [r7, #4]
 800e408:	8812      	ldrh	r2, [r2, #0]
 800e40a:	4413      	add	r3, r2
 800e40c:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800e40e:	687a      	ldr	r2, [r7, #4]
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	429a      	cmp	r2, r3
 800e414:	d01f      	beq.n	800e456 <plug_holes+0xba>
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	791b      	ldrb	r3, [r3, #4]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d11b      	bne.n	800e456 <plug_holes+0xba>
 800e41e:	4b26      	ldr	r3, [pc, #152]	; (800e4b8 <plug_holes+0x11c>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	68fa      	ldr	r2, [r7, #12]
 800e424:	429a      	cmp	r2, r3
 800e426:	d016      	beq.n	800e456 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800e428:	4b27      	ldr	r3, [pc, #156]	; (800e4c8 <plug_holes+0x12c>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	68fa      	ldr	r2, [r7, #12]
 800e42e:	429a      	cmp	r2, r3
 800e430:	d102      	bne.n	800e438 <plug_holes+0x9c>
      lfree = mem;
 800e432:	4a25      	ldr	r2, [pc, #148]	; (800e4c8 <plug_holes+0x12c>)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	881a      	ldrh	r2, [r3, #0]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800e440:	4b19      	ldr	r3, [pc, #100]	; (800e4a8 <plug_holes+0x10c>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	687a      	ldr	r2, [r7, #4]
 800e446:	1ad1      	subs	r1, r2, r3
 800e448:	4b17      	ldr	r3, [pc, #92]	; (800e4a8 <plug_holes+0x10c>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	68fa      	ldr	r2, [r7, #12]
 800e44e:	8812      	ldrh	r2, [r2, #0]
 800e450:	4413      	add	r3, r2
 800e452:	b28a      	uxth	r2, r1
 800e454:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800e456:	4b14      	ldr	r3, [pc, #80]	; (800e4a8 <plug_holes+0x10c>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	687a      	ldr	r2, [r7, #4]
 800e45c:	8852      	ldrh	r2, [r2, #2]
 800e45e:	4413      	add	r3, r2
 800e460:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800e462:	68ba      	ldr	r2, [r7, #8]
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	429a      	cmp	r2, r3
 800e468:	d01a      	beq.n	800e4a0 <plug_holes+0x104>
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	791b      	ldrb	r3, [r3, #4]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d116      	bne.n	800e4a0 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800e472:	4b15      	ldr	r3, [pc, #84]	; (800e4c8 <plug_holes+0x12c>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	687a      	ldr	r2, [r7, #4]
 800e478:	429a      	cmp	r2, r3
 800e47a:	d102      	bne.n	800e482 <plug_holes+0xe6>
      lfree = pmem;
 800e47c:	4a12      	ldr	r2, [pc, #72]	; (800e4c8 <plug_holes+0x12c>)
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	881a      	ldrh	r2, [r3, #0]
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800e48a:	4b07      	ldr	r3, [pc, #28]	; (800e4a8 <plug_holes+0x10c>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	68ba      	ldr	r2, [r7, #8]
 800e490:	1ad1      	subs	r1, r2, r3
 800e492:	4b05      	ldr	r3, [pc, #20]	; (800e4a8 <plug_holes+0x10c>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	687a      	ldr	r2, [r7, #4]
 800e498:	8812      	ldrh	r2, [r2, #0]
 800e49a:	4413      	add	r3, r2
 800e49c:	b28a      	uxth	r2, r1
 800e49e:	805a      	strh	r2, [r3, #2]
  }
}
 800e4a0:	bf00      	nop
 800e4a2:	3710      	adds	r7, #16
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}
 800e4a8:	2000babc 	.word	0x2000babc
 800e4ac:	0801c338 	.word	0x0801c338
 800e4b0:	0801c368 	.word	0x0801c368
 800e4b4:	0801c380 	.word	0x0801c380
 800e4b8:	2000bac0 	.word	0x2000bac0
 800e4bc:	0801c3a8 	.word	0x0801c3a8
 800e4c0:	0801c3c4 	.word	0x0801c3c4
 800e4c4:	0801c3e0 	.word	0x0801c3e0
 800e4c8:	2000bac4 	.word	0x2000bac4

0800e4cc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b082      	sub	sp, #8
 800e4d0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800e4d2:	4b1e      	ldr	r3, [pc, #120]	; (800e54c <mem_init+0x80>)
 800e4d4:	3303      	adds	r3, #3
 800e4d6:	f023 0303 	bic.w	r3, r3, #3
 800e4da:	461a      	mov	r2, r3
 800e4dc:	4b1c      	ldr	r3, [pc, #112]	; (800e550 <mem_init+0x84>)
 800e4de:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800e4e0:	4b1b      	ldr	r3, [pc, #108]	; (800e550 <mem_init+0x84>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e4ec:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800e4fa:	4b15      	ldr	r3, [pc, #84]	; (800e550 <mem_init+0x84>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800e502:	4a14      	ldr	r2, [pc, #80]	; (800e554 <mem_init+0x88>)
 800e504:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800e506:	4b13      	ldr	r3, [pc, #76]	; (800e554 <mem_init+0x88>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	2201      	movs	r2, #1
 800e50c:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800e50e:	4b11      	ldr	r3, [pc, #68]	; (800e554 <mem_init+0x88>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e516:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800e518:	4b0e      	ldr	r3, [pc, #56]	; (800e554 <mem_init+0x88>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e520:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800e522:	4b0b      	ldr	r3, [pc, #44]	; (800e550 <mem_init+0x84>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	4a0c      	ldr	r2, [pc, #48]	; (800e558 <mem_init+0x8c>)
 800e528:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800e52a:	480c      	ldr	r0, [pc, #48]	; (800e55c <mem_init+0x90>)
 800e52c:	f00b fd40 	bl	8019fb0 <sys_mutex_new>
 800e530:	4603      	mov	r3, r0
 800e532:	2b00      	cmp	r3, #0
 800e534:	d006      	beq.n	800e544 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800e536:	4b0a      	ldr	r3, [pc, #40]	; (800e560 <mem_init+0x94>)
 800e538:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e53c:	4909      	ldr	r1, [pc, #36]	; (800e564 <mem_init+0x98>)
 800e53e:	480a      	ldr	r0, [pc, #40]	; (800e568 <mem_init+0x9c>)
 800e540:	f00b ff8a 	bl	801a458 <iprintf>
  }
}
 800e544:	bf00      	nop
 800e546:	3708      	adds	r7, #8
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}
 800e54c:	200092a8 	.word	0x200092a8
 800e550:	2000babc 	.word	0x2000babc
 800e554:	2000bac0 	.word	0x2000bac0
 800e558:	2000bac4 	.word	0x2000bac4
 800e55c:	2000bac8 	.word	0x2000bac8
 800e560:	0801c338 	.word	0x0801c338
 800e564:	0801c40c 	.word	0x0801c40c
 800e568:	0801c380 	.word	0x0801c380

0800e56c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b084      	sub	sp, #16
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d050      	beq.n	800e61c <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f003 0303 	and.w	r3, r3, #3
 800e580:	2b00      	cmp	r3, #0
 800e582:	d006      	beq.n	800e592 <mem_free+0x26>
 800e584:	4b27      	ldr	r3, [pc, #156]	; (800e624 <mem_free+0xb8>)
 800e586:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800e58a:	4927      	ldr	r1, [pc, #156]	; (800e628 <mem_free+0xbc>)
 800e58c:	4827      	ldr	r0, [pc, #156]	; (800e62c <mem_free+0xc0>)
 800e58e:	f00b ff63 	bl	801a458 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800e592:	4b27      	ldr	r3, [pc, #156]	; (800e630 <mem_free+0xc4>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	687a      	ldr	r2, [r7, #4]
 800e598:	429a      	cmp	r2, r3
 800e59a:	d304      	bcc.n	800e5a6 <mem_free+0x3a>
 800e59c:	4b25      	ldr	r3, [pc, #148]	; (800e634 <mem_free+0xc8>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	687a      	ldr	r2, [r7, #4]
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d306      	bcc.n	800e5b4 <mem_free+0x48>
 800e5a6:	4b1f      	ldr	r3, [pc, #124]	; (800e624 <mem_free+0xb8>)
 800e5a8:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800e5ac:	4922      	ldr	r1, [pc, #136]	; (800e638 <mem_free+0xcc>)
 800e5ae:	481f      	ldr	r0, [pc, #124]	; (800e62c <mem_free+0xc0>)
 800e5b0:	f00b ff52 	bl	801a458 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800e5b4:	4b1e      	ldr	r3, [pc, #120]	; (800e630 <mem_free+0xc4>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	687a      	ldr	r2, [r7, #4]
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	d304      	bcc.n	800e5c8 <mem_free+0x5c>
 800e5be:	4b1d      	ldr	r3, [pc, #116]	; (800e634 <mem_free+0xc8>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	687a      	ldr	r2, [r7, #4]
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d306      	bcc.n	800e5d6 <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800e5c8:	f00b fd50 	bl	801a06c <sys_arch_protect>
 800e5cc:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800e5ce:	68b8      	ldr	r0, [r7, #8]
 800e5d0:	f00b fd5a 	bl	801a088 <sys_arch_unprotect>
    return;
 800e5d4:	e023      	b.n	800e61e <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e5d6:	4819      	ldr	r0, [pc, #100]	; (800e63c <mem_free+0xd0>)
 800e5d8:	f00b fd06 	bl	8019fe8 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	3b08      	subs	r3, #8
 800e5e0:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	791b      	ldrb	r3, [r3, #4]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d106      	bne.n	800e5f8 <mem_free+0x8c>
 800e5ea:	4b0e      	ldr	r3, [pc, #56]	; (800e624 <mem_free+0xb8>)
 800e5ec:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800e5f0:	4913      	ldr	r1, [pc, #76]	; (800e640 <mem_free+0xd4>)
 800e5f2:	480e      	ldr	r0, [pc, #56]	; (800e62c <mem_free+0xc0>)
 800e5f4:	f00b ff30 	bl	801a458 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800e5fe:	4b11      	ldr	r3, [pc, #68]	; (800e644 <mem_free+0xd8>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	68fa      	ldr	r2, [r7, #12]
 800e604:	429a      	cmp	r2, r3
 800e606:	d202      	bcs.n	800e60e <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800e608:	4a0e      	ldr	r2, [pc, #56]	; (800e644 <mem_free+0xd8>)
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800e60e:	68f8      	ldr	r0, [r7, #12]
 800e610:	f7ff fec4 	bl	800e39c <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e614:	4809      	ldr	r0, [pc, #36]	; (800e63c <mem_free+0xd0>)
 800e616:	f00b fcf6 	bl	801a006 <sys_mutex_unlock>
 800e61a:	e000      	b.n	800e61e <mem_free+0xb2>
    return;
 800e61c:	bf00      	nop
}
 800e61e:	3710      	adds	r7, #16
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}
 800e624:	0801c338 	.word	0x0801c338
 800e628:	0801c428 	.word	0x0801c428
 800e62c:	0801c380 	.word	0x0801c380
 800e630:	2000babc 	.word	0x2000babc
 800e634:	2000bac0 	.word	0x2000bac0
 800e638:	0801c44c 	.word	0x0801c44c
 800e63c:	2000bac8 	.word	0x2000bac8
 800e640:	0801c464 	.word	0x0801c464
 800e644:	2000bac4 	.word	0x2000bac4

0800e648 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b088      	sub	sp, #32
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
 800e650:	460b      	mov	r3, r1
 800e652:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800e654:	887b      	ldrh	r3, [r7, #2]
 800e656:	3303      	adds	r3, #3
 800e658:	b29b      	uxth	r3, r3
 800e65a:	f023 0303 	bic.w	r3, r3, #3
 800e65e:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800e660:	887b      	ldrh	r3, [r7, #2]
 800e662:	2b0b      	cmp	r3, #11
 800e664:	d801      	bhi.n	800e66a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800e666:	230c      	movs	r3, #12
 800e668:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800e66a:	887b      	ldrh	r3, [r7, #2]
 800e66c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e670:	d901      	bls.n	800e676 <mem_trim+0x2e>
    return NULL;
 800e672:	2300      	movs	r3, #0
 800e674:	e0bd      	b.n	800e7f2 <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800e676:	4b61      	ldr	r3, [pc, #388]	; (800e7fc <mem_trim+0x1b4>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	687a      	ldr	r2, [r7, #4]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d304      	bcc.n	800e68a <mem_trim+0x42>
 800e680:	4b5f      	ldr	r3, [pc, #380]	; (800e800 <mem_trim+0x1b8>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	687a      	ldr	r2, [r7, #4]
 800e686:	429a      	cmp	r2, r3
 800e688:	d306      	bcc.n	800e698 <mem_trim+0x50>
 800e68a:	4b5e      	ldr	r3, [pc, #376]	; (800e804 <mem_trim+0x1bc>)
 800e68c:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e690:	495d      	ldr	r1, [pc, #372]	; (800e808 <mem_trim+0x1c0>)
 800e692:	485e      	ldr	r0, [pc, #376]	; (800e80c <mem_trim+0x1c4>)
 800e694:	f00b fee0 	bl	801a458 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800e698:	4b58      	ldr	r3, [pc, #352]	; (800e7fc <mem_trim+0x1b4>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	687a      	ldr	r2, [r7, #4]
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d304      	bcc.n	800e6ac <mem_trim+0x64>
 800e6a2:	4b57      	ldr	r3, [pc, #348]	; (800e800 <mem_trim+0x1b8>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	687a      	ldr	r2, [r7, #4]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	d307      	bcc.n	800e6bc <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800e6ac:	f00b fcde 	bl	801a06c <sys_arch_protect>
 800e6b0:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800e6b2:	68f8      	ldr	r0, [r7, #12]
 800e6b4:	f00b fce8 	bl	801a088 <sys_arch_unprotect>
    return rmem;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	e09a      	b.n	800e7f2 <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	3b08      	subs	r3, #8
 800e6c0:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800e6c2:	4b4e      	ldr	r3, [pc, #312]	; (800e7fc <mem_trim+0x1b4>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	69fa      	ldr	r2, [r7, #28]
 800e6c8:	1ad3      	subs	r3, r2, r3
 800e6ca:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800e6cc:	69fb      	ldr	r3, [r7, #28]
 800e6ce:	881a      	ldrh	r2, [r3, #0]
 800e6d0:	8b7b      	ldrh	r3, [r7, #26]
 800e6d2:	1ad3      	subs	r3, r2, r3
 800e6d4:	b29b      	uxth	r3, r3
 800e6d6:	3b08      	subs	r3, #8
 800e6d8:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800e6da:	887a      	ldrh	r2, [r7, #2]
 800e6dc:	8b3b      	ldrh	r3, [r7, #24]
 800e6de:	429a      	cmp	r2, r3
 800e6e0:	d906      	bls.n	800e6f0 <mem_trim+0xa8>
 800e6e2:	4b48      	ldr	r3, [pc, #288]	; (800e804 <mem_trim+0x1bc>)
 800e6e4:	f240 2206 	movw	r2, #518	; 0x206
 800e6e8:	4949      	ldr	r1, [pc, #292]	; (800e810 <mem_trim+0x1c8>)
 800e6ea:	4848      	ldr	r0, [pc, #288]	; (800e80c <mem_trim+0x1c4>)
 800e6ec:	f00b feb4 	bl	801a458 <iprintf>
  if (newsize > size) {
 800e6f0:	887a      	ldrh	r2, [r7, #2]
 800e6f2:	8b3b      	ldrh	r3, [r7, #24]
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d901      	bls.n	800e6fc <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	e07a      	b.n	800e7f2 <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800e6fc:	887a      	ldrh	r2, [r7, #2]
 800e6fe:	8b3b      	ldrh	r3, [r7, #24]
 800e700:	429a      	cmp	r2, r3
 800e702:	d101      	bne.n	800e708 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	e074      	b.n	800e7f2 <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e708:	4842      	ldr	r0, [pc, #264]	; (800e814 <mem_trim+0x1cc>)
 800e70a:	f00b fc6d 	bl	8019fe8 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800e70e:	4b3b      	ldr	r3, [pc, #236]	; (800e7fc <mem_trim+0x1b4>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	69fa      	ldr	r2, [r7, #28]
 800e714:	8812      	ldrh	r2, [r2, #0]
 800e716:	4413      	add	r3, r2
 800e718:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	791b      	ldrb	r3, [r3, #4]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d131      	bne.n	800e786 <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	881b      	ldrh	r3, [r3, #0]
 800e726:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800e728:	8b7a      	ldrh	r2, [r7, #26]
 800e72a:	887b      	ldrh	r3, [r7, #2]
 800e72c:	4413      	add	r3, r2
 800e72e:	b29b      	uxth	r3, r3
 800e730:	3308      	adds	r3, #8
 800e732:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800e734:	4b38      	ldr	r3, [pc, #224]	; (800e818 <mem_trim+0x1d0>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	697a      	ldr	r2, [r7, #20]
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d105      	bne.n	800e74a <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800e73e:	4b2f      	ldr	r3, [pc, #188]	; (800e7fc <mem_trim+0x1b4>)
 800e740:	681a      	ldr	r2, [r3, #0]
 800e742:	8a7b      	ldrh	r3, [r7, #18]
 800e744:	4413      	add	r3, r2
 800e746:	4a34      	ldr	r2, [pc, #208]	; (800e818 <mem_trim+0x1d0>)
 800e748:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800e74a:	4b2c      	ldr	r3, [pc, #176]	; (800e7fc <mem_trim+0x1b4>)
 800e74c:	681a      	ldr	r2, [r3, #0]
 800e74e:	8a7b      	ldrh	r3, [r7, #18]
 800e750:	4413      	add	r3, r2
 800e752:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	2200      	movs	r2, #0
 800e758:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	8a3a      	ldrh	r2, [r7, #16]
 800e75e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	8b7a      	ldrh	r2, [r7, #26]
 800e764:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800e766:	69fb      	ldr	r3, [r7, #28]
 800e768:	8a7a      	ldrh	r2, [r7, #18]
 800e76a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	881b      	ldrh	r3, [r3, #0]
 800e770:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e774:	d039      	beq.n	800e7ea <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800e776:	4b21      	ldr	r3, [pc, #132]	; (800e7fc <mem_trim+0x1b4>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	697a      	ldr	r2, [r7, #20]
 800e77c:	8812      	ldrh	r2, [r2, #0]
 800e77e:	4413      	add	r3, r2
 800e780:	8a7a      	ldrh	r2, [r7, #18]
 800e782:	805a      	strh	r2, [r3, #2]
 800e784:	e031      	b.n	800e7ea <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800e786:	887b      	ldrh	r3, [r7, #2]
 800e788:	f103 0214 	add.w	r2, r3, #20
 800e78c:	8b3b      	ldrh	r3, [r7, #24]
 800e78e:	429a      	cmp	r2, r3
 800e790:	d82b      	bhi.n	800e7ea <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800e792:	8b7a      	ldrh	r2, [r7, #26]
 800e794:	887b      	ldrh	r3, [r7, #2]
 800e796:	4413      	add	r3, r2
 800e798:	b29b      	uxth	r3, r3
 800e79a:	3308      	adds	r3, #8
 800e79c:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800e79e:	4b17      	ldr	r3, [pc, #92]	; (800e7fc <mem_trim+0x1b4>)
 800e7a0:	681a      	ldr	r2, [r3, #0]
 800e7a2:	8a7b      	ldrh	r3, [r7, #18]
 800e7a4:	4413      	add	r3, r2
 800e7a6:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800e7a8:	4b1b      	ldr	r3, [pc, #108]	; (800e818 <mem_trim+0x1d0>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	697a      	ldr	r2, [r7, #20]
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d202      	bcs.n	800e7b8 <mem_trim+0x170>
      lfree = mem2;
 800e7b2:	4a19      	ldr	r2, [pc, #100]	; (800e818 <mem_trim+0x1d0>)
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800e7be:	69fb      	ldr	r3, [r7, #28]
 800e7c0:	881a      	ldrh	r2, [r3, #0]
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	8b7a      	ldrh	r2, [r7, #26]
 800e7ca:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800e7cc:	69fb      	ldr	r3, [r7, #28]
 800e7ce:	8a7a      	ldrh	r2, [r7, #18]
 800e7d0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	881b      	ldrh	r3, [r3, #0]
 800e7d6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e7da:	d006      	beq.n	800e7ea <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800e7dc:	4b07      	ldr	r3, [pc, #28]	; (800e7fc <mem_trim+0x1b4>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	697a      	ldr	r2, [r7, #20]
 800e7e2:	8812      	ldrh	r2, [r2, #0]
 800e7e4:	4413      	add	r3, r2
 800e7e6:	8a7a      	ldrh	r2, [r7, #18]
 800e7e8:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e7ea:	480a      	ldr	r0, [pc, #40]	; (800e814 <mem_trim+0x1cc>)
 800e7ec:	f00b fc0b 	bl	801a006 <sys_mutex_unlock>
  return rmem;
 800e7f0:	687b      	ldr	r3, [r7, #4]
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3720      	adds	r7, #32
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
 800e7fa:	bf00      	nop
 800e7fc:	2000babc 	.word	0x2000babc
 800e800:	2000bac0 	.word	0x2000bac0
 800e804:	0801c338 	.word	0x0801c338
 800e808:	0801c478 	.word	0x0801c478
 800e80c:	0801c380 	.word	0x0801c380
 800e810:	0801c490 	.word	0x0801c490
 800e814:	2000bac8 	.word	0x2000bac8
 800e818:	2000bac4 	.word	0x2000bac4

0800e81c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b088      	sub	sp, #32
 800e820:	af00      	add	r7, sp, #0
 800e822:	4603      	mov	r3, r0
 800e824:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800e826:	88fb      	ldrh	r3, [r7, #6]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d101      	bne.n	800e830 <mem_malloc+0x14>
    return NULL;
 800e82c:	2300      	movs	r3, #0
 800e82e:	e0d0      	b.n	800e9d2 <mem_malloc+0x1b6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800e830:	88fb      	ldrh	r3, [r7, #6]
 800e832:	3303      	adds	r3, #3
 800e834:	b29b      	uxth	r3, r3
 800e836:	f023 0303 	bic.w	r3, r3, #3
 800e83a:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800e83c:	88fb      	ldrh	r3, [r7, #6]
 800e83e:	2b0b      	cmp	r3, #11
 800e840:	d801      	bhi.n	800e846 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800e842:	230c      	movs	r3, #12
 800e844:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800e846:	88fb      	ldrh	r3, [r7, #6]
 800e848:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e84c:	d901      	bls.n	800e852 <mem_malloc+0x36>
    return NULL;
 800e84e:	2300      	movs	r3, #0
 800e850:	e0bf      	b.n	800e9d2 <mem_malloc+0x1b6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800e852:	4862      	ldr	r0, [pc, #392]	; (800e9dc <mem_malloc+0x1c0>)
 800e854:	f00b fbc8 	bl	8019fe8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800e858:	4b61      	ldr	r3, [pc, #388]	; (800e9e0 <mem_malloc+0x1c4>)
 800e85a:	681a      	ldr	r2, [r3, #0]
 800e85c:	4b61      	ldr	r3, [pc, #388]	; (800e9e4 <mem_malloc+0x1c8>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	1ad3      	subs	r3, r2, r3
 800e862:	83fb      	strh	r3, [r7, #30]
 800e864:	e0aa      	b.n	800e9bc <mem_malloc+0x1a0>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800e866:	4b5f      	ldr	r3, [pc, #380]	; (800e9e4 <mem_malloc+0x1c8>)
 800e868:	681a      	ldr	r2, [r3, #0]
 800e86a:	8bfb      	ldrh	r3, [r7, #30]
 800e86c:	4413      	add	r3, r2
 800e86e:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	791b      	ldrb	r3, [r3, #4]
 800e874:	2b00      	cmp	r3, #0
 800e876:	f040 809b 	bne.w	800e9b0 <mem_malloc+0x194>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	881b      	ldrh	r3, [r3, #0]
 800e87e:	461a      	mov	r2, r3
 800e880:	8bfb      	ldrh	r3, [r7, #30]
 800e882:	1ad3      	subs	r3, r2, r3
 800e884:	f1a3 0208 	sub.w	r2, r3, #8
 800e888:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800e88a:	429a      	cmp	r2, r3
 800e88c:	f0c0 8090 	bcc.w	800e9b0 <mem_malloc+0x194>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	881b      	ldrh	r3, [r3, #0]
 800e894:	461a      	mov	r2, r3
 800e896:	8bfb      	ldrh	r3, [r7, #30]
 800e898:	1ad3      	subs	r3, r2, r3
 800e89a:	f1a3 0208 	sub.w	r2, r3, #8
 800e89e:	88fb      	ldrh	r3, [r7, #6]
 800e8a0:	3314      	adds	r3, #20
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d327      	bcc.n	800e8f6 <mem_malloc+0xda>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800e8a6:	8bfa      	ldrh	r2, [r7, #30]
 800e8a8:	88fb      	ldrh	r3, [r7, #6]
 800e8aa:	4413      	add	r3, r2
 800e8ac:	b29b      	uxth	r3, r3
 800e8ae:	3308      	adds	r3, #8
 800e8b0:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800e8b2:	4b4c      	ldr	r3, [pc, #304]	; (800e9e4 <mem_malloc+0x1c8>)
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	8a7b      	ldrh	r3, [r7, #18]
 800e8b8:	4413      	add	r3, r2
 800e8ba:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	881a      	ldrh	r2, [r3, #0]
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	8bfa      	ldrh	r2, [r7, #30]
 800e8ce:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e8d0:	697b      	ldr	r3, [r7, #20]
 800e8d2:	8a7a      	ldrh	r2, [r7, #18]
 800e8d4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	2201      	movs	r2, #1
 800e8da:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	881b      	ldrh	r3, [r3, #0]
 800e8e0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e8e4:	d00a      	beq.n	800e8fc <mem_malloc+0xe0>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800e8e6:	4b3f      	ldr	r3, [pc, #252]	; (800e9e4 <mem_malloc+0x1c8>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	68fa      	ldr	r2, [r7, #12]
 800e8ec:	8812      	ldrh	r2, [r2, #0]
 800e8ee:	4413      	add	r3, r2
 800e8f0:	8a7a      	ldrh	r2, [r7, #18]
 800e8f2:	805a      	strh	r2, [r3, #2]
 800e8f4:	e002      	b.n	800e8fc <mem_malloc+0xe0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	2201      	movs	r2, #1
 800e8fa:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e8fc:	4b38      	ldr	r3, [pc, #224]	; (800e9e0 <mem_malloc+0x1c4>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	697a      	ldr	r2, [r7, #20]
 800e902:	429a      	cmp	r2, r3
 800e904:	d127      	bne.n	800e956 <mem_malloc+0x13a>
          struct mem *cur = lfree;
 800e906:	4b36      	ldr	r3, [pc, #216]	; (800e9e0 <mem_malloc+0x1c4>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e90c:	e005      	b.n	800e91a <mem_malloc+0xfe>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800e90e:	4b35      	ldr	r3, [pc, #212]	; (800e9e4 <mem_malloc+0x1c8>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	69ba      	ldr	r2, [r7, #24]
 800e914:	8812      	ldrh	r2, [r2, #0]
 800e916:	4413      	add	r3, r2
 800e918:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e91a:	69bb      	ldr	r3, [r7, #24]
 800e91c:	791b      	ldrb	r3, [r3, #4]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d004      	beq.n	800e92c <mem_malloc+0x110>
 800e922:	4b31      	ldr	r3, [pc, #196]	; (800e9e8 <mem_malloc+0x1cc>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	69ba      	ldr	r2, [r7, #24]
 800e928:	429a      	cmp	r2, r3
 800e92a:	d1f0      	bne.n	800e90e <mem_malloc+0xf2>
          }
          lfree = cur;
 800e92c:	4a2c      	ldr	r2, [pc, #176]	; (800e9e0 <mem_malloc+0x1c4>)
 800e92e:	69bb      	ldr	r3, [r7, #24]
 800e930:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e932:	4b2b      	ldr	r3, [pc, #172]	; (800e9e0 <mem_malloc+0x1c4>)
 800e934:	681a      	ldr	r2, [r3, #0]
 800e936:	4b2c      	ldr	r3, [pc, #176]	; (800e9e8 <mem_malloc+0x1cc>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	429a      	cmp	r2, r3
 800e93c:	d00b      	beq.n	800e956 <mem_malloc+0x13a>
 800e93e:	4b28      	ldr	r3, [pc, #160]	; (800e9e0 <mem_malloc+0x1c4>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	791b      	ldrb	r3, [r3, #4]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d006      	beq.n	800e956 <mem_malloc+0x13a>
 800e948:	4b28      	ldr	r3, [pc, #160]	; (800e9ec <mem_malloc+0x1d0>)
 800e94a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e94e:	4928      	ldr	r1, [pc, #160]	; (800e9f0 <mem_malloc+0x1d4>)
 800e950:	4828      	ldr	r0, [pc, #160]	; (800e9f4 <mem_malloc+0x1d8>)
 800e952:	f00b fd81 	bl	801a458 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e956:	4821      	ldr	r0, [pc, #132]	; (800e9dc <mem_malloc+0x1c0>)
 800e958:	f00b fb55 	bl	801a006 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e95c:	88fa      	ldrh	r2, [r7, #6]
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	4413      	add	r3, r2
 800e962:	3308      	adds	r3, #8
 800e964:	4a20      	ldr	r2, [pc, #128]	; (800e9e8 <mem_malloc+0x1cc>)
 800e966:	6812      	ldr	r2, [r2, #0]
 800e968:	4293      	cmp	r3, r2
 800e96a:	d906      	bls.n	800e97a <mem_malloc+0x15e>
 800e96c:	4b1f      	ldr	r3, [pc, #124]	; (800e9ec <mem_malloc+0x1d0>)
 800e96e:	f240 22d3 	movw	r2, #723	; 0x2d3
 800e972:	4921      	ldr	r1, [pc, #132]	; (800e9f8 <mem_malloc+0x1dc>)
 800e974:	481f      	ldr	r0, [pc, #124]	; (800e9f4 <mem_malloc+0x1d8>)
 800e976:	f00b fd6f 	bl	801a458 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	f003 0303 	and.w	r3, r3, #3
 800e980:	2b00      	cmp	r3, #0
 800e982:	d006      	beq.n	800e992 <mem_malloc+0x176>
 800e984:	4b19      	ldr	r3, [pc, #100]	; (800e9ec <mem_malloc+0x1d0>)
 800e986:	f240 22d5 	movw	r2, #725	; 0x2d5
 800e98a:	491c      	ldr	r1, [pc, #112]	; (800e9fc <mem_malloc+0x1e0>)
 800e98c:	4819      	ldr	r0, [pc, #100]	; (800e9f4 <mem_malloc+0x1d8>)
 800e98e:	f00b fd63 	bl	801a458 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	f003 0303 	and.w	r3, r3, #3
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d006      	beq.n	800e9aa <mem_malloc+0x18e>
 800e99c:	4b13      	ldr	r3, [pc, #76]	; (800e9ec <mem_malloc+0x1d0>)
 800e99e:	f240 22d7 	movw	r2, #727	; 0x2d7
 800e9a2:	4917      	ldr	r1, [pc, #92]	; (800ea00 <mem_malloc+0x1e4>)
 800e9a4:	4813      	ldr	r0, [pc, #76]	; (800e9f4 <mem_malloc+0x1d8>)
 800e9a6:	f00b fd57 	bl	801a458 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	3308      	adds	r3, #8
 800e9ae:	e010      	b.n	800e9d2 <mem_malloc+0x1b6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800e9b0:	4b0c      	ldr	r3, [pc, #48]	; (800e9e4 <mem_malloc+0x1c8>)
 800e9b2:	681a      	ldr	r2, [r3, #0]
 800e9b4:	8bfb      	ldrh	r3, [r7, #30]
 800e9b6:	4413      	add	r3, r2
 800e9b8:	881b      	ldrh	r3, [r3, #0]
 800e9ba:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800e9bc:	8bfa      	ldrh	r2, [r7, #30]
 800e9be:	88fb      	ldrh	r3, [r7, #6]
 800e9c0:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	f4ff af4e 	bcc.w	800e866 <mem_malloc+0x4a>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e9ca:	4804      	ldr	r0, [pc, #16]	; (800e9dc <mem_malloc+0x1c0>)
 800e9cc:	f00b fb1b 	bl	801a006 <sys_mutex_unlock>
  return NULL;
 800e9d0:	2300      	movs	r3, #0
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3720      	adds	r7, #32
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
 800e9da:	bf00      	nop
 800e9dc:	2000bac8 	.word	0x2000bac8
 800e9e0:	2000bac4 	.word	0x2000bac4
 800e9e4:	2000babc 	.word	0x2000babc
 800e9e8:	2000bac0 	.word	0x2000bac0
 800e9ec:	0801c338 	.word	0x0801c338
 800e9f0:	0801c4b0 	.word	0x0801c4b0
 800e9f4:	0801c380 	.word	0x0801c380
 800e9f8:	0801c4cc 	.word	0x0801c4cc
 800e9fc:	0801c4fc 	.word	0x0801c4fc
 800ea00:	0801c52c 	.word	0x0801c52c

0800ea04 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ea04:	b480      	push	{r7}
 800ea06:	b085      	sub	sp, #20
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	689b      	ldr	r3, [r3, #8]
 800ea10:	2200      	movs	r2, #0
 800ea12:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	685b      	ldr	r3, [r3, #4]
 800ea18:	3303      	adds	r3, #3
 800ea1a:	f023 0303 	bic.w	r3, r3, #3
 800ea1e:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ea20:	2300      	movs	r3, #0
 800ea22:	60fb      	str	r3, [r7, #12]
 800ea24:	e011      	b.n	800ea4a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	689b      	ldr	r3, [r3, #8]
 800ea2a:	681a      	ldr	r2, [r3, #0]
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	689b      	ldr	r3, [r3, #8]
 800ea34:	68ba      	ldr	r2, [r7, #8]
 800ea36:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	881b      	ldrh	r3, [r3, #0]
 800ea3c:	461a      	mov	r2, r3
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	4413      	add	r3, r2
 800ea42:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	3301      	adds	r3, #1
 800ea48:	60fb      	str	r3, [r7, #12]
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	885b      	ldrh	r3, [r3, #2]
 800ea4e:	461a      	mov	r2, r3
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	4293      	cmp	r3, r2
 800ea54:	dbe7      	blt.n	800ea26 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ea56:	bf00      	nop
 800ea58:	bf00      	nop
 800ea5a:	3714      	adds	r7, #20
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bc80      	pop	{r7}
 800ea60:	4770      	bx	lr
	...

0800ea64 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b082      	sub	sp, #8
 800ea68:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	80fb      	strh	r3, [r7, #6]
 800ea6e:	e009      	b.n	800ea84 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ea70:	88fb      	ldrh	r3, [r7, #6]
 800ea72:	4a08      	ldr	r2, [pc, #32]	; (800ea94 <memp_init+0x30>)
 800ea74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7ff ffc3 	bl	800ea04 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ea7e:	88fb      	ldrh	r3, [r7, #6]
 800ea80:	3301      	adds	r3, #1
 800ea82:	80fb      	strh	r3, [r7, #6]
 800ea84:	88fb      	ldrh	r3, [r7, #6]
 800ea86:	2b0c      	cmp	r3, #12
 800ea88:	d9f2      	bls.n	800ea70 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ea8a:	bf00      	nop
 800ea8c:	bf00      	nop
 800ea8e:	3708      	adds	r7, #8
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}
 800ea94:	0801e58c 	.word	0x0801e58c

0800ea98 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b084      	sub	sp, #16
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800eaa0:	f00b fae4 	bl	801a06c <sys_arch_protect>
 800eaa4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	689b      	ldr	r3, [r3, #8]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d015      	beq.n	800eae0 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	689b      	ldr	r3, [r3, #8]
 800eab8:	68ba      	ldr	r2, [r7, #8]
 800eaba:	6812      	ldr	r2, [r2, #0]
 800eabc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	f003 0303 	and.w	r3, r3, #3
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d006      	beq.n	800ead6 <do_memp_malloc_pool+0x3e>
 800eac8:	4b09      	ldr	r3, [pc, #36]	; (800eaf0 <do_memp_malloc_pool+0x58>)
 800eaca:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800eace:	4909      	ldr	r1, [pc, #36]	; (800eaf4 <do_memp_malloc_pool+0x5c>)
 800ead0:	4809      	ldr	r0, [pc, #36]	; (800eaf8 <do_memp_malloc_pool+0x60>)
 800ead2:	f00b fcc1 	bl	801a458 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ead6:	68f8      	ldr	r0, [r7, #12]
 800ead8:	f00b fad6 	bl	801a088 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	e003      	b.n	800eae8 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800eae0:	68f8      	ldr	r0, [r7, #12]
 800eae2:	f00b fad1 	bl	801a088 <sys_arch_unprotect>
  return NULL;
 800eae6:	2300      	movs	r3, #0
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3710      	adds	r7, #16
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}
 800eaf0:	0801c550 	.word	0x0801c550
 800eaf4:	0801c580 	.word	0x0801c580
 800eaf8:	0801c5a4 	.word	0x0801c5a4

0800eafc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b084      	sub	sp, #16
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	4603      	mov	r3, r0
 800eb04:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800eb06:	79fb      	ldrb	r3, [r7, #7]
 800eb08:	2b0c      	cmp	r3, #12
 800eb0a:	d908      	bls.n	800eb1e <memp_malloc+0x22>
 800eb0c:	4b0a      	ldr	r3, [pc, #40]	; (800eb38 <memp_malloc+0x3c>)
 800eb0e:	f240 1287 	movw	r2, #391	; 0x187
 800eb12:	490a      	ldr	r1, [pc, #40]	; (800eb3c <memp_malloc+0x40>)
 800eb14:	480a      	ldr	r0, [pc, #40]	; (800eb40 <memp_malloc+0x44>)
 800eb16:	f00b fc9f 	bl	801a458 <iprintf>
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	e008      	b.n	800eb30 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800eb1e:	79fb      	ldrb	r3, [r7, #7]
 800eb20:	4a08      	ldr	r2, [pc, #32]	; (800eb44 <memp_malloc+0x48>)
 800eb22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7ff ffb6 	bl	800ea98 <do_memp_malloc_pool>
 800eb2c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3710      	adds	r7, #16
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}
 800eb38:	0801c550 	.word	0x0801c550
 800eb3c:	0801c5e0 	.word	0x0801c5e0
 800eb40:	0801c5a4 	.word	0x0801c5a4
 800eb44:	0801e58c 	.word	0x0801e58c

0800eb48 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b084      	sub	sp, #16
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
 800eb50:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	f003 0303 	and.w	r3, r3, #3
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d006      	beq.n	800eb6a <do_memp_free_pool+0x22>
 800eb5c:	4b0d      	ldr	r3, [pc, #52]	; (800eb94 <do_memp_free_pool+0x4c>)
 800eb5e:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800eb62:	490d      	ldr	r1, [pc, #52]	; (800eb98 <do_memp_free_pool+0x50>)
 800eb64:	480d      	ldr	r0, [pc, #52]	; (800eb9c <do_memp_free_pool+0x54>)
 800eb66:	f00b fc77 	bl	801a458 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800eb6e:	f00b fa7d 	bl	801a06c <sys_arch_protect>
 800eb72:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	689b      	ldr	r3, [r3, #8]
 800eb78:	681a      	ldr	r2, [r3, #0]
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	689b      	ldr	r3, [r3, #8]
 800eb82:	68fa      	ldr	r2, [r7, #12]
 800eb84:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800eb86:	68b8      	ldr	r0, [r7, #8]
 800eb88:	f00b fa7e 	bl	801a088 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800eb8c:	bf00      	nop
 800eb8e:	3710      	adds	r7, #16
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}
 800eb94:	0801c550 	.word	0x0801c550
 800eb98:	0801c600 	.word	0x0801c600
 800eb9c:	0801c5a4 	.word	0x0801c5a4

0800eba0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b082      	sub	sp, #8
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	4603      	mov	r3, r0
 800eba8:	6039      	str	r1, [r7, #0]
 800ebaa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ebac:	79fb      	ldrb	r3, [r7, #7]
 800ebae:	2b0c      	cmp	r3, #12
 800ebb0:	d907      	bls.n	800ebc2 <memp_free+0x22>
 800ebb2:	4b0c      	ldr	r3, [pc, #48]	; (800ebe4 <memp_free+0x44>)
 800ebb4:	f240 12db 	movw	r2, #475	; 0x1db
 800ebb8:	490b      	ldr	r1, [pc, #44]	; (800ebe8 <memp_free+0x48>)
 800ebba:	480c      	ldr	r0, [pc, #48]	; (800ebec <memp_free+0x4c>)
 800ebbc:	f00b fc4c 	bl	801a458 <iprintf>
 800ebc0:	e00c      	b.n	800ebdc <memp_free+0x3c>

  if (mem == NULL) {
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d008      	beq.n	800ebda <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ebc8:	79fb      	ldrb	r3, [r7, #7]
 800ebca:	4a09      	ldr	r2, [pc, #36]	; (800ebf0 <memp_free+0x50>)
 800ebcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebd0:	6839      	ldr	r1, [r7, #0]
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f7ff ffb8 	bl	800eb48 <do_memp_free_pool>
 800ebd8:	e000      	b.n	800ebdc <memp_free+0x3c>
    return;
 800ebda:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ebdc:	3708      	adds	r7, #8
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}
 800ebe2:	bf00      	nop
 800ebe4:	0801c550 	.word	0x0801c550
 800ebe8:	0801c620 	.word	0x0801c620
 800ebec:	0801c5a4 	.word	0x0801c5a4
 800ebf0:	0801e58c 	.word	0x0801e58c

0800ebf4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ebf8:	bf00      	nop
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bc80      	pop	{r7}
 800ebfe:	4770      	bx	lr

0800ec00 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b084      	sub	sp, #16
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	60f8      	str	r0, [r7, #12]
 800ec08:	60b9      	str	r1, [r7, #8]
 800ec0a:	607a      	str	r2, [r7, #4]
 800ec0c:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800ec0e:	69fb      	ldr	r3, [r7, #28]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d105      	bne.n	800ec20 <netif_add+0x20>
 800ec14:	4b24      	ldr	r3, [pc, #144]	; (800eca8 <netif_add+0xa8>)
 800ec16:	22fb      	movs	r2, #251	; 0xfb
 800ec18:	4924      	ldr	r1, [pc, #144]	; (800ecac <netif_add+0xac>)
 800ec1a:	4825      	ldr	r0, [pc, #148]	; (800ecb0 <netif_add+0xb0>)
 800ec1c:	f00b fc1c 	bl	801a458 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	2200      	movs	r2, #0
 800ec24:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	2200      	movs	r2, #0
 800ec2a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	2200      	movs	r2, #0
 800ec36:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	3324      	adds	r3, #36	; 0x24
 800ec3e:	2204      	movs	r2, #4
 800ec40:	2100      	movs	r1, #0
 800ec42:	4618      	mov	r0, r3
 800ec44:	f00b fb6b 	bl	801a31e <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	2203      	movs	r2, #3
 800ec4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	2200      	movs	r2, #0
 800ec54:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	69ba      	ldr	r2, [r7, #24]
 800ec5a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 800ec5c:	4b15      	ldr	r3, [pc, #84]	; (800ecb4 <netif_add+0xb4>)
 800ec5e:	781b      	ldrb	r3, [r3, #0]
 800ec60:	1c5a      	adds	r2, r3, #1
 800ec62:	b2d1      	uxtb	r1, r2
 800ec64:	4a13      	ldr	r2, [pc, #76]	; (800ecb4 <netif_add+0xb4>)
 800ec66:	7011      	strb	r1, [r2, #0]
 800ec68:	68fa      	ldr	r2, [r7, #12]
 800ec6a:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
  netif->input = input;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	6a3a      	ldr	r2, [r7, #32]
 800ec72:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	687a      	ldr	r2, [r7, #4]
 800ec78:	68b9      	ldr	r1, [r7, #8]
 800ec7a:	68f8      	ldr	r0, [r7, #12]
 800ec7c:	f000 f81e 	bl	800ecbc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ec80:	69fb      	ldr	r3, [r7, #28]
 800ec82:	68f8      	ldr	r0, [r7, #12]
 800ec84:	4798      	blx	r3
 800ec86:	4603      	mov	r3, r0
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d001      	beq.n	800ec90 <netif_add+0x90>
    return NULL;
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	e007      	b.n	800eca0 <netif_add+0xa0>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ec90:	4b09      	ldr	r3, [pc, #36]	; (800ecb8 <netif_add+0xb8>)
 800ec92:	681a      	ldr	r2, [r3, #0]
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ec98:	4a07      	ldr	r2, [pc, #28]	; (800ecb8 <netif_add+0xb8>)
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	3710      	adds	r7, #16
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}
 800eca8:	0801c63c 	.word	0x0801c63c
 800ecac:	0801c670 	.word	0x0801c670
 800ecb0:	0801c688 	.word	0x0801c688
 800ecb4:	2000ebbc 	.word	0x2000ebbc
 800ecb8:	2000ebb4 	.word	0x2000ebb4

0800ecbc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b084      	sub	sp, #16
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	60f8      	str	r0, [r7, #12]
 800ecc4:	60b9      	str	r1, [r7, #8]
 800ecc6:	607a      	str	r2, [r7, #4]
 800ecc8:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800ecca:	68bb      	ldr	r3, [r7, #8]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d003      	beq.n	800ecd8 <netif_set_addr+0x1c>
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d10c      	bne.n	800ecf2 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800ecd8:	68b9      	ldr	r1, [r7, #8]
 800ecda:	68f8      	ldr	r0, [r7, #12]
 800ecdc:	f000 f81a 	bl	800ed14 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800ece0:	6879      	ldr	r1, [r7, #4]
 800ece2:	68f8      	ldr	r0, [r7, #12]
 800ece4:	f000 f861 	bl	800edaa <netif_set_netmask>
    netif_set_gw(netif, gw);
 800ece8:	6839      	ldr	r1, [r7, #0]
 800ecea:	68f8      	ldr	r0, [r7, #12]
 800ecec:	f000 f84a 	bl	800ed84 <netif_set_gw>
 800ecf0:	e00c      	b.n	800ed0c <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 800ecf2:	6879      	ldr	r1, [r7, #4]
 800ecf4:	68f8      	ldr	r0, [r7, #12]
 800ecf6:	f000 f858 	bl	800edaa <netif_set_netmask>
    netif_set_gw(netif, gw);
 800ecfa:	6839      	ldr	r1, [r7, #0]
 800ecfc:	68f8      	ldr	r0, [r7, #12]
 800ecfe:	f000 f841 	bl	800ed84 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800ed02:	68b9      	ldr	r1, [r7, #8]
 800ed04:	68f8      	ldr	r0, [r7, #12]
 800ed06:	f000 f805 	bl	800ed14 <netif_set_ipaddr>
  }
}
 800ed0a:	bf00      	nop
 800ed0c:	bf00      	nop
 800ed0e:	3710      	adds	r7, #16
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}

0800ed14 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b084      	sub	sp, #16
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d003      	beq.n	800ed2c <netif_set_ipaddr+0x18>
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	60fb      	str	r3, [r7, #12]
 800ed2a:	e002      	b.n	800ed32 <netif_set_ipaddr+0x1e>
 800ed2c:	4b14      	ldr	r3, [pc, #80]	; (800ed80 <netif_set_ipaddr+0x6c>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800ed32:	68fa      	ldr	r2, [r7, #12]
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	3304      	adds	r3, #4
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	d01c      	beq.n	800ed78 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	3304      	adds	r3, #4
 800ed42:	f107 020c 	add.w	r2, r7, #12
 800ed46:	4611      	mov	r1, r2
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f002 fb85 	bl	8011458 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	3304      	adds	r3, #4
 800ed52:	f107 020c 	add.w	r2, r7, #12
 800ed56:	4611      	mov	r1, r2
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f006 fe6f 	bl	8015a3c <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d002      	beq.n	800ed6a <netif_set_ipaddr+0x56>
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	e000      	b.n	800ed6c <netif_set_ipaddr+0x58>
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	687a      	ldr	r2, [r7, #4]
 800ed6e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ed70:	2101      	movs	r1, #1
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f000 f85d 	bl	800ee32 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800ed78:	bf00      	nop
 800ed7a:	3710      	adds	r7, #16
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}
 800ed80:	0801e610 	.word	0x0801e610

0800ed84 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800ed84:	b480      	push	{r7}
 800ed86:	b083      	sub	sp, #12
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
 800ed8c:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d002      	beq.n	800ed9a <netif_set_gw+0x16>
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	e000      	b.n	800ed9c <netif_set_gw+0x18>
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	687a      	ldr	r2, [r7, #4]
 800ed9e:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800eda0:	bf00      	nop
 800eda2:	370c      	adds	r7, #12
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bc80      	pop	{r7}
 800eda8:	4770      	bx	lr

0800edaa <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800edaa:	b480      	push	{r7}
 800edac:	b083      	sub	sp, #12
 800edae:	af00      	add	r7, sp, #0
 800edb0:	6078      	str	r0, [r7, #4]
 800edb2:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d002      	beq.n	800edc0 <netif_set_netmask+0x16>
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	e000      	b.n	800edc2 <netif_set_netmask+0x18>
 800edc0:	2300      	movs	r3, #0
 800edc2:	687a      	ldr	r2, [r7, #4]
 800edc4:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800edc6:	bf00      	nop
 800edc8:	370c      	adds	r7, #12
 800edca:	46bd      	mov	sp, r7
 800edcc:	bc80      	pop	{r7}
 800edce:	4770      	bx	lr

0800edd0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800edd0:	b480      	push	{r7}
 800edd2:	b083      	sub	sp, #12
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800edd8:	4a03      	ldr	r2, [pc, #12]	; (800ede8 <netif_set_default+0x18>)
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800edde:	bf00      	nop
 800ede0:	370c      	adds	r7, #12
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bc80      	pop	{r7}
 800ede6:	4770      	bx	lr
 800ede8:	2000ebb8 	.word	0x2000ebb8

0800edec <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b082      	sub	sp, #8
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800edfa:	f003 0301 	and.w	r3, r3, #1
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d113      	bne.n	800ee2a <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800ee08:	f043 0301 	orr.w	r3, r3, #1
 800ee0c:	b2da      	uxtb	r2, r3
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800ee1a:	f003 0304 	and.w	r3, r3, #4
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d003      	beq.n	800ee2a <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800ee22:	2103      	movs	r1, #3
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f000 f804 	bl	800ee32 <netif_issue_reports>
    }
  }
}
 800ee2a:	bf00      	nop
 800ee2c:	3708      	adds	r7, #8
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}

0800ee32 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800ee32:	b580      	push	{r7, lr}
 800ee34:	b082      	sub	sp, #8
 800ee36:	af00      	add	r7, sp, #0
 800ee38:	6078      	str	r0, [r7, #4]
 800ee3a:	460b      	mov	r3, r1
 800ee3c:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ee3e:	78fb      	ldrb	r3, [r7, #3]
 800ee40:	f003 0301 	and.w	r3, r3, #1
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d011      	beq.n	800ee6c <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	3304      	adds	r3, #4
 800ee4c:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d00c      	beq.n	800ee6c <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800ee58:	f003 0308 	and.w	r3, r3, #8
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d005      	beq.n	800ee6c <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	3304      	adds	r3, #4
 800ee64:	4619      	mov	r1, r3
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f009 fc02 	bl	8018670 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800ee6c:	bf00      	nop
 800ee6e:	3708      	adds	r7, #8
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}

0800ee74 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b082      	sub	sp, #8
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800ee82:	f003 0301 	and.w	r3, r3, #1
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d012      	beq.n	800eeb0 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800ee90:	f023 0301 	bic.w	r3, r3, #1
 800ee94:	b2da      	uxtb	r2, r3
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800eea2:	f003 0308 	and.w	r3, r3, #8
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d002      	beq.n	800eeb0 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f008 ffa2 	bl	8017df4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800eeb0:	bf00      	nop
 800eeb2:	3708      	adds	r7, #8
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800eec6:	f003 0304 	and.w	r3, r3, #4
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d11e      	bne.n	800ef0c <netif_set_link_up+0x54>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800eed4:	f043 0304 	orr.w	r3, r3, #4
 800eed8:	b2da      	uxtb	r2, r3
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800eee0:	6878      	ldr	r0, [r7, #4]
 800eee2:	f007 f989 	bl	80161f8 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800eeec:	f003 0301 	and.w	r3, r3, #1
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d003      	beq.n	800eefc <netif_set_link_up+0x44>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800eef4:	2103      	movs	r1, #3
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f7ff ff9b 	bl	800ee32 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	69db      	ldr	r3, [r3, #28]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d003      	beq.n	800ef0c <netif_set_link_up+0x54>
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	69db      	ldr	r3, [r3, #28]
 800ef08:	6878      	ldr	r0, [r7, #4]
 800ef0a:	4798      	blx	r3
  }
}
 800ef0c:	bf00      	nop
 800ef0e:	3708      	adds	r7, #8
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}

0800ef14 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b082      	sub	sp, #8
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800ef22:	f003 0304 	and.w	r3, r3, #4
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d010      	beq.n	800ef4c <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800ef30:	f023 0304 	bic.w	r3, r3, #4
 800ef34:	b2da      	uxtb	r2, r3
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    NETIF_LINK_CALLBACK(netif);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	69db      	ldr	r3, [r3, #28]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d003      	beq.n	800ef4c <netif_set_link_down+0x38>
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	69db      	ldr	r3, [r3, #28]
 800ef48:	6878      	ldr	r0, [r7, #4]
 800ef4a:	4798      	blx	r3
  }
}
 800ef4c:	bf00      	nop
 800ef4e:	3708      	adds	r7, #8
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ef54:	b480      	push	{r7}
 800ef56:	b083      	sub	sp, #12
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	6039      	str	r1, [r7, #0]
  if (netif) {
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d002      	beq.n	800ef6a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	683a      	ldr	r2, [r7, #0]
 800ef68:	61da      	str	r2, [r3, #28]
  }
}
 800ef6a:	bf00      	nop
 800ef6c:	370c      	adds	r7, #12
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bc80      	pop	{r7}
 800ef72:	4770      	bx	lr

0800ef74 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b082      	sub	sp, #8
 800ef78:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ef7a:	f00b f877 	bl	801a06c <sys_arch_protect>
 800ef7e:	6038      	str	r0, [r7, #0]
 800ef80:	4b0f      	ldr	r3, [pc, #60]	; (800efc0 <pbuf_free_ooseq+0x4c>)
 800ef82:	2200      	movs	r2, #0
 800ef84:	701a      	strb	r2, [r3, #0]
 800ef86:	6838      	ldr	r0, [r7, #0]
 800ef88:	f00b f87e 	bl	801a088 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ef8c:	4b0d      	ldr	r3, [pc, #52]	; (800efc4 <pbuf_free_ooseq+0x50>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	607b      	str	r3, [r7, #4]
 800ef92:	e00f      	b.n	800efb4 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d008      	beq.n	800efae <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efa0:	4618      	mov	r0, r3
 800efa2:	f001 feda 	bl	8010d5a <tcp_segs_free>
      pcb->ooseq = NULL;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2200      	movs	r2, #0
 800efaa:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800efac:	e005      	b.n	800efba <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	68db      	ldr	r3, [r3, #12]
 800efb2:	607b      	str	r3, [r7, #4]
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d1ec      	bne.n	800ef94 <pbuf_free_ooseq+0x20>
    }
  }
}
 800efba:	3708      	adds	r7, #8
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}
 800efc0:	2000ebbd 	.word	0x2000ebbd
 800efc4:	2000ebcc 	.word	0x2000ebcc

0800efc8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b082      	sub	sp, #8
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800efd0:	f7ff ffd0 	bl	800ef74 <pbuf_free_ooseq>
}
 800efd4:	bf00      	nop
 800efd6:	3708      	adds	r7, #8
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}

0800efdc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b082      	sub	sp, #8
 800efe0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800efe2:	f00b f843 	bl	801a06c <sys_arch_protect>
 800efe6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800efe8:	4b10      	ldr	r3, [pc, #64]	; (800f02c <pbuf_pool_is_empty+0x50>)
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800efee:	4b0f      	ldr	r3, [pc, #60]	; (800f02c <pbuf_pool_is_empty+0x50>)
 800eff0:	2201      	movs	r2, #1
 800eff2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800eff4:	6878      	ldr	r0, [r7, #4]
 800eff6:	f00b f847 	bl	801a088 <sys_arch_unprotect>

  if (!queued) {
 800effa:	78fb      	ldrb	r3, [r7, #3]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d110      	bne.n	800f022 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800f000:	2200      	movs	r2, #0
 800f002:	2100      	movs	r1, #0
 800f004:	480a      	ldr	r0, [pc, #40]	; (800f030 <pbuf_pool_is_empty+0x54>)
 800f006:	f7ff f8e3 	bl	800e1d0 <tcpip_callback_with_block>
 800f00a:	4603      	mov	r3, r0
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d008      	beq.n	800f022 <pbuf_pool_is_empty+0x46>
 800f010:	f00b f82c 	bl	801a06c <sys_arch_protect>
 800f014:	6078      	str	r0, [r7, #4]
 800f016:	4b05      	ldr	r3, [pc, #20]	; (800f02c <pbuf_pool_is_empty+0x50>)
 800f018:	2200      	movs	r2, #0
 800f01a:	701a      	strb	r2, [r3, #0]
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f00b f833 	bl	801a088 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800f022:	bf00      	nop
 800f024:	3708      	adds	r7, #8
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop
 800f02c:	2000ebbd 	.word	0x2000ebbd
 800f030:	0800efc9 	.word	0x0800efc9

0800f034 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b088      	sub	sp, #32
 800f038:	af00      	add	r7, sp, #0
 800f03a:	4603      	mov	r3, r0
 800f03c:	71fb      	strb	r3, [r7, #7]
 800f03e:	460b      	mov	r3, r1
 800f040:	80bb      	strh	r3, [r7, #4]
 800f042:	4613      	mov	r3, r2
 800f044:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800f046:	79fb      	ldrb	r3, [r7, #7]
 800f048:	2b04      	cmp	r3, #4
 800f04a:	d81c      	bhi.n	800f086 <pbuf_alloc+0x52>
 800f04c:	a201      	add	r2, pc, #4	; (adr r2, 800f054 <pbuf_alloc+0x20>)
 800f04e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f052:	bf00      	nop
 800f054:	0800f069 	.word	0x0800f069
 800f058:	0800f06f 	.word	0x0800f06f
 800f05c:	0800f075 	.word	0x0800f075
 800f060:	0800f07b 	.word	0x0800f07b
 800f064:	0800f081 	.word	0x0800f081
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800f068:	2336      	movs	r3, #54	; 0x36
 800f06a:	82fb      	strh	r3, [r7, #22]
    break;
 800f06c:	e014      	b.n	800f098 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800f06e:	2322      	movs	r3, #34	; 0x22
 800f070:	82fb      	strh	r3, [r7, #22]
    break;
 800f072:	e011      	b.n	800f098 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800f074:	230e      	movs	r3, #14
 800f076:	82fb      	strh	r3, [r7, #22]
    break;
 800f078:	e00e      	b.n	800f098 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800f07a:	2300      	movs	r3, #0
 800f07c:	82fb      	strh	r3, [r7, #22]
    break;
 800f07e:	e00b      	b.n	800f098 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800f080:	2300      	movs	r3, #0
 800f082:	82fb      	strh	r3, [r7, #22]
    break;
 800f084:	e008      	b.n	800f098 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800f086:	4ba1      	ldr	r3, [pc, #644]	; (800f30c <pbuf_alloc+0x2d8>)
 800f088:	f44f 728b 	mov.w	r2, #278	; 0x116
 800f08c:	49a0      	ldr	r1, [pc, #640]	; (800f310 <pbuf_alloc+0x2dc>)
 800f08e:	48a1      	ldr	r0, [pc, #644]	; (800f314 <pbuf_alloc+0x2e0>)
 800f090:	f00b f9e2 	bl	801a458 <iprintf>
    return NULL;
 800f094:	2300      	movs	r3, #0
 800f096:	e15c      	b.n	800f352 <pbuf_alloc+0x31e>
  }

  switch (type) {
 800f098:	79bb      	ldrb	r3, [r7, #6]
 800f09a:	2b03      	cmp	r3, #3
 800f09c:	d00d      	beq.n	800f0ba <pbuf_alloc+0x86>
 800f09e:	2b03      	cmp	r3, #3
 800f0a0:	f300 8146 	bgt.w	800f330 <pbuf_alloc+0x2fc>
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	f000 80d0 	beq.w	800f24a <pbuf_alloc+0x216>
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	f2c0 8140 	blt.w	800f330 <pbuf_alloc+0x2fc>
 800f0b0:	3b01      	subs	r3, #1
 800f0b2:	2b01      	cmp	r3, #1
 800f0b4:	f200 813c 	bhi.w	800f330 <pbuf_alloc+0x2fc>
 800f0b8:	e10d      	b.n	800f2d6 <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f0ba:	200c      	movs	r0, #12
 800f0bc:	f7ff fd1e 	bl	800eafc <memp_malloc>
 800f0c0:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800f0c2:	69fb      	ldr	r3, [r7, #28]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d103      	bne.n	800f0d0 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 800f0c8:	f7ff ff88 	bl	800efdc <pbuf_pool_is_empty>
      return NULL;
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	e140      	b.n	800f352 <pbuf_alloc+0x31e>
    }
    p->type = type;
 800f0d0:	69fb      	ldr	r3, [r7, #28]
 800f0d2:	79ba      	ldrb	r2, [r7, #6]
 800f0d4:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800f0d6:	69fb      	ldr	r3, [r7, #28]
 800f0d8:	2200      	movs	r2, #0
 800f0da:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800f0dc:	8afb      	ldrh	r3, [r7, #22]
 800f0de:	3310      	adds	r3, #16
 800f0e0:	69fa      	ldr	r2, [r7, #28]
 800f0e2:	4413      	add	r3, r2
 800f0e4:	3303      	adds	r3, #3
 800f0e6:	f023 0303 	bic.w	r3, r3, #3
 800f0ea:	461a      	mov	r2, r3
 800f0ec:	69fb      	ldr	r3, [r7, #28]
 800f0ee:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800f0f0:	69fb      	ldr	r3, [r7, #28]
 800f0f2:	685b      	ldr	r3, [r3, #4]
 800f0f4:	f003 0303 	and.w	r3, r3, #3
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d006      	beq.n	800f10a <pbuf_alloc+0xd6>
 800f0fc:	4b83      	ldr	r3, [pc, #524]	; (800f30c <pbuf_alloc+0x2d8>)
 800f0fe:	f44f 7294 	mov.w	r2, #296	; 0x128
 800f102:	4985      	ldr	r1, [pc, #532]	; (800f318 <pbuf_alloc+0x2e4>)
 800f104:	4883      	ldr	r0, [pc, #524]	; (800f314 <pbuf_alloc+0x2e0>)
 800f106:	f00b f9a7 	bl	801a458 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800f10a:	69fb      	ldr	r3, [r7, #28]
 800f10c:	88ba      	ldrh	r2, [r7, #4]
 800f10e:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800f110:	8afb      	ldrh	r3, [r7, #22]
 800f112:	3303      	adds	r3, #3
 800f114:	f023 0303 	bic.w	r3, r3, #3
 800f118:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800f11c:	88bb      	ldrh	r3, [r7, #4]
 800f11e:	4293      	cmp	r3, r2
 800f120:	bf28      	it	cs
 800f122:	4613      	movcs	r3, r2
 800f124:	b29a      	uxth	r2, r3
 800f126:	69fb      	ldr	r3, [r7, #28]
 800f128:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800f12a:	69fb      	ldr	r3, [r7, #28]
 800f12c:	685b      	ldr	r3, [r3, #4]
 800f12e:	69fa      	ldr	r2, [r7, #28]
 800f130:	8952      	ldrh	r2, [r2, #10]
 800f132:	441a      	add	r2, r3
 800f134:	69fb      	ldr	r3, [r7, #28]
 800f136:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f13a:	429a      	cmp	r2, r3
 800f13c:	d906      	bls.n	800f14c <pbuf_alloc+0x118>
 800f13e:	4b73      	ldr	r3, [pc, #460]	; (800f30c <pbuf_alloc+0x2d8>)
 800f140:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800f144:	4975      	ldr	r1, [pc, #468]	; (800f31c <pbuf_alloc+0x2e8>)
 800f146:	4873      	ldr	r0, [pc, #460]	; (800f314 <pbuf_alloc+0x2e0>)
 800f148:	f00b f986 	bl	801a458 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800f14c:	8afb      	ldrh	r3, [r7, #22]
 800f14e:	3303      	adds	r3, #3
 800f150:	f023 0303 	bic.w	r3, r3, #3
 800f154:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800f158:	d106      	bne.n	800f168 <pbuf_alloc+0x134>
 800f15a:	4b6c      	ldr	r3, [pc, #432]	; (800f30c <pbuf_alloc+0x2d8>)
 800f15c:	f240 1231 	movw	r2, #305	; 0x131
 800f160:	496f      	ldr	r1, [pc, #444]	; (800f320 <pbuf_alloc+0x2ec>)
 800f162:	486c      	ldr	r0, [pc, #432]	; (800f314 <pbuf_alloc+0x2e0>)
 800f164:	f00b f978 	bl	801a458 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800f168:	69fb      	ldr	r3, [r7, #28]
 800f16a:	2201      	movs	r2, #1
 800f16c:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800f16e:	69fb      	ldr	r3, [r7, #28]
 800f170:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800f172:	88bb      	ldrh	r3, [r7, #4]
 800f174:	69fa      	ldr	r2, [r7, #28]
 800f176:	8952      	ldrh	r2, [r2, #10]
 800f178:	1a9b      	subs	r3, r3, r2
 800f17a:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800f17c:	e061      	b.n	800f242 <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f17e:	200c      	movs	r0, #12
 800f180:	f7ff fcbc 	bl	800eafc <memp_malloc>
 800f184:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d106      	bne.n	800f19a <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 800f18c:	f7ff ff26 	bl	800efdc <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800f190:	69f8      	ldr	r0, [r7, #28]
 800f192:	f000 fac7 	bl	800f724 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800f196:	2300      	movs	r3, #0
 800f198:	e0db      	b.n	800f352 <pbuf_alloc+0x31e>
      }
      q->type = type;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	79ba      	ldrb	r2, [r7, #6]
 800f19e:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800f1ac:	69bb      	ldr	r3, [r7, #24]
 800f1ae:	68fa      	ldr	r2, [r7, #12]
 800f1b0:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f1b8:	4293      	cmp	r3, r2
 800f1ba:	dd06      	ble.n	800f1ca <pbuf_alloc+0x196>
 800f1bc:	4b53      	ldr	r3, [pc, #332]	; (800f30c <pbuf_alloc+0x2d8>)
 800f1be:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800f1c2:	4958      	ldr	r1, [pc, #352]	; (800f324 <pbuf_alloc+0x2f0>)
 800f1c4:	4853      	ldr	r0, [pc, #332]	; (800f314 <pbuf_alloc+0x2e0>)
 800f1c6:	f00b f947 	bl	801a458 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800f1ca:	693b      	ldr	r3, [r7, #16]
 800f1cc:	b29a      	uxth	r2, r3
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800f1d2:	693b      	ldr	r3, [r7, #16]
 800f1d4:	b29b      	uxth	r3, r3
 800f1d6:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800f1da:	bf28      	it	cs
 800f1dc:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800f1e0:	b29a      	uxth	r2, r3
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	f103 0210 	add.w	r2, r3, #16
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	685b      	ldr	r3, [r3, #4]
 800f1f4:	f003 0303 	and.w	r3, r3, #3
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d006      	beq.n	800f20a <pbuf_alloc+0x1d6>
 800f1fc:	4b43      	ldr	r3, [pc, #268]	; (800f30c <pbuf_alloc+0x2d8>)
 800f1fe:	f240 1251 	movw	r2, #337	; 0x151
 800f202:	4949      	ldr	r1, [pc, #292]	; (800f328 <pbuf_alloc+0x2f4>)
 800f204:	4843      	ldr	r0, [pc, #268]	; (800f314 <pbuf_alloc+0x2e0>)
 800f206:	f00b f927 	bl	801a458 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800f20a:	69fb      	ldr	r3, [r7, #28]
 800f20c:	685b      	ldr	r3, [r3, #4]
 800f20e:	69fa      	ldr	r2, [r7, #28]
 800f210:	8952      	ldrh	r2, [r2, #10]
 800f212:	441a      	add	r2, r3
 800f214:	69fb      	ldr	r3, [r7, #28]
 800f216:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f21a:	429a      	cmp	r2, r3
 800f21c:	d906      	bls.n	800f22c <pbuf_alloc+0x1f8>
 800f21e:	4b3b      	ldr	r3, [pc, #236]	; (800f30c <pbuf_alloc+0x2d8>)
 800f220:	f240 1253 	movw	r2, #339	; 0x153
 800f224:	493d      	ldr	r1, [pc, #244]	; (800f31c <pbuf_alloc+0x2e8>)
 800f226:	483b      	ldr	r0, [pc, #236]	; (800f314 <pbuf_alloc+0x2e0>)
 800f228:	f00b f916 	bl	801a458 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	2201      	movs	r2, #1
 800f230:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	895b      	ldrh	r3, [r3, #10]
 800f236:	461a      	mov	r2, r3
 800f238:	693b      	ldr	r3, [r7, #16]
 800f23a:	1a9b      	subs	r3, r3, r2
 800f23c:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800f242:	693b      	ldr	r3, [r7, #16]
 800f244:	2b00      	cmp	r3, #0
 800f246:	dc9a      	bgt.n	800f17e <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800f248:	e07c      	b.n	800f344 <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800f24a:	8afb      	ldrh	r3, [r7, #22]
 800f24c:	3313      	adds	r3, #19
 800f24e:	b29b      	uxth	r3, r3
 800f250:	f023 0303 	bic.w	r3, r3, #3
 800f254:	b29a      	uxth	r2, r3
 800f256:	88bb      	ldrh	r3, [r7, #4]
 800f258:	3303      	adds	r3, #3
 800f25a:	b29b      	uxth	r3, r3
 800f25c:	f023 0303 	bic.w	r3, r3, #3
 800f260:	b29b      	uxth	r3, r3
 800f262:	4413      	add	r3, r2
 800f264:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800f266:	897a      	ldrh	r2, [r7, #10]
 800f268:	88bb      	ldrh	r3, [r7, #4]
 800f26a:	3303      	adds	r3, #3
 800f26c:	f023 0303 	bic.w	r3, r3, #3
 800f270:	429a      	cmp	r2, r3
 800f272:	d201      	bcs.n	800f278 <pbuf_alloc+0x244>
        return NULL;
 800f274:	2300      	movs	r3, #0
 800f276:	e06c      	b.n	800f352 <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800f278:	897b      	ldrh	r3, [r7, #10]
 800f27a:	4618      	mov	r0, r3
 800f27c:	f7ff face 	bl	800e81c <mem_malloc>
 800f280:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800f282:	69fb      	ldr	r3, [r7, #28]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d101      	bne.n	800f28c <pbuf_alloc+0x258>
      return NULL;
 800f288:	2300      	movs	r3, #0
 800f28a:	e062      	b.n	800f352 <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800f28c:	8afb      	ldrh	r3, [r7, #22]
 800f28e:	3310      	adds	r3, #16
 800f290:	69fa      	ldr	r2, [r7, #28]
 800f292:	4413      	add	r3, r2
 800f294:	3303      	adds	r3, #3
 800f296:	f023 0303 	bic.w	r3, r3, #3
 800f29a:	461a      	mov	r2, r3
 800f29c:	69fb      	ldr	r3, [r7, #28]
 800f29e:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800f2a0:	69fb      	ldr	r3, [r7, #28]
 800f2a2:	88ba      	ldrh	r2, [r7, #4]
 800f2a4:	811a      	strh	r2, [r3, #8]
 800f2a6:	69fb      	ldr	r3, [r7, #28]
 800f2a8:	891a      	ldrh	r2, [r3, #8]
 800f2aa:	69fb      	ldr	r3, [r7, #28]
 800f2ac:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800f2ae:	69fb      	ldr	r3, [r7, #28]
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	601a      	str	r2, [r3, #0]
    p->type = type;
 800f2b4:	69fb      	ldr	r3, [r7, #28]
 800f2b6:	79ba      	ldrb	r2, [r7, #6]
 800f2b8:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800f2ba:	69fb      	ldr	r3, [r7, #28]
 800f2bc:	685b      	ldr	r3, [r3, #4]
 800f2be:	f003 0303 	and.w	r3, r3, #3
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d03d      	beq.n	800f342 <pbuf_alloc+0x30e>
 800f2c6:	4b11      	ldr	r3, [pc, #68]	; (800f30c <pbuf_alloc+0x2d8>)
 800f2c8:	f44f 72bb 	mov.w	r2, #374	; 0x176
 800f2cc:	4917      	ldr	r1, [pc, #92]	; (800f32c <pbuf_alloc+0x2f8>)
 800f2ce:	4811      	ldr	r0, [pc, #68]	; (800f314 <pbuf_alloc+0x2e0>)
 800f2d0:	f00b f8c2 	bl	801a458 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800f2d4:	e035      	b.n	800f342 <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800f2d6:	200b      	movs	r0, #11
 800f2d8:	f7ff fc10 	bl	800eafc <memp_malloc>
 800f2dc:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800f2de:	69fb      	ldr	r3, [r7, #28]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d101      	bne.n	800f2e8 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	e034      	b.n	800f352 <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800f2e8:	69fb      	ldr	r3, [r7, #28]
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800f2ee:	69fb      	ldr	r3, [r7, #28]
 800f2f0:	88ba      	ldrh	r2, [r7, #4]
 800f2f2:	811a      	strh	r2, [r3, #8]
 800f2f4:	69fb      	ldr	r3, [r7, #28]
 800f2f6:	891a      	ldrh	r2, [r3, #8]
 800f2f8:	69fb      	ldr	r3, [r7, #28]
 800f2fa:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800f2fc:	69fb      	ldr	r3, [r7, #28]
 800f2fe:	2200      	movs	r2, #0
 800f300:	601a      	str	r2, [r3, #0]
    p->type = type;
 800f302:	69fb      	ldr	r3, [r7, #28]
 800f304:	79ba      	ldrb	r2, [r7, #6]
 800f306:	731a      	strb	r2, [r3, #12]
    break;
 800f308:	e01c      	b.n	800f344 <pbuf_alloc+0x310>
 800f30a:	bf00      	nop
 800f30c:	0801c6b0 	.word	0x0801c6b0
 800f310:	0801c6e0 	.word	0x0801c6e0
 800f314:	0801c6fc 	.word	0x0801c6fc
 800f318:	0801c724 	.word	0x0801c724
 800f31c:	0801c754 	.word	0x0801c754
 800f320:	0801c788 	.word	0x0801c788
 800f324:	0801c7bc 	.word	0x0801c7bc
 800f328:	0801c7d0 	.word	0x0801c7d0
 800f32c:	0801c800 	.word	0x0801c800
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800f330:	4b0a      	ldr	r3, [pc, #40]	; (800f35c <pbuf_alloc+0x328>)
 800f332:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800f336:	490a      	ldr	r1, [pc, #40]	; (800f360 <pbuf_alloc+0x32c>)
 800f338:	480a      	ldr	r0, [pc, #40]	; (800f364 <pbuf_alloc+0x330>)
 800f33a:	f00b f88d 	bl	801a458 <iprintf>
    return NULL;
 800f33e:	2300      	movs	r3, #0
 800f340:	e007      	b.n	800f352 <pbuf_alloc+0x31e>
    break;
 800f342:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800f344:	69fb      	ldr	r3, [r7, #28]
 800f346:	2201      	movs	r2, #1
 800f348:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800f34a:	69fb      	ldr	r3, [r7, #28]
 800f34c:	2200      	movs	r2, #0
 800f34e:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800f350:	69fb      	ldr	r3, [r7, #28]
}
 800f352:	4618      	mov	r0, r3
 800f354:	3720      	adds	r7, #32
 800f356:	46bd      	mov	sp, r7
 800f358:	bd80      	pop	{r7, pc}
 800f35a:	bf00      	nop
 800f35c:	0801c6b0 	.word	0x0801c6b0
 800f360:	0801c82c 	.word	0x0801c82c
 800f364:	0801c6fc 	.word	0x0801c6fc

0800f368 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b084      	sub	sp, #16
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	603b      	str	r3, [r7, #0]
 800f370:	4603      	mov	r3, r0
 800f372:	71fb      	strb	r3, [r7, #7]
 800f374:	460b      	mov	r3, r1
 800f376:	80bb      	strh	r3, [r7, #4]
 800f378:	4613      	mov	r3, r2
 800f37a:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800f37c:	79fb      	ldrb	r3, [r7, #7]
 800f37e:	2b04      	cmp	r3, #4
 800f380:	d81b      	bhi.n	800f3ba <pbuf_alloced_custom+0x52>
 800f382:	a201      	add	r2, pc, #4	; (adr r2, 800f388 <pbuf_alloced_custom+0x20>)
 800f384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f388:	0800f39d 	.word	0x0800f39d
 800f38c:	0800f3a3 	.word	0x0800f3a3
 800f390:	0800f3a9 	.word	0x0800f3a9
 800f394:	0800f3af 	.word	0x0800f3af
 800f398:	0800f3b5 	.word	0x0800f3b5
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800f39c:	2336      	movs	r3, #54	; 0x36
 800f39e:	81fb      	strh	r3, [r7, #14]
    break;
 800f3a0:	e014      	b.n	800f3cc <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800f3a2:	2322      	movs	r3, #34	; 0x22
 800f3a4:	81fb      	strh	r3, [r7, #14]
    break;
 800f3a6:	e011      	b.n	800f3cc <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800f3a8:	230e      	movs	r3, #14
 800f3aa:	81fb      	strh	r3, [r7, #14]
    break;
 800f3ac:	e00e      	b.n	800f3cc <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	81fb      	strh	r3, [r7, #14]
    break;
 800f3b2:	e00b      	b.n	800f3cc <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	81fb      	strh	r3, [r7, #14]
    break;
 800f3b8:	e008      	b.n	800f3cc <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800f3ba:	4b1d      	ldr	r3, [pc, #116]	; (800f430 <pbuf_alloced_custom+0xc8>)
 800f3bc:	f240 12c5 	movw	r2, #453	; 0x1c5
 800f3c0:	491c      	ldr	r1, [pc, #112]	; (800f434 <pbuf_alloced_custom+0xcc>)
 800f3c2:	481d      	ldr	r0, [pc, #116]	; (800f438 <pbuf_alloced_custom+0xd0>)
 800f3c4:	f00b f848 	bl	801a458 <iprintf>
    return NULL;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	e02d      	b.n	800f428 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800f3cc:	89fb      	ldrh	r3, [r7, #14]
 800f3ce:	3303      	adds	r3, #3
 800f3d0:	f023 0203 	bic.w	r2, r3, #3
 800f3d4:	88bb      	ldrh	r3, [r7, #4]
 800f3d6:	441a      	add	r2, r3
 800f3d8:	8bbb      	ldrh	r3, [r7, #28]
 800f3da:	429a      	cmp	r2, r3
 800f3dc:	d901      	bls.n	800f3e2 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	e022      	b.n	800f428 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800f3e8:	69bb      	ldr	r3, [r7, #24]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d008      	beq.n	800f400 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800f3ee:	89fb      	ldrh	r3, [r7, #14]
 800f3f0:	3303      	adds	r3, #3
 800f3f2:	f023 0303 	bic.w	r3, r3, #3
 800f3f6:	69ba      	ldr	r2, [r7, #24]
 800f3f8:	441a      	add	r2, r3
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	605a      	str	r2, [r3, #4]
 800f3fe:	e002      	b.n	800f406 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	2200      	movs	r2, #0
 800f404:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	2202      	movs	r2, #2
 800f40a:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	88ba      	ldrh	r2, [r7, #4]
 800f410:	811a      	strh	r2, [r3, #8]
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	891a      	ldrh	r2, [r3, #8]
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	79ba      	ldrb	r2, [r7, #6]
 800f41e:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	2201      	movs	r2, #1
 800f424:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800f426:	683b      	ldr	r3, [r7, #0]
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3710      	adds	r7, #16
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}
 800f430:	0801c6b0 	.word	0x0801c6b0
 800f434:	0801c848 	.word	0x0801c848
 800f438:	0801c6fc 	.word	0x0801c6fc

0800f43c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b086      	sub	sp, #24
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
 800f444:	460b      	mov	r3, r1
 800f446:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d106      	bne.n	800f45c <pbuf_realloc+0x20>
 800f44e:	4b4b      	ldr	r3, [pc, #300]	; (800f57c <pbuf_realloc+0x140>)
 800f450:	f240 12f3 	movw	r2, #499	; 0x1f3
 800f454:	494a      	ldr	r1, [pc, #296]	; (800f580 <pbuf_realloc+0x144>)
 800f456:	484b      	ldr	r0, [pc, #300]	; (800f584 <pbuf_realloc+0x148>)
 800f458:	f00a fffe 	bl	801a458 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	7b1b      	ldrb	r3, [r3, #12]
 800f460:	2b03      	cmp	r3, #3
 800f462:	d012      	beq.n	800f48a <pbuf_realloc+0x4e>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	7b1b      	ldrb	r3, [r3, #12]
 800f468:	2b01      	cmp	r3, #1
 800f46a:	d00e      	beq.n	800f48a <pbuf_realloc+0x4e>
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	7b1b      	ldrb	r3, [r3, #12]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d00a      	beq.n	800f48a <pbuf_realloc+0x4e>
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	7b1b      	ldrb	r3, [r3, #12]
 800f478:	2b02      	cmp	r3, #2
 800f47a:	d006      	beq.n	800f48a <pbuf_realloc+0x4e>
 800f47c:	4b3f      	ldr	r3, [pc, #252]	; (800f57c <pbuf_realloc+0x140>)
 800f47e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800f482:	4941      	ldr	r1, [pc, #260]	; (800f588 <pbuf_realloc+0x14c>)
 800f484:	483f      	ldr	r0, [pc, #252]	; (800f584 <pbuf_realloc+0x148>)
 800f486:	f00a ffe7 	bl	801a458 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	891b      	ldrh	r3, [r3, #8]
 800f48e:	887a      	ldrh	r2, [r7, #2]
 800f490:	429a      	cmp	r2, r3
 800f492:	d26e      	bcs.n	800f572 <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800f494:	887b      	ldrh	r3, [r7, #2]
 800f496:	687a      	ldr	r2, [r7, #4]
 800f498:	8912      	ldrh	r2, [r2, #8]
 800f49a:	1a9b      	subs	r3, r3, r2
 800f49c:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800f49e:	887b      	ldrh	r3, [r7, #2]
 800f4a0:	827b      	strh	r3, [r7, #18]
  q = p;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800f4a6:	e025      	b.n	800f4f4 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	895b      	ldrh	r3, [r3, #10]
 800f4ac:	8a7a      	ldrh	r2, [r7, #18]
 800f4ae:	1ad3      	subs	r3, r2, r3
 800f4b0:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f4b8:	4293      	cmp	r3, r2
 800f4ba:	dd06      	ble.n	800f4ca <pbuf_realloc+0x8e>
 800f4bc:	4b2f      	ldr	r3, [pc, #188]	; (800f57c <pbuf_realloc+0x140>)
 800f4be:	f240 220b 	movw	r2, #523	; 0x20b
 800f4c2:	4932      	ldr	r1, [pc, #200]	; (800f58c <pbuf_realloc+0x150>)
 800f4c4:	482f      	ldr	r0, [pc, #188]	; (800f584 <pbuf_realloc+0x148>)
 800f4c6:	f00a ffc7 	bl	801a458 <iprintf>
    q->tot_len += (u16_t)grow;
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	891a      	ldrh	r2, [r3, #8]
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	b29b      	uxth	r3, r3
 800f4d2:	4413      	add	r3, r2
 800f4d4:	b29a      	uxth	r2, r3
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d106      	bne.n	800f4f4 <pbuf_realloc+0xb8>
 800f4e6:	4b25      	ldr	r3, [pc, #148]	; (800f57c <pbuf_realloc+0x140>)
 800f4e8:	f240 220f 	movw	r2, #527	; 0x20f
 800f4ec:	4928      	ldr	r1, [pc, #160]	; (800f590 <pbuf_realloc+0x154>)
 800f4ee:	4825      	ldr	r0, [pc, #148]	; (800f584 <pbuf_realloc+0x148>)
 800f4f0:	f00a ffb2 	bl	801a458 <iprintf>
  while (rem_len > q->len) {
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	895b      	ldrh	r3, [r3, #10]
 800f4f8:	8a7a      	ldrh	r2, [r7, #18]
 800f4fa:	429a      	cmp	r2, r3
 800f4fc:	d8d4      	bhi.n	800f4a8 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	7b1b      	ldrb	r3, [r3, #12]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d121      	bne.n	800f54a <pbuf_realloc+0x10e>
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	895b      	ldrh	r3, [r3, #10]
 800f50a:	8a7a      	ldrh	r2, [r7, #18]
 800f50c:	429a      	cmp	r2, r3
 800f50e:	d01c      	beq.n	800f54a <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800f510:	697b      	ldr	r3, [r7, #20]
 800f512:	7b5b      	ldrb	r3, [r3, #13]
 800f514:	f003 0302 	and.w	r3, r3, #2
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d116      	bne.n	800f54a <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	685a      	ldr	r2, [r3, #4]
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	1ad3      	subs	r3, r2, r3
 800f524:	b29a      	uxth	r2, r3
 800f526:	8a7b      	ldrh	r3, [r7, #18]
 800f528:	4413      	add	r3, r2
 800f52a:	b29b      	uxth	r3, r3
 800f52c:	4619      	mov	r1, r3
 800f52e:	6978      	ldr	r0, [r7, #20]
 800f530:	f7ff f88a 	bl	800e648 <mem_trim>
 800f534:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d106      	bne.n	800f54a <pbuf_realloc+0x10e>
 800f53c:	4b0f      	ldr	r3, [pc, #60]	; (800f57c <pbuf_realloc+0x140>)
 800f53e:	f240 221d 	movw	r2, #541	; 0x21d
 800f542:	4914      	ldr	r1, [pc, #80]	; (800f594 <pbuf_realloc+0x158>)
 800f544:	480f      	ldr	r0, [pc, #60]	; (800f584 <pbuf_realloc+0x148>)
 800f546:	f00a ff87 	bl	801a458 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800f54a:	697b      	ldr	r3, [r7, #20]
 800f54c:	8a7a      	ldrh	r2, [r7, #18]
 800f54e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	895a      	ldrh	r2, [r3, #10]
 800f554:	697b      	ldr	r3, [r7, #20]
 800f556:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d004      	beq.n	800f56a <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800f560:	697b      	ldr	r3, [r7, #20]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	4618      	mov	r0, r3
 800f566:	f000 f8dd 	bl	800f724 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	2200      	movs	r2, #0
 800f56e:	601a      	str	r2, [r3, #0]
 800f570:	e000      	b.n	800f574 <pbuf_realloc+0x138>
    return;
 800f572:	bf00      	nop

}
 800f574:	3718      	adds	r7, #24
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}
 800f57a:	bf00      	nop
 800f57c:	0801c6b0 	.word	0x0801c6b0
 800f580:	0801c86c 	.word	0x0801c86c
 800f584:	0801c6fc 	.word	0x0801c6fc
 800f588:	0801c884 	.word	0x0801c884
 800f58c:	0801c8a0 	.word	0x0801c8a0
 800f590:	0801c8b4 	.word	0x0801c8b4
 800f594:	0801c8cc 	.word	0x0801c8cc

0800f598 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b084      	sub	sp, #16
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
 800f5a0:	460b      	mov	r3, r1
 800f5a2:	807b      	strh	r3, [r7, #2]
 800f5a4:	4613      	mov	r3, r2
 800f5a6:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d106      	bne.n	800f5bc <pbuf_header_impl+0x24>
 800f5ae:	4b46      	ldr	r3, [pc, #280]	; (800f6c8 <pbuf_header_impl+0x130>)
 800f5b0:	f240 223f 	movw	r2, #575	; 0x23f
 800f5b4:	4945      	ldr	r1, [pc, #276]	; (800f6cc <pbuf_header_impl+0x134>)
 800f5b6:	4846      	ldr	r0, [pc, #280]	; (800f6d0 <pbuf_header_impl+0x138>)
 800f5b8:	f00a ff4e 	bl	801a458 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800f5bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d002      	beq.n	800f5ca <pbuf_header_impl+0x32>
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d101      	bne.n	800f5ce <pbuf_header_impl+0x36>
    return 0;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	e078      	b.n	800f6c0 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800f5ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	da10      	bge.n	800f5f8 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800f5d6:	887b      	ldrh	r3, [r7, #2]
 800f5d8:	425b      	negs	r3, r3
 800f5da:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	895b      	ldrh	r3, [r3, #10]
 800f5e0:	89fa      	ldrh	r2, [r7, #14]
 800f5e2:	429a      	cmp	r2, r3
 800f5e4:	d90a      	bls.n	800f5fc <pbuf_header_impl+0x64>
 800f5e6:	4b38      	ldr	r3, [pc, #224]	; (800f6c8 <pbuf_header_impl+0x130>)
 800f5e8:	f240 2247 	movw	r2, #583	; 0x247
 800f5ec:	4939      	ldr	r1, [pc, #228]	; (800f6d4 <pbuf_header_impl+0x13c>)
 800f5ee:	4838      	ldr	r0, [pc, #224]	; (800f6d0 <pbuf_header_impl+0x138>)
 800f5f0:	f00a ff32 	bl	801a458 <iprintf>
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	e063      	b.n	800f6c0 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800f5f8:	887b      	ldrh	r3, [r7, #2]
 800f5fa:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	7b1b      	ldrb	r3, [r3, #12]
 800f600:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	685b      	ldr	r3, [r3, #4]
 800f606:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800f608:	89bb      	ldrh	r3, [r7, #12]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d002      	beq.n	800f614 <pbuf_header_impl+0x7c>
 800f60e:	89bb      	ldrh	r3, [r7, #12]
 800f610:	2b03      	cmp	r3, #3
 800f612:	d112      	bne.n	800f63a <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	685a      	ldr	r2, [r3, #4]
 800f618:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f61c:	425b      	negs	r3, r3
 800f61e:	441a      	add	r2, r3
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	685a      	ldr	r2, [r3, #4]
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	3310      	adds	r3, #16
 800f62c:	429a      	cmp	r2, r3
 800f62e:	d238      	bcs.n	800f6a2 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	68ba      	ldr	r2, [r7, #8]
 800f634:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800f636:	2301      	movs	r3, #1
 800f638:	e042      	b.n	800f6c0 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800f63a:	89bb      	ldrh	r3, [r7, #12]
 800f63c:	2b02      	cmp	r3, #2
 800f63e:	d002      	beq.n	800f646 <pbuf_header_impl+0xae>
 800f640:	89bb      	ldrh	r3, [r7, #12]
 800f642:	2b01      	cmp	r3, #1
 800f644:	d124      	bne.n	800f690 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800f646:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	da0d      	bge.n	800f66a <pbuf_header_impl+0xd2>
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	895b      	ldrh	r3, [r3, #10]
 800f652:	89fa      	ldrh	r2, [r7, #14]
 800f654:	429a      	cmp	r2, r3
 800f656:	d808      	bhi.n	800f66a <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	685a      	ldr	r2, [r3, #4]
 800f65c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f660:	425b      	negs	r3, r3
 800f662:	441a      	add	r2, r3
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	605a      	str	r2, [r3, #4]
 800f668:	e011      	b.n	800f68e <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800f66a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	dd0b      	ble.n	800f68a <pbuf_header_impl+0xf2>
 800f672:	787b      	ldrb	r3, [r7, #1]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d008      	beq.n	800f68a <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	685a      	ldr	r2, [r3, #4]
 800f67c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f680:	425b      	negs	r3, r3
 800f682:	441a      	add	r2, r3
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	605a      	str	r2, [r3, #4]
 800f688:	e001      	b.n	800f68e <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f68a:	2301      	movs	r3, #1
 800f68c:	e018      	b.n	800f6c0 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800f68e:	e008      	b.n	800f6a2 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800f690:	4b0d      	ldr	r3, [pc, #52]	; (800f6c8 <pbuf_header_impl+0x130>)
 800f692:	f240 2277 	movw	r2, #631	; 0x277
 800f696:	4910      	ldr	r1, [pc, #64]	; (800f6d8 <pbuf_header_impl+0x140>)
 800f698:	480d      	ldr	r0, [pc, #52]	; (800f6d0 <pbuf_header_impl+0x138>)
 800f69a:	f00a fedd 	bl	801a458 <iprintf>
    return 1;
 800f69e:	2301      	movs	r3, #1
 800f6a0:	e00e      	b.n	800f6c0 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	895a      	ldrh	r2, [r3, #10]
 800f6a6:	887b      	ldrh	r3, [r7, #2]
 800f6a8:	4413      	add	r3, r2
 800f6aa:	b29a      	uxth	r2, r3
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	891a      	ldrh	r2, [r3, #8]
 800f6b4:	887b      	ldrh	r3, [r7, #2]
 800f6b6:	4413      	add	r3, r2
 800f6b8:	b29a      	uxth	r2, r3
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800f6be:	2300      	movs	r3, #0
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3710      	adds	r7, #16
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}
 800f6c8:	0801c6b0 	.word	0x0801c6b0
 800f6cc:	0801c8e8 	.word	0x0801c8e8
 800f6d0:	0801c6fc 	.word	0x0801c6fc
 800f6d4:	0801c8f4 	.word	0x0801c8f4
 800f6d8:	0801c914 	.word	0x0801c914

0800f6dc <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b082      	sub	sp, #8
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
 800f6e4:	460b      	mov	r3, r1
 800f6e6:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800f6e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	4619      	mov	r1, r3
 800f6f0:	6878      	ldr	r0, [r7, #4]
 800f6f2:	f7ff ff51 	bl	800f598 <pbuf_header_impl>
 800f6f6:	4603      	mov	r3, r0
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3708      	adds	r7, #8
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}

0800f700 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b082      	sub	sp, #8
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
 800f708:	460b      	mov	r3, r1
 800f70a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800f70c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f710:	2201      	movs	r2, #1
 800f712:	4619      	mov	r1, r3
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f7ff ff3f 	bl	800f598 <pbuf_header_impl>
 800f71a:	4603      	mov	r3, r0
}
 800f71c:	4618      	mov	r0, r3
 800f71e:	3708      	adds	r7, #8
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}

0800f724 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b088      	sub	sp, #32
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d10b      	bne.n	800f74a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d106      	bne.n	800f746 <pbuf_free+0x22>
 800f738:	4b41      	ldr	r3, [pc, #260]	; (800f840 <pbuf_free+0x11c>)
 800f73a:	f240 22d2 	movw	r2, #722	; 0x2d2
 800f73e:	4941      	ldr	r1, [pc, #260]	; (800f844 <pbuf_free+0x120>)
 800f740:	4841      	ldr	r0, [pc, #260]	; (800f848 <pbuf_free+0x124>)
 800f742:	f00a fe89 	bl	801a458 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f746:	2300      	movs	r3, #0
 800f748:	e076      	b.n	800f838 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	7b1b      	ldrb	r3, [r3, #12]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d012      	beq.n	800f778 <pbuf_free+0x54>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	7b1b      	ldrb	r3, [r3, #12]
 800f756:	2b01      	cmp	r3, #1
 800f758:	d00e      	beq.n	800f778 <pbuf_free+0x54>
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	7b1b      	ldrb	r3, [r3, #12]
 800f75e:	2b02      	cmp	r3, #2
 800f760:	d00a      	beq.n	800f778 <pbuf_free+0x54>
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	7b1b      	ldrb	r3, [r3, #12]
 800f766:	2b03      	cmp	r3, #3
 800f768:	d006      	beq.n	800f778 <pbuf_free+0x54>
 800f76a:	4b35      	ldr	r3, [pc, #212]	; (800f840 <pbuf_free+0x11c>)
 800f76c:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800f770:	4936      	ldr	r1, [pc, #216]	; (800f84c <pbuf_free+0x128>)
 800f772:	4835      	ldr	r0, [pc, #212]	; (800f848 <pbuf_free+0x124>)
 800f774:	f00a fe70 	bl	801a458 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800f778:	2300      	movs	r3, #0
 800f77a:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f77c:	e058      	b.n	800f830 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800f77e:	f00a fc75 	bl	801a06c <sys_arch_protect>
 800f782:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	89db      	ldrh	r3, [r3, #14]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d106      	bne.n	800f79a <pbuf_free+0x76>
 800f78c:	4b2c      	ldr	r3, [pc, #176]	; (800f840 <pbuf_free+0x11c>)
 800f78e:	f240 22eb 	movw	r2, #747	; 0x2eb
 800f792:	492f      	ldr	r1, [pc, #188]	; (800f850 <pbuf_free+0x12c>)
 800f794:	482c      	ldr	r0, [pc, #176]	; (800f848 <pbuf_free+0x124>)
 800f796:	f00a fe5f 	bl	801a458 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	89db      	ldrh	r3, [r3, #14]
 800f79e:	3b01      	subs	r3, #1
 800f7a0:	b29a      	uxth	r2, r3
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	81da      	strh	r2, [r3, #14]
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	89db      	ldrh	r3, [r3, #14]
 800f7aa:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800f7ac:	69b8      	ldr	r0, [r7, #24]
 800f7ae:	f00a fc6b 	bl	801a088 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f7b2:	8afb      	ldrh	r3, [r7, #22]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d139      	bne.n	800f82c <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	7b1b      	ldrb	r3, [r3, #12]
 800f7c2:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	7b5b      	ldrb	r3, [r3, #13]
 800f7c8:	f003 0302 	and.w	r3, r3, #2
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d011      	beq.n	800f7f4 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	691b      	ldr	r3, [r3, #16]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d106      	bne.n	800f7ea <pbuf_free+0xc6>
 800f7dc:	4b18      	ldr	r3, [pc, #96]	; (800f840 <pbuf_free+0x11c>)
 800f7de:	f240 22f9 	movw	r2, #761	; 0x2f9
 800f7e2:	491c      	ldr	r1, [pc, #112]	; (800f854 <pbuf_free+0x130>)
 800f7e4:	4818      	ldr	r0, [pc, #96]	; (800f848 <pbuf_free+0x124>)
 800f7e6:	f00a fe37 	bl	801a458 <iprintf>
        pc->custom_free_function(p);
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	691b      	ldr	r3, [r3, #16]
 800f7ee:	6878      	ldr	r0, [r7, #4]
 800f7f0:	4798      	blx	r3
 800f7f2:	e015      	b.n	800f820 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800f7f4:	89fb      	ldrh	r3, [r7, #14]
 800f7f6:	2b03      	cmp	r3, #3
 800f7f8:	d104      	bne.n	800f804 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800f7fa:	6879      	ldr	r1, [r7, #4]
 800f7fc:	200c      	movs	r0, #12
 800f7fe:	f7ff f9cf 	bl	800eba0 <memp_free>
 800f802:	e00d      	b.n	800f820 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800f804:	89fb      	ldrh	r3, [r7, #14]
 800f806:	2b01      	cmp	r3, #1
 800f808:	d002      	beq.n	800f810 <pbuf_free+0xec>
 800f80a:	89fb      	ldrh	r3, [r7, #14]
 800f80c:	2b02      	cmp	r3, #2
 800f80e:	d104      	bne.n	800f81a <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800f810:	6879      	ldr	r1, [r7, #4]
 800f812:	200b      	movs	r0, #11
 800f814:	f7ff f9c4 	bl	800eba0 <memp_free>
 800f818:	e002      	b.n	800f820 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800f81a:	6878      	ldr	r0, [r7, #4]
 800f81c:	f7fe fea6 	bl	800e56c <mem_free>
        }
      }
      count++;
 800f820:	7ffb      	ldrb	r3, [r7, #31]
 800f822:	3301      	adds	r3, #1
 800f824:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800f826:	693b      	ldr	r3, [r7, #16]
 800f828:	607b      	str	r3, [r7, #4]
 800f82a:	e001      	b.n	800f830 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800f82c:	2300      	movs	r3, #0
 800f82e:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d1a3      	bne.n	800f77e <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f836:	7ffb      	ldrb	r3, [r7, #31]
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3720      	adds	r7, #32
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}
 800f840:	0801c6b0 	.word	0x0801c6b0
 800f844:	0801c8e8 	.word	0x0801c8e8
 800f848:	0801c6fc 	.word	0x0801c6fc
 800f84c:	0801c924 	.word	0x0801c924
 800f850:	0801c93c 	.word	0x0801c93c
 800f854:	0801c954 	.word	0x0801c954

0800f858 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f858:	b480      	push	{r7}
 800f85a:	b085      	sub	sp, #20
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f860:	2300      	movs	r3, #0
 800f862:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f864:	e005      	b.n	800f872 <pbuf_clen+0x1a>
    ++len;
 800f866:	89fb      	ldrh	r3, [r7, #14]
 800f868:	3301      	adds	r3, #1
 800f86a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d1f6      	bne.n	800f866 <pbuf_clen+0xe>
  }
  return len;
 800f878:	89fb      	ldrh	r3, [r7, #14]
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3714      	adds	r7, #20
 800f87e:	46bd      	mov	sp, r7
 800f880:	bc80      	pop	{r7}
 800f882:	4770      	bx	lr

0800f884 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b084      	sub	sp, #16
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d016      	beq.n	800f8c0 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800f892:	f00a fbeb 	bl	801a06c <sys_arch_protect>
 800f896:	60f8      	str	r0, [r7, #12]
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	89db      	ldrh	r3, [r3, #14]
 800f89c:	3301      	adds	r3, #1
 800f89e:	b29a      	uxth	r2, r3
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	81da      	strh	r2, [r3, #14]
 800f8a4:	68f8      	ldr	r0, [r7, #12]
 800f8a6:	f00a fbef 	bl	801a088 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	89db      	ldrh	r3, [r3, #14]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d106      	bne.n	800f8c0 <pbuf_ref+0x3c>
 800f8b2:	4b05      	ldr	r3, [pc, #20]	; (800f8c8 <pbuf_ref+0x44>)
 800f8b4:	f240 3239 	movw	r2, #825	; 0x339
 800f8b8:	4904      	ldr	r1, [pc, #16]	; (800f8cc <pbuf_ref+0x48>)
 800f8ba:	4805      	ldr	r0, [pc, #20]	; (800f8d0 <pbuf_ref+0x4c>)
 800f8bc:	f00a fdcc 	bl	801a458 <iprintf>
  }
}
 800f8c0:	bf00      	nop
 800f8c2:	3710      	adds	r7, #16
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}
 800f8c8:	0801c6b0 	.word	0x0801c6b0
 800f8cc:	0801c978 	.word	0x0801c978
 800f8d0:	0801c6fc 	.word	0x0801c6fc

0800f8d4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b084      	sub	sp, #16
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
 800f8dc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d002      	beq.n	800f8ea <pbuf_cat+0x16>
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d107      	bne.n	800f8fa <pbuf_cat+0x26>
 800f8ea:	4b20      	ldr	r3, [pc, #128]	; (800f96c <pbuf_cat+0x98>)
 800f8ec:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800f8f0:	491f      	ldr	r1, [pc, #124]	; (800f970 <pbuf_cat+0x9c>)
 800f8f2:	4820      	ldr	r0, [pc, #128]	; (800f974 <pbuf_cat+0xa0>)
 800f8f4:	f00a fdb0 	bl	801a458 <iprintf>
 800f8f8:	e034      	b.n	800f964 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	60fb      	str	r3, [r7, #12]
 800f8fe:	e00a      	b.n	800f916 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	891a      	ldrh	r2, [r3, #8]
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	891b      	ldrh	r3, [r3, #8]
 800f908:	4413      	add	r3, r2
 800f90a:	b29a      	uxth	r2, r3
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	60fb      	str	r3, [r7, #12]
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d1f0      	bne.n	800f900 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	891a      	ldrh	r2, [r3, #8]
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	895b      	ldrh	r3, [r3, #10]
 800f926:	429a      	cmp	r2, r3
 800f928:	d006      	beq.n	800f938 <pbuf_cat+0x64>
 800f92a:	4b10      	ldr	r3, [pc, #64]	; (800f96c <pbuf_cat+0x98>)
 800f92c:	f240 3255 	movw	r2, #853	; 0x355
 800f930:	4911      	ldr	r1, [pc, #68]	; (800f978 <pbuf_cat+0xa4>)
 800f932:	4810      	ldr	r0, [pc, #64]	; (800f974 <pbuf_cat+0xa0>)
 800f934:	f00a fd90 	bl	801a458 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d006      	beq.n	800f94e <pbuf_cat+0x7a>
 800f940:	4b0a      	ldr	r3, [pc, #40]	; (800f96c <pbuf_cat+0x98>)
 800f942:	f240 3256 	movw	r2, #854	; 0x356
 800f946:	490d      	ldr	r1, [pc, #52]	; (800f97c <pbuf_cat+0xa8>)
 800f948:	480a      	ldr	r0, [pc, #40]	; (800f974 <pbuf_cat+0xa0>)
 800f94a:	f00a fd85 	bl	801a458 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	891a      	ldrh	r2, [r3, #8]
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	891b      	ldrh	r3, [r3, #8]
 800f956:	4413      	add	r3, r2
 800f958:	b29a      	uxth	r2, r3
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	683a      	ldr	r2, [r7, #0]
 800f962:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f964:	3710      	adds	r7, #16
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
 800f96a:	bf00      	nop
 800f96c:	0801c6b0 	.word	0x0801c6b0
 800f970:	0801c98c 	.word	0x0801c98c
 800f974:	0801c6fc 	.word	0x0801c6fc
 800f978:	0801c9c4 	.word	0x0801c9c4
 800f97c:	0801c9f4 	.word	0x0801c9f4

0800f980 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b082      	sub	sp, #8
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
 800f988:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800f98a:	6839      	ldr	r1, [r7, #0]
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	f7ff ffa1 	bl	800f8d4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800f992:	6838      	ldr	r0, [r7, #0]
 800f994:	f7ff ff76 	bl	800f884 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800f998:	bf00      	nop
 800f99a:	3708      	adds	r7, #8
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}

0800f9a0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b084      	sub	sp, #16
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
 800f9a8:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	81fb      	strh	r3, [r7, #14]
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d008      	beq.n	800f9ca <pbuf_copy+0x2a>
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d005      	beq.n	800f9ca <pbuf_copy+0x2a>
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	891a      	ldrh	r2, [r3, #8]
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	891b      	ldrh	r3, [r3, #8]
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d209      	bcs.n	800f9de <pbuf_copy+0x3e>
 800f9ca:	4b54      	ldr	r3, [pc, #336]	; (800fb1c <pbuf_copy+0x17c>)
 800f9cc:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800f9d0:	4953      	ldr	r1, [pc, #332]	; (800fb20 <pbuf_copy+0x180>)
 800f9d2:	4854      	ldr	r0, [pc, #336]	; (800fb24 <pbuf_copy+0x184>)
 800f9d4:	f00a fd40 	bl	801a458 <iprintf>
 800f9d8:	f06f 030f 	mvn.w	r3, #15
 800f9dc:	e099      	b.n	800fb12 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	895b      	ldrh	r3, [r3, #10]
 800f9e2:	461a      	mov	r2, r3
 800f9e4:	89fb      	ldrh	r3, [r7, #14]
 800f9e6:	1ad2      	subs	r2, r2, r3
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	895b      	ldrh	r3, [r3, #10]
 800f9ec:	4619      	mov	r1, r3
 800f9ee:	89bb      	ldrh	r3, [r7, #12]
 800f9f0:	1acb      	subs	r3, r1, r3
 800f9f2:	429a      	cmp	r2, r3
 800f9f4:	db05      	blt.n	800fa02 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	895a      	ldrh	r2, [r3, #10]
 800f9fa:	89bb      	ldrh	r3, [r7, #12]
 800f9fc:	1ad3      	subs	r3, r2, r3
 800f9fe:	817b      	strh	r3, [r7, #10]
 800fa00:	e004      	b.n	800fa0c <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	895a      	ldrh	r2, [r3, #10]
 800fa06:	89fb      	ldrh	r3, [r7, #14]
 800fa08:	1ad3      	subs	r3, r2, r3
 800fa0a:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	685a      	ldr	r2, [r3, #4]
 800fa10:	89fb      	ldrh	r3, [r7, #14]
 800fa12:	18d0      	adds	r0, r2, r3
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	685a      	ldr	r2, [r3, #4]
 800fa18:	89bb      	ldrh	r3, [r7, #12]
 800fa1a:	4413      	add	r3, r2
 800fa1c:	897a      	ldrh	r2, [r7, #10]
 800fa1e:	4619      	mov	r1, r3
 800fa20:	f00a fc6f 	bl	801a302 <memcpy>
    offset_to += len;
 800fa24:	89fa      	ldrh	r2, [r7, #14]
 800fa26:	897b      	ldrh	r3, [r7, #10]
 800fa28:	4413      	add	r3, r2
 800fa2a:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800fa2c:	89ba      	ldrh	r2, [r7, #12]
 800fa2e:	897b      	ldrh	r3, [r7, #10]
 800fa30:	4413      	add	r3, r2
 800fa32:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	895b      	ldrh	r3, [r3, #10]
 800fa38:	89fa      	ldrh	r2, [r7, #14]
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	d906      	bls.n	800fa4c <pbuf_copy+0xac>
 800fa3e:	4b37      	ldr	r3, [pc, #220]	; (800fb1c <pbuf_copy+0x17c>)
 800fa40:	f240 32cd 	movw	r2, #973	; 0x3cd
 800fa44:	4938      	ldr	r1, [pc, #224]	; (800fb28 <pbuf_copy+0x188>)
 800fa46:	4837      	ldr	r0, [pc, #220]	; (800fb24 <pbuf_copy+0x184>)
 800fa48:	f00a fd06 	bl	801a458 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	895b      	ldrh	r3, [r3, #10]
 800fa50:	89ba      	ldrh	r2, [r7, #12]
 800fa52:	429a      	cmp	r2, r3
 800fa54:	d906      	bls.n	800fa64 <pbuf_copy+0xc4>
 800fa56:	4b31      	ldr	r3, [pc, #196]	; (800fb1c <pbuf_copy+0x17c>)
 800fa58:	f240 32ce 	movw	r2, #974	; 0x3ce
 800fa5c:	4933      	ldr	r1, [pc, #204]	; (800fb2c <pbuf_copy+0x18c>)
 800fa5e:	4831      	ldr	r0, [pc, #196]	; (800fb24 <pbuf_copy+0x184>)
 800fa60:	f00a fcfa 	bl	801a458 <iprintf>
    if (offset_from >= p_from->len) {
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	895b      	ldrh	r3, [r3, #10]
 800fa68:	89ba      	ldrh	r2, [r7, #12]
 800fa6a:	429a      	cmp	r2, r3
 800fa6c:	d304      	bcc.n	800fa78 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800fa72:	683b      	ldr	r3, [r7, #0]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	895b      	ldrh	r3, [r3, #10]
 800fa7c:	89fa      	ldrh	r2, [r7, #14]
 800fa7e:	429a      	cmp	r2, r3
 800fa80:	d114      	bne.n	800faac <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800fa82:	2300      	movs	r3, #0
 800fa84:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d10c      	bne.n	800faac <pbuf_copy+0x10c>
 800fa92:	683b      	ldr	r3, [r7, #0]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d009      	beq.n	800faac <pbuf_copy+0x10c>
 800fa98:	4b20      	ldr	r3, [pc, #128]	; (800fb1c <pbuf_copy+0x17c>)
 800fa9a:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800fa9e:	4924      	ldr	r1, [pc, #144]	; (800fb30 <pbuf_copy+0x190>)
 800faa0:	4820      	ldr	r0, [pc, #128]	; (800fb24 <pbuf_copy+0x184>)
 800faa2:	f00a fcd9 	bl	801a458 <iprintf>
 800faa6:	f06f 030f 	mvn.w	r3, #15
 800faaa:	e032      	b.n	800fb12 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d013      	beq.n	800fada <pbuf_copy+0x13a>
 800fab2:	683b      	ldr	r3, [r7, #0]
 800fab4:	895a      	ldrh	r2, [r3, #10]
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	891b      	ldrh	r3, [r3, #8]
 800faba:	429a      	cmp	r2, r3
 800fabc:	d10d      	bne.n	800fada <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800fabe:	683b      	ldr	r3, [r7, #0]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d009      	beq.n	800fada <pbuf_copy+0x13a>
 800fac6:	4b15      	ldr	r3, [pc, #84]	; (800fb1c <pbuf_copy+0x17c>)
 800fac8:	f240 32dd 	movw	r2, #989	; 0x3dd
 800facc:	4919      	ldr	r1, [pc, #100]	; (800fb34 <pbuf_copy+0x194>)
 800face:	4815      	ldr	r0, [pc, #84]	; (800fb24 <pbuf_copy+0x184>)
 800fad0:	f00a fcc2 	bl	801a458 <iprintf>
 800fad4:	f06f 0305 	mvn.w	r3, #5
 800fad8:	e01b      	b.n	800fb12 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d013      	beq.n	800fb08 <pbuf_copy+0x168>
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	895a      	ldrh	r2, [r3, #10]
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	891b      	ldrh	r3, [r3, #8]
 800fae8:	429a      	cmp	r2, r3
 800faea:	d10d      	bne.n	800fb08 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d009      	beq.n	800fb08 <pbuf_copy+0x168>
 800faf4:	4b09      	ldr	r3, [pc, #36]	; (800fb1c <pbuf_copy+0x17c>)
 800faf6:	f240 32e2 	movw	r2, #994	; 0x3e2
 800fafa:	490e      	ldr	r1, [pc, #56]	; (800fb34 <pbuf_copy+0x194>)
 800fafc:	4809      	ldr	r0, [pc, #36]	; (800fb24 <pbuf_copy+0x184>)
 800fafe:	f00a fcab 	bl	801a458 <iprintf>
 800fb02:	f06f 0305 	mvn.w	r3, #5
 800fb06:	e004      	b.n	800fb12 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	f47f af67 	bne.w	800f9de <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800fb10:	2300      	movs	r3, #0
}
 800fb12:	4618      	mov	r0, r3
 800fb14:	3710      	adds	r7, #16
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}
 800fb1a:	bf00      	nop
 800fb1c:	0801c6b0 	.word	0x0801c6b0
 800fb20:	0801ca40 	.word	0x0801ca40
 800fb24:	0801c6fc 	.word	0x0801c6fc
 800fb28:	0801ca70 	.word	0x0801ca70
 800fb2c:	0801ca88 	.word	0x0801ca88
 800fb30:	0801caa4 	.word	0x0801caa4
 800fb34:	0801cab4 	.word	0x0801cab4

0800fb38 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b088      	sub	sp, #32
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	60f8      	str	r0, [r7, #12]
 800fb40:	60b9      	str	r1, [r7, #8]
 800fb42:	4611      	mov	r1, r2
 800fb44:	461a      	mov	r2, r3
 800fb46:	460b      	mov	r3, r1
 800fb48:	80fb      	strh	r3, [r7, #6]
 800fb4a:	4613      	mov	r3, r2
 800fb4c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d108      	bne.n	800fb6a <pbuf_copy_partial+0x32>
 800fb58:	4b30      	ldr	r3, [pc, #192]	; (800fc1c <pbuf_copy_partial+0xe4>)
 800fb5a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800fb5e:	4930      	ldr	r1, [pc, #192]	; (800fc20 <pbuf_copy_partial+0xe8>)
 800fb60:	4830      	ldr	r0, [pc, #192]	; (800fc24 <pbuf_copy_partial+0xec>)
 800fb62:	f00a fc79 	bl	801a458 <iprintf>
 800fb66:	2300      	movs	r3, #0
 800fb68:	e054      	b.n	800fc14 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800fb6a:	68bb      	ldr	r3, [r7, #8]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d108      	bne.n	800fb82 <pbuf_copy_partial+0x4a>
 800fb70:	4b2a      	ldr	r3, [pc, #168]	; (800fc1c <pbuf_copy_partial+0xe4>)
 800fb72:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800fb76:	492c      	ldr	r1, [pc, #176]	; (800fc28 <pbuf_copy_partial+0xf0>)
 800fb78:	482a      	ldr	r0, [pc, #168]	; (800fc24 <pbuf_copy_partial+0xec>)
 800fb7a:	f00a fc6d 	bl	801a458 <iprintf>
 800fb7e:	2300      	movs	r3, #0
 800fb80:	e048      	b.n	800fc14 <pbuf_copy_partial+0xdc>

  left = 0;
 800fb82:	2300      	movs	r3, #0
 800fb84:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d002      	beq.n	800fb92 <pbuf_copy_partial+0x5a>
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d101      	bne.n	800fb96 <pbuf_copy_partial+0x5e>
    return 0;
 800fb92:	2300      	movs	r3, #0
 800fb94:	e03e      	b.n	800fc14 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	61fb      	str	r3, [r7, #28]
 800fb9a:	e034      	b.n	800fc06 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800fb9c:	88bb      	ldrh	r3, [r7, #4]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d00a      	beq.n	800fbb8 <pbuf_copy_partial+0x80>
 800fba2:	69fb      	ldr	r3, [r7, #28]
 800fba4:	895b      	ldrh	r3, [r3, #10]
 800fba6:	88ba      	ldrh	r2, [r7, #4]
 800fba8:	429a      	cmp	r2, r3
 800fbaa:	d305      	bcc.n	800fbb8 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800fbac:	69fb      	ldr	r3, [r7, #28]
 800fbae:	895b      	ldrh	r3, [r3, #10]
 800fbb0:	88ba      	ldrh	r2, [r7, #4]
 800fbb2:	1ad3      	subs	r3, r2, r3
 800fbb4:	80bb      	strh	r3, [r7, #4]
 800fbb6:	e023      	b.n	800fc00 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800fbb8:	69fb      	ldr	r3, [r7, #28]
 800fbba:	895a      	ldrh	r2, [r3, #10]
 800fbbc:	88bb      	ldrh	r3, [r7, #4]
 800fbbe:	1ad3      	subs	r3, r2, r3
 800fbc0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800fbc2:	8b3a      	ldrh	r2, [r7, #24]
 800fbc4:	88fb      	ldrh	r3, [r7, #6]
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d901      	bls.n	800fbce <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800fbca:	88fb      	ldrh	r3, [r7, #6]
 800fbcc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800fbce:	8b7b      	ldrh	r3, [r7, #26]
 800fbd0:	68ba      	ldr	r2, [r7, #8]
 800fbd2:	18d0      	adds	r0, r2, r3
 800fbd4:	69fb      	ldr	r3, [r7, #28]
 800fbd6:	685a      	ldr	r2, [r3, #4]
 800fbd8:	88bb      	ldrh	r3, [r7, #4]
 800fbda:	4413      	add	r3, r2
 800fbdc:	8b3a      	ldrh	r2, [r7, #24]
 800fbde:	4619      	mov	r1, r3
 800fbe0:	f00a fb8f 	bl	801a302 <memcpy>
      copied_total += buf_copy_len;
 800fbe4:	8afa      	ldrh	r2, [r7, #22]
 800fbe6:	8b3b      	ldrh	r3, [r7, #24]
 800fbe8:	4413      	add	r3, r2
 800fbea:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800fbec:	8b7a      	ldrh	r2, [r7, #26]
 800fbee:	8b3b      	ldrh	r3, [r7, #24]
 800fbf0:	4413      	add	r3, r2
 800fbf2:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800fbf4:	88fa      	ldrh	r2, [r7, #6]
 800fbf6:	8b3b      	ldrh	r3, [r7, #24]
 800fbf8:	1ad3      	subs	r3, r2, r3
 800fbfa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800fc00:	69fb      	ldr	r3, [r7, #28]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	61fb      	str	r3, [r7, #28]
 800fc06:	88fb      	ldrh	r3, [r7, #6]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d002      	beq.n	800fc12 <pbuf_copy_partial+0xda>
 800fc0c:	69fb      	ldr	r3, [r7, #28]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d1c4      	bne.n	800fb9c <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800fc12:	8afb      	ldrh	r3, [r7, #22]
}
 800fc14:	4618      	mov	r0, r3
 800fc16:	3720      	adds	r7, #32
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd80      	pop	{r7, pc}
 800fc1c:	0801c6b0 	.word	0x0801c6b0
 800fc20:	0801cae0 	.word	0x0801cae0
 800fc24:	0801c6fc 	.word	0x0801c6fc
 800fc28:	0801cb00 	.word	0x0801cb00

0800fc2c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800fc2c:	b480      	push	{r7}
 800fc2e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800fc30:	bf00      	nop
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bc80      	pop	{r7}
 800fc36:	4770      	bx	lr

0800fc38 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800fc3c:	f000 ffc0 	bl	8010bc0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800fc40:	4b07      	ldr	r3, [pc, #28]	; (800fc60 <tcp_tmr+0x28>)
 800fc42:	781b      	ldrb	r3, [r3, #0]
 800fc44:	3301      	adds	r3, #1
 800fc46:	b2da      	uxtb	r2, r3
 800fc48:	4b05      	ldr	r3, [pc, #20]	; (800fc60 <tcp_tmr+0x28>)
 800fc4a:	701a      	strb	r2, [r3, #0]
 800fc4c:	4b04      	ldr	r3, [pc, #16]	; (800fc60 <tcp_tmr+0x28>)
 800fc4e:	781b      	ldrb	r3, [r3, #0]
 800fc50:	f003 0301 	and.w	r3, r3, #1
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d001      	beq.n	800fc5c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800fc58:	f000 fcf0 	bl	801063c <tcp_slowtmr>
  }
}
 800fc5c:	bf00      	nop
 800fc5e:	bd80      	pop	{r7, pc}
 800fc60:	2000ebd5 	.word	0x2000ebd5

0800fc64 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800fc64:	b480      	push	{r7}
 800fc66:	b085      	sub	sp, #20
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
 800fc6c:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	60fb      	str	r3, [r7, #12]
 800fc72:	e00a      	b.n	800fc8a <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc78:	683a      	ldr	r2, [r7, #0]
 800fc7a:	429a      	cmp	r2, r3
 800fc7c:	d102      	bne.n	800fc84 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	2200      	movs	r2, #0
 800fc82:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	68db      	ldr	r3, [r3, #12]
 800fc88:	60fb      	str	r3, [r7, #12]
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d1f1      	bne.n	800fc74 <tcp_remove_listener+0x10>
      }
   }
}
 800fc90:	bf00      	nop
 800fc92:	bf00      	nop
 800fc94:	3714      	adds	r7, #20
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bc80      	pop	{r7}
 800fc9a:	4770      	bx	lr

0800fc9c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b084      	sub	sp, #16
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d105      	bne.n	800fcb6 <tcp_listen_closed+0x1a>
 800fcaa:	4b13      	ldr	r3, [pc, #76]	; (800fcf8 <tcp_listen_closed+0x5c>)
 800fcac:	22c0      	movs	r2, #192	; 0xc0
 800fcae:	4913      	ldr	r1, [pc, #76]	; (800fcfc <tcp_listen_closed+0x60>)
 800fcb0:	4813      	ldr	r0, [pc, #76]	; (800fd00 <tcp_listen_closed+0x64>)
 800fcb2:	f00a fbd1 	bl	801a458 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	7d1b      	ldrb	r3, [r3, #20]
 800fcba:	2b01      	cmp	r3, #1
 800fcbc:	d005      	beq.n	800fcca <tcp_listen_closed+0x2e>
 800fcbe:	4b0e      	ldr	r3, [pc, #56]	; (800fcf8 <tcp_listen_closed+0x5c>)
 800fcc0:	22c1      	movs	r2, #193	; 0xc1
 800fcc2:	4910      	ldr	r1, [pc, #64]	; (800fd04 <tcp_listen_closed+0x68>)
 800fcc4:	480e      	ldr	r0, [pc, #56]	; (800fd00 <tcp_listen_closed+0x64>)
 800fcc6:	f00a fbc7 	bl	801a458 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fcca:	2301      	movs	r3, #1
 800fccc:	60fb      	str	r3, [r7, #12]
 800fcce:	e00b      	b.n	800fce8 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800fcd0:	4a0d      	ldr	r2, [pc, #52]	; (800fd08 <tcp_listen_closed+0x6c>)
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	6879      	ldr	r1, [r7, #4]
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f7ff ffc1 	bl	800fc64 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	3301      	adds	r3, #1
 800fce6:	60fb      	str	r3, [r7, #12]
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	2b03      	cmp	r3, #3
 800fcec:	d9f0      	bls.n	800fcd0 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800fcee:	bf00      	nop
 800fcf0:	bf00      	nop
 800fcf2:	3710      	adds	r7, #16
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}
 800fcf8:	0801cc34 	.word	0x0801cc34
 800fcfc:	0801cc64 	.word	0x0801cc64
 800fd00:	0801cc70 	.word	0x0801cc70
 800fd04:	0801cc98 	.word	0x0801cc98
 800fd08:	0801e5d8 	.word	0x0801e5d8

0800fd0c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800fd0c:	b5b0      	push	{r4, r5, r7, lr}
 800fd0e:	b086      	sub	sp, #24
 800fd10:	af02      	add	r7, sp, #8
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	460b      	mov	r3, r1
 800fd16:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800fd18:	78fb      	ldrb	r3, [r7, #3]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d075      	beq.n	800fe0a <tcp_close_shutdown+0xfe>
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	7d1b      	ldrb	r3, [r3, #20]
 800fd22:	2b04      	cmp	r3, #4
 800fd24:	d003      	beq.n	800fd2e <tcp_close_shutdown+0x22>
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	7d1b      	ldrb	r3, [r3, #20]
 800fd2a:	2b07      	cmp	r3, #7
 800fd2c:	d16d      	bne.n	800fe0a <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d104      	bne.n	800fd40 <tcp_close_shutdown+0x34>
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd3a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fd3e:	d064      	beq.n	800fe0a <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	7e9b      	ldrb	r3, [r3, #26]
 800fd44:	f003 0310 	and.w	r3, r3, #16
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d106      	bne.n	800fd5a <tcp_close_shutdown+0x4e>
 800fd4c:	4b5b      	ldr	r3, [pc, #364]	; (800febc <tcp_close_shutdown+0x1b0>)
 800fd4e:	f240 120f 	movw	r2, #271	; 0x10f
 800fd52:	495b      	ldr	r1, [pc, #364]	; (800fec0 <tcp_close_shutdown+0x1b4>)
 800fd54:	485b      	ldr	r0, [pc, #364]	; (800fec4 <tcp_close_shutdown+0x1b8>)
 800fd56:	f00a fb7f 	bl	801a458 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800fd62:	687c      	ldr	r4, [r7, #4]
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	1d1d      	adds	r5, r3, #4
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	8adb      	ldrh	r3, [r3, #22]
 800fd6c:	687a      	ldr	r2, [r7, #4]
 800fd6e:	8b12      	ldrh	r2, [r2, #24]
 800fd70:	9201      	str	r2, [sp, #4]
 800fd72:	9300      	str	r3, [sp, #0]
 800fd74:	462b      	mov	r3, r5
 800fd76:	4622      	mov	r2, r4
 800fd78:	f004 ff14 	bl	8014ba4 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	f001 fa51 	bl	8011224 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800fd82:	4b51      	ldr	r3, [pc, #324]	; (800fec8 <tcp_close_shutdown+0x1bc>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	687a      	ldr	r2, [r7, #4]
 800fd88:	429a      	cmp	r2, r3
 800fd8a:	d105      	bne.n	800fd98 <tcp_close_shutdown+0x8c>
 800fd8c:	4b4e      	ldr	r3, [pc, #312]	; (800fec8 <tcp_close_shutdown+0x1bc>)
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	68db      	ldr	r3, [r3, #12]
 800fd92:	4a4d      	ldr	r2, [pc, #308]	; (800fec8 <tcp_close_shutdown+0x1bc>)
 800fd94:	6013      	str	r3, [r2, #0]
 800fd96:	e013      	b.n	800fdc0 <tcp_close_shutdown+0xb4>
 800fd98:	4b4b      	ldr	r3, [pc, #300]	; (800fec8 <tcp_close_shutdown+0x1bc>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	60fb      	str	r3, [r7, #12]
 800fd9e:	e00c      	b.n	800fdba <tcp_close_shutdown+0xae>
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	68db      	ldr	r3, [r3, #12]
 800fda4:	687a      	ldr	r2, [r7, #4]
 800fda6:	429a      	cmp	r2, r3
 800fda8:	d104      	bne.n	800fdb4 <tcp_close_shutdown+0xa8>
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	68da      	ldr	r2, [r3, #12]
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	60da      	str	r2, [r3, #12]
 800fdb2:	e005      	b.n	800fdc0 <tcp_close_shutdown+0xb4>
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	68db      	ldr	r3, [r3, #12]
 800fdb8:	60fb      	str	r3, [r7, #12]
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d1ef      	bne.n	800fda0 <tcp_close_shutdown+0x94>
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	60da      	str	r2, [r3, #12]
 800fdc6:	4b41      	ldr	r3, [pc, #260]	; (800fecc <tcp_close_shutdown+0x1c0>)
 800fdc8:	2201      	movs	r2, #1
 800fdca:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	7d1b      	ldrb	r3, [r3, #20]
 800fdd0:	2b04      	cmp	r3, #4
 800fdd2:	d10c      	bne.n	800fdee <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	220a      	movs	r2, #10
 800fdd8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fdda:	4b3d      	ldr	r3, [pc, #244]	; (800fed0 <tcp_close_shutdown+0x1c4>)
 800fddc:	681a      	ldr	r2, [r3, #0]
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	60da      	str	r2, [r3, #12]
 800fde2:	4a3b      	ldr	r2, [pc, #236]	; (800fed0 <tcp_close_shutdown+0x1c4>)
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	6013      	str	r3, [r2, #0]
 800fde8:	f005 f924 	bl	8015034 <tcp_timer_needed>
 800fdec:	e00b      	b.n	800fe06 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800fdee:	4b39      	ldr	r3, [pc, #228]	; (800fed4 <tcp_close_shutdown+0x1c8>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	687a      	ldr	r2, [r7, #4]
 800fdf4:	429a      	cmp	r2, r3
 800fdf6:	d102      	bne.n	800fdfe <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800fdf8:	f003 fd74 	bl	80138e4 <tcp_trigger_input_pcb_close>
 800fdfc:	e003      	b.n	800fe06 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800fdfe:	6879      	ldr	r1, [r7, #4]
 800fe00:	2001      	movs	r0, #1
 800fe02:	f7fe fecd 	bl	800eba0 <memp_free>
        }
      }
      return ERR_OK;
 800fe06:	2300      	movs	r3, #0
 800fe08:	e053      	b.n	800feb2 <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	7d1b      	ldrb	r3, [r3, #20]
 800fe0e:	2b02      	cmp	r3, #2
 800fe10:	d03d      	beq.n	800fe8e <tcp_close_shutdown+0x182>
 800fe12:	2b02      	cmp	r3, #2
 800fe14:	dc47      	bgt.n	800fea6 <tcp_close_shutdown+0x19a>
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d002      	beq.n	800fe20 <tcp_close_shutdown+0x114>
 800fe1a:	2b01      	cmp	r3, #1
 800fe1c:	d02b      	beq.n	800fe76 <tcp_close_shutdown+0x16a>
 800fe1e:	e042      	b.n	800fea6 <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	8adb      	ldrh	r3, [r3, #22]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d021      	beq.n	800fe6c <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800fe28:	4b2b      	ldr	r3, [pc, #172]	; (800fed8 <tcp_close_shutdown+0x1cc>)
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	687a      	ldr	r2, [r7, #4]
 800fe2e:	429a      	cmp	r2, r3
 800fe30:	d105      	bne.n	800fe3e <tcp_close_shutdown+0x132>
 800fe32:	4b29      	ldr	r3, [pc, #164]	; (800fed8 <tcp_close_shutdown+0x1cc>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	68db      	ldr	r3, [r3, #12]
 800fe38:	4a27      	ldr	r2, [pc, #156]	; (800fed8 <tcp_close_shutdown+0x1cc>)
 800fe3a:	6013      	str	r3, [r2, #0]
 800fe3c:	e013      	b.n	800fe66 <tcp_close_shutdown+0x15a>
 800fe3e:	4b26      	ldr	r3, [pc, #152]	; (800fed8 <tcp_close_shutdown+0x1cc>)
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	60bb      	str	r3, [r7, #8]
 800fe44:	e00c      	b.n	800fe60 <tcp_close_shutdown+0x154>
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	68db      	ldr	r3, [r3, #12]
 800fe4a:	687a      	ldr	r2, [r7, #4]
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d104      	bne.n	800fe5a <tcp_close_shutdown+0x14e>
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	68da      	ldr	r2, [r3, #12]
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	60da      	str	r2, [r3, #12]
 800fe58:	e005      	b.n	800fe66 <tcp_close_shutdown+0x15a>
 800fe5a:	68bb      	ldr	r3, [r7, #8]
 800fe5c:	68db      	ldr	r3, [r3, #12]
 800fe5e:	60bb      	str	r3, [r7, #8]
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d1ef      	bne.n	800fe46 <tcp_close_shutdown+0x13a>
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2200      	movs	r2, #0
 800fe6a:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800fe6c:	6879      	ldr	r1, [r7, #4]
 800fe6e:	2001      	movs	r0, #1
 800fe70:	f7fe fe96 	bl	800eba0 <memp_free>
    break;
 800fe74:	e01c      	b.n	800feb0 <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f7ff ff10 	bl	800fc9c <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800fe7c:	6879      	ldr	r1, [r7, #4]
 800fe7e:	4817      	ldr	r0, [pc, #92]	; (800fedc <tcp_close_shutdown+0x1d0>)
 800fe80:	f001 fa12 	bl	80112a8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800fe84:	6879      	ldr	r1, [r7, #4]
 800fe86:	2002      	movs	r0, #2
 800fe88:	f7fe fe8a 	bl	800eba0 <memp_free>
    break;
 800fe8c:	e010      	b.n	800feb0 <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800fe8e:	6879      	ldr	r1, [r7, #4]
 800fe90:	480d      	ldr	r0, [pc, #52]	; (800fec8 <tcp_close_shutdown+0x1bc>)
 800fe92:	f001 fa09 	bl	80112a8 <tcp_pcb_remove>
 800fe96:	4b0d      	ldr	r3, [pc, #52]	; (800fecc <tcp_close_shutdown+0x1c0>)
 800fe98:	2201      	movs	r2, #1
 800fe9a:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800fe9c:	6879      	ldr	r1, [r7, #4]
 800fe9e:	2001      	movs	r0, #1
 800fea0:	f7fe fe7e 	bl	800eba0 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800fea4:	e004      	b.n	800feb0 <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 800fea6:	6878      	ldr	r0, [r7, #4]
 800fea8:	f000 f81a 	bl	800fee0 <tcp_close_shutdown_fin>
 800feac:	4603      	mov	r3, r0
 800feae:	e000      	b.n	800feb2 <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 800feb0:	2300      	movs	r3, #0
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	3710      	adds	r7, #16
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bdb0      	pop	{r4, r5, r7, pc}
 800feba:	bf00      	nop
 800febc:	0801cc34 	.word	0x0801cc34
 800fec0:	0801ccb0 	.word	0x0801ccb0
 800fec4:	0801cc70 	.word	0x0801cc70
 800fec8:	2000ebcc 	.word	0x2000ebcc
 800fecc:	2000ebd4 	.word	0x2000ebd4
 800fed0:	2000ebd0 	.word	0x2000ebd0
 800fed4:	2000ec0c 	.word	0x2000ec0c
 800fed8:	2000ebc4 	.word	0x2000ebc4
 800fedc:	2000ebc8 	.word	0x2000ebc8

0800fee0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b084      	sub	sp, #16
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d106      	bne.n	800fefc <tcp_close_shutdown_fin+0x1c>
 800feee:	4b2e      	ldr	r3, [pc, #184]	; (800ffa8 <tcp_close_shutdown_fin+0xc8>)
 800fef0:	f240 124d 	movw	r2, #333	; 0x14d
 800fef4:	492d      	ldr	r1, [pc, #180]	; (800ffac <tcp_close_shutdown_fin+0xcc>)
 800fef6:	482e      	ldr	r0, [pc, #184]	; (800ffb0 <tcp_close_shutdown_fin+0xd0>)
 800fef8:	f00a faae 	bl	801a458 <iprintf>

  switch (pcb->state) {
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	7d1b      	ldrb	r3, [r3, #20]
 800ff00:	2b07      	cmp	r3, #7
 800ff02:	d020      	beq.n	800ff46 <tcp_close_shutdown_fin+0x66>
 800ff04:	2b07      	cmp	r3, #7
 800ff06:	dc2b      	bgt.n	800ff60 <tcp_close_shutdown_fin+0x80>
 800ff08:	2b03      	cmp	r3, #3
 800ff0a:	d002      	beq.n	800ff12 <tcp_close_shutdown_fin+0x32>
 800ff0c:	2b04      	cmp	r3, #4
 800ff0e:	d00d      	beq.n	800ff2c <tcp_close_shutdown_fin+0x4c>
 800ff10:	e026      	b.n	800ff60 <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800ff12:	6878      	ldr	r0, [r7, #4]
 800ff14:	f003 fd70 	bl	80139f8 <tcp_send_fin>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ff1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d11f      	bne.n	800ff64 <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2205      	movs	r2, #5
 800ff28:	751a      	strb	r2, [r3, #20]
    }
    break;
 800ff2a:	e01b      	b.n	800ff64 <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f003 fd63 	bl	80139f8 <tcp_send_fin>
 800ff32:	4603      	mov	r3, r0
 800ff34:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ff36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d114      	bne.n	800ff68 <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2205      	movs	r2, #5
 800ff42:	751a      	strb	r2, [r3, #20]
    }
    break;
 800ff44:	e010      	b.n	800ff68 <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f003 fd56 	bl	80139f8 <tcp_send_fin>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ff50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d109      	bne.n	800ff6c <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2209      	movs	r2, #9
 800ff5c:	751a      	strb	r2, [r3, #20]
    }
    break;
 800ff5e:	e005      	b.n	800ff6c <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800ff60:	2300      	movs	r3, #0
 800ff62:	e01c      	b.n	800ff9e <tcp_close_shutdown_fin+0xbe>
    break;
 800ff64:	bf00      	nop
 800ff66:	e002      	b.n	800ff6e <tcp_close_shutdown_fin+0x8e>
    break;
 800ff68:	bf00      	nop
 800ff6a:	e000      	b.n	800ff6e <tcp_close_shutdown_fin+0x8e>
    break;
 800ff6c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ff6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d103      	bne.n	800ff7e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f004 fb90 	bl	801469c <tcp_output>
 800ff7c:	e00d      	b.n	800ff9a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ff7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff86:	d108      	bne.n	800ff9a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	7e9b      	ldrb	r3, [r3, #26]
 800ff8c:	f043 0308 	orr.w	r3, r3, #8
 800ff90:	b2da      	uxtb	r2, r3
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ff96:	2300      	movs	r3, #0
 800ff98:	e001      	b.n	800ff9e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ff9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	3710      	adds	r7, #16
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}
 800ffa6:	bf00      	nop
 800ffa8:	0801cc34 	.word	0x0801cc34
 800ffac:	0801cc64 	.word	0x0801cc64
 800ffb0:	0801cc70 	.word	0x0801cc70

0800ffb4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b082      	sub	sp, #8
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	7d1b      	ldrb	r3, [r3, #20]
 800ffc0:	2b01      	cmp	r3, #1
 800ffc2:	d006      	beq.n	800ffd2 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	7e9b      	ldrb	r3, [r3, #26]
 800ffc8:	f043 0310 	orr.w	r3, r3, #16
 800ffcc:	b2da      	uxtb	r2, r3
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ffd2:	2101      	movs	r1, #1
 800ffd4:	6878      	ldr	r0, [r7, #4]
 800ffd6:	f7ff fe99 	bl	800fd0c <tcp_close_shutdown>
 800ffda:	4603      	mov	r3, r0
}
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3708      	adds	r7, #8
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}

0800ffe4 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b084      	sub	sp, #16
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	60f8      	str	r0, [r7, #12]
 800ffec:	60b9      	str	r1, [r7, #8]
 800ffee:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	7d1b      	ldrb	r3, [r3, #20]
 800fff4:	2b01      	cmp	r3, #1
 800fff6:	d102      	bne.n	800fffe <tcp_shutdown+0x1a>
    return ERR_CONN;
 800fff8:	f06f 030a 	mvn.w	r3, #10
 800fffc:	e036      	b.n	801006c <tcp_shutdown+0x88>
  }
  if (shut_rx) {
 800fffe:	68bb      	ldr	r3, [r7, #8]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d01b      	beq.n	801003c <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	7e9b      	ldrb	r3, [r3, #26]
 8010008:	f043 0310 	orr.w	r3, r3, #16
 801000c:	b2da      	uxtb	r2, r3
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d005      	beq.n	8010024 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8010018:	2101      	movs	r1, #1
 801001a:	68f8      	ldr	r0, [r7, #12]
 801001c:	f7ff fe76 	bl	800fd0c <tcp_close_shutdown>
 8010020:	4603      	mov	r3, r0
 8010022:	e023      	b.n	801006c <tcp_shutdown+0x88>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010028:	2b00      	cmp	r3, #0
 801002a:	d007      	beq.n	801003c <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010030:	4618      	mov	r0, r3
 8010032:	f7ff fb77 	bl	800f724 <pbuf_free>
      pcb->refused_data = NULL;
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	2200      	movs	r2, #0
 801003a:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d013      	beq.n	801006a <tcp_shutdown+0x86>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	7d1b      	ldrb	r3, [r3, #20]
 8010046:	2b04      	cmp	r3, #4
 8010048:	dc02      	bgt.n	8010050 <tcp_shutdown+0x6c>
 801004a:	2b03      	cmp	r3, #3
 801004c:	da02      	bge.n	8010054 <tcp_shutdown+0x70>
 801004e:	e009      	b.n	8010064 <tcp_shutdown+0x80>
 8010050:	2b07      	cmp	r3, #7
 8010052:	d107      	bne.n	8010064 <tcp_shutdown+0x80>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	b2db      	uxtb	r3, r3
 8010058:	4619      	mov	r1, r3
 801005a:	68f8      	ldr	r0, [r7, #12]
 801005c:	f7ff fe56 	bl	800fd0c <tcp_close_shutdown>
 8010060:	4603      	mov	r3, r0
 8010062:	e003      	b.n	801006c <tcp_shutdown+0x88>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 8010064:	f06f 030a 	mvn.w	r3, #10
 8010068:	e000      	b.n	801006c <tcp_shutdown+0x88>
    }
  }
  return ERR_OK;
 801006a:	2300      	movs	r3, #0
}
 801006c:	4618      	mov	r0, r3
 801006e:	3710      	adds	r7, #16
 8010070:	46bd      	mov	sp, r7
 8010072:	bd80      	pop	{r7, pc}

08010074 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b08c      	sub	sp, #48	; 0x30
 8010078:	af02      	add	r7, sp, #8
 801007a:	6078      	str	r0, [r7, #4]
 801007c:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	7d1b      	ldrb	r3, [r3, #20]
 8010082:	2b01      	cmp	r3, #1
 8010084:	d106      	bne.n	8010094 <tcp_abandon+0x20>
 8010086:	4b4d      	ldr	r3, [pc, #308]	; (80101bc <tcp_abandon+0x148>)
 8010088:	f240 12df 	movw	r2, #479	; 0x1df
 801008c:	494c      	ldr	r1, [pc, #304]	; (80101c0 <tcp_abandon+0x14c>)
 801008e:	484d      	ldr	r0, [pc, #308]	; (80101c4 <tcp_abandon+0x150>)
 8010090:	f00a f9e2 	bl	801a458 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	7d1b      	ldrb	r3, [r3, #20]
 8010098:	2b0a      	cmp	r3, #10
 801009a:	d108      	bne.n	80100ae <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801009c:	6879      	ldr	r1, [r7, #4]
 801009e:	484a      	ldr	r0, [pc, #296]	; (80101c8 <tcp_abandon+0x154>)
 80100a0:	f001 f902 	bl	80112a8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80100a4:	6879      	ldr	r1, [r7, #4]
 80100a6:	2001      	movs	r0, #1
 80100a8:	f7fe fd7a 	bl	800eba0 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 80100ac:	e081      	b.n	80101b2 <tcp_abandon+0x13e>
    int send_rst = 0;
 80100ae:	2300      	movs	r3, #0
 80100b0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80100b2:	2300      	movs	r3, #0
 80100b4:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100ba:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100c0:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80100c8:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	691b      	ldr	r3, [r3, #16]
 80100ce:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	7d1b      	ldrb	r3, [r3, #20]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d126      	bne.n	8010126 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	8adb      	ldrh	r3, [r3, #22]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d02e      	beq.n	801013e <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80100e0:	4b3a      	ldr	r3, [pc, #232]	; (80101cc <tcp_abandon+0x158>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	687a      	ldr	r2, [r7, #4]
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d105      	bne.n	80100f6 <tcp_abandon+0x82>
 80100ea:	4b38      	ldr	r3, [pc, #224]	; (80101cc <tcp_abandon+0x158>)
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	68db      	ldr	r3, [r3, #12]
 80100f0:	4a36      	ldr	r2, [pc, #216]	; (80101cc <tcp_abandon+0x158>)
 80100f2:	6013      	str	r3, [r2, #0]
 80100f4:	e013      	b.n	801011e <tcp_abandon+0xaa>
 80100f6:	4b35      	ldr	r3, [pc, #212]	; (80101cc <tcp_abandon+0x158>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	61fb      	str	r3, [r7, #28]
 80100fc:	e00c      	b.n	8010118 <tcp_abandon+0xa4>
 80100fe:	69fb      	ldr	r3, [r7, #28]
 8010100:	68db      	ldr	r3, [r3, #12]
 8010102:	687a      	ldr	r2, [r7, #4]
 8010104:	429a      	cmp	r2, r3
 8010106:	d104      	bne.n	8010112 <tcp_abandon+0x9e>
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	68da      	ldr	r2, [r3, #12]
 801010c:	69fb      	ldr	r3, [r7, #28]
 801010e:	60da      	str	r2, [r3, #12]
 8010110:	e005      	b.n	801011e <tcp_abandon+0xaa>
 8010112:	69fb      	ldr	r3, [r7, #28]
 8010114:	68db      	ldr	r3, [r3, #12]
 8010116:	61fb      	str	r3, [r7, #28]
 8010118:	69fb      	ldr	r3, [r7, #28]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d1ef      	bne.n	80100fe <tcp_abandon+0x8a>
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	2200      	movs	r2, #0
 8010122:	60da      	str	r2, [r3, #12]
 8010124:	e00b      	b.n	801013e <tcp_abandon+0xca>
      send_rst = reset;
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	8adb      	ldrh	r3, [r3, #22]
 801012e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010130:	6879      	ldr	r1, [r7, #4]
 8010132:	4827      	ldr	r0, [pc, #156]	; (80101d0 <tcp_abandon+0x15c>)
 8010134:	f001 f8b8 	bl	80112a8 <tcp_pcb_remove>
 8010138:	4b26      	ldr	r3, [pc, #152]	; (80101d4 <tcp_abandon+0x160>)
 801013a:	2201      	movs	r2, #1
 801013c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010142:	2b00      	cmp	r3, #0
 8010144:	d004      	beq.n	8010150 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801014a:	4618      	mov	r0, r3
 801014c:	f000 fe05 	bl	8010d5a <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010154:	2b00      	cmp	r3, #0
 8010156:	d004      	beq.n	8010162 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801015c:	4618      	mov	r0, r3
 801015e:	f000 fdfc 	bl	8010d5a <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010166:	2b00      	cmp	r3, #0
 8010168:	d004      	beq.n	8010174 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801016e:	4618      	mov	r0, r3
 8010170:	f000 fdf3 	bl	8010d5a <tcp_segs_free>
    if (send_rst) {
 8010174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010176:	2b00      	cmp	r3, #0
 8010178:	d00c      	beq.n	8010194 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801017a:	687a      	ldr	r2, [r7, #4]
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	1d19      	adds	r1, r3, #4
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	8b1b      	ldrh	r3, [r3, #24]
 8010184:	9301      	str	r3, [sp, #4]
 8010186:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010188:	9300      	str	r3, [sp, #0]
 801018a:	460b      	mov	r3, r1
 801018c:	6979      	ldr	r1, [r7, #20]
 801018e:	69b8      	ldr	r0, [r7, #24]
 8010190:	f004 fd08 	bl	8014ba4 <tcp_rst>
    last_state = pcb->state;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	7d1b      	ldrb	r3, [r3, #20]
 8010198:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 801019a:	6879      	ldr	r1, [r7, #4]
 801019c:	2001      	movs	r0, #1
 801019e:	f7fe fcff 	bl	800eba0 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80101a2:	693b      	ldr	r3, [r7, #16]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d004      	beq.n	80101b2 <tcp_abandon+0x13e>
 80101a8:	693b      	ldr	r3, [r7, #16]
 80101aa:	f06f 010c 	mvn.w	r1, #12
 80101ae:	68f8      	ldr	r0, [r7, #12]
 80101b0:	4798      	blx	r3
}
 80101b2:	bf00      	nop
 80101b4:	3728      	adds	r7, #40	; 0x28
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}
 80101ba:	bf00      	nop
 80101bc:	0801cc34 	.word	0x0801cc34
 80101c0:	0801cccc 	.word	0x0801cccc
 80101c4:	0801cc70 	.word	0x0801cc70
 80101c8:	2000ebd0 	.word	0x2000ebd0
 80101cc:	2000ebc4 	.word	0x2000ebc4
 80101d0:	2000ebcc 	.word	0x2000ebcc
 80101d4:	2000ebd4 	.word	0x2000ebd4

080101d8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b082      	sub	sp, #8
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80101e0:	2101      	movs	r1, #1
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	f7ff ff46 	bl	8010074 <tcp_abandon>
}
 80101e8:	bf00      	nop
 80101ea:	3708      	adds	r7, #8
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}

080101f0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b088      	sub	sp, #32
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	60f8      	str	r0, [r7, #12]
 80101f8:	60b9      	str	r1, [r7, #8]
 80101fa:	4613      	mov	r3, r2
 80101fc:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80101fe:	2304      	movs	r3, #4
 8010200:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d101      	bne.n	801020c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8010208:	4b3c      	ldr	r3, [pc, #240]	; (80102fc <tcp_bind+0x10c>)
 801020a:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d002      	beq.n	8010218 <tcp_bind+0x28>
 8010212:	68bb      	ldr	r3, [r7, #8]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d102      	bne.n	801021e <tcp_bind+0x2e>
    return ERR_VAL;
 8010218:	f06f 0305 	mvn.w	r3, #5
 801021c:	e06a      	b.n	80102f4 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	7d1b      	ldrb	r3, [r3, #20]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d009      	beq.n	801023a <tcp_bind+0x4a>
 8010226:	4b36      	ldr	r3, [pc, #216]	; (8010300 <tcp_bind+0x110>)
 8010228:	f44f 7211 	mov.w	r2, #580	; 0x244
 801022c:	4935      	ldr	r1, [pc, #212]	; (8010304 <tcp_bind+0x114>)
 801022e:	4836      	ldr	r0, [pc, #216]	; (8010308 <tcp_bind+0x118>)
 8010230:	f00a f912 	bl	801a458 <iprintf>
 8010234:	f06f 0305 	mvn.w	r3, #5
 8010238:	e05c      	b.n	80102f4 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 801023a:	88fb      	ldrh	r3, [r7, #6]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d109      	bne.n	8010254 <tcp_bind+0x64>
    port = tcp_new_port();
 8010240:	f000 f9b8 	bl	80105b4 <tcp_new_port>
 8010244:	4603      	mov	r3, r0
 8010246:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010248:	88fb      	ldrh	r3, [r7, #6]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d135      	bne.n	80102ba <tcp_bind+0xca>
      return ERR_BUF;
 801024e:	f06f 0301 	mvn.w	r3, #1
 8010252:	e04f      	b.n	80102f4 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8010254:	2300      	movs	r3, #0
 8010256:	61fb      	str	r3, [r7, #28]
 8010258:	e02b      	b.n	80102b2 <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801025a:	4a2c      	ldr	r2, [pc, #176]	; (801030c <tcp_bind+0x11c>)
 801025c:	69fb      	ldr	r3, [r7, #28]
 801025e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	61bb      	str	r3, [r7, #24]
 8010266:	e01e      	b.n	80102a6 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 8010268:	69bb      	ldr	r3, [r7, #24]
 801026a:	8adb      	ldrh	r3, [r3, #22]
 801026c:	88fa      	ldrh	r2, [r7, #6]
 801026e:	429a      	cmp	r2, r3
 8010270:	d116      	bne.n	80102a0 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8010272:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010274:	2b00      	cmp	r3, #0
 8010276:	d010      	beq.n	801029a <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 8010278:	69bb      	ldr	r3, [r7, #24]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d00c      	beq.n	801029a <tcp_bind+0xaa>
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d009      	beq.n	801029a <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d005      	beq.n	801029a <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801028e:	69bb      	ldr	r3, [r7, #24]
 8010290:	681a      	ldr	r2, [r3, #0]
 8010292:	68bb      	ldr	r3, [r7, #8]
 8010294:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010296:	429a      	cmp	r2, r3
 8010298:	d102      	bne.n	80102a0 <tcp_bind+0xb0>
              return ERR_USE;
 801029a:	f06f 0307 	mvn.w	r3, #7
 801029e:	e029      	b.n	80102f4 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80102a0:	69bb      	ldr	r3, [r7, #24]
 80102a2:	68db      	ldr	r3, [r3, #12]
 80102a4:	61bb      	str	r3, [r7, #24]
 80102a6:	69bb      	ldr	r3, [r7, #24]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d1dd      	bne.n	8010268 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 80102ac:	69fb      	ldr	r3, [r7, #28]
 80102ae:	3301      	adds	r3, #1
 80102b0:	61fb      	str	r3, [r7, #28]
 80102b2:	69fa      	ldr	r2, [r7, #28]
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	429a      	cmp	r2, r3
 80102b8:	dbcf      	blt.n	801025a <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d00c      	beq.n	80102da <tcp_bind+0xea>
 80102c0:	68bb      	ldr	r3, [r7, #8]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d008      	beq.n	80102da <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 80102c8:	68bb      	ldr	r3, [r7, #8]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d002      	beq.n	80102d4 <tcp_bind+0xe4>
 80102ce:	68bb      	ldr	r3, [r7, #8]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	e000      	b.n	80102d6 <tcp_bind+0xe6>
 80102d4:	2300      	movs	r3, #0
 80102d6:	68fa      	ldr	r2, [r7, #12]
 80102d8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	88fa      	ldrh	r2, [r7, #6]
 80102de:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80102e0:	4b0b      	ldr	r3, [pc, #44]	; (8010310 <tcp_bind+0x120>)
 80102e2:	681a      	ldr	r2, [r3, #0]
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	60da      	str	r2, [r3, #12]
 80102e8:	4a09      	ldr	r2, [pc, #36]	; (8010310 <tcp_bind+0x120>)
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	6013      	str	r3, [r2, #0]
 80102ee:	f004 fea1 	bl	8015034 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80102f2:	2300      	movs	r3, #0
}
 80102f4:	4618      	mov	r0, r3
 80102f6:	3720      	adds	r7, #32
 80102f8:	46bd      	mov	sp, r7
 80102fa:	bd80      	pop	{r7, pc}
 80102fc:	0801e610 	.word	0x0801e610
 8010300:	0801cc34 	.word	0x0801cc34
 8010304:	0801cd00 	.word	0x0801cd00
 8010308:	0801cc70 	.word	0x0801cc70
 801030c:	0801e5d8 	.word	0x0801e5d8
 8010310:	2000ebc4 	.word	0x2000ebc4

08010314 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b084      	sub	sp, #16
 8010318:	af00      	add	r7, sp, #0
 801031a:	60f8      	str	r0, [r7, #12]
 801031c:	60b9      	str	r1, [r7, #8]
 801031e:	4613      	mov	r3, r2
 8010320:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 8010322:	68b8      	ldr	r0, [r7, #8]
 8010324:	f7ff ff58 	bl	80101d8 <tcp_abort>

  return ERR_ABRT;
 8010328:	f06f 030c 	mvn.w	r3, #12
}
 801032c:	4618      	mov	r0, r3
 801032e:	3710      	adds	r7, #16
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}

08010334 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b088      	sub	sp, #32
 8010338:	af00      	add	r7, sp, #0
 801033a:	60f8      	str	r0, [r7, #12]
 801033c:	460b      	mov	r3, r1
 801033e:	607a      	str	r2, [r7, #4]
 8010340:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8010342:	2300      	movs	r3, #0
 8010344:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	7d1b      	ldrb	r3, [r3, #20]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d009      	beq.n	8010362 <tcp_listen_with_backlog_and_err+0x2e>
 801034e:	4b3f      	ldr	r3, [pc, #252]	; (801044c <tcp_listen_with_backlog_and_err+0x118>)
 8010350:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8010354:	493e      	ldr	r1, [pc, #248]	; (8010450 <tcp_listen_with_backlog_and_err+0x11c>)
 8010356:	483f      	ldr	r0, [pc, #252]	; (8010454 <tcp_listen_with_backlog_and_err+0x120>)
 8010358:	f00a f87e 	bl	801a458 <iprintf>
 801035c:	23f1      	movs	r3, #241	; 0xf1
 801035e:	76fb      	strb	r3, [r7, #27]
 8010360:	e069      	b.n	8010436 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	7d1b      	ldrb	r3, [r3, #20]
 8010366:	2b01      	cmp	r3, #1
 8010368:	d104      	bne.n	8010374 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801036e:	23f7      	movs	r3, #247	; 0xf7
 8010370:	76fb      	strb	r3, [r7, #27]
    goto done;
 8010372:	e060      	b.n	8010436 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8010374:	2002      	movs	r0, #2
 8010376:	f7fe fbc1 	bl	800eafc <memp_malloc>
 801037a:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801037c:	69fb      	ldr	r3, [r7, #28]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d102      	bne.n	8010388 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 8010382:	23ff      	movs	r3, #255	; 0xff
 8010384:	76fb      	strb	r3, [r7, #27]
    goto done;
 8010386:	e056      	b.n	8010436 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	691a      	ldr	r2, [r3, #16]
 801038c:	69fb      	ldr	r3, [r7, #28]
 801038e:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	8ada      	ldrh	r2, [r3, #22]
 8010394:	69fb      	ldr	r3, [r7, #28]
 8010396:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8010398:	69fb      	ldr	r3, [r7, #28]
 801039a:	2201      	movs	r2, #1
 801039c:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	7d5a      	ldrb	r2, [r3, #21]
 80103a2:	69fb      	ldr	r3, [r7, #28]
 80103a4:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	7a1a      	ldrb	r2, [r3, #8]
 80103aa:	69fb      	ldr	r3, [r7, #28]
 80103ac:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	7a9a      	ldrb	r2, [r3, #10]
 80103b2:	69fb      	ldr	r3, [r7, #28]
 80103b4:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	7a5a      	ldrb	r2, [r3, #9]
 80103ba:	69fb      	ldr	r3, [r7, #28]
 80103bc:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	681a      	ldr	r2, [r3, #0]
 80103c2:	69fb      	ldr	r3, [r7, #28]
 80103c4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	8adb      	ldrh	r3, [r3, #22]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d021      	beq.n	8010412 <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80103ce:	4b22      	ldr	r3, [pc, #136]	; (8010458 <tcp_listen_with_backlog_and_err+0x124>)
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	68fa      	ldr	r2, [r7, #12]
 80103d4:	429a      	cmp	r2, r3
 80103d6:	d105      	bne.n	80103e4 <tcp_listen_with_backlog_and_err+0xb0>
 80103d8:	4b1f      	ldr	r3, [pc, #124]	; (8010458 <tcp_listen_with_backlog_and_err+0x124>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	68db      	ldr	r3, [r3, #12]
 80103de:	4a1e      	ldr	r2, [pc, #120]	; (8010458 <tcp_listen_with_backlog_and_err+0x124>)
 80103e0:	6013      	str	r3, [r2, #0]
 80103e2:	e013      	b.n	801040c <tcp_listen_with_backlog_and_err+0xd8>
 80103e4:	4b1c      	ldr	r3, [pc, #112]	; (8010458 <tcp_listen_with_backlog_and_err+0x124>)
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	617b      	str	r3, [r7, #20]
 80103ea:	e00c      	b.n	8010406 <tcp_listen_with_backlog_and_err+0xd2>
 80103ec:	697b      	ldr	r3, [r7, #20]
 80103ee:	68db      	ldr	r3, [r3, #12]
 80103f0:	68fa      	ldr	r2, [r7, #12]
 80103f2:	429a      	cmp	r2, r3
 80103f4:	d104      	bne.n	8010400 <tcp_listen_with_backlog_and_err+0xcc>
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	68da      	ldr	r2, [r3, #12]
 80103fa:	697b      	ldr	r3, [r7, #20]
 80103fc:	60da      	str	r2, [r3, #12]
 80103fe:	e005      	b.n	801040c <tcp_listen_with_backlog_and_err+0xd8>
 8010400:	697b      	ldr	r3, [r7, #20]
 8010402:	68db      	ldr	r3, [r3, #12]
 8010404:	617b      	str	r3, [r7, #20]
 8010406:	697b      	ldr	r3, [r7, #20]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d1ef      	bne.n	80103ec <tcp_listen_with_backlog_and_err+0xb8>
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	2200      	movs	r2, #0
 8010410:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 8010412:	68f9      	ldr	r1, [r7, #12]
 8010414:	2001      	movs	r0, #1
 8010416:	f7fe fbc3 	bl	800eba0 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801041a:	69fb      	ldr	r3, [r7, #28]
 801041c:	4a0f      	ldr	r2, [pc, #60]	; (801045c <tcp_listen_with_backlog_and_err+0x128>)
 801041e:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8010420:	4b0f      	ldr	r3, [pc, #60]	; (8010460 <tcp_listen_with_backlog_and_err+0x12c>)
 8010422:	681a      	ldr	r2, [r3, #0]
 8010424:	69fb      	ldr	r3, [r7, #28]
 8010426:	60da      	str	r2, [r3, #12]
 8010428:	4a0d      	ldr	r2, [pc, #52]	; (8010460 <tcp_listen_with_backlog_and_err+0x12c>)
 801042a:	69fb      	ldr	r3, [r7, #28]
 801042c:	6013      	str	r3, [r2, #0]
 801042e:	f004 fe01 	bl	8015034 <tcp_timer_needed>
  res = ERR_OK;
 8010432:	2300      	movs	r3, #0
 8010434:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d002      	beq.n	8010442 <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	7efa      	ldrb	r2, [r7, #27]
 8010440:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8010442:	69fb      	ldr	r3, [r7, #28]
}
 8010444:	4618      	mov	r0, r3
 8010446:	3720      	adds	r7, #32
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}
 801044c:	0801cc34 	.word	0x0801cc34
 8010450:	0801cd28 	.word	0x0801cd28
 8010454:	0801cc70 	.word	0x0801cc70
 8010458:	2000ebc4 	.word	0x2000ebc4
 801045c:	08010315 	.word	0x08010315
 8010460:	2000ebc8 	.word	0x2000ebc8

08010464 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b084      	sub	sp, #16
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010470:	687a      	ldr	r2, [r7, #4]
 8010472:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010474:	4413      	add	r3, r2
 8010476:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801047c:	687a      	ldr	r2, [r7, #4]
 801047e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8010480:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8010484:	bf28      	it	cs
 8010486:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801048a:	b292      	uxth	r2, r2
 801048c:	4413      	add	r3, r2
 801048e:	68fa      	ldr	r2, [r7, #12]
 8010490:	1ad3      	subs	r3, r2, r3
 8010492:	2b00      	cmp	r3, #0
 8010494:	db08      	blt.n	80104a8 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104a2:	68fa      	ldr	r2, [r7, #12]
 80104a4:	1ad3      	subs	r3, r2, r3
 80104a6:	e020      	b.n	80104ea <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104b0:	1ad3      	subs	r3, r2, r3
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	dd03      	ble.n	80104be <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	2200      	movs	r2, #0
 80104ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80104bc:	e014      	b.n	80104e8 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104c6:	1ad3      	subs	r3, r2, r3
 80104c8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80104d0:	d306      	bcc.n	80104e0 <tcp_update_rcv_ann_wnd+0x7c>
 80104d2:	4b08      	ldr	r3, [pc, #32]	; (80104f4 <tcp_update_rcv_ann_wnd+0x90>)
 80104d4:	f44f 7242 	mov.w	r2, #776	; 0x308
 80104d8:	4907      	ldr	r1, [pc, #28]	; (80104f8 <tcp_update_rcv_ann_wnd+0x94>)
 80104da:	4808      	ldr	r0, [pc, #32]	; (80104fc <tcp_update_rcv_ann_wnd+0x98>)
 80104dc:	f009 ffbc 	bl	801a458 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80104e0:	68bb      	ldr	r3, [r7, #8]
 80104e2:	b29a      	uxth	r2, r3
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80104e8:	2300      	movs	r3, #0
  }
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	3710      	adds	r7, #16
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}
 80104f2:	bf00      	nop
 80104f4:	0801cc34 	.word	0x0801cc34
 80104f8:	0801cd4c 	.word	0x0801cd4c
 80104fc:	0801cc70 	.word	0x0801cc70

08010500 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b084      	sub	sp, #16
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
 8010508:	460b      	mov	r3, r1
 801050a:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	7d1b      	ldrb	r3, [r3, #20]
 8010510:	2b01      	cmp	r3, #1
 8010512:	d106      	bne.n	8010522 <tcp_recved+0x22>
 8010514:	4b23      	ldr	r3, [pc, #140]	; (80105a4 <tcp_recved+0xa4>)
 8010516:	f240 321f 	movw	r2, #799	; 0x31f
 801051a:	4923      	ldr	r1, [pc, #140]	; (80105a8 <tcp_recved+0xa8>)
 801051c:	4823      	ldr	r0, [pc, #140]	; (80105ac <tcp_recved+0xac>)
 801051e:	f009 ff9b 	bl	801a458 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010526:	887b      	ldrh	r3, [r7, #2]
 8010528:	4413      	add	r3, r2
 801052a:	b29a      	uxth	r2, r3
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010534:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010538:	d904      	bls.n	8010544 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010540:	851a      	strh	r2, [r3, #40]	; 0x28
 8010542:	e017      	b.n	8010574 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010548:	2b00      	cmp	r3, #0
 801054a:	d113      	bne.n	8010574 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	7d1b      	ldrb	r3, [r3, #20]
 8010550:	2b07      	cmp	r3, #7
 8010552:	d003      	beq.n	801055c <tcp_recved+0x5c>
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	7d1b      	ldrb	r3, [r3, #20]
 8010558:	2b09      	cmp	r3, #9
 801055a:	d104      	bne.n	8010566 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010562:	851a      	strh	r2, [r3, #40]	; 0x28
 8010564:	e006      	b.n	8010574 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8010566:	4b0f      	ldr	r3, [pc, #60]	; (80105a4 <tcp_recved+0xa4>)
 8010568:	f240 322d 	movw	r2, #813	; 0x32d
 801056c:	4910      	ldr	r1, [pc, #64]	; (80105b0 <tcp_recved+0xb0>)
 801056e:	480f      	ldr	r0, [pc, #60]	; (80105ac <tcp_recved+0xac>)
 8010570:	f009 ff72 	bl	801a458 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f7ff ff75 	bl	8010464 <tcp_update_rcv_ann_wnd>
 801057a:	4603      	mov	r3, r0
 801057c:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010584:	db09      	blt.n	801059a <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	7e9b      	ldrb	r3, [r3, #26]
 801058a:	f043 0302 	orr.w	r3, r3, #2
 801058e:	b2da      	uxtb	r2, r3
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8010594:	6878      	ldr	r0, [r7, #4]
 8010596:	f004 f881 	bl	801469c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801059a:	bf00      	nop
 801059c:	3710      	adds	r7, #16
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}
 80105a2:	bf00      	nop
 80105a4:	0801cc34 	.word	0x0801cc34
 80105a8:	0801cd68 	.word	0x0801cd68
 80105ac:	0801cc70 	.word	0x0801cc70
 80105b0:	0801cd90 	.word	0x0801cd90

080105b4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80105b4:	b480      	push	{r7}
 80105b6:	b083      	sub	sp, #12
 80105b8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80105ba:	2300      	movs	r3, #0
 80105bc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80105be:	4b1d      	ldr	r3, [pc, #116]	; (8010634 <tcp_new_port+0x80>)
 80105c0:	881b      	ldrh	r3, [r3, #0]
 80105c2:	1c5a      	adds	r2, r3, #1
 80105c4:	b291      	uxth	r1, r2
 80105c6:	4a1b      	ldr	r2, [pc, #108]	; (8010634 <tcp_new_port+0x80>)
 80105c8:	8011      	strh	r1, [r2, #0]
 80105ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80105ce:	4293      	cmp	r3, r2
 80105d0:	d103      	bne.n	80105da <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80105d2:	4b18      	ldr	r3, [pc, #96]	; (8010634 <tcp_new_port+0x80>)
 80105d4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80105d8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80105da:	2300      	movs	r3, #0
 80105dc:	71fb      	strb	r3, [r7, #7]
 80105de:	e01e      	b.n	801061e <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80105e0:	79fb      	ldrb	r3, [r7, #7]
 80105e2:	4a15      	ldr	r2, [pc, #84]	; (8010638 <tcp_new_port+0x84>)
 80105e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	603b      	str	r3, [r7, #0]
 80105ec:	e011      	b.n	8010612 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	8ada      	ldrh	r2, [r3, #22]
 80105f2:	4b10      	ldr	r3, [pc, #64]	; (8010634 <tcp_new_port+0x80>)
 80105f4:	881b      	ldrh	r3, [r3, #0]
 80105f6:	429a      	cmp	r2, r3
 80105f8:	d108      	bne.n	801060c <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80105fa:	88bb      	ldrh	r3, [r7, #4]
 80105fc:	3301      	adds	r3, #1
 80105fe:	80bb      	strh	r3, [r7, #4]
 8010600:	88bb      	ldrh	r3, [r7, #4]
 8010602:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010606:	d3da      	bcc.n	80105be <tcp_new_port+0xa>
          return 0;
 8010608:	2300      	movs	r3, #0
 801060a:	e00d      	b.n	8010628 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	68db      	ldr	r3, [r3, #12]
 8010610:	603b      	str	r3, [r7, #0]
 8010612:	683b      	ldr	r3, [r7, #0]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d1ea      	bne.n	80105ee <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8010618:	79fb      	ldrb	r3, [r7, #7]
 801061a:	3301      	adds	r3, #1
 801061c:	71fb      	strb	r3, [r7, #7]
 801061e:	79fb      	ldrb	r3, [r7, #7]
 8010620:	2b03      	cmp	r3, #3
 8010622:	d9dd      	bls.n	80105e0 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8010624:	4b03      	ldr	r3, [pc, #12]	; (8010634 <tcp_new_port+0x80>)
 8010626:	881b      	ldrh	r3, [r3, #0]
}
 8010628:	4618      	mov	r0, r3
 801062a:	370c      	adds	r7, #12
 801062c:	46bd      	mov	sp, r7
 801062e:	bc80      	pop	{r7}
 8010630:	4770      	bx	lr
 8010632:	bf00      	nop
 8010634:	20000010 	.word	0x20000010
 8010638:	0801e5d8 	.word	0x0801e5d8

0801063c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801063c:	b5b0      	push	{r4, r5, r7, lr}
 801063e:	b08c      	sub	sp, #48	; 0x30
 8010640:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8010642:	2300      	movs	r3, #0
 8010644:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8010646:	4b97      	ldr	r3, [pc, #604]	; (80108a4 <tcp_slowtmr+0x268>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	3301      	adds	r3, #1
 801064c:	4a95      	ldr	r2, [pc, #596]	; (80108a4 <tcp_slowtmr+0x268>)
 801064e:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8010650:	4b95      	ldr	r3, [pc, #596]	; (80108a8 <tcp_slowtmr+0x26c>)
 8010652:	781b      	ldrb	r3, [r3, #0]
 8010654:	3301      	adds	r3, #1
 8010656:	b2da      	uxtb	r2, r3
 8010658:	4b93      	ldr	r3, [pc, #588]	; (80108a8 <tcp_slowtmr+0x26c>)
 801065a:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801065c:	2300      	movs	r3, #0
 801065e:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8010660:	4b92      	ldr	r3, [pc, #584]	; (80108ac <tcp_slowtmr+0x270>)
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8010666:	e227      	b.n	8010ab8 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8010668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801066a:	7d1b      	ldrb	r3, [r3, #20]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d106      	bne.n	801067e <tcp_slowtmr+0x42>
 8010670:	4b8f      	ldr	r3, [pc, #572]	; (80108b0 <tcp_slowtmr+0x274>)
 8010672:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8010676:	498f      	ldr	r1, [pc, #572]	; (80108b4 <tcp_slowtmr+0x278>)
 8010678:	488f      	ldr	r0, [pc, #572]	; (80108b8 <tcp_slowtmr+0x27c>)
 801067a:	f009 feed 	bl	801a458 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801067e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010680:	7d1b      	ldrb	r3, [r3, #20]
 8010682:	2b01      	cmp	r3, #1
 8010684:	d106      	bne.n	8010694 <tcp_slowtmr+0x58>
 8010686:	4b8a      	ldr	r3, [pc, #552]	; (80108b0 <tcp_slowtmr+0x274>)
 8010688:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801068c:	498b      	ldr	r1, [pc, #556]	; (80108bc <tcp_slowtmr+0x280>)
 801068e:	488a      	ldr	r0, [pc, #552]	; (80108b8 <tcp_slowtmr+0x27c>)
 8010690:	f009 fee2 	bl	801a458 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8010694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010696:	7d1b      	ldrb	r3, [r3, #20]
 8010698:	2b0a      	cmp	r3, #10
 801069a:	d106      	bne.n	80106aa <tcp_slowtmr+0x6e>
 801069c:	4b84      	ldr	r3, [pc, #528]	; (80108b0 <tcp_slowtmr+0x274>)
 801069e:	f240 32f2 	movw	r2, #1010	; 0x3f2
 80106a2:	4987      	ldr	r1, [pc, #540]	; (80108c0 <tcp_slowtmr+0x284>)
 80106a4:	4884      	ldr	r0, [pc, #528]	; (80108b8 <tcp_slowtmr+0x27c>)
 80106a6:	f009 fed7 	bl	801a458 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80106aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ac:	7f5a      	ldrb	r2, [r3, #29]
 80106ae:	4b7e      	ldr	r3, [pc, #504]	; (80108a8 <tcp_slowtmr+0x26c>)
 80106b0:	781b      	ldrb	r3, [r3, #0]
 80106b2:	429a      	cmp	r2, r3
 80106b4:	d103      	bne.n	80106be <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 80106b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b8:	68db      	ldr	r3, [r3, #12]
 80106ba:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 80106bc:	e1fc      	b.n	8010ab8 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 80106be:	4b7a      	ldr	r3, [pc, #488]	; (80108a8 <tcp_slowtmr+0x26c>)
 80106c0:	781a      	ldrb	r2, [r3, #0]
 80106c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106c4:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 80106c6:	2300      	movs	r3, #0
 80106c8:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 80106ca:	2300      	movs	r3, #0
 80106cc:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80106ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d0:	7d1b      	ldrb	r3, [r3, #20]
 80106d2:	2b02      	cmp	r3, #2
 80106d4:	d108      	bne.n	80106e8 <tcp_slowtmr+0xac>
 80106d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80106dc:	2b05      	cmp	r3, #5
 80106de:	d903      	bls.n	80106e8 <tcp_slowtmr+0xac>
      ++pcb_remove;
 80106e0:	7ffb      	ldrb	r3, [r7, #31]
 80106e2:	3301      	adds	r3, #1
 80106e4:	77fb      	strb	r3, [r7, #31]
 80106e6:	e0a2      	b.n	801082e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 80106e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80106ee:	2b0b      	cmp	r3, #11
 80106f0:	d903      	bls.n	80106fa <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80106f2:	7ffb      	ldrb	r3, [r7, #31]
 80106f4:	3301      	adds	r3, #1
 80106f6:	77fb      	strb	r3, [r7, #31]
 80106f8:	e099      	b.n	801082e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80106fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106fc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8010700:	2b00      	cmp	r3, #0
 8010702:	d032      	beq.n	801076a <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8010704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010706:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801070a:	3b01      	subs	r3, #1
 801070c:	4a6d      	ldr	r2, [pc, #436]	; (80108c4 <tcp_slowtmr+0x288>)
 801070e:	5cd3      	ldrb	r3, [r2, r3]
 8010710:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8010712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010714:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8010718:	7cfa      	ldrb	r2, [r7, #19]
 801071a:	429a      	cmp	r2, r3
 801071c:	d907      	bls.n	801072e <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 801071e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010720:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8010724:	3301      	adds	r3, #1
 8010726:	b2da      	uxtb	r2, r3
 8010728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801072a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 801072e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010730:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8010734:	7cfa      	ldrb	r2, [r7, #19]
 8010736:	429a      	cmp	r2, r3
 8010738:	d879      	bhi.n	801082e <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 801073a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801073c:	f004 fbb9 	bl	8014eb2 <tcp_zero_window_probe>
 8010740:	4603      	mov	r3, r0
 8010742:	2b00      	cmp	r3, #0
 8010744:	d173      	bne.n	801082e <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8010746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010748:	2200      	movs	r2, #0
 801074a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801074e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010750:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8010754:	2b06      	cmp	r3, #6
 8010756:	d86a      	bhi.n	801082e <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8010758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801075a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801075e:	3301      	adds	r3, #1
 8010760:	b2da      	uxtb	r2, r3
 8010762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010764:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8010768:	e061      	b.n	801082e <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 801076a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801076c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010770:	2b00      	cmp	r3, #0
 8010772:	db08      	blt.n	8010786 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8010774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010776:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801077a:	b29b      	uxth	r3, r3
 801077c:	3301      	adds	r3, #1
 801077e:	b29b      	uxth	r3, r3
 8010780:	b21a      	sxth	r2, r3
 8010782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010784:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8010786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801078a:	2b00      	cmp	r3, #0
 801078c:	d04f      	beq.n	801082e <tcp_slowtmr+0x1f2>
 801078e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010790:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8010794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010796:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801079a:	429a      	cmp	r2, r3
 801079c:	db47      	blt.n	801082e <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 801079e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a0:	7d1b      	ldrb	r3, [r3, #20]
 80107a2:	2b02      	cmp	r3, #2
 80107a4:	d018      	beq.n	80107d8 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 80107a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80107ac:	2b0c      	cmp	r3, #12
 80107ae:	bf28      	it	cs
 80107b0:	230c      	movcs	r3, #12
 80107b2:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80107b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80107ba:	10db      	asrs	r3, r3, #3
 80107bc:	b21b      	sxth	r3, r3
 80107be:	461a      	mov	r2, r3
 80107c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80107c6:	4413      	add	r3, r2
 80107c8:	7dfa      	ldrb	r2, [r7, #23]
 80107ca:	493f      	ldr	r1, [pc, #252]	; (80108c8 <tcp_slowtmr+0x28c>)
 80107cc:	5c8a      	ldrb	r2, [r1, r2]
 80107ce:	4093      	lsls	r3, r2
 80107d0:	b21a      	sxth	r2, r3
 80107d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 80107d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107da:	2200      	movs	r2, #0
 80107dc:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80107de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80107e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80107ea:	4293      	cmp	r3, r2
 80107ec:	bf28      	it	cs
 80107ee:	4613      	movcs	r3, r2
 80107f0:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 80107f2:	8abb      	ldrh	r3, [r7, #20]
 80107f4:	085b      	lsrs	r3, r3, #1
 80107f6:	b29a      	uxth	r2, r3
 80107f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107fa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80107fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010800:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010806:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010808:	005b      	lsls	r3, r3, #1
 801080a:	b29b      	uxth	r3, r3
 801080c:	429a      	cmp	r2, r3
 801080e:	d206      	bcs.n	801081e <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8010810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010812:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010814:	005b      	lsls	r3, r3, #1
 8010816:	b29a      	uxth	r2, r3
 8010818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801081a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 801081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010820:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8010822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010824:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8010828:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801082a:	f004 fa31 	bl	8014c90 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801082e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010830:	7d1b      	ldrb	r3, [r3, #20]
 8010832:	2b06      	cmp	r3, #6
 8010834:	d10f      	bne.n	8010856 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8010836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010838:	7e9b      	ldrb	r3, [r3, #26]
 801083a:	f003 0310 	and.w	r3, r3, #16
 801083e:	2b00      	cmp	r3, #0
 8010840:	d009      	beq.n	8010856 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010842:	4b18      	ldr	r3, [pc, #96]	; (80108a4 <tcp_slowtmr+0x268>)
 8010844:	681a      	ldr	r2, [r3, #0]
 8010846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010848:	6a1b      	ldr	r3, [r3, #32]
 801084a:	1ad3      	subs	r3, r2, r3
 801084c:	2b28      	cmp	r3, #40	; 0x28
 801084e:	d902      	bls.n	8010856 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8010850:	7ffb      	ldrb	r3, [r7, #31]
 8010852:	3301      	adds	r3, #1
 8010854:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010858:	7a1b      	ldrb	r3, [r3, #8]
 801085a:	f003 0308 	and.w	r3, r3, #8
 801085e:	2b00      	cmp	r3, #0
 8010860:	d05d      	beq.n	801091e <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 8010862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010864:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010866:	2b04      	cmp	r3, #4
 8010868:	d003      	beq.n	8010872 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 801086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801086c:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 801086e:	2b07      	cmp	r3, #7
 8010870:	d155      	bne.n	801091e <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010872:	4b0c      	ldr	r3, [pc, #48]	; (80108a4 <tcp_slowtmr+0x268>)
 8010874:	681a      	ldr	r2, [r3, #0]
 8010876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010878:	6a1b      	ldr	r3, [r3, #32]
 801087a:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 801087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801087e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010882:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8010886:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 801088a:	4910      	ldr	r1, [pc, #64]	; (80108cc <tcp_slowtmr+0x290>)
 801088c:	fba1 1303 	umull	r1, r3, r1, r3
 8010890:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010892:	429a      	cmp	r2, r3
 8010894:	d91c      	bls.n	80108d0 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8010896:	7ffb      	ldrb	r3, [r7, #31]
 8010898:	3301      	adds	r3, #1
 801089a:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 801089c:	7fbb      	ldrb	r3, [r7, #30]
 801089e:	3301      	adds	r3, #1
 80108a0:	77bb      	strb	r3, [r7, #30]
 80108a2:	e03c      	b.n	801091e <tcp_slowtmr+0x2e2>
 80108a4:	2000ebc0 	.word	0x2000ebc0
 80108a8:	2000ebd6 	.word	0x2000ebd6
 80108ac:	2000ebcc 	.word	0x2000ebcc
 80108b0:	0801cc34 	.word	0x0801cc34
 80108b4:	0801cde4 	.word	0x0801cde4
 80108b8:	0801cc70 	.word	0x0801cc70
 80108bc:	0801ce10 	.word	0x0801ce10
 80108c0:	0801ce3c 	.word	0x0801ce3c
 80108c4:	0801e5d0 	.word	0x0801e5d0
 80108c8:	0801e5c0 	.word	0x0801e5c0
 80108cc:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80108d0:	4b97      	ldr	r3, [pc, #604]	; (8010b30 <tcp_slowtmr+0x4f4>)
 80108d2:	681a      	ldr	r2, [r3, #0]
 80108d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108d6:	6a1b      	ldr	r3, [r3, #32]
 80108d8:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80108da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108dc:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80108e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e2:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80108e6:	4618      	mov	r0, r3
 80108e8:	4b92      	ldr	r3, [pc, #584]	; (8010b34 <tcp_slowtmr+0x4f8>)
 80108ea:	fb00 f303 	mul.w	r3, r0, r3
 80108ee:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 80108f0:	4991      	ldr	r1, [pc, #580]	; (8010b38 <tcp_slowtmr+0x4fc>)
 80108f2:	fba1 1303 	umull	r1, r3, r1, r3
 80108f6:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d910      	bls.n	801091e <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 80108fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80108fe:	f004 fa9b 	bl	8014e38 <tcp_keepalive>
 8010902:	4603      	mov	r3, r0
 8010904:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8010906:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d107      	bne.n	801091e <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 801090e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010910:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8010914:	3301      	adds	r3, #1
 8010916:	b2da      	uxtb	r2, r3
 8010918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801091a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801091e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010922:	2b00      	cmp	r3, #0
 8010924:	d016      	beq.n	8010954 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8010926:	4b82      	ldr	r3, [pc, #520]	; (8010b30 <tcp_slowtmr+0x4f4>)
 8010928:	681a      	ldr	r2, [r3, #0]
 801092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801092c:	6a1b      	ldr	r3, [r3, #32]
 801092e:	1ad2      	subs	r2, r2, r3
 8010930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010932:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010936:	4619      	mov	r1, r3
 8010938:	460b      	mov	r3, r1
 801093a:	005b      	lsls	r3, r3, #1
 801093c:	440b      	add	r3, r1
 801093e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8010940:	429a      	cmp	r2, r3
 8010942:	d307      	bcc.n	8010954 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8010944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010948:	4618      	mov	r0, r3
 801094a:	f000 fa06 	bl	8010d5a <tcp_segs_free>
      pcb->ooseq = NULL;
 801094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010950:	2200      	movs	r2, #0
 8010952:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8010954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010956:	7d1b      	ldrb	r3, [r3, #20]
 8010958:	2b03      	cmp	r3, #3
 801095a:	d109      	bne.n	8010970 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801095c:	4b74      	ldr	r3, [pc, #464]	; (8010b30 <tcp_slowtmr+0x4f4>)
 801095e:	681a      	ldr	r2, [r3, #0]
 8010960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010962:	6a1b      	ldr	r3, [r3, #32]
 8010964:	1ad3      	subs	r3, r2, r3
 8010966:	2b28      	cmp	r3, #40	; 0x28
 8010968:	d902      	bls.n	8010970 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801096a:	7ffb      	ldrb	r3, [r7, #31]
 801096c:	3301      	adds	r3, #1
 801096e:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8010970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010972:	7d1b      	ldrb	r3, [r3, #20]
 8010974:	2b09      	cmp	r3, #9
 8010976:	d109      	bne.n	801098c <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010978:	4b6d      	ldr	r3, [pc, #436]	; (8010b30 <tcp_slowtmr+0x4f4>)
 801097a:	681a      	ldr	r2, [r3, #0]
 801097c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801097e:	6a1b      	ldr	r3, [r3, #32]
 8010980:	1ad3      	subs	r3, r2, r3
 8010982:	2bf0      	cmp	r3, #240	; 0xf0
 8010984:	d902      	bls.n	801098c <tcp_slowtmr+0x350>
        ++pcb_remove;
 8010986:	7ffb      	ldrb	r3, [r7, #31]
 8010988:	3301      	adds	r3, #1
 801098a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801098c:	7ffb      	ldrb	r3, [r7, #31]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d05d      	beq.n	8010a4e <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8010992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010998:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801099a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801099c:	f000 fc42 	bl	8011224 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80109a0:	6a3b      	ldr	r3, [r7, #32]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d010      	beq.n	80109c8 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80109a6:	4b65      	ldr	r3, [pc, #404]	; (8010b3c <tcp_slowtmr+0x500>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109ac:	429a      	cmp	r2, r3
 80109ae:	d106      	bne.n	80109be <tcp_slowtmr+0x382>
 80109b0:	4b63      	ldr	r3, [pc, #396]	; (8010b40 <tcp_slowtmr+0x504>)
 80109b2:	f240 4289 	movw	r2, #1161	; 0x489
 80109b6:	4963      	ldr	r1, [pc, #396]	; (8010b44 <tcp_slowtmr+0x508>)
 80109b8:	4863      	ldr	r0, [pc, #396]	; (8010b48 <tcp_slowtmr+0x50c>)
 80109ba:	f009 fd4d 	bl	801a458 <iprintf>
        prev->next = pcb->next;
 80109be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c0:	68da      	ldr	r2, [r3, #12]
 80109c2:	6a3b      	ldr	r3, [r7, #32]
 80109c4:	60da      	str	r2, [r3, #12]
 80109c6:	e00f      	b.n	80109e8 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80109c8:	4b5c      	ldr	r3, [pc, #368]	; (8010b3c <tcp_slowtmr+0x500>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109ce:	429a      	cmp	r2, r3
 80109d0:	d006      	beq.n	80109e0 <tcp_slowtmr+0x3a4>
 80109d2:	4b5b      	ldr	r3, [pc, #364]	; (8010b40 <tcp_slowtmr+0x504>)
 80109d4:	f240 428d 	movw	r2, #1165	; 0x48d
 80109d8:	495c      	ldr	r1, [pc, #368]	; (8010b4c <tcp_slowtmr+0x510>)
 80109da:	485b      	ldr	r0, [pc, #364]	; (8010b48 <tcp_slowtmr+0x50c>)
 80109dc:	f009 fd3c 	bl	801a458 <iprintf>
        tcp_active_pcbs = pcb->next;
 80109e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e2:	68db      	ldr	r3, [r3, #12]
 80109e4:	4a55      	ldr	r2, [pc, #340]	; (8010b3c <tcp_slowtmr+0x500>)
 80109e6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80109e8:	7fbb      	ldrb	r3, [r7, #30]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d010      	beq.n	8010a10 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80109ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109f0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80109f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80109f6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80109f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109fa:	1d1d      	adds	r5, r3, #4
 80109fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109fe:	8adb      	ldrh	r3, [r3, #22]
 8010a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a02:	8b12      	ldrh	r2, [r2, #24]
 8010a04:	9201      	str	r2, [sp, #4]
 8010a06:	9300      	str	r3, [sp, #0]
 8010a08:	462b      	mov	r3, r5
 8010a0a:	4622      	mov	r2, r4
 8010a0c:	f004 f8ca 	bl	8014ba4 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8010a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a12:	691b      	ldr	r3, [r3, #16]
 8010a14:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8010a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a18:	7d1b      	ldrb	r3, [r3, #20]
 8010a1a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8010a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a1e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8010a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a22:	68db      	ldr	r3, [r3, #12]
 8010a24:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8010a26:	6839      	ldr	r1, [r7, #0]
 8010a28:	2001      	movs	r0, #1
 8010a2a:	f7fe f8b9 	bl	800eba0 <memp_free>

      tcp_active_pcbs_changed = 0;
 8010a2e:	4b48      	ldr	r3, [pc, #288]	; (8010b50 <tcp_slowtmr+0x514>)
 8010a30:	2200      	movs	r2, #0
 8010a32:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d004      	beq.n	8010a44 <tcp_slowtmr+0x408>
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	f06f 010c 	mvn.w	r1, #12
 8010a40:	68b8      	ldr	r0, [r7, #8]
 8010a42:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8010a44:	4b42      	ldr	r3, [pc, #264]	; (8010b50 <tcp_slowtmr+0x514>)
 8010a46:	781b      	ldrb	r3, [r3, #0]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d035      	beq.n	8010ab8 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8010a4c:	e606      	b.n	801065c <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8010a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a50:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8010a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a54:	68db      	ldr	r3, [r3, #12]
 8010a56:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8010a58:	6a3b      	ldr	r3, [r7, #32]
 8010a5a:	7edb      	ldrb	r3, [r3, #27]
 8010a5c:	3301      	adds	r3, #1
 8010a5e:	b2da      	uxtb	r2, r3
 8010a60:	6a3b      	ldr	r3, [r7, #32]
 8010a62:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8010a64:	6a3b      	ldr	r3, [r7, #32]
 8010a66:	7eda      	ldrb	r2, [r3, #27]
 8010a68:	6a3b      	ldr	r3, [r7, #32]
 8010a6a:	7f1b      	ldrb	r3, [r3, #28]
 8010a6c:	429a      	cmp	r2, r3
 8010a6e:	d323      	bcc.n	8010ab8 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8010a70:	6a3b      	ldr	r3, [r7, #32]
 8010a72:	2200      	movs	r2, #0
 8010a74:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8010a76:	4b36      	ldr	r3, [pc, #216]	; (8010b50 <tcp_slowtmr+0x514>)
 8010a78:	2200      	movs	r2, #0
 8010a7a:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8010a7c:	6a3b      	ldr	r3, [r7, #32]
 8010a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d00a      	beq.n	8010a9c <tcp_slowtmr+0x460>
 8010a86:	6a3b      	ldr	r3, [r7, #32]
 8010a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a8c:	6a3a      	ldr	r2, [r7, #32]
 8010a8e:	6912      	ldr	r2, [r2, #16]
 8010a90:	6a39      	ldr	r1, [r7, #32]
 8010a92:	4610      	mov	r0, r2
 8010a94:	4798      	blx	r3
 8010a96:	4603      	mov	r3, r0
 8010a98:	777b      	strb	r3, [r7, #29]
 8010a9a:	e001      	b.n	8010aa0 <tcp_slowtmr+0x464>
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8010aa0:	4b2b      	ldr	r3, [pc, #172]	; (8010b50 <tcp_slowtmr+0x514>)
 8010aa2:	781b      	ldrb	r3, [r3, #0]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d000      	beq.n	8010aaa <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8010aa8:	e5d8      	b.n	801065c <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010aaa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d102      	bne.n	8010ab8 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8010ab2:	6a38      	ldr	r0, [r7, #32]
 8010ab4:	f003 fdf2 	bl	801469c <tcp_output>
  while (pcb != NULL) {
 8010ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	f47f add4 	bne.w	8010668 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8010ac4:	4b23      	ldr	r3, [pc, #140]	; (8010b54 <tcp_slowtmr+0x518>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8010aca:	e068      	b.n	8010b9e <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ace:	7d1b      	ldrb	r3, [r3, #20]
 8010ad0:	2b0a      	cmp	r3, #10
 8010ad2:	d006      	beq.n	8010ae2 <tcp_slowtmr+0x4a6>
 8010ad4:	4b1a      	ldr	r3, [pc, #104]	; (8010b40 <tcp_slowtmr+0x504>)
 8010ad6:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8010ada:	491f      	ldr	r1, [pc, #124]	; (8010b58 <tcp_slowtmr+0x51c>)
 8010adc:	481a      	ldr	r0, [pc, #104]	; (8010b48 <tcp_slowtmr+0x50c>)
 8010ade:	f009 fcbb 	bl	801a458 <iprintf>
    pcb_remove = 0;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010ae6:	4b12      	ldr	r3, [pc, #72]	; (8010b30 <tcp_slowtmr+0x4f4>)
 8010ae8:	681a      	ldr	r2, [r3, #0]
 8010aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aec:	6a1b      	ldr	r3, [r3, #32]
 8010aee:	1ad3      	subs	r3, r2, r3
 8010af0:	2bf0      	cmp	r3, #240	; 0xf0
 8010af2:	d902      	bls.n	8010afa <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8010af4:	7ffb      	ldrb	r3, [r7, #31]
 8010af6:	3301      	adds	r3, #1
 8010af8:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010afa:	7ffb      	ldrb	r3, [r7, #31]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d049      	beq.n	8010b94 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010b00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b02:	f000 fb8f 	bl	8011224 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8010b06:	6a3b      	ldr	r3, [r7, #32]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d029      	beq.n	8010b60 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010b0c:	4b11      	ldr	r3, [pc, #68]	; (8010b54 <tcp_slowtmr+0x518>)
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b12:	429a      	cmp	r2, r3
 8010b14:	d106      	bne.n	8010b24 <tcp_slowtmr+0x4e8>
 8010b16:	4b0a      	ldr	r3, [pc, #40]	; (8010b40 <tcp_slowtmr+0x504>)
 8010b18:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8010b1c:	490f      	ldr	r1, [pc, #60]	; (8010b5c <tcp_slowtmr+0x520>)
 8010b1e:	480a      	ldr	r0, [pc, #40]	; (8010b48 <tcp_slowtmr+0x50c>)
 8010b20:	f009 fc9a 	bl	801a458 <iprintf>
        prev->next = pcb->next;
 8010b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b26:	68da      	ldr	r2, [r3, #12]
 8010b28:	6a3b      	ldr	r3, [r7, #32]
 8010b2a:	60da      	str	r2, [r3, #12]
 8010b2c:	e028      	b.n	8010b80 <tcp_slowtmr+0x544>
 8010b2e:	bf00      	nop
 8010b30:	2000ebc0 	.word	0x2000ebc0
 8010b34:	000124f8 	.word	0x000124f8
 8010b38:	10624dd3 	.word	0x10624dd3
 8010b3c:	2000ebcc 	.word	0x2000ebcc
 8010b40:	0801cc34 	.word	0x0801cc34
 8010b44:	0801ce6c 	.word	0x0801ce6c
 8010b48:	0801cc70 	.word	0x0801cc70
 8010b4c:	0801ce98 	.word	0x0801ce98
 8010b50:	2000ebd4 	.word	0x2000ebd4
 8010b54:	2000ebd0 	.word	0x2000ebd0
 8010b58:	0801cec4 	.word	0x0801cec4
 8010b5c:	0801cef4 	.word	0x0801cef4
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8010b60:	4b13      	ldr	r3, [pc, #76]	; (8010bb0 <tcp_slowtmr+0x574>)
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b66:	429a      	cmp	r2, r3
 8010b68:	d006      	beq.n	8010b78 <tcp_slowtmr+0x53c>
 8010b6a:	4b12      	ldr	r3, [pc, #72]	; (8010bb4 <tcp_slowtmr+0x578>)
 8010b6c:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8010b70:	4911      	ldr	r1, [pc, #68]	; (8010bb8 <tcp_slowtmr+0x57c>)
 8010b72:	4812      	ldr	r0, [pc, #72]	; (8010bbc <tcp_slowtmr+0x580>)
 8010b74:	f009 fc70 	bl	801a458 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8010b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b7a:	68db      	ldr	r3, [r3, #12]
 8010b7c:	4a0c      	ldr	r2, [pc, #48]	; (8010bb0 <tcp_slowtmr+0x574>)
 8010b7e:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b82:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8010b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b86:	68db      	ldr	r3, [r3, #12]
 8010b88:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8010b8a:	69b9      	ldr	r1, [r7, #24]
 8010b8c:	2001      	movs	r0, #1
 8010b8e:	f7fe f807 	bl	800eba0 <memp_free>
 8010b92:	e004      	b.n	8010b9e <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8010b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b96:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8010b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b9a:	68db      	ldr	r3, [r3, #12]
 8010b9c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8010b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d193      	bne.n	8010acc <tcp_slowtmr+0x490>
    }
  }
}
 8010ba4:	bf00      	nop
 8010ba6:	bf00      	nop
 8010ba8:	3728      	adds	r7, #40	; 0x28
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bdb0      	pop	{r4, r5, r7, pc}
 8010bae:	bf00      	nop
 8010bb0:	2000ebd0 	.word	0x2000ebd0
 8010bb4:	0801cc34 	.word	0x0801cc34
 8010bb8:	0801cf1c 	.word	0x0801cf1c
 8010bbc:	0801cc70 	.word	0x0801cc70

08010bc0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b082      	sub	sp, #8
 8010bc4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8010bc6:	4b2d      	ldr	r3, [pc, #180]	; (8010c7c <tcp_fasttmr+0xbc>)
 8010bc8:	781b      	ldrb	r3, [r3, #0]
 8010bca:	3301      	adds	r3, #1
 8010bcc:	b2da      	uxtb	r2, r3
 8010bce:	4b2b      	ldr	r3, [pc, #172]	; (8010c7c <tcp_fasttmr+0xbc>)
 8010bd0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010bd2:	4b2b      	ldr	r3, [pc, #172]	; (8010c80 <tcp_fasttmr+0xc0>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010bd8:	e048      	b.n	8010c6c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	7f5a      	ldrb	r2, [r3, #29]
 8010bde:	4b27      	ldr	r3, [pc, #156]	; (8010c7c <tcp_fasttmr+0xbc>)
 8010be0:	781b      	ldrb	r3, [r3, #0]
 8010be2:	429a      	cmp	r2, r3
 8010be4:	d03f      	beq.n	8010c66 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8010be6:	4b25      	ldr	r3, [pc, #148]	; (8010c7c <tcp_fasttmr+0xbc>)
 8010be8:	781a      	ldrb	r2, [r3, #0]
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	7e9b      	ldrb	r3, [r3, #26]
 8010bf2:	f003 0301 	and.w	r3, r3, #1
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d010      	beq.n	8010c1c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	7e9b      	ldrb	r3, [r3, #26]
 8010bfe:	f043 0302 	orr.w	r3, r3, #2
 8010c02:	b2da      	uxtb	r2, r3
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f003 fd47 	bl	801469c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	7e9b      	ldrb	r3, [r3, #26]
 8010c12:	f023 0303 	bic.w	r3, r3, #3
 8010c16:	b2da      	uxtb	r2, r3
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	7e9b      	ldrb	r3, [r3, #26]
 8010c20:	f003 0308 	and.w	r3, r3, #8
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d009      	beq.n	8010c3c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	7e9b      	ldrb	r3, [r3, #26]
 8010c2c:	f023 0308 	bic.w	r3, r3, #8
 8010c30:	b2da      	uxtb	r2, r3
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8010c36:	6878      	ldr	r0, [r7, #4]
 8010c38:	f7ff f952 	bl	800fee0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	68db      	ldr	r3, [r3, #12]
 8010c40:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d00a      	beq.n	8010c60 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010c4a:	4b0e      	ldr	r3, [pc, #56]	; (8010c84 <tcp_fasttmr+0xc4>)
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010c50:	6878      	ldr	r0, [r7, #4]
 8010c52:	f000 f819 	bl	8010c88 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010c56:	4b0b      	ldr	r3, [pc, #44]	; (8010c84 <tcp_fasttmr+0xc4>)
 8010c58:	781b      	ldrb	r3, [r3, #0]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d000      	beq.n	8010c60 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010c5e:	e7b8      	b.n	8010bd2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	607b      	str	r3, [r7, #4]
 8010c64:	e002      	b.n	8010c6c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	68db      	ldr	r3, [r3, #12]
 8010c6a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d1b3      	bne.n	8010bda <tcp_fasttmr+0x1a>
    }
  }
}
 8010c72:	bf00      	nop
 8010c74:	bf00      	nop
 8010c76:	3708      	adds	r7, #8
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	bd80      	pop	{r7, pc}
 8010c7c:	2000ebd6 	.word	0x2000ebd6
 8010c80:	2000ebcc 	.word	0x2000ebcc
 8010c84:	2000ebd4 	.word	0x2000ebd4

08010c88 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010c88:	b590      	push	{r4, r7, lr}
 8010c8a:	b085      	sub	sp, #20
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c94:	7b5b      	ldrb	r3, [r3, #13]
 8010c96:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c9c:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d00b      	beq.n	8010cc6 <tcp_process_refused_data+0x3e>
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	6918      	ldr	r0, [r3, #16]
 8010cb8:	2300      	movs	r3, #0
 8010cba:	68ba      	ldr	r2, [r7, #8]
 8010cbc:	6879      	ldr	r1, [r7, #4]
 8010cbe:	47a0      	blx	r4
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	73fb      	strb	r3, [r7, #15]
 8010cc4:	e007      	b.n	8010cd6 <tcp_process_refused_data+0x4e>
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	68ba      	ldr	r2, [r7, #8]
 8010cca:	6879      	ldr	r1, [r7, #4]
 8010ccc:	2000      	movs	r0, #0
 8010cce:	f000 f88d 	bl	8010dec <tcp_recv_null>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d12a      	bne.n	8010d34 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8010cde:	7bbb      	ldrb	r3, [r7, #14]
 8010ce0:	f003 0320 	and.w	r3, r3, #32
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d033      	beq.n	8010d50 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010cec:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010cf0:	d005      	beq.n	8010cfe <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010cf6:	3301      	adds	r3, #1
 8010cf8:	b29a      	uxth	r2, r3
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d00b      	beq.n	8010d20 <tcp_process_refused_data+0x98>
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	6918      	ldr	r0, [r3, #16]
 8010d12:	2300      	movs	r3, #0
 8010d14:	2200      	movs	r2, #0
 8010d16:	6879      	ldr	r1, [r7, #4]
 8010d18:	47a0      	blx	r4
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	73fb      	strb	r3, [r7, #15]
 8010d1e:	e001      	b.n	8010d24 <tcp_process_refused_data+0x9c>
 8010d20:	2300      	movs	r3, #0
 8010d22:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d28:	f113 0f0d 	cmn.w	r3, #13
 8010d2c:	d110      	bne.n	8010d50 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8010d2e:	f06f 030c 	mvn.w	r3, #12
 8010d32:	e00e      	b.n	8010d52 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8010d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d38:	f113 0f0d 	cmn.w	r3, #13
 8010d3c:	d102      	bne.n	8010d44 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010d3e:	f06f 030c 	mvn.w	r3, #12
 8010d42:	e006      	b.n	8010d52 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	68ba      	ldr	r2, [r7, #8]
 8010d48:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8010d4a:	f06f 0304 	mvn.w	r3, #4
 8010d4e:	e000      	b.n	8010d52 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8010d50:	2300      	movs	r3, #0
}
 8010d52:	4618      	mov	r0, r3
 8010d54:	3714      	adds	r7, #20
 8010d56:	46bd      	mov	sp, r7
 8010d58:	bd90      	pop	{r4, r7, pc}

08010d5a <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010d5a:	b580      	push	{r7, lr}
 8010d5c:	b084      	sub	sp, #16
 8010d5e:	af00      	add	r7, sp, #0
 8010d60:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010d62:	e007      	b.n	8010d74 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010d6a:	6878      	ldr	r0, [r7, #4]
 8010d6c:	f000 f80a 	bl	8010d84 <tcp_seg_free>
    seg = next;
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d1f4      	bne.n	8010d64 <tcp_segs_free+0xa>
  }
}
 8010d7a:	bf00      	nop
 8010d7c:	bf00      	nop
 8010d7e:	3710      	adds	r7, #16
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}

08010d84 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b082      	sub	sp, #8
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d00c      	beq.n	8010dac <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	685b      	ldr	r3, [r3, #4]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d004      	beq.n	8010da4 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	685b      	ldr	r3, [r3, #4]
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f7fe fcc0 	bl	800f724 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010da4:	6879      	ldr	r1, [r7, #4]
 8010da6:	2003      	movs	r0, #3
 8010da8:	f7fd fefa 	bl	800eba0 <memp_free>
  }
}
 8010dac:	bf00      	nop
 8010dae:	3708      	adds	r7, #8
 8010db0:	46bd      	mov	sp, r7
 8010db2:	bd80      	pop	{r7, pc}

08010db4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b084      	sub	sp, #16
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010dbc:	2003      	movs	r0, #3
 8010dbe:	f7fd fe9d 	bl	800eafc <memp_malloc>
 8010dc2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d101      	bne.n	8010dce <tcp_seg_copy+0x1a>
    return NULL;
 8010dca:	2300      	movs	r3, #0
 8010dcc:	e00a      	b.n	8010de4 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010dce:	2210      	movs	r2, #16
 8010dd0:	6879      	ldr	r1, [r7, #4]
 8010dd2:	68f8      	ldr	r0, [r7, #12]
 8010dd4:	f009 fa95 	bl	801a302 <memcpy>
  pbuf_ref(cseg->p);
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	685b      	ldr	r3, [r3, #4]
 8010ddc:	4618      	mov	r0, r3
 8010dde:	f7fe fd51 	bl	800f884 <pbuf_ref>
  return cseg;
 8010de2:	68fb      	ldr	r3, [r7, #12]
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	3710      	adds	r7, #16
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}

08010dec <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b084      	sub	sp, #16
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	60f8      	str	r0, [r7, #12]
 8010df4:	60b9      	str	r1, [r7, #8]
 8010df6:	607a      	str	r2, [r7, #4]
 8010df8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d009      	beq.n	8010e14 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	891b      	ldrh	r3, [r3, #8]
 8010e04:	4619      	mov	r1, r3
 8010e06:	68b8      	ldr	r0, [r7, #8]
 8010e08:	f7ff fb7a 	bl	8010500 <tcp_recved>
    pbuf_free(p);
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f7fe fc89 	bl	800f724 <pbuf_free>
 8010e12:	e008      	b.n	8010e26 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8010e14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d104      	bne.n	8010e26 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8010e1c:	68b8      	ldr	r0, [r7, #8]
 8010e1e:	f7ff f8c9 	bl	800ffb4 <tcp_close>
 8010e22:	4603      	mov	r3, r0
 8010e24:	e000      	b.n	8010e28 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8010e26:	2300      	movs	r3, #0
}
 8010e28:	4618      	mov	r0, r3
 8010e2a:	3710      	adds	r7, #16
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	bd80      	pop	{r7, pc}

08010e30 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b086      	sub	sp, #24
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	4603      	mov	r3, r0
 8010e38:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	db01      	blt.n	8010e46 <tcp_kill_prio+0x16>
 8010e42:	79fb      	ldrb	r3, [r7, #7]
 8010e44:	e000      	b.n	8010e48 <tcp_kill_prio+0x18>
 8010e46:	237f      	movs	r3, #127	; 0x7f
 8010e48:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010e4e:	2300      	movs	r3, #0
 8010e50:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e52:	4b16      	ldr	r3, [pc, #88]	; (8010eac <tcp_kill_prio+0x7c>)
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	617b      	str	r3, [r7, #20]
 8010e58:	e01a      	b.n	8010e90 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8010e5a:	697b      	ldr	r3, [r7, #20]
 8010e5c:	7d5b      	ldrb	r3, [r3, #21]
 8010e5e:	7afa      	ldrb	r2, [r7, #11]
 8010e60:	429a      	cmp	r2, r3
 8010e62:	d312      	bcc.n	8010e8a <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010e64:	4b12      	ldr	r3, [pc, #72]	; (8010eb0 <tcp_kill_prio+0x80>)
 8010e66:	681a      	ldr	r2, [r3, #0]
 8010e68:	697b      	ldr	r3, [r7, #20]
 8010e6a:	6a1b      	ldr	r3, [r3, #32]
 8010e6c:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8010e6e:	68fa      	ldr	r2, [r7, #12]
 8010e70:	429a      	cmp	r2, r3
 8010e72:	d80a      	bhi.n	8010e8a <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8010e74:	4b0e      	ldr	r3, [pc, #56]	; (8010eb0 <tcp_kill_prio+0x80>)
 8010e76:	681a      	ldr	r2, [r3, #0]
 8010e78:	697b      	ldr	r3, [r7, #20]
 8010e7a:	6a1b      	ldr	r3, [r3, #32]
 8010e7c:	1ad3      	subs	r3, r2, r3
 8010e7e:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8010e80:	697b      	ldr	r3, [r7, #20]
 8010e82:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8010e84:	697b      	ldr	r3, [r7, #20]
 8010e86:	7d5b      	ldrb	r3, [r3, #21]
 8010e88:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	68db      	ldr	r3, [r3, #12]
 8010e8e:	617b      	str	r3, [r7, #20]
 8010e90:	697b      	ldr	r3, [r7, #20]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d1e1      	bne.n	8010e5a <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8010e96:	693b      	ldr	r3, [r7, #16]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d002      	beq.n	8010ea2 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010e9c:	6938      	ldr	r0, [r7, #16]
 8010e9e:	f7ff f99b 	bl	80101d8 <tcp_abort>
  }
}
 8010ea2:	bf00      	nop
 8010ea4:	3718      	adds	r7, #24
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}
 8010eaa:	bf00      	nop
 8010eac:	2000ebcc 	.word	0x2000ebcc
 8010eb0:	2000ebc0 	.word	0x2000ebc0

08010eb4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b086      	sub	sp, #24
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	4603      	mov	r3, r0
 8010ebc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010ebe:	79fb      	ldrb	r3, [r7, #7]
 8010ec0:	2b08      	cmp	r3, #8
 8010ec2:	d009      	beq.n	8010ed8 <tcp_kill_state+0x24>
 8010ec4:	79fb      	ldrb	r3, [r7, #7]
 8010ec6:	2b09      	cmp	r3, #9
 8010ec8:	d006      	beq.n	8010ed8 <tcp_kill_state+0x24>
 8010eca:	4b1a      	ldr	r3, [pc, #104]	; (8010f34 <tcp_kill_state+0x80>)
 8010ecc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8010ed0:	4919      	ldr	r1, [pc, #100]	; (8010f38 <tcp_kill_state+0x84>)
 8010ed2:	481a      	ldr	r0, [pc, #104]	; (8010f3c <tcp_kill_state+0x88>)
 8010ed4:	f009 fac0 	bl	801a458 <iprintf>

  inactivity = 0;
 8010ed8:	2300      	movs	r3, #0
 8010eda:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010edc:	2300      	movs	r3, #0
 8010ede:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ee0:	4b17      	ldr	r3, [pc, #92]	; (8010f40 <tcp_kill_state+0x8c>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	617b      	str	r3, [r7, #20]
 8010ee6:	e017      	b.n	8010f18 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010ee8:	697b      	ldr	r3, [r7, #20]
 8010eea:	7d1b      	ldrb	r3, [r3, #20]
 8010eec:	79fa      	ldrb	r2, [r7, #7]
 8010eee:	429a      	cmp	r2, r3
 8010ef0:	d10f      	bne.n	8010f12 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010ef2:	4b14      	ldr	r3, [pc, #80]	; (8010f44 <tcp_kill_state+0x90>)
 8010ef4:	681a      	ldr	r2, [r3, #0]
 8010ef6:	697b      	ldr	r3, [r7, #20]
 8010ef8:	6a1b      	ldr	r3, [r3, #32]
 8010efa:	1ad3      	subs	r3, r2, r3
 8010efc:	68fa      	ldr	r2, [r7, #12]
 8010efe:	429a      	cmp	r2, r3
 8010f00:	d807      	bhi.n	8010f12 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010f02:	4b10      	ldr	r3, [pc, #64]	; (8010f44 <tcp_kill_state+0x90>)
 8010f04:	681a      	ldr	r2, [r3, #0]
 8010f06:	697b      	ldr	r3, [r7, #20]
 8010f08:	6a1b      	ldr	r3, [r3, #32]
 8010f0a:	1ad3      	subs	r3, r2, r3
 8010f0c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010f0e:	697b      	ldr	r3, [r7, #20]
 8010f10:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f12:	697b      	ldr	r3, [r7, #20]
 8010f14:	68db      	ldr	r3, [r3, #12]
 8010f16:	617b      	str	r3, [r7, #20]
 8010f18:	697b      	ldr	r3, [r7, #20]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d1e4      	bne.n	8010ee8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010f1e:	693b      	ldr	r3, [r7, #16]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d003      	beq.n	8010f2c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010f24:	2100      	movs	r1, #0
 8010f26:	6938      	ldr	r0, [r7, #16]
 8010f28:	f7ff f8a4 	bl	8010074 <tcp_abandon>
  }
}
 8010f2c:	bf00      	nop
 8010f2e:	3718      	adds	r7, #24
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}
 8010f34:	0801cc34 	.word	0x0801cc34
 8010f38:	0801cf44 	.word	0x0801cf44
 8010f3c:	0801cc70 	.word	0x0801cc70
 8010f40:	2000ebcc 	.word	0x2000ebcc
 8010f44:	2000ebc0 	.word	0x2000ebc0

08010f48 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b084      	sub	sp, #16
 8010f4c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010f4e:	2300      	movs	r3, #0
 8010f50:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010f52:	2300      	movs	r3, #0
 8010f54:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f56:	4b12      	ldr	r3, [pc, #72]	; (8010fa0 <tcp_kill_timewait+0x58>)
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	60fb      	str	r3, [r7, #12]
 8010f5c:	e012      	b.n	8010f84 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010f5e:	4b11      	ldr	r3, [pc, #68]	; (8010fa4 <tcp_kill_timewait+0x5c>)
 8010f60:	681a      	ldr	r2, [r3, #0]
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	6a1b      	ldr	r3, [r3, #32]
 8010f66:	1ad3      	subs	r3, r2, r3
 8010f68:	687a      	ldr	r2, [r7, #4]
 8010f6a:	429a      	cmp	r2, r3
 8010f6c:	d807      	bhi.n	8010f7e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010f6e:	4b0d      	ldr	r3, [pc, #52]	; (8010fa4 <tcp_kill_timewait+0x5c>)
 8010f70:	681a      	ldr	r2, [r3, #0]
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	6a1b      	ldr	r3, [r3, #32]
 8010f76:	1ad3      	subs	r3, r2, r3
 8010f78:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	68db      	ldr	r3, [r3, #12]
 8010f82:	60fb      	str	r3, [r7, #12]
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d1e9      	bne.n	8010f5e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010f8a:	68bb      	ldr	r3, [r7, #8]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d002      	beq.n	8010f96 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010f90:	68b8      	ldr	r0, [r7, #8]
 8010f92:	f7ff f921 	bl	80101d8 <tcp_abort>
  }
}
 8010f96:	bf00      	nop
 8010f98:	3710      	adds	r7, #16
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bd80      	pop	{r7, pc}
 8010f9e:	bf00      	nop
 8010fa0:	2000ebd0 	.word	0x2000ebd0
 8010fa4:	2000ebc0 	.word	0x2000ebc0

08010fa8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b084      	sub	sp, #16
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	4603      	mov	r3, r0
 8010fb0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010fb2:	2001      	movs	r0, #1
 8010fb4:	f7fd fda2 	bl	800eafc <memp_malloc>
 8010fb8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d124      	bne.n	801100a <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010fc0:	f7ff ffc2 	bl	8010f48 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010fc4:	2001      	movs	r0, #1
 8010fc6:	f7fd fd99 	bl	800eafc <memp_malloc>
 8010fca:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d11b      	bne.n	801100a <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010fd2:	2009      	movs	r0, #9
 8010fd4:	f7ff ff6e 	bl	8010eb4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010fd8:	2001      	movs	r0, #1
 8010fda:	f7fd fd8f 	bl	800eafc <memp_malloc>
 8010fde:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d111      	bne.n	801100a <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010fe6:	2008      	movs	r0, #8
 8010fe8:	f7ff ff64 	bl	8010eb4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010fec:	2001      	movs	r0, #1
 8010fee:	f7fd fd85 	bl	800eafc <memp_malloc>
 8010ff2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d107      	bne.n	801100a <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010ffa:	79fb      	ldrb	r3, [r7, #7]
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7ff ff17 	bl	8010e30 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011002:	2001      	movs	r0, #1
 8011004:	f7fd fd7a 	bl	800eafc <memp_malloc>
 8011008:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d03f      	beq.n	8011090 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011010:	2298      	movs	r2, #152	; 0x98
 8011012:	2100      	movs	r1, #0
 8011014:	68f8      	ldr	r0, [r7, #12]
 8011016:	f009 f982 	bl	801a31e <memset>
    pcb->prio = prio;
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	79fa      	ldrb	r2, [r7, #7]
 801101e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011026:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011030:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	22ff      	movs	r2, #255	; 0xff
 801103e:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011046:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	2206      	movs	r2, #6
 801104c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	2206      	movs	r2, #6
 8011054:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801105c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	2201      	movs	r2, #1
 8011062:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8011066:	4b0d      	ldr	r3, [pc, #52]	; (801109c <tcp_alloc+0xf4>)
 8011068:	681a      	ldr	r2, [r3, #0]
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801106e:	4b0c      	ldr	r3, [pc, #48]	; (80110a0 <tcp_alloc+0xf8>)
 8011070:	781a      	ldrb	r2, [r3, #0]
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801107c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	4a08      	ldr	r2, [pc, #32]	; (80110a4 <tcp_alloc+0xfc>)
 8011084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	4a07      	ldr	r2, [pc, #28]	; (80110a8 <tcp_alloc+0x100>)
 801108c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011090:	68fb      	ldr	r3, [r7, #12]
}
 8011092:	4618      	mov	r0, r3
 8011094:	3710      	adds	r7, #16
 8011096:	46bd      	mov	sp, r7
 8011098:	bd80      	pop	{r7, pc}
 801109a:	bf00      	nop
 801109c:	2000ebc0 	.word	0x2000ebc0
 80110a0:	2000ebd6 	.word	0x2000ebd6
 80110a4:	08010ded 	.word	0x08010ded
 80110a8:	006ddd00 	.word	0x006ddd00

080110ac <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b084      	sub	sp, #16
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	4603      	mov	r3, r0
 80110b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80110b6:	2040      	movs	r0, #64	; 0x40
 80110b8:	f7ff ff76 	bl	8010fa8 <tcp_alloc>
 80110bc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80110be:	68fb      	ldr	r3, [r7, #12]
}
 80110c0:	4618      	mov	r0, r3
 80110c2:	3710      	adds	r7, #16
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bd80      	pop	{r7, pc}

080110c8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80110c8:	b480      	push	{r7}
 80110ca:	b083      	sub	sp, #12
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
 80110d0:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d002      	beq.n	80110de <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	683a      	ldr	r2, [r7, #0]
 80110dc:	611a      	str	r2, [r3, #16]
  }
}
 80110de:	bf00      	nop
 80110e0:	370c      	adds	r7, #12
 80110e2:	46bd      	mov	sp, r7
 80110e4:	bc80      	pop	{r7}
 80110e6:	4770      	bx	lr

080110e8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b082      	sub	sp, #8
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
 80110f0:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d00e      	beq.n	8011116 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	7d1b      	ldrb	r3, [r3, #20]
 80110fc:	2b01      	cmp	r3, #1
 80110fe:	d106      	bne.n	801110e <tcp_recv+0x26>
 8011100:	4b07      	ldr	r3, [pc, #28]	; (8011120 <tcp_recv+0x38>)
 8011102:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8011106:	4907      	ldr	r1, [pc, #28]	; (8011124 <tcp_recv+0x3c>)
 8011108:	4807      	ldr	r0, [pc, #28]	; (8011128 <tcp_recv+0x40>)
 801110a:	f009 f9a5 	bl	801a458 <iprintf>
    pcb->recv = recv;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	683a      	ldr	r2, [r7, #0]
 8011112:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8011116:	bf00      	nop
 8011118:	3708      	adds	r7, #8
 801111a:	46bd      	mov	sp, r7
 801111c:	bd80      	pop	{r7, pc}
 801111e:	bf00      	nop
 8011120:	0801cc34 	.word	0x0801cc34
 8011124:	0801cf54 	.word	0x0801cf54
 8011128:	0801cc70 	.word	0x0801cc70

0801112c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b082      	sub	sp, #8
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
 8011134:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d00d      	beq.n	8011158 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	7d1b      	ldrb	r3, [r3, #20]
 8011140:	2b01      	cmp	r3, #1
 8011142:	d106      	bne.n	8011152 <tcp_sent+0x26>
 8011144:	4b06      	ldr	r3, [pc, #24]	; (8011160 <tcp_sent+0x34>)
 8011146:	f240 62cc 	movw	r2, #1740	; 0x6cc
 801114a:	4906      	ldr	r1, [pc, #24]	; (8011164 <tcp_sent+0x38>)
 801114c:	4806      	ldr	r0, [pc, #24]	; (8011168 <tcp_sent+0x3c>)
 801114e:	f009 f983 	bl	801a458 <iprintf>
    pcb->sent = sent;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	683a      	ldr	r2, [r7, #0]
 8011156:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 8011158:	bf00      	nop
 801115a:	3708      	adds	r7, #8
 801115c:	46bd      	mov	sp, r7
 801115e:	bd80      	pop	{r7, pc}
 8011160:	0801cc34 	.word	0x0801cc34
 8011164:	0801cf7c 	.word	0x0801cf7c
 8011168:	0801cc70 	.word	0x0801cc70

0801116c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801116c:	b580      	push	{r7, lr}
 801116e:	b082      	sub	sp, #8
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
 8011174:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d00e      	beq.n	801119a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	7d1b      	ldrb	r3, [r3, #20]
 8011180:	2b01      	cmp	r3, #1
 8011182:	d106      	bne.n	8011192 <tcp_err+0x26>
 8011184:	4b07      	ldr	r3, [pc, #28]	; (80111a4 <tcp_err+0x38>)
 8011186:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 801118a:	4907      	ldr	r1, [pc, #28]	; (80111a8 <tcp_err+0x3c>)
 801118c:	4807      	ldr	r0, [pc, #28]	; (80111ac <tcp_err+0x40>)
 801118e:	f009 f963 	bl	801a458 <iprintf>
    pcb->errf = err;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	683a      	ldr	r2, [r7, #0]
 8011196:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 801119a:	bf00      	nop
 801119c:	3708      	adds	r7, #8
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}
 80111a2:	bf00      	nop
 80111a4:	0801cc34 	.word	0x0801cc34
 80111a8:	0801cfa4 	.word	0x0801cfa4
 80111ac:	0801cc70 	.word	0x0801cc70

080111b0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80111b0:	b480      	push	{r7}
 80111b2:	b085      	sub	sp, #20
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
 80111b8:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d008      	beq.n	80111d2 <tcp_accept+0x22>
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	7d1b      	ldrb	r3, [r3, #20]
 80111c4:	2b01      	cmp	r3, #1
 80111c6:	d104      	bne.n	80111d2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	683a      	ldr	r2, [r7, #0]
 80111d0:	619a      	str	r2, [r3, #24]
  }
}
 80111d2:	bf00      	nop
 80111d4:	3714      	adds	r7, #20
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bc80      	pop	{r7}
 80111da:	4770      	bx	lr

080111dc <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b084      	sub	sp, #16
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	60f8      	str	r0, [r7, #12]
 80111e4:	60b9      	str	r1, [r7, #8]
 80111e6:	4613      	mov	r3, r2
 80111e8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	7d1b      	ldrb	r3, [r3, #20]
 80111ee:	2b01      	cmp	r3, #1
 80111f0:	d106      	bne.n	8011200 <tcp_poll+0x24>
 80111f2:	4b09      	ldr	r3, [pc, #36]	; (8011218 <tcp_poll+0x3c>)
 80111f4:	f240 7203 	movw	r2, #1795	; 0x703
 80111f8:	4908      	ldr	r1, [pc, #32]	; (801121c <tcp_poll+0x40>)
 80111fa:	4809      	ldr	r0, [pc, #36]	; (8011220 <tcp_poll+0x44>)
 80111fc:	f009 f92c 	bl	801a458 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	68ba      	ldr	r2, [r7, #8]
 8011204:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	79fa      	ldrb	r2, [r7, #7]
 801120c:	771a      	strb	r2, [r3, #28]
}
 801120e:	bf00      	nop
 8011210:	3710      	adds	r7, #16
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}
 8011216:	bf00      	nop
 8011218:	0801cc34 	.word	0x0801cc34
 801121c:	0801cfcc 	.word	0x0801cfcc
 8011220:	0801cc70 	.word	0x0801cc70

08011224 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b082      	sub	sp, #8
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	7d1b      	ldrb	r3, [r3, #20]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d034      	beq.n	801129e <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011238:	2b0a      	cmp	r3, #10
 801123a:	d030      	beq.n	801129e <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8011240:	2b01      	cmp	r3, #1
 8011242:	d02c      	beq.n	801129e <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011248:	2b00      	cmp	r3, #0
 801124a:	d007      	beq.n	801125c <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011250:	4618      	mov	r0, r3
 8011252:	f7fe fa67 	bl	800f724 <pbuf_free>
      pcb->refused_data = NULL;
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	2200      	movs	r2, #0
 801125a:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011260:	4618      	mov	r0, r3
 8011262:	f7ff fd7a 	bl	8010d5a <tcp_segs_free>
    pcb->ooseq = NULL;
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	2200      	movs	r2, #0
 801126a:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011272:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011278:	4618      	mov	r0, r3
 801127a:	f7ff fd6e 	bl	8010d5a <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011282:	4618      	mov	r0, r3
 8011284:	f7ff fd69 	bl	8010d5a <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	2200      	movs	r2, #0
 801128c:	669a      	str	r2, [r3, #104]	; 0x68
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	2200      	movs	r2, #0
 801129a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 801129e:	bf00      	nop
 80112a0:	3708      	adds	r7, #8
 80112a2:	46bd      	mov	sp, r7
 80112a4:	bd80      	pop	{r7, pc}
	...

080112a8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b084      	sub	sp, #16
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
 80112b0:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	683a      	ldr	r2, [r7, #0]
 80112b8:	429a      	cmp	r2, r3
 80112ba:	d105      	bne.n	80112c8 <tcp_pcb_remove+0x20>
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	68da      	ldr	r2, [r3, #12]
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	601a      	str	r2, [r3, #0]
 80112c6:	e013      	b.n	80112f0 <tcp_pcb_remove+0x48>
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	60fb      	str	r3, [r7, #12]
 80112ce:	e00c      	b.n	80112ea <tcp_pcb_remove+0x42>
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	68db      	ldr	r3, [r3, #12]
 80112d4:	683a      	ldr	r2, [r7, #0]
 80112d6:	429a      	cmp	r2, r3
 80112d8:	d104      	bne.n	80112e4 <tcp_pcb_remove+0x3c>
 80112da:	683b      	ldr	r3, [r7, #0]
 80112dc:	68da      	ldr	r2, [r3, #12]
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	60da      	str	r2, [r3, #12]
 80112e2:	e005      	b.n	80112f0 <tcp_pcb_remove+0x48>
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	68db      	ldr	r3, [r3, #12]
 80112e8:	60fb      	str	r3, [r7, #12]
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d1ef      	bne.n	80112d0 <tcp_pcb_remove+0x28>
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	2200      	movs	r2, #0
 80112f4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80112f6:	6838      	ldr	r0, [r7, #0]
 80112f8:	f7ff ff94 	bl	8011224 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	7d1b      	ldrb	r3, [r3, #20]
 8011300:	2b0a      	cmp	r3, #10
 8011302:	d013      	beq.n	801132c <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8011304:	683b      	ldr	r3, [r7, #0]
 8011306:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8011308:	2b01      	cmp	r3, #1
 801130a:	d00f      	beq.n	801132c <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	7e9b      	ldrb	r3, [r3, #26]
 8011310:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8011314:	2b00      	cmp	r3, #0
 8011316:	d009      	beq.n	801132c <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8011318:	683b      	ldr	r3, [r7, #0]
 801131a:	7e9b      	ldrb	r3, [r3, #26]
 801131c:	f043 0302 	orr.w	r3, r3, #2
 8011320:	b2da      	uxtb	r2, r3
 8011322:	683b      	ldr	r3, [r7, #0]
 8011324:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8011326:	6838      	ldr	r0, [r7, #0]
 8011328:	f003 f9b8 	bl	801469c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	7d1b      	ldrb	r3, [r3, #20]
 8011330:	2b01      	cmp	r3, #1
 8011332:	d020      	beq.n	8011376 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011334:	683b      	ldr	r3, [r7, #0]
 8011336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011338:	2b00      	cmp	r3, #0
 801133a:	d006      	beq.n	801134a <tcp_pcb_remove+0xa2>
 801133c:	4b13      	ldr	r3, [pc, #76]	; (801138c <tcp_pcb_remove+0xe4>)
 801133e:	f240 7253 	movw	r2, #1875	; 0x753
 8011342:	4913      	ldr	r1, [pc, #76]	; (8011390 <tcp_pcb_remove+0xe8>)
 8011344:	4813      	ldr	r0, [pc, #76]	; (8011394 <tcp_pcb_remove+0xec>)
 8011346:	f009 f887 	bl	801a458 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801134a:	683b      	ldr	r3, [r7, #0]
 801134c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801134e:	2b00      	cmp	r3, #0
 8011350:	d006      	beq.n	8011360 <tcp_pcb_remove+0xb8>
 8011352:	4b0e      	ldr	r3, [pc, #56]	; (801138c <tcp_pcb_remove+0xe4>)
 8011354:	f240 7254 	movw	r2, #1876	; 0x754
 8011358:	490f      	ldr	r1, [pc, #60]	; (8011398 <tcp_pcb_remove+0xf0>)
 801135a:	480e      	ldr	r0, [pc, #56]	; (8011394 <tcp_pcb_remove+0xec>)
 801135c:	f009 f87c 	bl	801a458 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011364:	2b00      	cmp	r3, #0
 8011366:	d006      	beq.n	8011376 <tcp_pcb_remove+0xce>
 8011368:	4b08      	ldr	r3, [pc, #32]	; (801138c <tcp_pcb_remove+0xe4>)
 801136a:	f240 7256 	movw	r2, #1878	; 0x756
 801136e:	490b      	ldr	r1, [pc, #44]	; (801139c <tcp_pcb_remove+0xf4>)
 8011370:	4808      	ldr	r0, [pc, #32]	; (8011394 <tcp_pcb_remove+0xec>)
 8011372:	f009 f871 	bl	801a458 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	2200      	movs	r2, #0
 801137a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	2200      	movs	r2, #0
 8011380:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8011382:	bf00      	nop
 8011384:	3710      	adds	r7, #16
 8011386:	46bd      	mov	sp, r7
 8011388:	bd80      	pop	{r7, pc}
 801138a:	bf00      	nop
 801138c:	0801cc34 	.word	0x0801cc34
 8011390:	0801cfec 	.word	0x0801cfec
 8011394:	0801cc70 	.word	0x0801cc70
 8011398:	0801d004 	.word	0x0801d004
 801139c:	0801d020 	.word	0x0801d020

080113a0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80113a0:	b480      	push	{r7}
 80113a2:	b083      	sub	sp, #12
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80113a8:	4b06      	ldr	r3, [pc, #24]	; (80113c4 <tcp_next_iss+0x24>)
 80113aa:	681a      	ldr	r2, [r3, #0]
 80113ac:	4b06      	ldr	r3, [pc, #24]	; (80113c8 <tcp_next_iss+0x28>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	4413      	add	r3, r2
 80113b2:	4a04      	ldr	r2, [pc, #16]	; (80113c4 <tcp_next_iss+0x24>)
 80113b4:	6013      	str	r3, [r2, #0]
  return iss;
 80113b6:	4b03      	ldr	r3, [pc, #12]	; (80113c4 <tcp_next_iss+0x24>)
 80113b8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80113ba:	4618      	mov	r0, r3
 80113bc:	370c      	adds	r7, #12
 80113be:	46bd      	mov	sp, r7
 80113c0:	bc80      	pop	{r7}
 80113c2:	4770      	bx	lr
 80113c4:	20000014 	.word	0x20000014
 80113c8:	2000ebc0 	.word	0x2000ebc0

080113cc <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b084      	sub	sp, #16
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	4603      	mov	r3, r0
 80113d4:	6039      	str	r1, [r7, #0]
 80113d6:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 80113d8:	6838      	ldr	r0, [r7, #0]
 80113da:	f007 fae9 	bl	80189b0 <ip4_route>
 80113de:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d101      	bne.n	80113ea <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 80113e6:	88fb      	ldrh	r3, [r7, #6]
 80113e8:	e010      	b.n	801140c <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80113ee:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80113f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d008      	beq.n	801140a <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 80113f8:	897b      	ldrh	r3, [r7, #10]
 80113fa:	3b28      	subs	r3, #40	; 0x28
 80113fc:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80113fe:	893a      	ldrh	r2, [r7, #8]
 8011400:	88fb      	ldrh	r3, [r7, #6]
 8011402:	4293      	cmp	r3, r2
 8011404:	bf28      	it	cs
 8011406:	4613      	movcs	r3, r2
 8011408:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 801140a:	88fb      	ldrh	r3, [r7, #6]
}
 801140c:	4618      	mov	r0, r3
 801140e:	3710      	adds	r7, #16
 8011410:	46bd      	mov	sp, r7
 8011412:	bd80      	pop	{r7, pc}

08011414 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b084      	sub	sp, #16
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
 801141c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801141e:	683b      	ldr	r3, [r7, #0]
 8011420:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011422:	e011      	b.n	8011448 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	681a      	ldr	r2, [r3, #0]
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	429a      	cmp	r2, r3
 801142e:	d108      	bne.n	8011442 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	68db      	ldr	r3, [r3, #12]
 8011434:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8011436:	68f8      	ldr	r0, [r7, #12]
 8011438:	f7fe fece 	bl	80101d8 <tcp_abort>
      pcb = next;
 801143c:	68bb      	ldr	r3, [r7, #8]
 801143e:	60fb      	str	r3, [r7, #12]
 8011440:	e002      	b.n	8011448 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	68db      	ldr	r3, [r3, #12]
 8011446:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d1ea      	bne.n	8011424 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 801144e:	bf00      	nop
 8011450:	bf00      	nop
 8011452:	3710      	adds	r7, #16
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}

08011458 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b084      	sub	sp, #16
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
 8011460:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d02c      	beq.n	80114c2 <tcp_netif_ip_addr_changed+0x6a>
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d028      	beq.n	80114c2 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011470:	4b16      	ldr	r3, [pc, #88]	; (80114cc <tcp_netif_ip_addr_changed+0x74>)
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	4619      	mov	r1, r3
 8011476:	6878      	ldr	r0, [r7, #4]
 8011478:	f7ff ffcc 	bl	8011414 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801147c:	4b14      	ldr	r3, [pc, #80]	; (80114d0 <tcp_netif_ip_addr_changed+0x78>)
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	4619      	mov	r1, r3
 8011482:	6878      	ldr	r0, [r7, #4]
 8011484:	f7ff ffc6 	bl	8011414 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d019      	beq.n	80114c2 <tcp_netif_ip_addr_changed+0x6a>
 801148e:	683b      	ldr	r3, [r7, #0]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d015      	beq.n	80114c2 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8011496:	4b0f      	ldr	r3, [pc, #60]	; (80114d4 <tcp_netif_ip_addr_changed+0x7c>)
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	60fb      	str	r3, [r7, #12]
 801149c:	e00e      	b.n	80114bc <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	68db      	ldr	r3, [r3, #12]
 80114a2:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	681a      	ldr	r2, [r3, #0]
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	429a      	cmp	r2, r3
 80114ae:	d103      	bne.n	80114b8 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80114b0:	683b      	ldr	r3, [r7, #0]
 80114b2:	681a      	ldr	r2, [r3, #0]
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80114b8:	68bb      	ldr	r3, [r7, #8]
 80114ba:	60fb      	str	r3, [r7, #12]
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d1ed      	bne.n	801149e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80114c2:	bf00      	nop
 80114c4:	3710      	adds	r7, #16
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}
 80114ca:	bf00      	nop
 80114cc:	2000ebcc 	.word	0x2000ebcc
 80114d0:	2000ebc4 	.word	0x2000ebc4
 80114d4:	2000ebc8 	.word	0x2000ebc8

080114d8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80114d8:	b590      	push	{r4, r7, lr}
 80114da:	b08b      	sub	sp, #44	; 0x2c
 80114dc:	af02      	add	r7, sp, #8
 80114de:	6078      	str	r0, [r7, #4]
 80114e0:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	685b      	ldr	r3, [r3, #4]
 80114e6:	4a82      	ldr	r2, [pc, #520]	; (80116f0 <tcp_input+0x218>)
 80114e8:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	895b      	ldrh	r3, [r3, #10]
 80114ee:	2b13      	cmp	r3, #19
 80114f0:	f240 8398 	bls.w	8011c24 <tcp_input+0x74c>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80114f4:	4b7f      	ldr	r3, [pc, #508]	; (80116f4 <tcp_input+0x21c>)
 80114f6:	695b      	ldr	r3, [r3, #20]
 80114f8:	4a7e      	ldr	r2, [pc, #504]	; (80116f4 <tcp_input+0x21c>)
 80114fa:	6812      	ldr	r2, [r2, #0]
 80114fc:	4611      	mov	r1, r2
 80114fe:	4618      	mov	r0, r3
 8011500:	f007 fcf0 	bl	8018ee4 <ip4_addr_isbroadcast_u32>
 8011504:	4603      	mov	r3, r0
 8011506:	2b00      	cmp	r3, #0
 8011508:	f040 838e 	bne.w	8011c28 <tcp_input+0x750>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801150c:	4b79      	ldr	r3, [pc, #484]	; (80116f4 <tcp_input+0x21c>)
 801150e:	695b      	ldr	r3, [r3, #20]
 8011510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011514:	2be0      	cmp	r3, #224	; 0xe0
 8011516:	f000 8387 	beq.w	8011c28 <tcp_input+0x750>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 801151a:	4b75      	ldr	r3, [pc, #468]	; (80116f0 <tcp_input+0x218>)
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	899b      	ldrh	r3, [r3, #12]
 8011520:	b29b      	uxth	r3, r3
 8011522:	4618      	mov	r0, r3
 8011524:	f7fc fefe 	bl	800e324 <lwip_htons>
 8011528:	4603      	mov	r3, r0
 801152a:	0b1b      	lsrs	r3, r3, #12
 801152c:	b29b      	uxth	r3, r3
 801152e:	b2db      	uxtb	r3, r3
 8011530:	009b      	lsls	r3, r3, #2
 8011532:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8011534:	7cbb      	ldrb	r3, [r7, #18]
 8011536:	2b13      	cmp	r3, #19
 8011538:	f240 8378 	bls.w	8011c2c <tcp_input+0x754>
 801153c:	7cbb      	ldrb	r3, [r7, #18]
 801153e:	b29a      	uxth	r2, r3
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	891b      	ldrh	r3, [r3, #8]
 8011544:	429a      	cmp	r2, r3
 8011546:	f200 8371 	bhi.w	8011c2c <tcp_input+0x754>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 801154a:	7cbb      	ldrb	r3, [r7, #18]
 801154c:	b29b      	uxth	r3, r3
 801154e:	3b14      	subs	r3, #20
 8011550:	b29a      	uxth	r2, r3
 8011552:	4b69      	ldr	r3, [pc, #420]	; (80116f8 <tcp_input+0x220>)
 8011554:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8011556:	4b69      	ldr	r3, [pc, #420]	; (80116fc <tcp_input+0x224>)
 8011558:	2200      	movs	r2, #0
 801155a:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	895a      	ldrh	r2, [r3, #10]
 8011560:	7cbb      	ldrb	r3, [r7, #18]
 8011562:	b29b      	uxth	r3, r3
 8011564:	429a      	cmp	r2, r3
 8011566:	d30d      	bcc.n	8011584 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8011568:	4b63      	ldr	r3, [pc, #396]	; (80116f8 <tcp_input+0x220>)
 801156a:	881a      	ldrh	r2, [r3, #0]
 801156c:	4b64      	ldr	r3, [pc, #400]	; (8011700 <tcp_input+0x228>)
 801156e:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8011570:	7cbb      	ldrb	r3, [r7, #18]
 8011572:	b29b      	uxth	r3, r3
 8011574:	425b      	negs	r3, r3
 8011576:	b29b      	uxth	r3, r3
 8011578:	b21b      	sxth	r3, r3
 801157a:	4619      	mov	r1, r3
 801157c:	6878      	ldr	r0, [r7, #4]
 801157e:	f7fe f8ad 	bl	800f6dc <pbuf_header>
 8011582:	e055      	b.n	8011630 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d105      	bne.n	8011598 <tcp_input+0xc0>
 801158c:	4b5d      	ldr	r3, [pc, #372]	; (8011704 <tcp_input+0x22c>)
 801158e:	22b2      	movs	r2, #178	; 0xb2
 8011590:	495d      	ldr	r1, [pc, #372]	; (8011708 <tcp_input+0x230>)
 8011592:	485e      	ldr	r0, [pc, #376]	; (801170c <tcp_input+0x234>)
 8011594:	f008 ff60 	bl	801a458 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8011598:	f06f 0113 	mvn.w	r1, #19
 801159c:	6878      	ldr	r0, [r7, #4]
 801159e:	f7fe f89d 	bl	800f6dc <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	895a      	ldrh	r2, [r3, #10]
 80115a6:	4b56      	ldr	r3, [pc, #344]	; (8011700 <tcp_input+0x228>)
 80115a8:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80115aa:	4b53      	ldr	r3, [pc, #332]	; (80116f8 <tcp_input+0x220>)
 80115ac:	881a      	ldrh	r2, [r3, #0]
 80115ae:	4b54      	ldr	r3, [pc, #336]	; (8011700 <tcp_input+0x228>)
 80115b0:	881b      	ldrh	r3, [r3, #0]
 80115b2:	1ad3      	subs	r3, r2, r3
 80115b4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 80115b6:	4b52      	ldr	r3, [pc, #328]	; (8011700 <tcp_input+0x228>)
 80115b8:	881b      	ldrh	r3, [r3, #0]
 80115ba:	425b      	negs	r3, r3
 80115bc:	b29b      	uxth	r3, r3
 80115be:	b21b      	sxth	r3, r3
 80115c0:	4619      	mov	r1, r3
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	f7fe f88a 	bl	800f6dc <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	895b      	ldrh	r3, [r3, #10]
 80115ce:	8a3a      	ldrh	r2, [r7, #16]
 80115d0:	429a      	cmp	r2, r3
 80115d2:	f200 832d 	bhi.w	8011c30 <tcp_input+0x758>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	685b      	ldr	r3, [r3, #4]
 80115dc:	4a47      	ldr	r2, [pc, #284]	; (80116fc <tcp_input+0x224>)
 80115de:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681a      	ldr	r2, [r3, #0]
 80115e4:	8a3b      	ldrh	r3, [r7, #16]
 80115e6:	425b      	negs	r3, r3
 80115e8:	b29b      	uxth	r3, r3
 80115ea:	b21b      	sxth	r3, r3
 80115ec:	4619      	mov	r1, r3
 80115ee:	4610      	mov	r0, r2
 80115f0:	f7fe f874 	bl	800f6dc <pbuf_header>
    p->tot_len -= opt2len;
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	891a      	ldrh	r2, [r3, #8]
 80115f8:	8a3b      	ldrh	r3, [r7, #16]
 80115fa:	1ad3      	subs	r3, r2, r3
 80115fc:	b29a      	uxth	r2, r3
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	895b      	ldrh	r3, [r3, #10]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d005      	beq.n	8011616 <tcp_input+0x13e>
 801160a:	4b3e      	ldr	r3, [pc, #248]	; (8011704 <tcp_input+0x22c>)
 801160c:	22cf      	movs	r2, #207	; 0xcf
 801160e:	4940      	ldr	r1, [pc, #256]	; (8011710 <tcp_input+0x238>)
 8011610:	483e      	ldr	r0, [pc, #248]	; (801170c <tcp_input+0x234>)
 8011612:	f008 ff21 	bl	801a458 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	891a      	ldrh	r2, [r3, #8]
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	891b      	ldrh	r3, [r3, #8]
 8011620:	429a      	cmp	r2, r3
 8011622:	d005      	beq.n	8011630 <tcp_input+0x158>
 8011624:	4b37      	ldr	r3, [pc, #220]	; (8011704 <tcp_input+0x22c>)
 8011626:	22d0      	movs	r2, #208	; 0xd0
 8011628:	493a      	ldr	r1, [pc, #232]	; (8011714 <tcp_input+0x23c>)
 801162a:	4838      	ldr	r0, [pc, #224]	; (801170c <tcp_input+0x234>)
 801162c:	f008 ff14 	bl	801a458 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8011630:	4b2f      	ldr	r3, [pc, #188]	; (80116f0 <tcp_input+0x218>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	881b      	ldrh	r3, [r3, #0]
 8011636:	b29b      	uxth	r3, r3
 8011638:	4a2d      	ldr	r2, [pc, #180]	; (80116f0 <tcp_input+0x218>)
 801163a:	6814      	ldr	r4, [r2, #0]
 801163c:	4618      	mov	r0, r3
 801163e:	f7fc fe71 	bl	800e324 <lwip_htons>
 8011642:	4603      	mov	r3, r0
 8011644:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011646:	4b2a      	ldr	r3, [pc, #168]	; (80116f0 <tcp_input+0x218>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	885b      	ldrh	r3, [r3, #2]
 801164c:	b29b      	uxth	r3, r3
 801164e:	4a28      	ldr	r2, [pc, #160]	; (80116f0 <tcp_input+0x218>)
 8011650:	6814      	ldr	r4, [r2, #0]
 8011652:	4618      	mov	r0, r3
 8011654:	f7fc fe66 	bl	800e324 <lwip_htons>
 8011658:	4603      	mov	r3, r0
 801165a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801165c:	4b24      	ldr	r3, [pc, #144]	; (80116f0 <tcp_input+0x218>)
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	685b      	ldr	r3, [r3, #4]
 8011662:	4a23      	ldr	r2, [pc, #140]	; (80116f0 <tcp_input+0x218>)
 8011664:	6814      	ldr	r4, [r2, #0]
 8011666:	4618      	mov	r0, r3
 8011668:	f7fc fe69 	bl	800e33e <lwip_htonl>
 801166c:	4603      	mov	r3, r0
 801166e:	6063      	str	r3, [r4, #4]
 8011670:	6863      	ldr	r3, [r4, #4]
 8011672:	4a29      	ldr	r2, [pc, #164]	; (8011718 <tcp_input+0x240>)
 8011674:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011676:	4b1e      	ldr	r3, [pc, #120]	; (80116f0 <tcp_input+0x218>)
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	689b      	ldr	r3, [r3, #8]
 801167c:	4a1c      	ldr	r2, [pc, #112]	; (80116f0 <tcp_input+0x218>)
 801167e:	6814      	ldr	r4, [r2, #0]
 8011680:	4618      	mov	r0, r3
 8011682:	f7fc fe5c 	bl	800e33e <lwip_htonl>
 8011686:	4603      	mov	r3, r0
 8011688:	60a3      	str	r3, [r4, #8]
 801168a:	68a3      	ldr	r3, [r4, #8]
 801168c:	4a23      	ldr	r2, [pc, #140]	; (801171c <tcp_input+0x244>)
 801168e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011690:	4b17      	ldr	r3, [pc, #92]	; (80116f0 <tcp_input+0x218>)
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	89db      	ldrh	r3, [r3, #14]
 8011696:	b29b      	uxth	r3, r3
 8011698:	4a15      	ldr	r2, [pc, #84]	; (80116f0 <tcp_input+0x218>)
 801169a:	6814      	ldr	r4, [r2, #0]
 801169c:	4618      	mov	r0, r3
 801169e:	f7fc fe41 	bl	800e324 <lwip_htons>
 80116a2:	4603      	mov	r3, r0
 80116a4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80116a6:	4b12      	ldr	r3, [pc, #72]	; (80116f0 <tcp_input+0x218>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	899b      	ldrh	r3, [r3, #12]
 80116ac:	b29b      	uxth	r3, r3
 80116ae:	4618      	mov	r0, r3
 80116b0:	f7fc fe38 	bl	800e324 <lwip_htons>
 80116b4:	4603      	mov	r3, r0
 80116b6:	b2db      	uxtb	r3, r3
 80116b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80116bc:	b2da      	uxtb	r2, r3
 80116be:	4b18      	ldr	r3, [pc, #96]	; (8011720 <tcp_input+0x248>)
 80116c0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	891a      	ldrh	r2, [r3, #8]
 80116c6:	4b16      	ldr	r3, [pc, #88]	; (8011720 <tcp_input+0x248>)
 80116c8:	781b      	ldrb	r3, [r3, #0]
 80116ca:	f003 0303 	and.w	r3, r3, #3
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	bf14      	ite	ne
 80116d2:	2301      	movne	r3, #1
 80116d4:	2300      	moveq	r3, #0
 80116d6:	b2db      	uxtb	r3, r3
 80116d8:	b29b      	uxth	r3, r3
 80116da:	4413      	add	r3, r2
 80116dc:	b29a      	uxth	r2, r3
 80116de:	4b11      	ldr	r3, [pc, #68]	; (8011724 <tcp_input+0x24c>)
 80116e0:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80116e2:	2300      	movs	r3, #0
 80116e4:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80116e6:	4b10      	ldr	r3, [pc, #64]	; (8011728 <tcp_input+0x250>)
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	61fb      	str	r3, [r7, #28]
 80116ec:	e082      	b.n	80117f4 <tcp_input+0x31c>
 80116ee:	bf00      	nop
 80116f0:	2000ebe8 	.word	0x2000ebe8
 80116f4:	20009290 	.word	0x20009290
 80116f8:	2000ebec 	.word	0x2000ebec
 80116fc:	2000ebf0 	.word	0x2000ebf0
 8011700:	2000ebee 	.word	0x2000ebee
 8011704:	0801d038 	.word	0x0801d038
 8011708:	0801d06c 	.word	0x0801d06c
 801170c:	0801d07c 	.word	0x0801d07c
 8011710:	0801d0a4 	.word	0x0801d0a4
 8011714:	0801d0b0 	.word	0x0801d0b0
 8011718:	2000ebf8 	.word	0x2000ebf8
 801171c:	2000ebfc 	.word	0x2000ebfc
 8011720:	2000ec04 	.word	0x2000ec04
 8011724:	2000ec02 	.word	0x2000ec02
 8011728:	2000ebcc 	.word	0x2000ebcc
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801172c:	69fb      	ldr	r3, [r7, #28]
 801172e:	7d1b      	ldrb	r3, [r3, #20]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d105      	bne.n	8011740 <tcp_input+0x268>
 8011734:	4b6e      	ldr	r3, [pc, #440]	; (80118f0 <tcp_input+0x418>)
 8011736:	22e2      	movs	r2, #226	; 0xe2
 8011738:	496e      	ldr	r1, [pc, #440]	; (80118f4 <tcp_input+0x41c>)
 801173a:	486f      	ldr	r0, [pc, #444]	; (80118f8 <tcp_input+0x420>)
 801173c:	f008 fe8c 	bl	801a458 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011740:	69fb      	ldr	r3, [r7, #28]
 8011742:	7d1b      	ldrb	r3, [r3, #20]
 8011744:	2b0a      	cmp	r3, #10
 8011746:	d105      	bne.n	8011754 <tcp_input+0x27c>
 8011748:	4b69      	ldr	r3, [pc, #420]	; (80118f0 <tcp_input+0x418>)
 801174a:	22e3      	movs	r2, #227	; 0xe3
 801174c:	496b      	ldr	r1, [pc, #428]	; (80118fc <tcp_input+0x424>)
 801174e:	486a      	ldr	r0, [pc, #424]	; (80118f8 <tcp_input+0x420>)
 8011750:	f008 fe82 	bl	801a458 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011754:	69fb      	ldr	r3, [r7, #28]
 8011756:	7d1b      	ldrb	r3, [r3, #20]
 8011758:	2b01      	cmp	r3, #1
 801175a:	d105      	bne.n	8011768 <tcp_input+0x290>
 801175c:	4b64      	ldr	r3, [pc, #400]	; (80118f0 <tcp_input+0x418>)
 801175e:	22e4      	movs	r2, #228	; 0xe4
 8011760:	4967      	ldr	r1, [pc, #412]	; (8011900 <tcp_input+0x428>)
 8011762:	4865      	ldr	r0, [pc, #404]	; (80118f8 <tcp_input+0x420>)
 8011764:	f008 fe78 	bl	801a458 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8011768:	69fb      	ldr	r3, [r7, #28]
 801176a:	8b1a      	ldrh	r2, [r3, #24]
 801176c:	4b65      	ldr	r3, [pc, #404]	; (8011904 <tcp_input+0x42c>)
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	881b      	ldrh	r3, [r3, #0]
 8011772:	b29b      	uxth	r3, r3
 8011774:	429a      	cmp	r2, r3
 8011776:	d138      	bne.n	80117ea <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 8011778:	69fb      	ldr	r3, [r7, #28]
 801177a:	8ada      	ldrh	r2, [r3, #22]
 801177c:	4b61      	ldr	r3, [pc, #388]	; (8011904 <tcp_input+0x42c>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	885b      	ldrh	r3, [r3, #2]
 8011782:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8011784:	429a      	cmp	r2, r3
 8011786:	d130      	bne.n	80117ea <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011788:	69fb      	ldr	r3, [r7, #28]
 801178a:	685a      	ldr	r2, [r3, #4]
 801178c:	4b5e      	ldr	r3, [pc, #376]	; (8011908 <tcp_input+0x430>)
 801178e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011790:	429a      	cmp	r2, r3
 8011792:	d12a      	bne.n	80117ea <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011794:	69fb      	ldr	r3, [r7, #28]
 8011796:	681a      	ldr	r2, [r3, #0]
 8011798:	4b5b      	ldr	r3, [pc, #364]	; (8011908 <tcp_input+0x430>)
 801179a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801179c:	429a      	cmp	r2, r3
 801179e:	d124      	bne.n	80117ea <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80117a0:	69fb      	ldr	r3, [r7, #28]
 80117a2:	68db      	ldr	r3, [r3, #12]
 80117a4:	69fa      	ldr	r2, [r7, #28]
 80117a6:	429a      	cmp	r2, r3
 80117a8:	d105      	bne.n	80117b6 <tcp_input+0x2de>
 80117aa:	4b51      	ldr	r3, [pc, #324]	; (80118f0 <tcp_input+0x418>)
 80117ac:	22ec      	movs	r2, #236	; 0xec
 80117ae:	4957      	ldr	r1, [pc, #348]	; (801190c <tcp_input+0x434>)
 80117b0:	4851      	ldr	r0, [pc, #324]	; (80118f8 <tcp_input+0x420>)
 80117b2:	f008 fe51 	bl	801a458 <iprintf>
      if (prev != NULL) {
 80117b6:	69bb      	ldr	r3, [r7, #24]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d00a      	beq.n	80117d2 <tcp_input+0x2fa>
        prev->next = pcb->next;
 80117bc:	69fb      	ldr	r3, [r7, #28]
 80117be:	68da      	ldr	r2, [r3, #12]
 80117c0:	69bb      	ldr	r3, [r7, #24]
 80117c2:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80117c4:	4b52      	ldr	r3, [pc, #328]	; (8011910 <tcp_input+0x438>)
 80117c6:	681a      	ldr	r2, [r3, #0]
 80117c8:	69fb      	ldr	r3, [r7, #28]
 80117ca:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80117cc:	4a50      	ldr	r2, [pc, #320]	; (8011910 <tcp_input+0x438>)
 80117ce:	69fb      	ldr	r3, [r7, #28]
 80117d0:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80117d2:	69fb      	ldr	r3, [r7, #28]
 80117d4:	68db      	ldr	r3, [r3, #12]
 80117d6:	69fa      	ldr	r2, [r7, #28]
 80117d8:	429a      	cmp	r2, r3
 80117da:	d10f      	bne.n	80117fc <tcp_input+0x324>
 80117dc:	4b44      	ldr	r3, [pc, #272]	; (80118f0 <tcp_input+0x418>)
 80117de:	22f4      	movs	r2, #244	; 0xf4
 80117e0:	494c      	ldr	r1, [pc, #304]	; (8011914 <tcp_input+0x43c>)
 80117e2:	4845      	ldr	r0, [pc, #276]	; (80118f8 <tcp_input+0x420>)
 80117e4:	f008 fe38 	bl	801a458 <iprintf>
      break;
 80117e8:	e008      	b.n	80117fc <tcp_input+0x324>
    }
    prev = pcb;
 80117ea:	69fb      	ldr	r3, [r7, #28]
 80117ec:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80117ee:	69fb      	ldr	r3, [r7, #28]
 80117f0:	68db      	ldr	r3, [r3, #12]
 80117f2:	61fb      	str	r3, [r7, #28]
 80117f4:	69fb      	ldr	r3, [r7, #28]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d198      	bne.n	801172c <tcp_input+0x254>
 80117fa:	e000      	b.n	80117fe <tcp_input+0x326>
      break;
 80117fc:	bf00      	nop
  }

  if (pcb == NULL) {
 80117fe:	69fb      	ldr	r3, [r7, #28]
 8011800:	2b00      	cmp	r3, #0
 8011802:	f040 808f 	bne.w	8011924 <tcp_input+0x44c>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011806:	4b44      	ldr	r3, [pc, #272]	; (8011918 <tcp_input+0x440>)
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	61fb      	str	r3, [r7, #28]
 801180c:	e02f      	b.n	801186e <tcp_input+0x396>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801180e:	69fb      	ldr	r3, [r7, #28]
 8011810:	7d1b      	ldrb	r3, [r3, #20]
 8011812:	2b0a      	cmp	r3, #10
 8011814:	d005      	beq.n	8011822 <tcp_input+0x34a>
 8011816:	4b36      	ldr	r3, [pc, #216]	; (80118f0 <tcp_input+0x418>)
 8011818:	22fe      	movs	r2, #254	; 0xfe
 801181a:	4940      	ldr	r1, [pc, #256]	; (801191c <tcp_input+0x444>)
 801181c:	4836      	ldr	r0, [pc, #216]	; (80118f8 <tcp_input+0x420>)
 801181e:	f008 fe1b 	bl	801a458 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8011822:	69fb      	ldr	r3, [r7, #28]
 8011824:	8b1a      	ldrh	r2, [r3, #24]
 8011826:	4b37      	ldr	r3, [pc, #220]	; (8011904 <tcp_input+0x42c>)
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	881b      	ldrh	r3, [r3, #0]
 801182c:	b29b      	uxth	r3, r3
 801182e:	429a      	cmp	r2, r3
 8011830:	d11a      	bne.n	8011868 <tcp_input+0x390>
          pcb->local_port == tcphdr->dest &&
 8011832:	69fb      	ldr	r3, [r7, #28]
 8011834:	8ada      	ldrh	r2, [r3, #22]
 8011836:	4b33      	ldr	r3, [pc, #204]	; (8011904 <tcp_input+0x42c>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	885b      	ldrh	r3, [r3, #2]
 801183c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801183e:	429a      	cmp	r2, r3
 8011840:	d112      	bne.n	8011868 <tcp_input+0x390>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011842:	69fb      	ldr	r3, [r7, #28]
 8011844:	685a      	ldr	r2, [r3, #4]
 8011846:	4b30      	ldr	r3, [pc, #192]	; (8011908 <tcp_input+0x430>)
 8011848:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801184a:	429a      	cmp	r2, r3
 801184c:	d10c      	bne.n	8011868 <tcp_input+0x390>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801184e:	69fb      	ldr	r3, [r7, #28]
 8011850:	681a      	ldr	r2, [r3, #0]
 8011852:	4b2d      	ldr	r3, [pc, #180]	; (8011908 <tcp_input+0x430>)
 8011854:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011856:	429a      	cmp	r2, r3
 8011858:	d106      	bne.n	8011868 <tcp_input+0x390>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 801185a:	69f8      	ldr	r0, [r7, #28]
 801185c:	f000 fb16 	bl	8011e8c <tcp_timewait_input>
        pbuf_free(p);
 8011860:	6878      	ldr	r0, [r7, #4]
 8011862:	f7fd ff5f 	bl	800f724 <pbuf_free>
        return;
 8011866:	e1e9      	b.n	8011c3c <tcp_input+0x764>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011868:	69fb      	ldr	r3, [r7, #28]
 801186a:	68db      	ldr	r3, [r3, #12]
 801186c:	61fb      	str	r3, [r7, #28]
 801186e:	69fb      	ldr	r3, [r7, #28]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d1cc      	bne.n	801180e <tcp_input+0x336>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8011874:	2300      	movs	r3, #0
 8011876:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011878:	4b29      	ldr	r3, [pc, #164]	; (8011920 <tcp_input+0x448>)
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	617b      	str	r3, [r7, #20]
 801187e:	e019      	b.n	80118b4 <tcp_input+0x3dc>
      if (lpcb->local_port == tcphdr->dest) {
 8011880:	697b      	ldr	r3, [r7, #20]
 8011882:	8ada      	ldrh	r2, [r3, #22]
 8011884:	4b1f      	ldr	r3, [pc, #124]	; (8011904 <tcp_input+0x42c>)
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	885b      	ldrh	r3, [r3, #2]
 801188a:	b29b      	uxth	r3, r3
 801188c:	429a      	cmp	r2, r3
 801188e:	d10c      	bne.n	80118aa <tcp_input+0x3d2>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011890:	697b      	ldr	r3, [r7, #20]
 8011892:	681a      	ldr	r2, [r3, #0]
 8011894:	4b1c      	ldr	r3, [pc, #112]	; (8011908 <tcp_input+0x430>)
 8011896:	695b      	ldr	r3, [r3, #20]
 8011898:	429a      	cmp	r2, r3
 801189a:	d00f      	beq.n	80118bc <tcp_input+0x3e4>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801189c:	697b      	ldr	r3, [r7, #20]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d00d      	beq.n	80118be <tcp_input+0x3e6>
 80118a2:	697b      	ldr	r3, [r7, #20]
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d009      	beq.n	80118be <tcp_input+0x3e6>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80118aa:	697b      	ldr	r3, [r7, #20]
 80118ac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80118ae:	697b      	ldr	r3, [r7, #20]
 80118b0:	68db      	ldr	r3, [r3, #12]
 80118b2:	617b      	str	r3, [r7, #20]
 80118b4:	697b      	ldr	r3, [r7, #20]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d1e2      	bne.n	8011880 <tcp_input+0x3a8>
 80118ba:	e000      	b.n	80118be <tcp_input+0x3e6>
            break;
 80118bc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80118be:	697b      	ldr	r3, [r7, #20]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d02f      	beq.n	8011924 <tcp_input+0x44c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80118c4:	69bb      	ldr	r3, [r7, #24]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d00a      	beq.n	80118e0 <tcp_input+0x408>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80118ca:	697b      	ldr	r3, [r7, #20]
 80118cc:	68da      	ldr	r2, [r3, #12]
 80118ce:	69bb      	ldr	r3, [r7, #24]
 80118d0:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80118d2:	4b13      	ldr	r3, [pc, #76]	; (8011920 <tcp_input+0x448>)
 80118d4:	681a      	ldr	r2, [r3, #0]
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80118da:	4a11      	ldr	r2, [pc, #68]	; (8011920 <tcp_input+0x448>)
 80118dc:	697b      	ldr	r3, [r7, #20]
 80118de:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 80118e0:	6978      	ldr	r0, [r7, #20]
 80118e2:	f000 f9f3 	bl	8011ccc <tcp_listen_input>
      pbuf_free(p);
 80118e6:	6878      	ldr	r0, [r7, #4]
 80118e8:	f7fd ff1c 	bl	800f724 <pbuf_free>
      return;
 80118ec:	e1a6      	b.n	8011c3c <tcp_input+0x764>
 80118ee:	bf00      	nop
 80118f0:	0801d038 	.word	0x0801d038
 80118f4:	0801d0d0 	.word	0x0801d0d0
 80118f8:	0801d07c 	.word	0x0801d07c
 80118fc:	0801d0f8 	.word	0x0801d0f8
 8011900:	0801d124 	.word	0x0801d124
 8011904:	2000ebe8 	.word	0x2000ebe8
 8011908:	20009290 	.word	0x20009290
 801190c:	0801d14c 	.word	0x0801d14c
 8011910:	2000ebcc 	.word	0x2000ebcc
 8011914:	0801d178 	.word	0x0801d178
 8011918:	2000ebd0 	.word	0x2000ebd0
 801191c:	0801d1a4 	.word	0x0801d1a4
 8011920:	2000ebc8 	.word	0x2000ebc8
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8011924:	69fb      	ldr	r3, [r7, #28]
 8011926:	2b00      	cmp	r3, #0
 8011928:	f000 8156 	beq.w	8011bd8 <tcp_input+0x700>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801192c:	4b94      	ldr	r3, [pc, #592]	; (8011b80 <tcp_input+0x6a8>)
 801192e:	2200      	movs	r2, #0
 8011930:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	891a      	ldrh	r2, [r3, #8]
 8011936:	4b92      	ldr	r3, [pc, #584]	; (8011b80 <tcp_input+0x6a8>)
 8011938:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801193a:	4a91      	ldr	r2, [pc, #580]	; (8011b80 <tcp_input+0x6a8>)
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011940:	4b90      	ldr	r3, [pc, #576]	; (8011b84 <tcp_input+0x6ac>)
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	4a8e      	ldr	r2, [pc, #568]	; (8011b80 <tcp_input+0x6a8>)
 8011946:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8011948:	4b8f      	ldr	r3, [pc, #572]	; (8011b88 <tcp_input+0x6b0>)
 801194a:	2200      	movs	r2, #0
 801194c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801194e:	4b8f      	ldr	r3, [pc, #572]	; (8011b8c <tcp_input+0x6b4>)
 8011950:	2200      	movs	r2, #0
 8011952:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011954:	4b8e      	ldr	r3, [pc, #568]	; (8011b90 <tcp_input+0x6b8>)
 8011956:	2200      	movs	r2, #0
 8011958:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801195a:	4b8e      	ldr	r3, [pc, #568]	; (8011b94 <tcp_input+0x6bc>)
 801195c:	781b      	ldrb	r3, [r3, #0]
 801195e:	f003 0308 	and.w	r3, r3, #8
 8011962:	2b00      	cmp	r3, #0
 8011964:	d006      	beq.n	8011974 <tcp_input+0x49c>
      p->flags |= PBUF_FLAG_PUSH;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	7b5b      	ldrb	r3, [r3, #13]
 801196a:	f043 0301 	orr.w	r3, r3, #1
 801196e:	b2da      	uxtb	r2, r3
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011974:	69fb      	ldr	r3, [r7, #28]
 8011976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011978:	2b00      	cmp	r3, #0
 801197a:	d017      	beq.n	80119ac <tcp_input+0x4d4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801197c:	69f8      	ldr	r0, [r7, #28]
 801197e:	f7ff f983 	bl	8010c88 <tcp_process_refused_data>
 8011982:	4603      	mov	r3, r0
 8011984:	f113 0f0d 	cmn.w	r3, #13
 8011988:	d007      	beq.n	801199a <tcp_input+0x4c2>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801198a:	69fb      	ldr	r3, [r7, #28]
 801198c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801198e:	2b00      	cmp	r3, #0
 8011990:	d00c      	beq.n	80119ac <tcp_input+0x4d4>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011992:	4b81      	ldr	r3, [pc, #516]	; (8011b98 <tcp_input+0x6c0>)
 8011994:	881b      	ldrh	r3, [r3, #0]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d008      	beq.n	80119ac <tcp_input+0x4d4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801199a:	69fb      	ldr	r3, [r7, #28]
 801199c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801199e:	2b00      	cmp	r3, #0
 80119a0:	f040 80e2 	bne.w	8011b68 <tcp_input+0x690>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80119a4:	69f8      	ldr	r0, [r7, #28]
 80119a6:	f002 fe1d 	bl	80145e4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80119aa:	e0dd      	b.n	8011b68 <tcp_input+0x690>
      }
    }
    tcp_input_pcb = pcb;
 80119ac:	4a7b      	ldr	r2, [pc, #492]	; (8011b9c <tcp_input+0x6c4>)
 80119ae:	69fb      	ldr	r3, [r7, #28]
 80119b0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80119b2:	69f8      	ldr	r0, [r7, #28]
 80119b4:	f000 fad2 	bl	8011f5c <tcp_process>
 80119b8:	4603      	mov	r3, r0
 80119ba:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80119bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80119c0:	f113 0f0d 	cmn.w	r3, #13
 80119c4:	f000 80d2 	beq.w	8011b6c <tcp_input+0x694>
      if (recv_flags & TF_RESET) {
 80119c8:	4b70      	ldr	r3, [pc, #448]	; (8011b8c <tcp_input+0x6b4>)
 80119ca:	781b      	ldrb	r3, [r3, #0]
 80119cc:	f003 0308 	and.w	r3, r3, #8
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d016      	beq.n	8011a02 <tcp_input+0x52a>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80119d4:	69fb      	ldr	r3, [r7, #28]
 80119d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d008      	beq.n	80119f0 <tcp_input+0x518>
 80119de:	69fb      	ldr	r3, [r7, #28]
 80119e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80119e4:	69fa      	ldr	r2, [r7, #28]
 80119e6:	6912      	ldr	r2, [r2, #16]
 80119e8:	f06f 010d 	mvn.w	r1, #13
 80119ec:	4610      	mov	r0, r2
 80119ee:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80119f0:	69f9      	ldr	r1, [r7, #28]
 80119f2:	486b      	ldr	r0, [pc, #428]	; (8011ba0 <tcp_input+0x6c8>)
 80119f4:	f7ff fc58 	bl	80112a8 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 80119f8:	69f9      	ldr	r1, [r7, #28]
 80119fa:	2001      	movs	r0, #1
 80119fc:	f7fd f8d0 	bl	800eba0 <memp_free>
 8011a00:	e0d7      	b.n	8011bb2 <tcp_input+0x6da>
      } else {
        err = ERR_OK;
 8011a02:	2300      	movs	r3, #0
 8011a04:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011a06:	4b62      	ldr	r3, [pc, #392]	; (8011b90 <tcp_input+0x6b8>)
 8011a08:	881b      	ldrh	r3, [r3, #0]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d01b      	beq.n	8011a46 <tcp_input+0x56e>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011a0e:	4b60      	ldr	r3, [pc, #384]	; (8011b90 <tcp_input+0x6b8>)
 8011a10:	881b      	ldrh	r3, [r3, #0]
 8011a12:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011a14:	69fb      	ldr	r3, [r7, #28]
 8011a16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d009      	beq.n	8011a30 <tcp_input+0x558>
 8011a1c:	69fb      	ldr	r3, [r7, #28]
 8011a1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011a20:	69fa      	ldr	r2, [r7, #28]
 8011a22:	6910      	ldr	r0, [r2, #16]
 8011a24:	89fa      	ldrh	r2, [r7, #14]
 8011a26:	69f9      	ldr	r1, [r7, #28]
 8011a28:	4798      	blx	r3
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	74fb      	strb	r3, [r7, #19]
 8011a2e:	e001      	b.n	8011a34 <tcp_input+0x55c>
 8011a30:	2300      	movs	r3, #0
 8011a32:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011a34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011a38:	f113 0f0d 	cmn.w	r3, #13
 8011a3c:	f000 8098 	beq.w	8011b70 <tcp_input+0x698>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011a40:	4b53      	ldr	r3, [pc, #332]	; (8011b90 <tcp_input+0x6b8>)
 8011a42:	2200      	movs	r2, #0
 8011a44:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011a46:	69f8      	ldr	r0, [r7, #28]
 8011a48:	f000 f90e 	bl	8011c68 <tcp_input_delayed_close>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	f040 8090 	bne.w	8011b74 <tcp_input+0x69c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8011a54:	4b4c      	ldr	r3, [pc, #304]	; (8011b88 <tcp_input+0x6b0>)
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d041      	beq.n	8011ae0 <tcp_input+0x608>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8011a5c:	69fb      	ldr	r3, [r7, #28]
 8011a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d006      	beq.n	8011a72 <tcp_input+0x59a>
 8011a64:	4b4f      	ldr	r3, [pc, #316]	; (8011ba4 <tcp_input+0x6cc>)
 8011a66:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8011a6a:	494f      	ldr	r1, [pc, #316]	; (8011ba8 <tcp_input+0x6d0>)
 8011a6c:	484f      	ldr	r0, [pc, #316]	; (8011bac <tcp_input+0x6d4>)
 8011a6e:	f008 fcf3 	bl	801a458 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011a72:	69fb      	ldr	r3, [r7, #28]
 8011a74:	7e9b      	ldrb	r3, [r3, #26]
 8011a76:	f003 0310 	and.w	r3, r3, #16
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d008      	beq.n	8011a90 <tcp_input+0x5b8>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011a7e:	4b42      	ldr	r3, [pc, #264]	; (8011b88 <tcp_input+0x6b0>)
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	4618      	mov	r0, r3
 8011a84:	f7fd fe4e 	bl	800f724 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8011a88:	69f8      	ldr	r0, [r7, #28]
 8011a8a:	f7fe fba5 	bl	80101d8 <tcp_abort>
            goto aborted;
 8011a8e:	e090      	b.n	8011bb2 <tcp_input+0x6da>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011a90:	69fb      	ldr	r3, [r7, #28]
 8011a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d00c      	beq.n	8011ab4 <tcp_input+0x5dc>
 8011a9a:	69fb      	ldr	r3, [r7, #28]
 8011a9c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8011aa0:	69fb      	ldr	r3, [r7, #28]
 8011aa2:	6918      	ldr	r0, [r3, #16]
 8011aa4:	4b38      	ldr	r3, [pc, #224]	; (8011b88 <tcp_input+0x6b0>)
 8011aa6:	681a      	ldr	r2, [r3, #0]
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	69f9      	ldr	r1, [r7, #28]
 8011aac:	47a0      	blx	r4
 8011aae:	4603      	mov	r3, r0
 8011ab0:	74fb      	strb	r3, [r7, #19]
 8011ab2:	e008      	b.n	8011ac6 <tcp_input+0x5ee>
 8011ab4:	4b34      	ldr	r3, [pc, #208]	; (8011b88 <tcp_input+0x6b0>)
 8011ab6:	681a      	ldr	r2, [r3, #0]
 8011ab8:	2300      	movs	r3, #0
 8011aba:	69f9      	ldr	r1, [r7, #28]
 8011abc:	2000      	movs	r0, #0
 8011abe:	f7ff f995 	bl	8010dec <tcp_recv_null>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011ac6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011aca:	f113 0f0d 	cmn.w	r3, #13
 8011ace:	d053      	beq.n	8011b78 <tcp_input+0x6a0>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011ad0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d003      	beq.n	8011ae0 <tcp_input+0x608>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8011ad8:	4b2b      	ldr	r3, [pc, #172]	; (8011b88 <tcp_input+0x6b0>)
 8011ada:	681a      	ldr	r2, [r3, #0]
 8011adc:	69fb      	ldr	r3, [r7, #28]
 8011ade:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011ae0:	4b2a      	ldr	r3, [pc, #168]	; (8011b8c <tcp_input+0x6b4>)
 8011ae2:	781b      	ldrb	r3, [r3, #0]
 8011ae4:	f003 0320 	and.w	r3, r3, #32
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d030      	beq.n	8011b4e <tcp_input+0x676>
          if (pcb->refused_data != NULL) {
 8011aec:	69fb      	ldr	r3, [r7, #28]
 8011aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d009      	beq.n	8011b08 <tcp_input+0x630>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011af4:	69fb      	ldr	r3, [r7, #28]
 8011af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011af8:	7b5a      	ldrb	r2, [r3, #13]
 8011afa:	69fb      	ldr	r3, [r7, #28]
 8011afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011afe:	f042 0220 	orr.w	r2, r2, #32
 8011b02:	b2d2      	uxtb	r2, r2
 8011b04:	735a      	strb	r2, [r3, #13]
 8011b06:	e022      	b.n	8011b4e <tcp_input+0x676>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011b08:	69fb      	ldr	r3, [r7, #28]
 8011b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011b0c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011b10:	d005      	beq.n	8011b1e <tcp_input+0x646>
              pcb->rcv_wnd++;
 8011b12:	69fb      	ldr	r3, [r7, #28]
 8011b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011b16:	3301      	adds	r3, #1
 8011b18:	b29a      	uxth	r2, r3
 8011b1a:	69fb      	ldr	r3, [r7, #28]
 8011b1c:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011b1e:	69fb      	ldr	r3, [r7, #28]
 8011b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d00b      	beq.n	8011b40 <tcp_input+0x668>
 8011b28:	69fb      	ldr	r3, [r7, #28]
 8011b2a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8011b2e:	69fb      	ldr	r3, [r7, #28]
 8011b30:	6918      	ldr	r0, [r3, #16]
 8011b32:	2300      	movs	r3, #0
 8011b34:	2200      	movs	r2, #0
 8011b36:	69f9      	ldr	r1, [r7, #28]
 8011b38:	47a0      	blx	r4
 8011b3a:	4603      	mov	r3, r0
 8011b3c:	74fb      	strb	r3, [r7, #19]
 8011b3e:	e001      	b.n	8011b44 <tcp_input+0x66c>
 8011b40:	2300      	movs	r3, #0
 8011b42:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011b44:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011b48:	f113 0f0d 	cmn.w	r3, #13
 8011b4c:	d016      	beq.n	8011b7c <tcp_input+0x6a4>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011b4e:	4b13      	ldr	r3, [pc, #76]	; (8011b9c <tcp_input+0x6c4>)
 8011b50:	2200      	movs	r2, #0
 8011b52:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011b54:	69f8      	ldr	r0, [r7, #28]
 8011b56:	f000 f887 	bl	8011c68 <tcp_input_delayed_close>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d127      	bne.n	8011bb0 <tcp_input+0x6d8>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011b60:	69f8      	ldr	r0, [r7, #28]
 8011b62:	f002 fd9b 	bl	801469c <tcp_output>
 8011b66:	e024      	b.n	8011bb2 <tcp_input+0x6da>
        goto aborted;
 8011b68:	bf00      	nop
 8011b6a:	e022      	b.n	8011bb2 <tcp_input+0x6da>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011b6c:	bf00      	nop
 8011b6e:	e020      	b.n	8011bb2 <tcp_input+0x6da>
              goto aborted;
 8011b70:	bf00      	nop
 8011b72:	e01e      	b.n	8011bb2 <tcp_input+0x6da>
          goto aborted;
 8011b74:	bf00      	nop
 8011b76:	e01c      	b.n	8011bb2 <tcp_input+0x6da>
            goto aborted;
 8011b78:	bf00      	nop
 8011b7a:	e01a      	b.n	8011bb2 <tcp_input+0x6da>
              goto aborted;
 8011b7c:	bf00      	nop
 8011b7e:	e018      	b.n	8011bb2 <tcp_input+0x6da>
 8011b80:	2000ebd8 	.word	0x2000ebd8
 8011b84:	2000ebe8 	.word	0x2000ebe8
 8011b88:	2000ec08 	.word	0x2000ec08
 8011b8c:	2000ec05 	.word	0x2000ec05
 8011b90:	2000ec00 	.word	0x2000ec00
 8011b94:	2000ec04 	.word	0x2000ec04
 8011b98:	2000ec02 	.word	0x2000ec02
 8011b9c:	2000ec0c 	.word	0x2000ec0c
 8011ba0:	2000ebcc 	.word	0x2000ebcc
 8011ba4:	0801d038 	.word	0x0801d038
 8011ba8:	0801d1d4 	.word	0x0801d1d4
 8011bac:	0801d07c 	.word	0x0801d07c
          goto aborted;
 8011bb0:	bf00      	nop
    tcp_input_pcb = NULL;
 8011bb2:	4b24      	ldr	r3, [pc, #144]	; (8011c44 <tcp_input+0x76c>)
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011bb8:	4b23      	ldr	r3, [pc, #140]	; (8011c48 <tcp_input+0x770>)
 8011bba:	2200      	movs	r2, #0
 8011bbc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8011bbe:	4b23      	ldr	r3, [pc, #140]	; (8011c4c <tcp_input+0x774>)
 8011bc0:	685b      	ldr	r3, [r3, #4]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d039      	beq.n	8011c3a <tcp_input+0x762>
    {
      pbuf_free(inseg.p);
 8011bc6:	4b21      	ldr	r3, [pc, #132]	; (8011c4c <tcp_input+0x774>)
 8011bc8:	685b      	ldr	r3, [r3, #4]
 8011bca:	4618      	mov	r0, r3
 8011bcc:	f7fd fdaa 	bl	800f724 <pbuf_free>
      inseg.p = NULL;
 8011bd0:	4b1e      	ldr	r3, [pc, #120]	; (8011c4c <tcp_input+0x774>)
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011bd6:	e030      	b.n	8011c3a <tcp_input+0x762>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011bd8:	4b1d      	ldr	r3, [pc, #116]	; (8011c50 <tcp_input+0x778>)
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	899b      	ldrh	r3, [r3, #12]
 8011bde:	b29b      	uxth	r3, r3
 8011be0:	4618      	mov	r0, r3
 8011be2:	f7fc fb9f 	bl	800e324 <lwip_htons>
 8011be6:	4603      	mov	r3, r0
 8011be8:	f003 0304 	and.w	r3, r3, #4
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d115      	bne.n	8011c1c <tcp_input+0x744>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011bf0:	4b18      	ldr	r3, [pc, #96]	; (8011c54 <tcp_input+0x77c>)
 8011bf2:	6818      	ldr	r0, [r3, #0]
 8011bf4:	4b18      	ldr	r3, [pc, #96]	; (8011c58 <tcp_input+0x780>)
 8011bf6:	881b      	ldrh	r3, [r3, #0]
 8011bf8:	461a      	mov	r2, r3
 8011bfa:	4b18      	ldr	r3, [pc, #96]	; (8011c5c <tcp_input+0x784>)
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011c00:	4b13      	ldr	r3, [pc, #76]	; (8011c50 <tcp_input+0x778>)
 8011c02:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c04:	885b      	ldrh	r3, [r3, #2]
 8011c06:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011c08:	4a11      	ldr	r2, [pc, #68]	; (8011c50 <tcp_input+0x778>)
 8011c0a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c0c:	8812      	ldrh	r2, [r2, #0]
 8011c0e:	b292      	uxth	r2, r2
 8011c10:	9201      	str	r2, [sp, #4]
 8011c12:	9300      	str	r3, [sp, #0]
 8011c14:	4b12      	ldr	r3, [pc, #72]	; (8011c60 <tcp_input+0x788>)
 8011c16:	4a13      	ldr	r2, [pc, #76]	; (8011c64 <tcp_input+0x78c>)
 8011c18:	f002 ffc4 	bl	8014ba4 <tcp_rst>
    pbuf_free(p);
 8011c1c:	6878      	ldr	r0, [r7, #4]
 8011c1e:	f7fd fd81 	bl	800f724 <pbuf_free>
  return;
 8011c22:	e00a      	b.n	8011c3a <tcp_input+0x762>
    goto dropped;
 8011c24:	bf00      	nop
 8011c26:	e004      	b.n	8011c32 <tcp_input+0x75a>
    goto dropped;
 8011c28:	bf00      	nop
 8011c2a:	e002      	b.n	8011c32 <tcp_input+0x75a>
    goto dropped;
 8011c2c:	bf00      	nop
 8011c2e:	e000      	b.n	8011c32 <tcp_input+0x75a>
      goto dropped;
 8011c30:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011c32:	6878      	ldr	r0, [r7, #4]
 8011c34:	f7fd fd76 	bl	800f724 <pbuf_free>
 8011c38:	e000      	b.n	8011c3c <tcp_input+0x764>
  return;
 8011c3a:	bf00      	nop
}
 8011c3c:	3724      	adds	r7, #36	; 0x24
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	bd90      	pop	{r4, r7, pc}
 8011c42:	bf00      	nop
 8011c44:	2000ec0c 	.word	0x2000ec0c
 8011c48:	2000ec08 	.word	0x2000ec08
 8011c4c:	2000ebd8 	.word	0x2000ebd8
 8011c50:	2000ebe8 	.word	0x2000ebe8
 8011c54:	2000ebfc 	.word	0x2000ebfc
 8011c58:	2000ec02 	.word	0x2000ec02
 8011c5c:	2000ebf8 	.word	0x2000ebf8
 8011c60:	200092a0 	.word	0x200092a0
 8011c64:	200092a4 	.word	0x200092a4

08011c68 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b082      	sub	sp, #8
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8011c70:	4b14      	ldr	r3, [pc, #80]	; (8011cc4 <tcp_input_delayed_close+0x5c>)
 8011c72:	781b      	ldrb	r3, [r3, #0]
 8011c74:	f003 0310 	and.w	r3, r3, #16
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d01d      	beq.n	8011cb8 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	7e9b      	ldrb	r3, [r3, #26]
 8011c80:	f003 0310 	and.w	r3, r3, #16
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d10d      	bne.n	8011ca4 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d008      	beq.n	8011ca4 <tcp_input_delayed_close+0x3c>
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c98:	687a      	ldr	r2, [r7, #4]
 8011c9a:	6912      	ldr	r2, [r2, #16]
 8011c9c:	f06f 010e 	mvn.w	r1, #14
 8011ca0:	4610      	mov	r0, r2
 8011ca2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011ca4:	6879      	ldr	r1, [r7, #4]
 8011ca6:	4808      	ldr	r0, [pc, #32]	; (8011cc8 <tcp_input_delayed_close+0x60>)
 8011ca8:	f7ff fafe 	bl	80112a8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8011cac:	6879      	ldr	r1, [r7, #4]
 8011cae:	2001      	movs	r0, #1
 8011cb0:	f7fc ff76 	bl	800eba0 <memp_free>
    return 1;
 8011cb4:	2301      	movs	r3, #1
 8011cb6:	e000      	b.n	8011cba <tcp_input_delayed_close+0x52>
  }
  return 0;
 8011cb8:	2300      	movs	r3, #0
}
 8011cba:	4618      	mov	r0, r3
 8011cbc:	3708      	adds	r7, #8
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	bd80      	pop	{r7, pc}
 8011cc2:	bf00      	nop
 8011cc4:	2000ec05 	.word	0x2000ec05
 8011cc8:	2000ebcc 	.word	0x2000ebcc

08011ccc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b088      	sub	sp, #32
 8011cd0:	af02      	add	r7, sp, #8
 8011cd2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011cd4:	4b63      	ldr	r3, [pc, #396]	; (8011e64 <tcp_listen_input+0x198>)
 8011cd6:	781b      	ldrb	r3, [r3, #0]
 8011cd8:	f003 0304 	and.w	r3, r3, #4
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	f040 80bb 	bne.w	8011e58 <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011ce2:	4b60      	ldr	r3, [pc, #384]	; (8011e64 <tcp_listen_input+0x198>)
 8011ce4:	781b      	ldrb	r3, [r3, #0]
 8011ce6:	f003 0310 	and.w	r3, r3, #16
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d016      	beq.n	8011d1c <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011cee:	4b5e      	ldr	r3, [pc, #376]	; (8011e68 <tcp_listen_input+0x19c>)
 8011cf0:	6818      	ldr	r0, [r3, #0]
 8011cf2:	4b5e      	ldr	r3, [pc, #376]	; (8011e6c <tcp_listen_input+0x1a0>)
 8011cf4:	881b      	ldrh	r3, [r3, #0]
 8011cf6:	461a      	mov	r2, r3
 8011cf8:	4b5d      	ldr	r3, [pc, #372]	; (8011e70 <tcp_listen_input+0x1a4>)
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011cfe:	4b5d      	ldr	r3, [pc, #372]	; (8011e74 <tcp_listen_input+0x1a8>)
 8011d00:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d02:	885b      	ldrh	r3, [r3, #2]
 8011d04:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011d06:	4a5b      	ldr	r2, [pc, #364]	; (8011e74 <tcp_listen_input+0x1a8>)
 8011d08:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d0a:	8812      	ldrh	r2, [r2, #0]
 8011d0c:	b292      	uxth	r2, r2
 8011d0e:	9201      	str	r2, [sp, #4]
 8011d10:	9300      	str	r3, [sp, #0]
 8011d12:	4b59      	ldr	r3, [pc, #356]	; (8011e78 <tcp_listen_input+0x1ac>)
 8011d14:	4a59      	ldr	r2, [pc, #356]	; (8011e7c <tcp_listen_input+0x1b0>)
 8011d16:	f002 ff45 	bl	8014ba4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011d1a:	e09f      	b.n	8011e5c <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 8011d1c:	4b51      	ldr	r3, [pc, #324]	; (8011e64 <tcp_listen_input+0x198>)
 8011d1e:	781b      	ldrb	r3, [r3, #0]
 8011d20:	f003 0302 	and.w	r3, r3, #2
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	f000 8099 	beq.w	8011e5c <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	7d5b      	ldrb	r3, [r3, #21]
 8011d2e:	4618      	mov	r0, r3
 8011d30:	f7ff f93a 	bl	8010fa8 <tcp_alloc>
 8011d34:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011d36:	697b      	ldr	r3, [r7, #20]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d111      	bne.n	8011d60 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	699b      	ldr	r3, [r3, #24]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d00a      	beq.n	8011d5a <tcp_listen_input+0x8e>
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	699b      	ldr	r3, [r3, #24]
 8011d48:	687a      	ldr	r2, [r7, #4]
 8011d4a:	6910      	ldr	r0, [r2, #16]
 8011d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8011d50:	2100      	movs	r1, #0
 8011d52:	4798      	blx	r3
 8011d54:	4603      	mov	r3, r0
 8011d56:	73bb      	strb	r3, [r7, #14]
      return;
 8011d58:	e081      	b.n	8011e5e <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011d5a:	23f0      	movs	r3, #240	; 0xf0
 8011d5c:	73bb      	strb	r3, [r7, #14]
      return;
 8011d5e:	e07e      	b.n	8011e5e <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011d60:	4b47      	ldr	r3, [pc, #284]	; (8011e80 <tcp_listen_input+0x1b4>)
 8011d62:	695a      	ldr	r2, [r3, #20]
 8011d64:	697b      	ldr	r3, [r7, #20]
 8011d66:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011d68:	4b45      	ldr	r3, [pc, #276]	; (8011e80 <tcp_listen_input+0x1b4>)
 8011d6a:	691a      	ldr	r2, [r3, #16]
 8011d6c:	697b      	ldr	r3, [r7, #20]
 8011d6e:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	8ada      	ldrh	r2, [r3, #22]
 8011d74:	697b      	ldr	r3, [r7, #20]
 8011d76:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011d78:	4b3e      	ldr	r3, [pc, #248]	; (8011e74 <tcp_listen_input+0x1a8>)
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	881b      	ldrh	r3, [r3, #0]
 8011d7e:	b29a      	uxth	r2, r3
 8011d80:	697b      	ldr	r3, [r7, #20]
 8011d82:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8011d84:	697b      	ldr	r3, [r7, #20]
 8011d86:	2203      	movs	r2, #3
 8011d88:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011d8a:	4b39      	ldr	r3, [pc, #228]	; (8011e70 <tcp_listen_input+0x1a4>)
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	1c5a      	adds	r2, r3, #1
 8011d90:	697b      	ldr	r3, [r7, #20]
 8011d92:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011d94:	697b      	ldr	r3, [r7, #20]
 8011d96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d98:	697b      	ldr	r3, [r7, #20]
 8011d9a:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011d9c:	6978      	ldr	r0, [r7, #20]
 8011d9e:	f7ff faff 	bl	80113a0 <tcp_next_iss>
 8011da2:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8011da4:	697b      	ldr	r3, [r7, #20]
 8011da6:	693a      	ldr	r2, [r7, #16]
 8011da8:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 8011daa:	697b      	ldr	r3, [r7, #20]
 8011dac:	693a      	ldr	r2, [r7, #16]
 8011dae:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8011db0:	697b      	ldr	r3, [r7, #20]
 8011db2:	693a      	ldr	r2, [r7, #16]
 8011db4:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011db6:	697b      	ldr	r3, [r7, #20]
 8011db8:	693a      	ldr	r2, [r7, #16]
 8011dba:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011dbc:	4b2c      	ldr	r3, [pc, #176]	; (8011e70 <tcp_listen_input+0x1a4>)
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	1e5a      	subs	r2, r3, #1
 8011dc2:	697b      	ldr	r3, [r7, #20]
 8011dc4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	691a      	ldr	r2, [r3, #16]
 8011dca:	697b      	ldr	r3, [r7, #20]
 8011dcc:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011dce:	697b      	ldr	r3, [r7, #20]
 8011dd0:	687a      	ldr	r2, [r7, #4]
 8011dd2:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	7a1b      	ldrb	r3, [r3, #8]
 8011dd8:	f003 030c 	and.w	r3, r3, #12
 8011ddc:	b2da      	uxtb	r2, r3
 8011dde:	697b      	ldr	r3, [r7, #20]
 8011de0:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011de2:	4b28      	ldr	r3, [pc, #160]	; (8011e84 <tcp_listen_input+0x1b8>)
 8011de4:	681a      	ldr	r2, [r3, #0]
 8011de6:	697b      	ldr	r3, [r7, #20]
 8011de8:	60da      	str	r2, [r3, #12]
 8011dea:	4a26      	ldr	r2, [pc, #152]	; (8011e84 <tcp_listen_input+0x1b8>)
 8011dec:	697b      	ldr	r3, [r7, #20]
 8011dee:	6013      	str	r3, [r2, #0]
 8011df0:	f003 f920 	bl	8015034 <tcp_timer_needed>
 8011df4:	4b24      	ldr	r3, [pc, #144]	; (8011e88 <tcp_listen_input+0x1bc>)
 8011df6:	2201      	movs	r2, #1
 8011df8:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011dfa:	6978      	ldr	r0, [r7, #20]
 8011dfc:	f001 fd0c 	bl	8013818 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011e00:	4b1c      	ldr	r3, [pc, #112]	; (8011e74 <tcp_listen_input+0x1a8>)
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	89db      	ldrh	r3, [r3, #14]
 8011e06:	b29a      	uxth	r2, r3
 8011e08:	697b      	ldr	r3, [r7, #20]
 8011e0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011e0e:	697b      	ldr	r3, [r7, #20]
 8011e10:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011e14:	697b      	ldr	r3, [r7, #20]
 8011e16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011e1a:	697b      	ldr	r3, [r7, #20]
 8011e1c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011e1e:	697b      	ldr	r3, [r7, #20]
 8011e20:	3304      	adds	r3, #4
 8011e22:	4619      	mov	r1, r3
 8011e24:	4610      	mov	r0, r2
 8011e26:	f7ff fad1 	bl	80113cc <tcp_eff_send_mss_impl>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	461a      	mov	r2, r3
 8011e2e:	697b      	ldr	r3, [r7, #20]
 8011e30:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011e32:	2112      	movs	r1, #18
 8011e34:	6978      	ldr	r0, [r7, #20]
 8011e36:	f002 fad9 	bl	80143ec <tcp_enqueue_flags>
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d004      	beq.n	8011e50 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8011e46:	2100      	movs	r1, #0
 8011e48:	6978      	ldr	r0, [r7, #20]
 8011e4a:	f7fe f913 	bl	8010074 <tcp_abandon>
      return;
 8011e4e:	e006      	b.n	8011e5e <tcp_listen_input+0x192>
    tcp_output(npcb);
 8011e50:	6978      	ldr	r0, [r7, #20]
 8011e52:	f002 fc23 	bl	801469c <tcp_output>
  return;
 8011e56:	e001      	b.n	8011e5c <tcp_listen_input+0x190>
    return;
 8011e58:	bf00      	nop
 8011e5a:	e000      	b.n	8011e5e <tcp_listen_input+0x192>
  return;
 8011e5c:	bf00      	nop
}
 8011e5e:	3718      	adds	r7, #24
 8011e60:	46bd      	mov	sp, r7
 8011e62:	bd80      	pop	{r7, pc}
 8011e64:	2000ec04 	.word	0x2000ec04
 8011e68:	2000ebfc 	.word	0x2000ebfc
 8011e6c:	2000ec02 	.word	0x2000ec02
 8011e70:	2000ebf8 	.word	0x2000ebf8
 8011e74:	2000ebe8 	.word	0x2000ebe8
 8011e78:	200092a0 	.word	0x200092a0
 8011e7c:	200092a4 	.word	0x200092a4
 8011e80:	20009290 	.word	0x20009290
 8011e84:	2000ebcc 	.word	0x2000ebcc
 8011e88:	2000ebd4 	.word	0x2000ebd4

08011e8c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b084      	sub	sp, #16
 8011e90:	af02      	add	r7, sp, #8
 8011e92:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011e94:	4b29      	ldr	r3, [pc, #164]	; (8011f3c <tcp_timewait_input+0xb0>)
 8011e96:	781b      	ldrb	r3, [r3, #0]
 8011e98:	f003 0304 	and.w	r3, r3, #4
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d146      	bne.n	8011f2e <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011ea0:	4b26      	ldr	r3, [pc, #152]	; (8011f3c <tcp_timewait_input+0xb0>)
 8011ea2:	781b      	ldrb	r3, [r3, #0]
 8011ea4:	f003 0302 	and.w	r3, r3, #2
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d027      	beq.n	8011efc <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011eac:	4b24      	ldr	r3, [pc, #144]	; (8011f40 <tcp_timewait_input+0xb4>)
 8011eae:	681a      	ldr	r2, [r3, #0]
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eb4:	1ad3      	subs	r3, r2, r3
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	db2a      	blt.n	8011f10 <tcp_timewait_input+0x84>
 8011eba:	4b21      	ldr	r3, [pc, #132]	; (8011f40 <tcp_timewait_input+0xb4>)
 8011ebc:	681a      	ldr	r2, [r3, #0]
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ec2:	6879      	ldr	r1, [r7, #4]
 8011ec4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011ec6:	440b      	add	r3, r1
 8011ec8:	1ad3      	subs	r3, r2, r3
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	dc20      	bgt.n	8011f10 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ece:	4b1d      	ldr	r3, [pc, #116]	; (8011f44 <tcp_timewait_input+0xb8>)
 8011ed0:	6818      	ldr	r0, [r3, #0]
 8011ed2:	4b1d      	ldr	r3, [pc, #116]	; (8011f48 <tcp_timewait_input+0xbc>)
 8011ed4:	881b      	ldrh	r3, [r3, #0]
 8011ed6:	461a      	mov	r2, r3
 8011ed8:	4b19      	ldr	r3, [pc, #100]	; (8011f40 <tcp_timewait_input+0xb4>)
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011ede:	4b1b      	ldr	r3, [pc, #108]	; (8011f4c <tcp_timewait_input+0xc0>)
 8011ee0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ee2:	885b      	ldrh	r3, [r3, #2]
 8011ee4:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011ee6:	4a19      	ldr	r2, [pc, #100]	; (8011f4c <tcp_timewait_input+0xc0>)
 8011ee8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011eea:	8812      	ldrh	r2, [r2, #0]
 8011eec:	b292      	uxth	r2, r2
 8011eee:	9201      	str	r2, [sp, #4]
 8011ef0:	9300      	str	r3, [sp, #0]
 8011ef2:	4b17      	ldr	r3, [pc, #92]	; (8011f50 <tcp_timewait_input+0xc4>)
 8011ef4:	4a17      	ldr	r2, [pc, #92]	; (8011f54 <tcp_timewait_input+0xc8>)
 8011ef6:	f002 fe55 	bl	8014ba4 <tcp_rst>
      return;
 8011efa:	e01b      	b.n	8011f34 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 8011efc:	4b0f      	ldr	r3, [pc, #60]	; (8011f3c <tcp_timewait_input+0xb0>)
 8011efe:	781b      	ldrb	r3, [r3, #0]
 8011f00:	f003 0301 	and.w	r3, r3, #1
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d003      	beq.n	8011f10 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011f08:	4b13      	ldr	r3, [pc, #76]	; (8011f58 <tcp_timewait_input+0xcc>)
 8011f0a:	681a      	ldr	r2, [r3, #0]
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011f10:	4b0d      	ldr	r3, [pc, #52]	; (8011f48 <tcp_timewait_input+0xbc>)
 8011f12:	881b      	ldrh	r3, [r3, #0]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d00c      	beq.n	8011f32 <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	7e9b      	ldrb	r3, [r3, #26]
 8011f1c:	f043 0302 	orr.w	r3, r3, #2
 8011f20:	b2da      	uxtb	r2, r3
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8011f26:	6878      	ldr	r0, [r7, #4]
 8011f28:	f002 fbb8 	bl	801469c <tcp_output>
  }
  return;
 8011f2c:	e001      	b.n	8011f32 <tcp_timewait_input+0xa6>
    return;
 8011f2e:	bf00      	nop
 8011f30:	e000      	b.n	8011f34 <tcp_timewait_input+0xa8>
  return;
 8011f32:	bf00      	nop
}
 8011f34:	3708      	adds	r7, #8
 8011f36:	46bd      	mov	sp, r7
 8011f38:	bd80      	pop	{r7, pc}
 8011f3a:	bf00      	nop
 8011f3c:	2000ec04 	.word	0x2000ec04
 8011f40:	2000ebf8 	.word	0x2000ebf8
 8011f44:	2000ebfc 	.word	0x2000ebfc
 8011f48:	2000ec02 	.word	0x2000ec02
 8011f4c:	2000ebe8 	.word	0x2000ebe8
 8011f50:	200092a0 	.word	0x200092a0
 8011f54:	200092a4 	.word	0x200092a4
 8011f58:	2000ebc0 	.word	0x2000ebc0

08011f5c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b08a      	sub	sp, #40	; 0x28
 8011f60:	af02      	add	r7, sp, #8
 8011f62:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011f64:	2300      	movs	r3, #0
 8011f66:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011f68:	2300      	movs	r3, #0
 8011f6a:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011f6c:	4b93      	ldr	r3, [pc, #588]	; (80121bc <tcp_process+0x260>)
 8011f6e:	781b      	ldrb	r3, [r3, #0]
 8011f70:	f003 0304 	and.w	r3, r3, #4
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d04e      	beq.n	8012016 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	7d1b      	ldrb	r3, [r3, #20]
 8011f7c:	2b02      	cmp	r3, #2
 8011f7e:	d108      	bne.n	8011f92 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011f84:	4b8e      	ldr	r3, [pc, #568]	; (80121c0 <tcp_process+0x264>)
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	429a      	cmp	r2, r3
 8011f8a:	d123      	bne.n	8011fd4 <tcp_process+0x78>
        acceptable = 1;
 8011f8c:	2301      	movs	r3, #1
 8011f8e:	76fb      	strb	r3, [r7, #27]
 8011f90:	e020      	b.n	8011fd4 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011f96:	4b8b      	ldr	r3, [pc, #556]	; (80121c4 <tcp_process+0x268>)
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	429a      	cmp	r2, r3
 8011f9c:	d102      	bne.n	8011fa4 <tcp_process+0x48>
        acceptable = 1;
 8011f9e:	2301      	movs	r3, #1
 8011fa0:	76fb      	strb	r3, [r7, #27]
 8011fa2:	e017      	b.n	8011fd4 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011fa4:	4b87      	ldr	r3, [pc, #540]	; (80121c4 <tcp_process+0x268>)
 8011fa6:	681a      	ldr	r2, [r3, #0]
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fac:	1ad3      	subs	r3, r2, r3
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	db10      	blt.n	8011fd4 <tcp_process+0x78>
 8011fb2:	4b84      	ldr	r3, [pc, #528]	; (80121c4 <tcp_process+0x268>)
 8011fb4:	681a      	ldr	r2, [r3, #0]
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fba:	6879      	ldr	r1, [r7, #4]
 8011fbc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011fbe:	440b      	add	r3, r1
 8011fc0:	1ad3      	subs	r3, r2, r3
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	dc06      	bgt.n	8011fd4 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	7e9b      	ldrb	r3, [r3, #26]
 8011fca:	f043 0302 	orr.w	r3, r3, #2
 8011fce:	b2da      	uxtb	r2, r3
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011fd4:	7efb      	ldrb	r3, [r7, #27]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d01b      	beq.n	8012012 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	7d1b      	ldrb	r3, [r3, #20]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d106      	bne.n	8011ff0 <tcp_process+0x94>
 8011fe2:	4b79      	ldr	r3, [pc, #484]	; (80121c8 <tcp_process+0x26c>)
 8011fe4:	f240 22e7 	movw	r2, #743	; 0x2e7
 8011fe8:	4978      	ldr	r1, [pc, #480]	; (80121cc <tcp_process+0x270>)
 8011fea:	4879      	ldr	r0, [pc, #484]	; (80121d0 <tcp_process+0x274>)
 8011fec:	f008 fa34 	bl	801a458 <iprintf>
      recv_flags |= TF_RESET;
 8011ff0:	4b78      	ldr	r3, [pc, #480]	; (80121d4 <tcp_process+0x278>)
 8011ff2:	781b      	ldrb	r3, [r3, #0]
 8011ff4:	f043 0308 	orr.w	r3, r3, #8
 8011ff8:	b2da      	uxtb	r2, r3
 8011ffa:	4b76      	ldr	r3, [pc, #472]	; (80121d4 <tcp_process+0x278>)
 8011ffc:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	7e9b      	ldrb	r3, [r3, #26]
 8012002:	f023 0301 	bic.w	r3, r3, #1
 8012006:	b2da      	uxtb	r2, r3
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 801200c:	f06f 030d 	mvn.w	r3, #13
 8012010:	e348      	b.n	80126a4 <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8012012:	2300      	movs	r3, #0
 8012014:	e346      	b.n	80126a4 <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8012016:	4b69      	ldr	r3, [pc, #420]	; (80121bc <tcp_process+0x260>)
 8012018:	781b      	ldrb	r3, [r3, #0]
 801201a:	f003 0302 	and.w	r3, r3, #2
 801201e:	2b00      	cmp	r3, #0
 8012020:	d010      	beq.n	8012044 <tcp_process+0xe8>
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	7d1b      	ldrb	r3, [r3, #20]
 8012026:	2b02      	cmp	r3, #2
 8012028:	d00c      	beq.n	8012044 <tcp_process+0xe8>
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	7d1b      	ldrb	r3, [r3, #20]
 801202e:	2b03      	cmp	r3, #3
 8012030:	d008      	beq.n	8012044 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	7e9b      	ldrb	r3, [r3, #26]
 8012036:	f043 0302 	orr.w	r3, r3, #2
 801203a:	b2da      	uxtb	r2, r3
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8012040:	2300      	movs	r3, #0
 8012042:	e32f      	b.n	80126a4 <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	7e9b      	ldrb	r3, [r3, #26]
 8012048:	f003 0310 	and.w	r3, r3, #16
 801204c:	2b00      	cmp	r3, #0
 801204e:	d103      	bne.n	8012058 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012050:	4b61      	ldr	r3, [pc, #388]	; (80121d8 <tcp_process+0x27c>)
 8012052:	681a      	ldr	r2, [r3, #0]
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	2200      	movs	r2, #0
 801205c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8012060:	6878      	ldr	r0, [r7, #4]
 8012062:	f001 fbd9 	bl	8013818 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	7d1b      	ldrb	r3, [r3, #20]
 801206a:	3b02      	subs	r3, #2
 801206c:	2b07      	cmp	r3, #7
 801206e:	f200 8309 	bhi.w	8012684 <tcp_process+0x728>
 8012072:	a201      	add	r2, pc, #4	; (adr r2, 8012078 <tcp_process+0x11c>)
 8012074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012078:	08012099 	.word	0x08012099
 801207c:	0801228f 	.word	0x0801228f
 8012080:	080123e7 	.word	0x080123e7
 8012084:	08012411 	.word	0x08012411
 8012088:	08012533 	.word	0x08012533
 801208c:	080123e7 	.word	0x080123e7
 8012090:	080125bf 	.word	0x080125bf
 8012094:	0801264f 	.word	0x0801264f
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012098:	4b48      	ldr	r3, [pc, #288]	; (80121bc <tcp_process+0x260>)
 801209a:	781b      	ldrb	r3, [r3, #0]
 801209c:	f003 0310 	and.w	r3, r3, #16
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	f000 80ca 	beq.w	801223a <tcp_process+0x2de>
 80120a6:	4b45      	ldr	r3, [pc, #276]	; (80121bc <tcp_process+0x260>)
 80120a8:	781b      	ldrb	r3, [r3, #0]
 80120aa:	f003 0302 	and.w	r3, r3, #2
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	f000 80c3 	beq.w	801223a <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80120b8:	1c5a      	adds	r2, r3, #1
 80120ba:	4b41      	ldr	r3, [pc, #260]	; (80121c0 <tcp_process+0x264>)
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	429a      	cmp	r2, r3
 80120c0:	f040 80bb 	bne.w	801223a <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 80120c4:	4b3f      	ldr	r3, [pc, #252]	; (80121c4 <tcp_process+0x268>)
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	1c5a      	adds	r2, r3, #1
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 80120d6:	4b3a      	ldr	r3, [pc, #232]	; (80121c0 <tcp_process+0x264>)
 80120d8:	681a      	ldr	r2, [r3, #0]
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 80120de:	4b3f      	ldr	r3, [pc, #252]	; (80121dc <tcp_process+0x280>)
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	89db      	ldrh	r3, [r3, #14]
 80120e4:	b29a      	uxth	r2, r3
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80120f8:	4b32      	ldr	r3, [pc, #200]	; (80121c4 <tcp_process+0x268>)
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	1e5a      	subs	r2, r3, #1
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	2204      	movs	r2, #4
 8012106:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	3304      	adds	r3, #4
 8012110:	4619      	mov	r1, r3
 8012112:	4610      	mov	r0, r2
 8012114:	f7ff f95a 	bl	80113cc <tcp_eff_send_mss_impl>
 8012118:	4603      	mov	r3, r0
 801211a:	461a      	mov	r2, r3
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012124:	005b      	lsls	r3, r3, #1
 8012126:	f241 121c 	movw	r2, #4380	; 0x111c
 801212a:	429a      	cmp	r2, r3
 801212c:	bf38      	it	cc
 801212e:	461a      	movcc	r2, r3
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012134:	009b      	lsls	r3, r3, #2
 8012136:	4293      	cmp	r3, r2
 8012138:	bf28      	it	cs
 801213a:	4613      	movcs	r3, r2
 801213c:	b29a      	uxth	r2, r3
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801214a:	2b00      	cmp	r3, #0
 801214c:	d106      	bne.n	801215c <tcp_process+0x200>
 801214e:	4b1e      	ldr	r3, [pc, #120]	; (80121c8 <tcp_process+0x26c>)
 8012150:	f240 321a 	movw	r2, #794	; 0x31a
 8012154:	4922      	ldr	r1, [pc, #136]	; (80121e0 <tcp_process+0x284>)
 8012156:	481e      	ldr	r0, [pc, #120]	; (80121d0 <tcp_process+0x274>)
 8012158:	f008 f97e 	bl	801a458 <iprintf>
      --pcb->snd_queuelen;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012162:	3b01      	subs	r3, #1
 8012164:	b29a      	uxth	r2, r3
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012170:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8012172:	69fb      	ldr	r3, [r7, #28]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d111      	bne.n	801219c <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801217c:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 801217e:	69fb      	ldr	r3, [r7, #28]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d106      	bne.n	8012192 <tcp_process+0x236>
 8012184:	4b10      	ldr	r3, [pc, #64]	; (80121c8 <tcp_process+0x26c>)
 8012186:	f240 3222 	movw	r2, #802	; 0x322
 801218a:	4916      	ldr	r1, [pc, #88]	; (80121e4 <tcp_process+0x288>)
 801218c:	4810      	ldr	r0, [pc, #64]	; (80121d0 <tcp_process+0x274>)
 801218e:	f008 f963 	bl	801a458 <iprintf>
        pcb->unsent = rseg->next;
 8012192:	69fb      	ldr	r3, [r7, #28]
 8012194:	681a      	ldr	r2, [r3, #0]
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	669a      	str	r2, [r3, #104]	; 0x68
 801219a:	e003      	b.n	80121a4 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 801219c:	69fb      	ldr	r3, [r7, #28]
 801219e:	681a      	ldr	r2, [r3, #0]
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 80121a4:	69f8      	ldr	r0, [r7, #28]
 80121a6:	f7fe fded 	bl	8010d84 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d11a      	bne.n	80121e8 <tcp_process+0x28c>
        pcb->rtime = -1;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80121b8:	861a      	strh	r2, [r3, #48]	; 0x30
 80121ba:	e01c      	b.n	80121f6 <tcp_process+0x29a>
 80121bc:	2000ec04 	.word	0x2000ec04
 80121c0:	2000ebfc 	.word	0x2000ebfc
 80121c4:	2000ebf8 	.word	0x2000ebf8
 80121c8:	0801d038 	.word	0x0801d038
 80121cc:	0801d1f0 	.word	0x0801d1f0
 80121d0:	0801d07c 	.word	0x0801d07c
 80121d4:	2000ec05 	.word	0x2000ec05
 80121d8:	2000ebc0 	.word	0x2000ebc0
 80121dc:	2000ebe8 	.word	0x2000ebe8
 80121e0:	0801d210 	.word	0x0801d210
 80121e4:	0801d228 	.word	0x0801d228
      } else {
        pcb->rtime = 0;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	2200      	movs	r2, #0
 80121ec:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	2200      	movs	r2, #0
 80121f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d00a      	beq.n	8012216 <tcp_process+0x2ba>
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012206:	687a      	ldr	r2, [r7, #4]
 8012208:	6910      	ldr	r0, [r2, #16]
 801220a:	2200      	movs	r2, #0
 801220c:	6879      	ldr	r1, [r7, #4]
 801220e:	4798      	blx	r3
 8012210:	4603      	mov	r3, r0
 8012212:	76bb      	strb	r3, [r7, #26]
 8012214:	e001      	b.n	801221a <tcp_process+0x2be>
 8012216:	2300      	movs	r3, #0
 8012218:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 801221a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801221e:	f113 0f0d 	cmn.w	r3, #13
 8012222:	d102      	bne.n	801222a <tcp_process+0x2ce>
        return ERR_ABRT;
 8012224:	f06f 030c 	mvn.w	r3, #12
 8012228:	e23c      	b.n	80126a4 <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	7e9b      	ldrb	r3, [r3, #26]
 801222e:	f043 0302 	orr.w	r3, r3, #2
 8012232:	b2da      	uxtb	r2, r3
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8012238:	e226      	b.n	8012688 <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 801223a:	4b93      	ldr	r3, [pc, #588]	; (8012488 <tcp_process+0x52c>)
 801223c:	781b      	ldrb	r3, [r3, #0]
 801223e:	f003 0310 	and.w	r3, r3, #16
 8012242:	2b00      	cmp	r3, #0
 8012244:	f000 8220 	beq.w	8012688 <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012248:	4b90      	ldr	r3, [pc, #576]	; (801248c <tcp_process+0x530>)
 801224a:	6818      	ldr	r0, [r3, #0]
 801224c:	4b90      	ldr	r3, [pc, #576]	; (8012490 <tcp_process+0x534>)
 801224e:	881b      	ldrh	r3, [r3, #0]
 8012250:	461a      	mov	r2, r3
 8012252:	4b90      	ldr	r3, [pc, #576]	; (8012494 <tcp_process+0x538>)
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012258:	4b8f      	ldr	r3, [pc, #572]	; (8012498 <tcp_process+0x53c>)
 801225a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801225c:	885b      	ldrh	r3, [r3, #2]
 801225e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012260:	4a8d      	ldr	r2, [pc, #564]	; (8012498 <tcp_process+0x53c>)
 8012262:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012264:	8812      	ldrh	r2, [r2, #0]
 8012266:	b292      	uxth	r2, r2
 8012268:	9201      	str	r2, [sp, #4]
 801226a:	9300      	str	r3, [sp, #0]
 801226c:	4b8b      	ldr	r3, [pc, #556]	; (801249c <tcp_process+0x540>)
 801226e:	4a8c      	ldr	r2, [pc, #560]	; (80124a0 <tcp_process+0x544>)
 8012270:	f002 fc98 	bl	8014ba4 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801227a:	2b05      	cmp	r3, #5
 801227c:	f200 8204 	bhi.w	8012688 <tcp_process+0x72c>
        pcb->rtime = 0;
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	2200      	movs	r2, #0
 8012284:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8012286:	6878      	ldr	r0, [r7, #4]
 8012288:	f002 fd02 	bl	8014c90 <tcp_rexmit_rto>
    break;
 801228c:	e1fc      	b.n	8012688 <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 801228e:	4b7e      	ldr	r3, [pc, #504]	; (8012488 <tcp_process+0x52c>)
 8012290:	781b      	ldrb	r3, [r3, #0]
 8012292:	f003 0310 	and.w	r3, r3, #16
 8012296:	2b00      	cmp	r3, #0
 8012298:	f000 8091 	beq.w	80123be <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801229c:	4b7b      	ldr	r3, [pc, #492]	; (801248c <tcp_process+0x530>)
 801229e:	681a      	ldr	r2, [r3, #0]
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122a4:	1ad3      	subs	r3, r2, r3
 80122a6:	3b01      	subs	r3, #1
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	db71      	blt.n	8012390 <tcp_process+0x434>
 80122ac:	4b77      	ldr	r3, [pc, #476]	; (801248c <tcp_process+0x530>)
 80122ae:	681a      	ldr	r2, [r3, #0]
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80122b4:	1ad3      	subs	r3, r2, r3
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	dc6a      	bgt.n	8012390 <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	2204      	movs	r2, #4
 80122be:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d00b      	beq.n	80122e0 <tcp_process+0x384>
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80122cc:	699b      	ldr	r3, [r3, #24]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d106      	bne.n	80122e0 <tcp_process+0x384>
 80122d2:	4b74      	ldr	r3, [pc, #464]	; (80124a4 <tcp_process+0x548>)
 80122d4:	f44f 7254 	mov.w	r2, #848	; 0x350
 80122d8:	4973      	ldr	r1, [pc, #460]	; (80124a8 <tcp_process+0x54c>)
 80122da:	4874      	ldr	r0, [pc, #464]	; (80124ac <tcp_process+0x550>)
 80122dc:	f008 f8bc 	bl	801a458 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d102      	bne.n	80122ee <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 80122e8:	23fa      	movs	r3, #250	; 0xfa
 80122ea:	76bb      	strb	r3, [r7, #26]
 80122ec:	e011      	b.n	8012312 <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80122f2:	699b      	ldr	r3, [r3, #24]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d00a      	beq.n	801230e <tcp_process+0x3b2>
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80122fc:	699b      	ldr	r3, [r3, #24]
 80122fe:	687a      	ldr	r2, [r7, #4]
 8012300:	6910      	ldr	r0, [r2, #16]
 8012302:	2200      	movs	r2, #0
 8012304:	6879      	ldr	r1, [r7, #4]
 8012306:	4798      	blx	r3
 8012308:	4603      	mov	r3, r0
 801230a:	76bb      	strb	r3, [r7, #26]
 801230c:	e001      	b.n	8012312 <tcp_process+0x3b6>
 801230e:	23f0      	movs	r3, #240	; 0xf0
 8012310:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8012312:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d00a      	beq.n	8012330 <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 801231a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801231e:	f113 0f0d 	cmn.w	r3, #13
 8012322:	d002      	beq.n	801232a <tcp_process+0x3ce>
            tcp_abort(pcb);
 8012324:	6878      	ldr	r0, [r7, #4]
 8012326:	f7fd ff57 	bl	80101d8 <tcp_abort>
          }
          return ERR_ABRT;
 801232a:	f06f 030c 	mvn.w	r3, #12
 801232e:	e1b9      	b.n	80126a4 <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8012330:	6878      	ldr	r0, [r7, #4]
 8012332:	f000 fa3d 	bl	80127b0 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8012336:	4b5e      	ldr	r3, [pc, #376]	; (80124b0 <tcp_process+0x554>)
 8012338:	881b      	ldrh	r3, [r3, #0]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d005      	beq.n	801234a <tcp_process+0x3ee>
          recv_acked--;
 801233e:	4b5c      	ldr	r3, [pc, #368]	; (80124b0 <tcp_process+0x554>)
 8012340:	881b      	ldrh	r3, [r3, #0]
 8012342:	3b01      	subs	r3, #1
 8012344:	b29a      	uxth	r2, r3
 8012346:	4b5a      	ldr	r3, [pc, #360]	; (80124b0 <tcp_process+0x554>)
 8012348:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801234e:	005b      	lsls	r3, r3, #1
 8012350:	f241 121c 	movw	r2, #4380	; 0x111c
 8012354:	429a      	cmp	r2, r3
 8012356:	bf38      	it	cc
 8012358:	461a      	movcc	r2, r3
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801235e:	009b      	lsls	r3, r3, #2
 8012360:	4293      	cmp	r3, r2
 8012362:	bf28      	it	cs
 8012364:	4613      	movcs	r3, r2
 8012366:	b29a      	uxth	r2, r3
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 801236e:	4b51      	ldr	r3, [pc, #324]	; (80124b4 <tcp_process+0x558>)
 8012370:	781b      	ldrb	r3, [r3, #0]
 8012372:	f003 0320 	and.w	r3, r3, #32
 8012376:	2b00      	cmp	r3, #0
 8012378:	d034      	beq.n	80123e4 <tcp_process+0x488>
          tcp_ack_now(pcb);
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	7e9b      	ldrb	r3, [r3, #26]
 801237e:	f043 0302 	orr.w	r3, r3, #2
 8012382:	b2da      	uxtb	r2, r3
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	2207      	movs	r2, #7
 801238c:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 801238e:	e029      	b.n	80123e4 <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012390:	4b3e      	ldr	r3, [pc, #248]	; (801248c <tcp_process+0x530>)
 8012392:	6818      	ldr	r0, [r3, #0]
 8012394:	4b3e      	ldr	r3, [pc, #248]	; (8012490 <tcp_process+0x534>)
 8012396:	881b      	ldrh	r3, [r3, #0]
 8012398:	461a      	mov	r2, r3
 801239a:	4b3e      	ldr	r3, [pc, #248]	; (8012494 <tcp_process+0x538>)
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80123a0:	4b3d      	ldr	r3, [pc, #244]	; (8012498 <tcp_process+0x53c>)
 80123a2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80123a4:	885b      	ldrh	r3, [r3, #2]
 80123a6:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80123a8:	4a3b      	ldr	r2, [pc, #236]	; (8012498 <tcp_process+0x53c>)
 80123aa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80123ac:	8812      	ldrh	r2, [r2, #0]
 80123ae:	b292      	uxth	r2, r2
 80123b0:	9201      	str	r2, [sp, #4]
 80123b2:	9300      	str	r3, [sp, #0]
 80123b4:	4b39      	ldr	r3, [pc, #228]	; (801249c <tcp_process+0x540>)
 80123b6:	4a3a      	ldr	r2, [pc, #232]	; (80124a0 <tcp_process+0x544>)
 80123b8:	f002 fbf4 	bl	8014ba4 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 80123bc:	e166      	b.n	801268c <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80123be:	4b32      	ldr	r3, [pc, #200]	; (8012488 <tcp_process+0x52c>)
 80123c0:	781b      	ldrb	r3, [r3, #0]
 80123c2:	f003 0302 	and.w	r3, r3, #2
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	f000 8160 	beq.w	801268c <tcp_process+0x730>
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123d0:	1e5a      	subs	r2, r3, #1
 80123d2:	4b30      	ldr	r3, [pc, #192]	; (8012494 <tcp_process+0x538>)
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	429a      	cmp	r2, r3
 80123d8:	f040 8158 	bne.w	801268c <tcp_process+0x730>
      tcp_rexmit(pcb);
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	f002 fc8d 	bl	8014cfc <tcp_rexmit>
    break;
 80123e2:	e153      	b.n	801268c <tcp_process+0x730>
 80123e4:	e152      	b.n	801268c <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 80123e6:	6878      	ldr	r0, [r7, #4]
 80123e8:	f000 f9e2 	bl	80127b0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80123ec:	4b31      	ldr	r3, [pc, #196]	; (80124b4 <tcp_process+0x558>)
 80123ee:	781b      	ldrb	r3, [r3, #0]
 80123f0:	f003 0320 	and.w	r3, r3, #32
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	f000 814b 	beq.w	8012690 <tcp_process+0x734>
      tcp_ack_now(pcb);
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	7e9b      	ldrb	r3, [r3, #26]
 80123fe:	f043 0302 	orr.w	r3, r3, #2
 8012402:	b2da      	uxtb	r2, r3
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	2207      	movs	r2, #7
 801240c:	751a      	strb	r2, [r3, #20]
    }
    break;
 801240e:	e13f      	b.n	8012690 <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8012410:	6878      	ldr	r0, [r7, #4]
 8012412:	f000 f9cd 	bl	80127b0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8012416:	4b27      	ldr	r3, [pc, #156]	; (80124b4 <tcp_process+0x558>)
 8012418:	781b      	ldrb	r3, [r3, #0]
 801241a:	f003 0320 	and.w	r3, r3, #32
 801241e:	2b00      	cmp	r3, #0
 8012420:	d070      	beq.n	8012504 <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012422:	4b19      	ldr	r3, [pc, #100]	; (8012488 <tcp_process+0x52c>)
 8012424:	781b      	ldrb	r3, [r3, #0]
 8012426:	f003 0310 	and.w	r3, r3, #16
 801242a:	2b00      	cmp	r3, #0
 801242c:	d05f      	beq.n	80124ee <tcp_process+0x592>
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012432:	4b16      	ldr	r3, [pc, #88]	; (801248c <tcp_process+0x530>)
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	429a      	cmp	r2, r3
 8012438:	d159      	bne.n	80124ee <tcp_process+0x592>
          pcb->unsent == NULL) {
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801243e:	2b00      	cmp	r3, #0
 8012440:	d155      	bne.n	80124ee <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	7e9b      	ldrb	r3, [r3, #26]
 8012446:	f043 0302 	orr.w	r3, r3, #2
 801244a:	b2da      	uxtb	r2, r3
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8012450:	6878      	ldr	r0, [r7, #4]
 8012452:	f7fe fee7 	bl	8011224 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012456:	4b18      	ldr	r3, [pc, #96]	; (80124b8 <tcp_process+0x55c>)
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	687a      	ldr	r2, [r7, #4]
 801245c:	429a      	cmp	r2, r3
 801245e:	d105      	bne.n	801246c <tcp_process+0x510>
 8012460:	4b15      	ldr	r3, [pc, #84]	; (80124b8 <tcp_process+0x55c>)
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	68db      	ldr	r3, [r3, #12]
 8012466:	4a14      	ldr	r2, [pc, #80]	; (80124b8 <tcp_process+0x55c>)
 8012468:	6013      	str	r3, [r2, #0]
 801246a:	e02d      	b.n	80124c8 <tcp_process+0x56c>
 801246c:	4b12      	ldr	r3, [pc, #72]	; (80124b8 <tcp_process+0x55c>)
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	617b      	str	r3, [r7, #20]
 8012472:	e026      	b.n	80124c2 <tcp_process+0x566>
 8012474:	697b      	ldr	r3, [r7, #20]
 8012476:	68db      	ldr	r3, [r3, #12]
 8012478:	687a      	ldr	r2, [r7, #4]
 801247a:	429a      	cmp	r2, r3
 801247c:	d11e      	bne.n	80124bc <tcp_process+0x560>
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	68da      	ldr	r2, [r3, #12]
 8012482:	697b      	ldr	r3, [r7, #20]
 8012484:	60da      	str	r2, [r3, #12]
 8012486:	e01f      	b.n	80124c8 <tcp_process+0x56c>
 8012488:	2000ec04 	.word	0x2000ec04
 801248c:	2000ebfc 	.word	0x2000ebfc
 8012490:	2000ec02 	.word	0x2000ec02
 8012494:	2000ebf8 	.word	0x2000ebf8
 8012498:	2000ebe8 	.word	0x2000ebe8
 801249c:	200092a0 	.word	0x200092a0
 80124a0:	200092a4 	.word	0x200092a4
 80124a4:	0801d038 	.word	0x0801d038
 80124a8:	0801d23c 	.word	0x0801d23c
 80124ac:	0801d07c 	.word	0x0801d07c
 80124b0:	2000ec00 	.word	0x2000ec00
 80124b4:	2000ec05 	.word	0x2000ec05
 80124b8:	2000ebcc 	.word	0x2000ebcc
 80124bc:	697b      	ldr	r3, [r7, #20]
 80124be:	68db      	ldr	r3, [r3, #12]
 80124c0:	617b      	str	r3, [r7, #20]
 80124c2:	697b      	ldr	r3, [r7, #20]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d1d5      	bne.n	8012474 <tcp_process+0x518>
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	2200      	movs	r2, #0
 80124cc:	60da      	str	r2, [r3, #12]
 80124ce:	4b77      	ldr	r3, [pc, #476]	; (80126ac <tcp_process+0x750>)
 80124d0:	2201      	movs	r2, #1
 80124d2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	220a      	movs	r2, #10
 80124d8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80124da:	4b75      	ldr	r3, [pc, #468]	; (80126b0 <tcp_process+0x754>)
 80124dc:	681a      	ldr	r2, [r3, #0]
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	60da      	str	r2, [r3, #12]
 80124e2:	4a73      	ldr	r2, [pc, #460]	; (80126b0 <tcp_process+0x754>)
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	6013      	str	r3, [r2, #0]
 80124e8:	f002 fda4 	bl	8015034 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 80124ec:	e0d2      	b.n	8012694 <tcp_process+0x738>
        tcp_ack_now(pcb);
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	7e9b      	ldrb	r3, [r3, #26]
 80124f2:	f043 0302 	orr.w	r3, r3, #2
 80124f6:	b2da      	uxtb	r2, r3
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	2208      	movs	r2, #8
 8012500:	751a      	strb	r2, [r3, #20]
    break;
 8012502:	e0c7      	b.n	8012694 <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012504:	4b6b      	ldr	r3, [pc, #428]	; (80126b4 <tcp_process+0x758>)
 8012506:	781b      	ldrb	r3, [r3, #0]
 8012508:	f003 0310 	and.w	r3, r3, #16
 801250c:	2b00      	cmp	r3, #0
 801250e:	f000 80c1 	beq.w	8012694 <tcp_process+0x738>
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012516:	4b68      	ldr	r3, [pc, #416]	; (80126b8 <tcp_process+0x75c>)
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	429a      	cmp	r2, r3
 801251c:	f040 80ba 	bne.w	8012694 <tcp_process+0x738>
               pcb->unsent == NULL) {
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012524:	2b00      	cmp	r3, #0
 8012526:	f040 80b5 	bne.w	8012694 <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	2206      	movs	r2, #6
 801252e:	751a      	strb	r2, [r3, #20]
    break;
 8012530:	e0b0      	b.n	8012694 <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8012532:	6878      	ldr	r0, [r7, #4]
 8012534:	f000 f93c 	bl	80127b0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8012538:	4b60      	ldr	r3, [pc, #384]	; (80126bc <tcp_process+0x760>)
 801253a:	781b      	ldrb	r3, [r3, #0]
 801253c:	f003 0320 	and.w	r3, r3, #32
 8012540:	2b00      	cmp	r3, #0
 8012542:	f000 80a9 	beq.w	8012698 <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	7e9b      	ldrb	r3, [r3, #26]
 801254a:	f043 0302 	orr.w	r3, r3, #2
 801254e:	b2da      	uxtb	r2, r3
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8012554:	6878      	ldr	r0, [r7, #4]
 8012556:	f7fe fe65 	bl	8011224 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801255a:	4b59      	ldr	r3, [pc, #356]	; (80126c0 <tcp_process+0x764>)
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	687a      	ldr	r2, [r7, #4]
 8012560:	429a      	cmp	r2, r3
 8012562:	d105      	bne.n	8012570 <tcp_process+0x614>
 8012564:	4b56      	ldr	r3, [pc, #344]	; (80126c0 <tcp_process+0x764>)
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	68db      	ldr	r3, [r3, #12]
 801256a:	4a55      	ldr	r2, [pc, #340]	; (80126c0 <tcp_process+0x764>)
 801256c:	6013      	str	r3, [r2, #0]
 801256e:	e013      	b.n	8012598 <tcp_process+0x63c>
 8012570:	4b53      	ldr	r3, [pc, #332]	; (80126c0 <tcp_process+0x764>)
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	613b      	str	r3, [r7, #16]
 8012576:	e00c      	b.n	8012592 <tcp_process+0x636>
 8012578:	693b      	ldr	r3, [r7, #16]
 801257a:	68db      	ldr	r3, [r3, #12]
 801257c:	687a      	ldr	r2, [r7, #4]
 801257e:	429a      	cmp	r2, r3
 8012580:	d104      	bne.n	801258c <tcp_process+0x630>
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	68da      	ldr	r2, [r3, #12]
 8012586:	693b      	ldr	r3, [r7, #16]
 8012588:	60da      	str	r2, [r3, #12]
 801258a:	e005      	b.n	8012598 <tcp_process+0x63c>
 801258c:	693b      	ldr	r3, [r7, #16]
 801258e:	68db      	ldr	r3, [r3, #12]
 8012590:	613b      	str	r3, [r7, #16]
 8012592:	693b      	ldr	r3, [r7, #16]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d1ef      	bne.n	8012578 <tcp_process+0x61c>
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	2200      	movs	r2, #0
 801259c:	60da      	str	r2, [r3, #12]
 801259e:	4b43      	ldr	r3, [pc, #268]	; (80126ac <tcp_process+0x750>)
 80125a0:	2201      	movs	r2, #1
 80125a2:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	220a      	movs	r2, #10
 80125a8:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80125aa:	4b41      	ldr	r3, [pc, #260]	; (80126b0 <tcp_process+0x754>)
 80125ac:	681a      	ldr	r2, [r3, #0]
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	60da      	str	r2, [r3, #12]
 80125b2:	4a3f      	ldr	r2, [pc, #252]	; (80126b0 <tcp_process+0x754>)
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	6013      	str	r3, [r2, #0]
 80125b8:	f002 fd3c 	bl	8015034 <tcp_timer_needed>
    }
    break;
 80125bc:	e06c      	b.n	8012698 <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 80125be:	6878      	ldr	r0, [r7, #4]
 80125c0:	f000 f8f6 	bl	80127b0 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80125c4:	4b3b      	ldr	r3, [pc, #236]	; (80126b4 <tcp_process+0x758>)
 80125c6:	781b      	ldrb	r3, [r3, #0]
 80125c8:	f003 0310 	and.w	r3, r3, #16
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d065      	beq.n	801269c <tcp_process+0x740>
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80125d4:	4b38      	ldr	r3, [pc, #224]	; (80126b8 <tcp_process+0x75c>)
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	429a      	cmp	r2, r3
 80125da:	d15f      	bne.n	801269c <tcp_process+0x740>
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d15b      	bne.n	801269c <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 80125e4:	6878      	ldr	r0, [r7, #4]
 80125e6:	f7fe fe1d 	bl	8011224 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80125ea:	4b35      	ldr	r3, [pc, #212]	; (80126c0 <tcp_process+0x764>)
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	687a      	ldr	r2, [r7, #4]
 80125f0:	429a      	cmp	r2, r3
 80125f2:	d105      	bne.n	8012600 <tcp_process+0x6a4>
 80125f4:	4b32      	ldr	r3, [pc, #200]	; (80126c0 <tcp_process+0x764>)
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	68db      	ldr	r3, [r3, #12]
 80125fa:	4a31      	ldr	r2, [pc, #196]	; (80126c0 <tcp_process+0x764>)
 80125fc:	6013      	str	r3, [r2, #0]
 80125fe:	e013      	b.n	8012628 <tcp_process+0x6cc>
 8012600:	4b2f      	ldr	r3, [pc, #188]	; (80126c0 <tcp_process+0x764>)
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	60fb      	str	r3, [r7, #12]
 8012606:	e00c      	b.n	8012622 <tcp_process+0x6c6>
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	68db      	ldr	r3, [r3, #12]
 801260c:	687a      	ldr	r2, [r7, #4]
 801260e:	429a      	cmp	r2, r3
 8012610:	d104      	bne.n	801261c <tcp_process+0x6c0>
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	68da      	ldr	r2, [r3, #12]
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	60da      	str	r2, [r3, #12]
 801261a:	e005      	b.n	8012628 <tcp_process+0x6cc>
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	68db      	ldr	r3, [r3, #12]
 8012620:	60fb      	str	r3, [r7, #12]
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d1ef      	bne.n	8012608 <tcp_process+0x6ac>
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	2200      	movs	r2, #0
 801262c:	60da      	str	r2, [r3, #12]
 801262e:	4b1f      	ldr	r3, [pc, #124]	; (80126ac <tcp_process+0x750>)
 8012630:	2201      	movs	r2, #1
 8012632:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	220a      	movs	r2, #10
 8012638:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 801263a:	4b1d      	ldr	r3, [pc, #116]	; (80126b0 <tcp_process+0x754>)
 801263c:	681a      	ldr	r2, [r3, #0]
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	60da      	str	r2, [r3, #12]
 8012642:	4a1b      	ldr	r2, [pc, #108]	; (80126b0 <tcp_process+0x754>)
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	6013      	str	r3, [r2, #0]
 8012648:	f002 fcf4 	bl	8015034 <tcp_timer_needed>
    }
    break;
 801264c:	e026      	b.n	801269c <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 801264e:	6878      	ldr	r0, [r7, #4]
 8012650:	f000 f8ae 	bl	80127b0 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012654:	4b17      	ldr	r3, [pc, #92]	; (80126b4 <tcp_process+0x758>)
 8012656:	781b      	ldrb	r3, [r3, #0]
 8012658:	f003 0310 	and.w	r3, r3, #16
 801265c:	2b00      	cmp	r3, #0
 801265e:	d01f      	beq.n	80126a0 <tcp_process+0x744>
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012664:	4b14      	ldr	r3, [pc, #80]	; (80126b8 <tcp_process+0x75c>)
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	429a      	cmp	r2, r3
 801266a:	d119      	bne.n	80126a0 <tcp_process+0x744>
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012670:	2b00      	cmp	r3, #0
 8012672:	d115      	bne.n	80126a0 <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8012674:	4b11      	ldr	r3, [pc, #68]	; (80126bc <tcp_process+0x760>)
 8012676:	781b      	ldrb	r3, [r3, #0]
 8012678:	f043 0310 	orr.w	r3, r3, #16
 801267c:	b2da      	uxtb	r2, r3
 801267e:	4b0f      	ldr	r3, [pc, #60]	; (80126bc <tcp_process+0x760>)
 8012680:	701a      	strb	r2, [r3, #0]
    }
    break;
 8012682:	e00d      	b.n	80126a0 <tcp_process+0x744>
  default:
    break;
 8012684:	bf00      	nop
 8012686:	e00c      	b.n	80126a2 <tcp_process+0x746>
    break;
 8012688:	bf00      	nop
 801268a:	e00a      	b.n	80126a2 <tcp_process+0x746>
    break;
 801268c:	bf00      	nop
 801268e:	e008      	b.n	80126a2 <tcp_process+0x746>
    break;
 8012690:	bf00      	nop
 8012692:	e006      	b.n	80126a2 <tcp_process+0x746>
    break;
 8012694:	bf00      	nop
 8012696:	e004      	b.n	80126a2 <tcp_process+0x746>
    break;
 8012698:	bf00      	nop
 801269a:	e002      	b.n	80126a2 <tcp_process+0x746>
    break;
 801269c:	bf00      	nop
 801269e:	e000      	b.n	80126a2 <tcp_process+0x746>
    break;
 80126a0:	bf00      	nop
  }
  return ERR_OK;
 80126a2:	2300      	movs	r3, #0
}
 80126a4:	4618      	mov	r0, r3
 80126a6:	3720      	adds	r7, #32
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bd80      	pop	{r7, pc}
 80126ac:	2000ebd4 	.word	0x2000ebd4
 80126b0:	2000ebd0 	.word	0x2000ebd0
 80126b4:	2000ec04 	.word	0x2000ec04
 80126b8:	2000ebfc 	.word	0x2000ebfc
 80126bc:	2000ec05 	.word	0x2000ec05
 80126c0:	2000ebcc 	.word	0x2000ebcc

080126c4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80126c4:	b590      	push	{r4, r7, lr}
 80126c6:	b085      	sub	sp, #20
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
 80126cc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	68db      	ldr	r3, [r3, #12]
 80126d2:	899b      	ldrh	r3, [r3, #12]
 80126d4:	b29b      	uxth	r3, r3
 80126d6:	4618      	mov	r0, r3
 80126d8:	f7fb fe24 	bl	800e324 <lwip_htons>
 80126dc:	4603      	mov	r3, r0
 80126de:	f003 0301 	and.w	r3, r3, #1
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d027      	beq.n	8012736 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80126e6:	6838      	ldr	r0, [r7, #0]
 80126e8:	f7fe fb37 	bl	8010d5a <tcp_segs_free>
    next = NULL;
 80126ec:	2300      	movs	r3, #0
 80126ee:	603b      	str	r3, [r7, #0]
 80126f0:	e055      	b.n	801279e <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	68db      	ldr	r3, [r3, #12]
 80126f6:	899b      	ldrh	r3, [r3, #12]
 80126f8:	b29b      	uxth	r3, r3
 80126fa:	4618      	mov	r0, r3
 80126fc:	f7fb fe12 	bl	800e324 <lwip_htons>
 8012700:	4603      	mov	r3, r0
 8012702:	f003 0301 	and.w	r3, r3, #1
 8012706:	2b00      	cmp	r3, #0
 8012708:	d00d      	beq.n	8012726 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	68db      	ldr	r3, [r3, #12]
 801270e:	899b      	ldrh	r3, [r3, #12]
 8012710:	b29c      	uxth	r4, r3
 8012712:	2001      	movs	r0, #1
 8012714:	f7fb fe06 	bl	800e324 <lwip_htons>
 8012718:	4603      	mov	r3, r0
 801271a:	461a      	mov	r2, r3
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	68db      	ldr	r3, [r3, #12]
 8012720:	4322      	orrs	r2, r4
 8012722:	b292      	uxth	r2, r2
 8012724:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8012730:	68f8      	ldr	r0, [r7, #12]
 8012732:	f7fe fb27 	bl	8010d84 <tcp_seg_free>
    while (next &&
 8012736:	683b      	ldr	r3, [r7, #0]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d00e      	beq.n	801275a <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	891b      	ldrh	r3, [r3, #8]
 8012740:	461a      	mov	r2, r3
 8012742:	4b1a      	ldr	r3, [pc, #104]	; (80127ac <tcp_oos_insert_segment+0xe8>)
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	441a      	add	r2, r3
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	68db      	ldr	r3, [r3, #12]
 801274c:	685b      	ldr	r3, [r3, #4]
 801274e:	6839      	ldr	r1, [r7, #0]
 8012750:	8909      	ldrh	r1, [r1, #8]
 8012752:	440b      	add	r3, r1
 8012754:	1ad3      	subs	r3, r2, r3
    while (next &&
 8012756:	2b00      	cmp	r3, #0
 8012758:	dacb      	bge.n	80126f2 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 801275a:	683b      	ldr	r3, [r7, #0]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d01e      	beq.n	801279e <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	891b      	ldrh	r3, [r3, #8]
 8012764:	461a      	mov	r2, r3
 8012766:	4b11      	ldr	r3, [pc, #68]	; (80127ac <tcp_oos_insert_segment+0xe8>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	441a      	add	r2, r3
 801276c:	683b      	ldr	r3, [r7, #0]
 801276e:	68db      	ldr	r3, [r3, #12]
 8012770:	685b      	ldr	r3, [r3, #4]
 8012772:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012774:	2b00      	cmp	r3, #0
 8012776:	dd12      	ble.n	801279e <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	68db      	ldr	r3, [r3, #12]
 801277c:	685b      	ldr	r3, [r3, #4]
 801277e:	b29a      	uxth	r2, r3
 8012780:	4b0a      	ldr	r3, [pc, #40]	; (80127ac <tcp_oos_insert_segment+0xe8>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	b29b      	uxth	r3, r3
 8012786:	1ad3      	subs	r3, r2, r3
 8012788:	b29a      	uxth	r2, r3
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	685a      	ldr	r2, [r3, #4]
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	891b      	ldrh	r3, [r3, #8]
 8012796:	4619      	mov	r1, r3
 8012798:	4610      	mov	r0, r2
 801279a:	f7fc fe4f 	bl	800f43c <pbuf_realloc>
    }
  }
  cseg->next = next;
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	683a      	ldr	r2, [r7, #0]
 80127a2:	601a      	str	r2, [r3, #0]
}
 80127a4:	bf00      	nop
 80127a6:	3714      	adds	r7, #20
 80127a8:	46bd      	mov	sp, r7
 80127aa:	bd90      	pop	{r4, r7, pc}
 80127ac:	2000ebf8 	.word	0x2000ebf8

080127b0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80127b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127b2:	b08d      	sub	sp, #52	; 0x34
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 80127b8:	2300      	movs	r3, #0
 80127ba:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	7d1b      	ldrb	r3, [r3, #20]
 80127c0:	2b03      	cmp	r3, #3
 80127c2:	d806      	bhi.n	80127d2 <tcp_receive+0x22>
 80127c4:	4b98      	ldr	r3, [pc, #608]	; (8012a28 <tcp_receive+0x278>)
 80127c6:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80127ca:	4998      	ldr	r1, [pc, #608]	; (8012a2c <tcp_receive+0x27c>)
 80127cc:	4898      	ldr	r0, [pc, #608]	; (8012a30 <tcp_receive+0x280>)
 80127ce:	f007 fe43 	bl	801a458 <iprintf>

  if (flags & TCP_ACK) {
 80127d2:	4b98      	ldr	r3, [pc, #608]	; (8012a34 <tcp_receive+0x284>)
 80127d4:	781b      	ldrb	r3, [r3, #0]
 80127d6:	f003 0310 	and.w	r3, r3, #16
 80127da:	2b00      	cmp	r3, #0
 80127dc:	f000 82c1 	beq.w	8012d62 <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80127e6:	461a      	mov	r2, r3
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80127ec:	4413      	add	r3, r2
 80127ee:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80127f4:	4b90      	ldr	r3, [pc, #576]	; (8012a38 <tcp_receive+0x288>)
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	1ad3      	subs	r3, r2, r3
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	db1b      	blt.n	8012836 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012802:	4b8d      	ldr	r3, [pc, #564]	; (8012a38 <tcp_receive+0x288>)
 8012804:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012806:	429a      	cmp	r2, r3
 8012808:	d106      	bne.n	8012818 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801280e:	4b8b      	ldr	r3, [pc, #556]	; (8012a3c <tcp_receive+0x28c>)
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	1ad3      	subs	r3, r2, r3
 8012814:	2b00      	cmp	r3, #0
 8012816:	db0e      	blt.n	8012836 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801281c:	4b87      	ldr	r3, [pc, #540]	; (8012a3c <tcp_receive+0x28c>)
 801281e:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012820:	429a      	cmp	r2, r3
 8012822:	d141      	bne.n	80128a8 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012824:	4b86      	ldr	r3, [pc, #536]	; (8012a40 <tcp_receive+0x290>)
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	89db      	ldrh	r3, [r3, #14]
 801282a:	b29a      	uxth	r2, r3
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012832:	429a      	cmp	r2, r3
 8012834:	d938      	bls.n	80128a8 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012836:	4b82      	ldr	r3, [pc, #520]	; (8012a40 <tcp_receive+0x290>)
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	89db      	ldrh	r3, [r3, #14]
 801283c:	b29a      	uxth	r2, r3
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012850:	429a      	cmp	r2, r3
 8012852:	d205      	bcs.n	8012860 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 8012860:	4b75      	ldr	r3, [pc, #468]	; (8012a38 <tcp_receive+0x288>)
 8012862:	681a      	ldr	r2, [r3, #0]
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8012868:	4b74      	ldr	r3, [pc, #464]	; (8012a3c <tcp_receive+0x28c>)
 801286a:	681a      	ldr	r2, [r3, #0]
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012876:	2b00      	cmp	r3, #0
 8012878:	d10d      	bne.n	8012896 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8012880:	2b00      	cmp	r3, #0
 8012882:	d111      	bne.n	80128a8 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2200      	movs	r2, #0
 8012888:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2201      	movs	r2, #1
 8012890:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8012894:	e008      	b.n	80128a8 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801289c:	2b00      	cmp	r3, #0
 801289e:	d003      	beq.n	80128a8 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	2200      	movs	r2, #0
 80128a4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80128a8:	4b64      	ldr	r3, [pc, #400]	; (8012a3c <tcp_receive+0x28c>)
 80128aa:	681a      	ldr	r2, [r3, #0]
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128b0:	1ad3      	subs	r3, r2, r3
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	dc53      	bgt.n	801295e <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 80128b6:	4b63      	ldr	r3, [pc, #396]	; (8012a44 <tcp_receive+0x294>)
 80128b8:	881b      	ldrh	r3, [r3, #0]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d146      	bne.n	801294c <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80128c2:	687a      	ldr	r2, [r7, #4]
 80128c4:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 80128c8:	4413      	add	r3, r2
 80128ca:	697a      	ldr	r2, [r7, #20]
 80128cc:	429a      	cmp	r2, r3
 80128ce:	d13d      	bne.n	801294c <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	db38      	blt.n	801294c <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80128de:	4b57      	ldr	r3, [pc, #348]	; (8012a3c <tcp_receive+0x28c>)
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	429a      	cmp	r2, r3
 80128e4:	d132      	bne.n	801294c <tcp_receive+0x19c>
              found_dupack = 1;
 80128e6:	2301      	movs	r3, #1
 80128e8:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80128f0:	2bff      	cmp	r3, #255	; 0xff
 80128f2:	d007      	beq.n	8012904 <tcp_receive+0x154>
                ++pcb->dupacks;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80128fa:	3301      	adds	r3, #1
 80128fc:	b2da      	uxtb	r2, r3
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801290a:	2b03      	cmp	r3, #3
 801290c:	d916      	bls.n	801293c <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012918:	4413      	add	r3, r2
 801291a:	b29a      	uxth	r2, r3
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012922:	429a      	cmp	r2, r3
 8012924:	d912      	bls.n	801294c <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012930:	4413      	add	r3, r2
 8012932:	b29a      	uxth	r2, r3
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801293a:	e007      	b.n	801294c <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012942:	2b03      	cmp	r3, #3
 8012944:	d102      	bne.n	801294c <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8012946:	6878      	ldr	r0, [r7, #4]
 8012948:	f002 fa28 	bl	8014d9c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801294c:	69fb      	ldr	r3, [r7, #28]
 801294e:	2b00      	cmp	r3, #0
 8012950:	f040 816a 	bne.w	8012c28 <tcp_receive+0x478>
        pcb->dupacks = 0;
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	2200      	movs	r2, #0
 8012958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801295c:	e164      	b.n	8012c28 <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801295e:	4b37      	ldr	r3, [pc, #220]	; (8012a3c <tcp_receive+0x28c>)
 8012960:	681a      	ldr	r2, [r3, #0]
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012966:	1ad3      	subs	r3, r2, r3
 8012968:	3b01      	subs	r3, #1
 801296a:	2b00      	cmp	r3, #0
 801296c:	f2c0 8108 	blt.w	8012b80 <tcp_receive+0x3d0>
 8012970:	4b32      	ldr	r3, [pc, #200]	; (8012a3c <tcp_receive+0x28c>)
 8012972:	681a      	ldr	r2, [r3, #0]
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012978:	1ad3      	subs	r3, r2, r3
 801297a:	2b00      	cmp	r3, #0
 801297c:	f300 8100 	bgt.w	8012b80 <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	7e9b      	ldrb	r3, [r3, #26]
 8012984:	f003 0304 	and.w	r3, r3, #4
 8012988:	2b00      	cmp	r3, #0
 801298a:	d00c      	beq.n	80129a6 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	7e9b      	ldrb	r3, [r3, #26]
 8012990:	f023 0304 	bic.w	r3, r3, #4
 8012994:	b2da      	uxtb	r2, r3
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	2200      	movs	r2, #0
 80129aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80129b4:	10db      	asrs	r3, r3, #3
 80129b6:	b21b      	sxth	r3, r3
 80129b8:	b29a      	uxth	r2, r3
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80129c0:	b29b      	uxth	r3, r3
 80129c2:	4413      	add	r3, r2
 80129c4:	b29b      	uxth	r3, r3
 80129c6:	b21a      	sxth	r2, r3
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	2200      	movs	r2, #0
 80129d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80129d6:	4b19      	ldr	r3, [pc, #100]	; (8012a3c <tcp_receive+0x28c>)
 80129d8:	681a      	ldr	r2, [r3, #0]
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	7d1b      	ldrb	r3, [r3, #20]
 80129e2:	2b03      	cmp	r3, #3
 80129e4:	f240 8095 	bls.w	8012b12 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80129f4:	429a      	cmp	r2, r3
 80129f6:	d227      	bcs.n	8012a48 <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a02:	4413      	add	r3, r2
 8012a04:	b29a      	uxth	r2, r3
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012a0c:	429a      	cmp	r2, r3
 8012a0e:	f240 8080 	bls.w	8012b12 <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a1c:	4413      	add	r3, r2
 8012a1e:	b29a      	uxth	r2, r3
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012a26:	e074      	b.n	8012b12 <tcp_receive+0x362>
 8012a28:	0801d038 	.word	0x0801d038
 8012a2c:	0801d25c 	.word	0x0801d25c
 8012a30:	0801d07c 	.word	0x0801d07c
 8012a34:	2000ec04 	.word	0x2000ec04
 8012a38:	2000ebf8 	.word	0x2000ebf8
 8012a3c:	2000ebfc 	.word	0x2000ebfc
 8012a40:	2000ebe8 	.word	0x2000ebe8
 8012a44:	2000ec02 	.word	0x2000ec02
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a52:	4619      	mov	r1, r3
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a58:	fb01 f303 	mul.w	r3, r1, r3
 8012a5c:	6879      	ldr	r1, [r7, #4]
 8012a5e:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8012a62:	fb93 f3f1 	sdiv	r3, r3, r1
 8012a66:	b29b      	uxth	r3, r3
 8012a68:	4413      	add	r3, r2
 8012a6a:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012a72:	8a7a      	ldrh	r2, [r7, #18]
 8012a74:	429a      	cmp	r2, r3
 8012a76:	d94c      	bls.n	8012b12 <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	8a7a      	ldrh	r2, [r7, #18]
 8012a7c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8012a80:	e047      	b.n	8012b12 <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a86:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a8c:	681a      	ldr	r2, [r3, #0]
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8012a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a9a:	685b      	ldr	r3, [r3, #4]
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	f7fc fedb 	bl	800f858 <pbuf_clen>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	429c      	cmp	r4, r3
 8012aa6:	d206      	bcs.n	8012ab6 <tcp_receive+0x306>
 8012aa8:	4b70      	ldr	r3, [pc, #448]	; (8012c6c <tcp_receive+0x4bc>)
 8012aaa:	f240 429e 	movw	r2, #1182	; 0x49e
 8012aae:	4970      	ldr	r1, [pc, #448]	; (8012c70 <tcp_receive+0x4c0>)
 8012ab0:	4870      	ldr	r0, [pc, #448]	; (8012c74 <tcp_receive+0x4c4>)
 8012ab2:	f007 fcd1 	bl	801a458 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8012ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ab8:	685b      	ldr	r3, [r3, #4]
 8012aba:	4618      	mov	r0, r3
 8012abc:	f7fc fecc 	bl	800f858 <pbuf_clen>
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	461a      	mov	r2, r3
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012aca:	1a9b      	subs	r3, r3, r2
 8012acc:	b29a      	uxth	r2, r3
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8012ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ad6:	891a      	ldrh	r2, [r3, #8]
 8012ad8:	4b67      	ldr	r3, [pc, #412]	; (8012c78 <tcp_receive+0x4c8>)
 8012ada:	881b      	ldrh	r3, [r3, #0]
 8012adc:	4413      	add	r3, r2
 8012ade:	b29a      	uxth	r2, r3
 8012ae0:	4b65      	ldr	r3, [pc, #404]	; (8012c78 <tcp_receive+0x4c8>)
 8012ae2:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8012ae4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ae6:	f7fe f94d 	bl	8010d84 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d00e      	beq.n	8012b12 <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d10a      	bne.n	8012b12 <tcp_receive+0x362>
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d106      	bne.n	8012b12 <tcp_receive+0x362>
 8012b04:	4b59      	ldr	r3, [pc, #356]	; (8012c6c <tcp_receive+0x4bc>)
 8012b06:	f240 42a6 	movw	r2, #1190	; 0x4a6
 8012b0a:	495c      	ldr	r1, [pc, #368]	; (8012c7c <tcp_receive+0x4cc>)
 8012b0c:	4859      	ldr	r0, [pc, #356]	; (8012c74 <tcp_receive+0x4c4>)
 8012b0e:	f007 fca3 	bl	801a458 <iprintf>
      while (pcb->unacked != NULL &&
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d022      	beq.n	8012b60 <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b1e:	68db      	ldr	r3, [r3, #12]
 8012b20:	685b      	ldr	r3, [r3, #4]
 8012b22:	4618      	mov	r0, r3
 8012b24:	f7fb fc0b 	bl	800e33e <lwip_htonl>
 8012b28:	4604      	mov	r4, r0
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b2e:	891b      	ldrh	r3, [r3, #8]
 8012b30:	461d      	mov	r5, r3
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b36:	68db      	ldr	r3, [r3, #12]
 8012b38:	899b      	ldrh	r3, [r3, #12]
 8012b3a:	b29b      	uxth	r3, r3
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f7fb fbf1 	bl	800e324 <lwip_htons>
 8012b42:	4603      	mov	r3, r0
 8012b44:	f003 0303 	and.w	r3, r3, #3
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d001      	beq.n	8012b50 <tcp_receive+0x3a0>
 8012b4c:	2301      	movs	r3, #1
 8012b4e:	e000      	b.n	8012b52 <tcp_receive+0x3a2>
 8012b50:	2300      	movs	r3, #0
 8012b52:	442b      	add	r3, r5
 8012b54:	18e2      	adds	r2, r4, r3
 8012b56:	4b4a      	ldr	r3, [pc, #296]	; (8012c80 <tcp_receive+0x4d0>)
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	dd90      	ble.n	8012a82 <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d104      	bne.n	8012b72 <tcp_receive+0x3c2>
        pcb->rtime = -1;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b6e:	861a      	strh	r2, [r3, #48]	; 0x30
 8012b70:	e002      	b.n	8012b78 <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	2200      	movs	r2, #0
 8012b76:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	76da      	strb	r2, [r3, #27]
 8012b7e:	e002      	b.n	8012b86 <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012b80:	6878      	ldr	r0, [r7, #4]
 8012b82:	f001 fd2f 	bl	80145e4 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8012b86:	e04f      	b.n	8012c28 <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012b92:	681a      	ldr	r2, [r3, #0]
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d103      	bne.n	8012ba8 <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8012bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bb0:	685b      	ldr	r3, [r3, #4]
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	f7fc fe50 	bl	800f858 <pbuf_clen>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	429c      	cmp	r4, r3
 8012bbc:	d206      	bcs.n	8012bcc <tcp_receive+0x41c>
 8012bbe:	4b2b      	ldr	r3, [pc, #172]	; (8012c6c <tcp_receive+0x4bc>)
 8012bc0:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8012bc4:	492a      	ldr	r1, [pc, #168]	; (8012c70 <tcp_receive+0x4c0>)
 8012bc6:	482b      	ldr	r0, [pc, #172]	; (8012c74 <tcp_receive+0x4c4>)
 8012bc8:	f007 fc46 	bl	801a458 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8012bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bce:	685b      	ldr	r3, [r3, #4]
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	f7fc fe41 	bl	800f858 <pbuf_clen>
 8012bd6:	4603      	mov	r3, r0
 8012bd8:	461a      	mov	r2, r3
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012be0:	1a9b      	subs	r3, r3, r2
 8012be2:	b29a      	uxth	r2, r3
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8012bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bec:	891a      	ldrh	r2, [r3, #8]
 8012bee:	4b22      	ldr	r3, [pc, #136]	; (8012c78 <tcp_receive+0x4c8>)
 8012bf0:	881b      	ldrh	r3, [r3, #0]
 8012bf2:	4413      	add	r3, r2
 8012bf4:	b29a      	uxth	r2, r3
 8012bf6:	4b20      	ldr	r3, [pc, #128]	; (8012c78 <tcp_receive+0x4c8>)
 8012bf8:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8012bfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012bfc:	f7fe f8c2 	bl	8010d84 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d00e      	beq.n	8012c28 <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d10a      	bne.n	8012c28 <tcp_receive+0x478>
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d106      	bne.n	8012c28 <tcp_receive+0x478>
 8012c1a:	4b14      	ldr	r3, [pc, #80]	; (8012c6c <tcp_receive+0x4bc>)
 8012c1c:	f240 42dc 	movw	r2, #1244	; 0x4dc
 8012c20:	4916      	ldr	r1, [pc, #88]	; (8012c7c <tcp_receive+0x4cc>)
 8012c22:	4814      	ldr	r0, [pc, #80]	; (8012c74 <tcp_receive+0x4c4>)
 8012c24:	f007 fc18 	bl	801a458 <iprintf>
    while (pcb->unsent != NULL &&
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d037      	beq.n	8012ca0 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8012c30:	4b13      	ldr	r3, [pc, #76]	; (8012c80 <tcp_receive+0x4d0>)
 8012c32:	681c      	ldr	r4, [r3, #0]
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012c38:	68db      	ldr	r3, [r3, #12]
 8012c3a:	685b      	ldr	r3, [r3, #4]
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	f7fb fb7e 	bl	800e33e <lwip_htonl>
 8012c42:	4605      	mov	r5, r0
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012c48:	891b      	ldrh	r3, [r3, #8]
 8012c4a:	461e      	mov	r6, r3
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012c50:	68db      	ldr	r3, [r3, #12]
 8012c52:	899b      	ldrh	r3, [r3, #12]
 8012c54:	b29b      	uxth	r3, r3
 8012c56:	4618      	mov	r0, r3
 8012c58:	f7fb fb64 	bl	800e324 <lwip_htons>
 8012c5c:	4603      	mov	r3, r0
 8012c5e:	f003 0303 	and.w	r3, r3, #3
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d00e      	beq.n	8012c84 <tcp_receive+0x4d4>
 8012c66:	2301      	movs	r3, #1
 8012c68:	e00d      	b.n	8012c86 <tcp_receive+0x4d6>
 8012c6a:	bf00      	nop
 8012c6c:	0801d038 	.word	0x0801d038
 8012c70:	0801d278 	.word	0x0801d278
 8012c74:	0801d07c 	.word	0x0801d07c
 8012c78:	2000ec00 	.word	0x2000ec00
 8012c7c:	0801d2a0 	.word	0x0801d2a0
 8012c80:	2000ebfc 	.word	0x2000ebfc
 8012c84:	2300      	movs	r3, #0
 8012c86:	4433      	add	r3, r6
 8012c88:	442b      	add	r3, r5
 8012c8a:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	db07      	blt.n	8012ca0 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8012c90:	4b8d      	ldr	r3, [pc, #564]	; (8012ec8 <tcp_receive+0x718>)
 8012c92:	681a      	ldr	r2, [r3, #0]
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c98:	1ad3      	subs	r3, r2, r3
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	f77f af74 	ble.w	8012b88 <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012ca6:	4b89      	ldr	r3, [pc, #548]	; (8012ecc <tcp_receive+0x71c>)
 8012ca8:	881b      	ldrh	r3, [r3, #0]
 8012caa:	4413      	add	r3, r2
 8012cac:	b29a      	uxth	r2, r3
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d052      	beq.n	8012d62 <tcp_receive+0x5b2>
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012cc0:	4b81      	ldr	r3, [pc, #516]	; (8012ec8 <tcp_receive+0x718>)
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	1ad3      	subs	r3, r2, r3
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	da4b      	bge.n	8012d62 <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012cca:	4b81      	ldr	r3, [pc, #516]	; (8012ed0 <tcp_receive+0x720>)
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	b29a      	uxth	r2, r3
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cd4:	b29b      	uxth	r3, r3
 8012cd6:	1ad3      	subs	r3, r2, r3
 8012cd8:	b29b      	uxth	r3, r3
 8012cda:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8012cdc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012ce4:	10db      	asrs	r3, r3, #3
 8012ce6:	b21b      	sxth	r3, r3
 8012ce8:	b29b      	uxth	r3, r3
 8012cea:	1ad3      	subs	r3, r2, r3
 8012cec:	b29b      	uxth	r3, r3
 8012cee:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012cf6:	b29a      	uxth	r2, r3
 8012cf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012cfa:	4413      	add	r3, r2
 8012cfc:	b29b      	uxth	r3, r3
 8012cfe:	b21a      	sxth	r2, r3
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8012d04:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	da03      	bge.n	8012d14 <tcp_receive+0x564>
        m = -m;
 8012d0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012d0e:	425b      	negs	r3, r3
 8012d10:	b29b      	uxth	r3, r3
 8012d12:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8012d14:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012d1c:	109b      	asrs	r3, r3, #2
 8012d1e:	b21b      	sxth	r3, r3
 8012d20:	b29b      	uxth	r3, r3
 8012d22:	1ad3      	subs	r3, r2, r3
 8012d24:	b29b      	uxth	r3, r3
 8012d26:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012d2e:	b29a      	uxth	r2, r3
 8012d30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012d32:	4413      	add	r3, r2
 8012d34:	b29b      	uxth	r3, r3
 8012d36:	b21a      	sxth	r2, r3
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012d42:	10db      	asrs	r3, r3, #3
 8012d44:	b21b      	sxth	r3, r3
 8012d46:	b29a      	uxth	r2, r3
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012d4e:	b29b      	uxth	r3, r3
 8012d50:	4413      	add	r3, r2
 8012d52:	b29b      	uxth	r3, r3
 8012d54:	b21a      	sxth	r2, r3
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	2200      	movs	r2, #0
 8012d60:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012d62:	4b5c      	ldr	r3, [pc, #368]	; (8012ed4 <tcp_receive+0x724>)
 8012d64:	881b      	ldrh	r3, [r3, #0]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	f000 84f1 	beq.w	801374e <tcp_receive+0xf9e>
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	7d1b      	ldrb	r3, [r3, #20]
 8012d70:	2b06      	cmp	r3, #6
 8012d72:	f200 84ec 	bhi.w	801374e <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012d7a:	4b57      	ldr	r3, [pc, #348]	; (8012ed8 <tcp_receive+0x728>)
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	1ad3      	subs	r3, r2, r3
 8012d80:	3b01      	subs	r3, #1
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	f2c0 80b8 	blt.w	8012ef8 <tcp_receive+0x748>
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012d8c:	4b51      	ldr	r3, [pc, #324]	; (8012ed4 <tcp_receive+0x724>)
 8012d8e:	881b      	ldrh	r3, [r3, #0]
 8012d90:	4619      	mov	r1, r3
 8012d92:	4b51      	ldr	r3, [pc, #324]	; (8012ed8 <tcp_receive+0x728>)
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	440b      	add	r3, r1
 8012d98:	1ad3      	subs	r3, r2, r3
 8012d9a:	3301      	adds	r3, #1
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	f300 80ab 	bgt.w	8012ef8 <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012da2:	4b4e      	ldr	r3, [pc, #312]	; (8012edc <tcp_receive+0x72c>)
 8012da4:	685b      	ldr	r3, [r3, #4]
 8012da6:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012dac:	4b4a      	ldr	r3, [pc, #296]	; (8012ed8 <tcp_receive+0x728>)
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	1ad3      	subs	r3, r2, r3
 8012db2:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012db4:	4b49      	ldr	r3, [pc, #292]	; (8012edc <tcp_receive+0x72c>)
 8012db6:	685b      	ldr	r3, [r3, #4]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d106      	bne.n	8012dca <tcp_receive+0x61a>
 8012dbc:	4b48      	ldr	r3, [pc, #288]	; (8012ee0 <tcp_receive+0x730>)
 8012dbe:	f240 523c 	movw	r2, #1340	; 0x53c
 8012dc2:	4948      	ldr	r1, [pc, #288]	; (8012ee4 <tcp_receive+0x734>)
 8012dc4:	4848      	ldr	r0, [pc, #288]	; (8012ee8 <tcp_receive+0x738>)
 8012dc6:	f007 fb47 	bl	801a458 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8012dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dcc:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8012dd0:	4293      	cmp	r3, r2
 8012dd2:	dd06      	ble.n	8012de2 <tcp_receive+0x632>
 8012dd4:	4b42      	ldr	r3, [pc, #264]	; (8012ee0 <tcp_receive+0x730>)
 8012dd6:	f240 523d 	movw	r2, #1341	; 0x53d
 8012dda:	4944      	ldr	r1, [pc, #272]	; (8012eec <tcp_receive+0x73c>)
 8012ddc:	4842      	ldr	r0, [pc, #264]	; (8012ee8 <tcp_receive+0x738>)
 8012dde:	f007 fb3b 	bl	801a458 <iprintf>
      if (inseg.p->len < off) {
 8012de2:	4b3e      	ldr	r3, [pc, #248]	; (8012edc <tcp_receive+0x72c>)
 8012de4:	685b      	ldr	r3, [r3, #4]
 8012de6:	895b      	ldrh	r3, [r3, #10]
 8012de8:	461a      	mov	r2, r3
 8012dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dec:	4293      	cmp	r3, r2
 8012dee:	dd3e      	ble.n	8012e6e <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012df0:	4b3a      	ldr	r3, [pc, #232]	; (8012edc <tcp_receive+0x72c>)
 8012df2:	685b      	ldr	r3, [r3, #4]
 8012df4:	891b      	ldrh	r3, [r3, #8]
 8012df6:	461a      	mov	r2, r3
 8012df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dfa:	4293      	cmp	r3, r2
 8012dfc:	dd06      	ble.n	8012e0c <tcp_receive+0x65c>
 8012dfe:	4b38      	ldr	r3, [pc, #224]	; (8012ee0 <tcp_receive+0x730>)
 8012e00:	f240 523f 	movw	r2, #1343	; 0x53f
 8012e04:	493a      	ldr	r1, [pc, #232]	; (8012ef0 <tcp_receive+0x740>)
 8012e06:	4838      	ldr	r0, [pc, #224]	; (8012ee8 <tcp_receive+0x738>)
 8012e08:	f007 fb26 	bl	801a458 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012e0c:	4b33      	ldr	r3, [pc, #204]	; (8012edc <tcp_receive+0x72c>)
 8012e0e:	685b      	ldr	r3, [r3, #4]
 8012e10:	891a      	ldrh	r2, [r3, #8]
 8012e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e14:	b29b      	uxth	r3, r3
 8012e16:	1ad3      	subs	r3, r2, r3
 8012e18:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8012e1a:	e00e      	b.n	8012e3a <tcp_receive+0x68a>
          off -= p->len;
 8012e1c:	69bb      	ldr	r3, [r7, #24]
 8012e1e:	895b      	ldrh	r3, [r3, #10]
 8012e20:	461a      	mov	r2, r3
 8012e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e24:	1a9b      	subs	r3, r3, r2
 8012e26:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8012e28:	69bb      	ldr	r3, [r7, #24]
 8012e2a:	8a3a      	ldrh	r2, [r7, #16]
 8012e2c:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8012e2e:	69bb      	ldr	r3, [r7, #24]
 8012e30:	2200      	movs	r2, #0
 8012e32:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8012e34:	69bb      	ldr	r3, [r7, #24]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8012e3a:	69bb      	ldr	r3, [r7, #24]
 8012e3c:	895b      	ldrh	r3, [r3, #10]
 8012e3e:	461a      	mov	r2, r3
 8012e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e42:	4293      	cmp	r3, r2
 8012e44:	dcea      	bgt.n	8012e1c <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8012e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e48:	b29b      	uxth	r3, r3
 8012e4a:	425b      	negs	r3, r3
 8012e4c:	b29b      	uxth	r3, r3
 8012e4e:	b21b      	sxth	r3, r3
 8012e50:	4619      	mov	r1, r3
 8012e52:	69b8      	ldr	r0, [r7, #24]
 8012e54:	f7fc fc42 	bl	800f6dc <pbuf_header>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d01c      	beq.n	8012e98 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8012e5e:	4b20      	ldr	r3, [pc, #128]	; (8012ee0 <tcp_receive+0x730>)
 8012e60:	f240 524c 	movw	r2, #1356	; 0x54c
 8012e64:	4923      	ldr	r1, [pc, #140]	; (8012ef4 <tcp_receive+0x744>)
 8012e66:	4820      	ldr	r0, [pc, #128]	; (8012ee8 <tcp_receive+0x738>)
 8012e68:	f007 faf6 	bl	801a458 <iprintf>
 8012e6c:	e014      	b.n	8012e98 <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8012e6e:	4b1b      	ldr	r3, [pc, #108]	; (8012edc <tcp_receive+0x72c>)
 8012e70:	685b      	ldr	r3, [r3, #4]
 8012e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e74:	b292      	uxth	r2, r2
 8012e76:	4252      	negs	r2, r2
 8012e78:	b292      	uxth	r2, r2
 8012e7a:	b212      	sxth	r2, r2
 8012e7c:	4611      	mov	r1, r2
 8012e7e:	4618      	mov	r0, r3
 8012e80:	f7fc fc2c 	bl	800f6dc <pbuf_header>
 8012e84:	4603      	mov	r3, r0
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d006      	beq.n	8012e98 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8012e8a:	4b15      	ldr	r3, [pc, #84]	; (8012ee0 <tcp_receive+0x730>)
 8012e8c:	f240 5251 	movw	r2, #1361	; 0x551
 8012e90:	4918      	ldr	r1, [pc, #96]	; (8012ef4 <tcp_receive+0x744>)
 8012e92:	4815      	ldr	r0, [pc, #84]	; (8012ee8 <tcp_receive+0x738>)
 8012e94:	f007 fae0 	bl	801a458 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8012e98:	4b10      	ldr	r3, [pc, #64]	; (8012edc <tcp_receive+0x72c>)
 8012e9a:	891a      	ldrh	r2, [r3, #8]
 8012e9c:	4b0e      	ldr	r3, [pc, #56]	; (8012ed8 <tcp_receive+0x728>)
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	b299      	uxth	r1, r3
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ea6:	b29b      	uxth	r3, r3
 8012ea8:	1acb      	subs	r3, r1, r3
 8012eaa:	b29b      	uxth	r3, r3
 8012eac:	4413      	add	r3, r2
 8012eae:	b29a      	uxth	r2, r3
 8012eb0:	4b0a      	ldr	r3, [pc, #40]	; (8012edc <tcp_receive+0x72c>)
 8012eb2:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eb8:	4a07      	ldr	r2, [pc, #28]	; (8012ed8 <tcp_receive+0x728>)
 8012eba:	6013      	str	r3, [r2, #0]
 8012ebc:	4b07      	ldr	r3, [pc, #28]	; (8012edc <tcp_receive+0x72c>)
 8012ebe:	68db      	ldr	r3, [r3, #12]
 8012ec0:	4a05      	ldr	r2, [pc, #20]	; (8012ed8 <tcp_receive+0x728>)
 8012ec2:	6812      	ldr	r2, [r2, #0]
 8012ec4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012ec6:	e025      	b.n	8012f14 <tcp_receive+0x764>
 8012ec8:	2000ebfc 	.word	0x2000ebfc
 8012ecc:	2000ec00 	.word	0x2000ec00
 8012ed0:	2000ebc0 	.word	0x2000ebc0
 8012ed4:	2000ec02 	.word	0x2000ec02
 8012ed8:	2000ebf8 	.word	0x2000ebf8
 8012edc:	2000ebd8 	.word	0x2000ebd8
 8012ee0:	0801d038 	.word	0x0801d038
 8012ee4:	0801d2c0 	.word	0x0801d2c0
 8012ee8:	0801d07c 	.word	0x0801d07c
 8012eec:	0801d2d0 	.word	0x0801d2d0
 8012ef0:	0801d2e0 	.word	0x0801d2e0
 8012ef4:	0801d2f0 	.word	0x0801d2f0
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012ef8:	4b87      	ldr	r3, [pc, #540]	; (8013118 <tcp_receive+0x968>)
 8012efa:	681a      	ldr	r2, [r3, #0]
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f00:	1ad3      	subs	r3, r2, r3
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	da06      	bge.n	8012f14 <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	7e9b      	ldrb	r3, [r3, #26]
 8012f0a:	f043 0302 	orr.w	r3, r3, #2
 8012f0e:	b2da      	uxtb	r2, r3
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012f14:	4b80      	ldr	r3, [pc, #512]	; (8013118 <tcp_receive+0x968>)
 8012f16:	681a      	ldr	r2, [r3, #0]
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f1c:	1ad3      	subs	r3, r2, r3
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	f2c0 8410 	blt.w	8013744 <tcp_receive+0xf94>
 8012f24:	4b7c      	ldr	r3, [pc, #496]	; (8013118 <tcp_receive+0x968>)
 8012f26:	681a      	ldr	r2, [r3, #0]
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f2c:	6879      	ldr	r1, [r7, #4]
 8012f2e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012f30:	440b      	add	r3, r1
 8012f32:	1ad3      	subs	r3, r2, r3
 8012f34:	3301      	adds	r3, #1
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	f300 8404 	bgt.w	8013744 <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012f40:	4b75      	ldr	r3, [pc, #468]	; (8013118 <tcp_receive+0x968>)
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	429a      	cmp	r2, r3
 8012f46:	f040 8287 	bne.w	8013458 <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012f4a:	4b74      	ldr	r3, [pc, #464]	; (801311c <tcp_receive+0x96c>)
 8012f4c:	891c      	ldrh	r4, [r3, #8]
 8012f4e:	4b73      	ldr	r3, [pc, #460]	; (801311c <tcp_receive+0x96c>)
 8012f50:	68db      	ldr	r3, [r3, #12]
 8012f52:	899b      	ldrh	r3, [r3, #12]
 8012f54:	b29b      	uxth	r3, r3
 8012f56:	4618      	mov	r0, r3
 8012f58:	f7fb f9e4 	bl	800e324 <lwip_htons>
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	f003 0303 	and.w	r3, r3, #3
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d001      	beq.n	8012f6a <tcp_receive+0x7ba>
 8012f66:	2301      	movs	r3, #1
 8012f68:	e000      	b.n	8012f6c <tcp_receive+0x7bc>
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	4423      	add	r3, r4
 8012f6e:	b29a      	uxth	r2, r3
 8012f70:	4b6b      	ldr	r3, [pc, #428]	; (8013120 <tcp_receive+0x970>)
 8012f72:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012f78:	4b69      	ldr	r3, [pc, #420]	; (8013120 <tcp_receive+0x970>)
 8012f7a:	881b      	ldrh	r3, [r3, #0]
 8012f7c:	429a      	cmp	r2, r3
 8012f7e:	d26e      	bcs.n	801305e <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012f80:	4b66      	ldr	r3, [pc, #408]	; (801311c <tcp_receive+0x96c>)
 8012f82:	68db      	ldr	r3, [r3, #12]
 8012f84:	899b      	ldrh	r3, [r3, #12]
 8012f86:	b29b      	uxth	r3, r3
 8012f88:	4618      	mov	r0, r3
 8012f8a:	f7fb f9cb 	bl	800e324 <lwip_htons>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	f003 0301 	and.w	r3, r3, #1
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d01b      	beq.n	8012fd0 <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012f98:	4b60      	ldr	r3, [pc, #384]	; (801311c <tcp_receive+0x96c>)
 8012f9a:	68db      	ldr	r3, [r3, #12]
 8012f9c:	899b      	ldrh	r3, [r3, #12]
 8012f9e:	b29b      	uxth	r3, r3
 8012fa0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012fa4:	b29c      	uxth	r4, r3
 8012fa6:	4b5d      	ldr	r3, [pc, #372]	; (801311c <tcp_receive+0x96c>)
 8012fa8:	68db      	ldr	r3, [r3, #12]
 8012faa:	899b      	ldrh	r3, [r3, #12]
 8012fac:	b29b      	uxth	r3, r3
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f7fb f9b8 	bl	800e324 <lwip_htons>
 8012fb4:	4603      	mov	r3, r0
 8012fb6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012fba:	b29b      	uxth	r3, r3
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	f7fb f9b1 	bl	800e324 <lwip_htons>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	461a      	mov	r2, r3
 8012fc6:	4b55      	ldr	r3, [pc, #340]	; (801311c <tcp_receive+0x96c>)
 8012fc8:	68db      	ldr	r3, [r3, #12]
 8012fca:	4322      	orrs	r2, r4
 8012fcc:	b292      	uxth	r2, r2
 8012fce:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012fd4:	4b51      	ldr	r3, [pc, #324]	; (801311c <tcp_receive+0x96c>)
 8012fd6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012fd8:	4b50      	ldr	r3, [pc, #320]	; (801311c <tcp_receive+0x96c>)
 8012fda:	68db      	ldr	r3, [r3, #12]
 8012fdc:	899b      	ldrh	r3, [r3, #12]
 8012fde:	b29b      	uxth	r3, r3
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	f7fb f99f 	bl	800e324 <lwip_htons>
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	f003 0302 	and.w	r3, r3, #2
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d005      	beq.n	8012ffc <tcp_receive+0x84c>
            inseg.len -= 1;
 8012ff0:	4b4a      	ldr	r3, [pc, #296]	; (801311c <tcp_receive+0x96c>)
 8012ff2:	891b      	ldrh	r3, [r3, #8]
 8012ff4:	3b01      	subs	r3, #1
 8012ff6:	b29a      	uxth	r2, r3
 8012ff8:	4b48      	ldr	r3, [pc, #288]	; (801311c <tcp_receive+0x96c>)
 8012ffa:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012ffc:	4b47      	ldr	r3, [pc, #284]	; (801311c <tcp_receive+0x96c>)
 8012ffe:	685b      	ldr	r3, [r3, #4]
 8013000:	4a46      	ldr	r2, [pc, #280]	; (801311c <tcp_receive+0x96c>)
 8013002:	8912      	ldrh	r2, [r2, #8]
 8013004:	4611      	mov	r1, r2
 8013006:	4618      	mov	r0, r3
 8013008:	f7fc fa18 	bl	800f43c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801300c:	4b43      	ldr	r3, [pc, #268]	; (801311c <tcp_receive+0x96c>)
 801300e:	891c      	ldrh	r4, [r3, #8]
 8013010:	4b42      	ldr	r3, [pc, #264]	; (801311c <tcp_receive+0x96c>)
 8013012:	68db      	ldr	r3, [r3, #12]
 8013014:	899b      	ldrh	r3, [r3, #12]
 8013016:	b29b      	uxth	r3, r3
 8013018:	4618      	mov	r0, r3
 801301a:	f7fb f983 	bl	800e324 <lwip_htons>
 801301e:	4603      	mov	r3, r0
 8013020:	f003 0303 	and.w	r3, r3, #3
 8013024:	2b00      	cmp	r3, #0
 8013026:	d001      	beq.n	801302c <tcp_receive+0x87c>
 8013028:	2301      	movs	r3, #1
 801302a:	e000      	b.n	801302e <tcp_receive+0x87e>
 801302c:	2300      	movs	r3, #0
 801302e:	4423      	add	r3, r4
 8013030:	b29a      	uxth	r2, r3
 8013032:	4b3b      	ldr	r3, [pc, #236]	; (8013120 <tcp_receive+0x970>)
 8013034:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013036:	4b3a      	ldr	r3, [pc, #232]	; (8013120 <tcp_receive+0x970>)
 8013038:	881b      	ldrh	r3, [r3, #0]
 801303a:	461a      	mov	r2, r3
 801303c:	4b36      	ldr	r3, [pc, #216]	; (8013118 <tcp_receive+0x968>)
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	441a      	add	r2, r3
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013046:	6879      	ldr	r1, [r7, #4]
 8013048:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801304a:	440b      	add	r3, r1
 801304c:	429a      	cmp	r2, r3
 801304e:	d006      	beq.n	801305e <tcp_receive+0x8ae>
 8013050:	4b34      	ldr	r3, [pc, #208]	; (8013124 <tcp_receive+0x974>)
 8013052:	f240 527e 	movw	r2, #1406	; 0x57e
 8013056:	4934      	ldr	r1, [pc, #208]	; (8013128 <tcp_receive+0x978>)
 8013058:	4834      	ldr	r0, [pc, #208]	; (801312c <tcp_receive+0x97c>)
 801305a:	f007 f9fd 	bl	801a458 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013062:	2b00      	cmp	r3, #0
 8013064:	f000 80e1 	beq.w	801322a <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013068:	4b2c      	ldr	r3, [pc, #176]	; (801311c <tcp_receive+0x96c>)
 801306a:	68db      	ldr	r3, [r3, #12]
 801306c:	899b      	ldrh	r3, [r3, #12]
 801306e:	b29b      	uxth	r3, r3
 8013070:	4618      	mov	r0, r3
 8013072:	f7fb f957 	bl	800e324 <lwip_htons>
 8013076:	4603      	mov	r3, r0
 8013078:	f003 0301 	and.w	r3, r3, #1
 801307c:	2b00      	cmp	r3, #0
 801307e:	d010      	beq.n	80130a2 <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013080:	e00a      	b.n	8013098 <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013086:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801308c:	681a      	ldr	r2, [r3, #0]
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8013092:	68b8      	ldr	r0, [r7, #8]
 8013094:	f7fd fe76 	bl	8010d84 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801309c:	2b00      	cmp	r3, #0
 801309e:	d1f0      	bne.n	8013082 <tcp_receive+0x8d2>
 80130a0:	e0c3      	b.n	801322a <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130a6:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80130a8:	e04f      	b.n	801314a <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80130aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130ac:	68db      	ldr	r3, [r3, #12]
 80130ae:	899b      	ldrh	r3, [r3, #12]
 80130b0:	b29b      	uxth	r3, r3
 80130b2:	4618      	mov	r0, r3
 80130b4:	f7fb f936 	bl	800e324 <lwip_htons>
 80130b8:	4603      	mov	r3, r0
 80130ba:	f003 0301 	and.w	r3, r3, #1
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d03b      	beq.n	801313a <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80130c2:	4b16      	ldr	r3, [pc, #88]	; (801311c <tcp_receive+0x96c>)
 80130c4:	68db      	ldr	r3, [r3, #12]
 80130c6:	899b      	ldrh	r3, [r3, #12]
 80130c8:	b29b      	uxth	r3, r3
 80130ca:	4618      	mov	r0, r3
 80130cc:	f7fb f92a 	bl	800e324 <lwip_htons>
 80130d0:	4603      	mov	r3, r0
 80130d2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d12f      	bne.n	801313a <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80130da:	4b10      	ldr	r3, [pc, #64]	; (801311c <tcp_receive+0x96c>)
 80130dc:	68db      	ldr	r3, [r3, #12]
 80130de:	899b      	ldrh	r3, [r3, #12]
 80130e0:	b29c      	uxth	r4, r3
 80130e2:	2001      	movs	r0, #1
 80130e4:	f7fb f91e 	bl	800e324 <lwip_htons>
 80130e8:	4603      	mov	r3, r0
 80130ea:	461a      	mov	r2, r3
 80130ec:	4b0b      	ldr	r3, [pc, #44]	; (801311c <tcp_receive+0x96c>)
 80130ee:	68db      	ldr	r3, [r3, #12]
 80130f0:	4322      	orrs	r2, r4
 80130f2:	b292      	uxth	r2, r2
 80130f4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80130f6:	4b09      	ldr	r3, [pc, #36]	; (801311c <tcp_receive+0x96c>)
 80130f8:	891c      	ldrh	r4, [r3, #8]
 80130fa:	4b08      	ldr	r3, [pc, #32]	; (801311c <tcp_receive+0x96c>)
 80130fc:	68db      	ldr	r3, [r3, #12]
 80130fe:	899b      	ldrh	r3, [r3, #12]
 8013100:	b29b      	uxth	r3, r3
 8013102:	4618      	mov	r0, r3
 8013104:	f7fb f90e 	bl	800e324 <lwip_htons>
 8013108:	4603      	mov	r3, r0
 801310a:	f003 0303 	and.w	r3, r3, #3
 801310e:	2b00      	cmp	r3, #0
 8013110:	d00e      	beq.n	8013130 <tcp_receive+0x980>
 8013112:	2301      	movs	r3, #1
 8013114:	e00d      	b.n	8013132 <tcp_receive+0x982>
 8013116:	bf00      	nop
 8013118:	2000ebf8 	.word	0x2000ebf8
 801311c:	2000ebd8 	.word	0x2000ebd8
 8013120:	2000ec02 	.word	0x2000ec02
 8013124:	0801d038 	.word	0x0801d038
 8013128:	0801d304 	.word	0x0801d304
 801312c:	0801d07c 	.word	0x0801d07c
 8013130:	2300      	movs	r3, #0
 8013132:	4423      	add	r3, r4
 8013134:	b29a      	uxth	r2, r3
 8013136:	4b95      	ldr	r3, [pc, #596]	; (801338c <tcp_receive+0xbdc>)
 8013138:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 801313a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801313c:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 801313e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8013144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013146:	f7fd fe1d 	bl	8010d84 <tcp_seg_free>
            while (next &&
 801314a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801314c:	2b00      	cmp	r3, #0
 801314e:	d00e      	beq.n	801316e <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013150:	4b8e      	ldr	r3, [pc, #568]	; (801338c <tcp_receive+0xbdc>)
 8013152:	881b      	ldrh	r3, [r3, #0]
 8013154:	461a      	mov	r2, r3
 8013156:	4b8e      	ldr	r3, [pc, #568]	; (8013390 <tcp_receive+0xbe0>)
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	441a      	add	r2, r3
 801315c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801315e:	68db      	ldr	r3, [r3, #12]
 8013160:	685b      	ldr	r3, [r3, #4]
 8013162:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013164:	8909      	ldrh	r1, [r1, #8]
 8013166:	440b      	add	r3, r1
 8013168:	1ad3      	subs	r3, r2, r3
            while (next &&
 801316a:	2b00      	cmp	r3, #0
 801316c:	da9d      	bge.n	80130aa <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801316e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013170:	2b00      	cmp	r3, #0
 8013172:	d057      	beq.n	8013224 <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 8013174:	4b85      	ldr	r3, [pc, #532]	; (801338c <tcp_receive+0xbdc>)
 8013176:	881b      	ldrh	r3, [r3, #0]
 8013178:	461a      	mov	r2, r3
 801317a:	4b85      	ldr	r3, [pc, #532]	; (8013390 <tcp_receive+0xbe0>)
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	441a      	add	r2, r3
 8013180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013182:	68db      	ldr	r3, [r3, #12]
 8013184:	685b      	ldr	r3, [r3, #4]
 8013186:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013188:	2b00      	cmp	r3, #0
 801318a:	dd4b      	ble.n	8013224 <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801318c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801318e:	68db      	ldr	r3, [r3, #12]
 8013190:	685b      	ldr	r3, [r3, #4]
 8013192:	b29a      	uxth	r2, r3
 8013194:	4b7e      	ldr	r3, [pc, #504]	; (8013390 <tcp_receive+0xbe0>)
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	b29b      	uxth	r3, r3
 801319a:	1ad3      	subs	r3, r2, r3
 801319c:	b29a      	uxth	r2, r3
 801319e:	4b7d      	ldr	r3, [pc, #500]	; (8013394 <tcp_receive+0xbe4>)
 80131a0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80131a2:	4b7c      	ldr	r3, [pc, #496]	; (8013394 <tcp_receive+0xbe4>)
 80131a4:	68db      	ldr	r3, [r3, #12]
 80131a6:	899b      	ldrh	r3, [r3, #12]
 80131a8:	b29b      	uxth	r3, r3
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7fb f8ba 	bl	800e324 <lwip_htons>
 80131b0:	4603      	mov	r3, r0
 80131b2:	f003 0302 	and.w	r3, r3, #2
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d005      	beq.n	80131c6 <tcp_receive+0xa16>
                inseg.len -= 1;
 80131ba:	4b76      	ldr	r3, [pc, #472]	; (8013394 <tcp_receive+0xbe4>)
 80131bc:	891b      	ldrh	r3, [r3, #8]
 80131be:	3b01      	subs	r3, #1
 80131c0:	b29a      	uxth	r2, r3
 80131c2:	4b74      	ldr	r3, [pc, #464]	; (8013394 <tcp_receive+0xbe4>)
 80131c4:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80131c6:	4b73      	ldr	r3, [pc, #460]	; (8013394 <tcp_receive+0xbe4>)
 80131c8:	685b      	ldr	r3, [r3, #4]
 80131ca:	4a72      	ldr	r2, [pc, #456]	; (8013394 <tcp_receive+0xbe4>)
 80131cc:	8912      	ldrh	r2, [r2, #8]
 80131ce:	4611      	mov	r1, r2
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7fc f933 	bl	800f43c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80131d6:	4b6f      	ldr	r3, [pc, #444]	; (8013394 <tcp_receive+0xbe4>)
 80131d8:	891c      	ldrh	r4, [r3, #8]
 80131da:	4b6e      	ldr	r3, [pc, #440]	; (8013394 <tcp_receive+0xbe4>)
 80131dc:	68db      	ldr	r3, [r3, #12]
 80131de:	899b      	ldrh	r3, [r3, #12]
 80131e0:	b29b      	uxth	r3, r3
 80131e2:	4618      	mov	r0, r3
 80131e4:	f7fb f89e 	bl	800e324 <lwip_htons>
 80131e8:	4603      	mov	r3, r0
 80131ea:	f003 0303 	and.w	r3, r3, #3
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d001      	beq.n	80131f6 <tcp_receive+0xa46>
 80131f2:	2301      	movs	r3, #1
 80131f4:	e000      	b.n	80131f8 <tcp_receive+0xa48>
 80131f6:	2300      	movs	r3, #0
 80131f8:	4423      	add	r3, r4
 80131fa:	b29a      	uxth	r2, r3
 80131fc:	4b63      	ldr	r3, [pc, #396]	; (801338c <tcp_receive+0xbdc>)
 80131fe:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013200:	4b62      	ldr	r3, [pc, #392]	; (801338c <tcp_receive+0xbdc>)
 8013202:	881b      	ldrh	r3, [r3, #0]
 8013204:	461a      	mov	r2, r3
 8013206:	4b62      	ldr	r3, [pc, #392]	; (8013390 <tcp_receive+0xbe0>)
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	441a      	add	r2, r3
 801320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801320e:	68db      	ldr	r3, [r3, #12]
 8013210:	685b      	ldr	r3, [r3, #4]
 8013212:	429a      	cmp	r2, r3
 8013214:	d006      	beq.n	8013224 <tcp_receive+0xa74>
 8013216:	4b60      	ldr	r3, [pc, #384]	; (8013398 <tcp_receive+0xbe8>)
 8013218:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801321c:	495f      	ldr	r1, [pc, #380]	; (801339c <tcp_receive+0xbec>)
 801321e:	4860      	ldr	r0, [pc, #384]	; (80133a0 <tcp_receive+0xbf0>)
 8013220:	f007 f91a 	bl	801a458 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013228:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801322a:	4b58      	ldr	r3, [pc, #352]	; (801338c <tcp_receive+0xbdc>)
 801322c:	881b      	ldrh	r3, [r3, #0]
 801322e:	461a      	mov	r2, r3
 8013230:	4b57      	ldr	r3, [pc, #348]	; (8013390 <tcp_receive+0xbe0>)
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	441a      	add	r2, r3
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801323e:	4b53      	ldr	r3, [pc, #332]	; (801338c <tcp_receive+0xbdc>)
 8013240:	881b      	ldrh	r3, [r3, #0]
 8013242:	429a      	cmp	r2, r3
 8013244:	d206      	bcs.n	8013254 <tcp_receive+0xaa4>
 8013246:	4b54      	ldr	r3, [pc, #336]	; (8013398 <tcp_receive+0xbe8>)
 8013248:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801324c:	4955      	ldr	r1, [pc, #340]	; (80133a4 <tcp_receive+0xbf4>)
 801324e:	4854      	ldr	r0, [pc, #336]	; (80133a0 <tcp_receive+0xbf0>)
 8013250:	f007 f902 	bl	801a458 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013258:	4b4c      	ldr	r3, [pc, #304]	; (801338c <tcp_receive+0xbdc>)
 801325a:	881b      	ldrh	r3, [r3, #0]
 801325c:	1ad3      	subs	r3, r2, r3
 801325e:	b29a      	uxth	r2, r3
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8013264:	6878      	ldr	r0, [r7, #4]
 8013266:	f7fd f8fd 	bl	8010464 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801326a:	4b4a      	ldr	r3, [pc, #296]	; (8013394 <tcp_receive+0xbe4>)
 801326c:	685b      	ldr	r3, [r3, #4]
 801326e:	891b      	ldrh	r3, [r3, #8]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d006      	beq.n	8013282 <tcp_receive+0xad2>
          recv_data = inseg.p;
 8013274:	4b47      	ldr	r3, [pc, #284]	; (8013394 <tcp_receive+0xbe4>)
 8013276:	685b      	ldr	r3, [r3, #4]
 8013278:	4a4b      	ldr	r2, [pc, #300]	; (80133a8 <tcp_receive+0xbf8>)
 801327a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801327c:	4b45      	ldr	r3, [pc, #276]	; (8013394 <tcp_receive+0xbe4>)
 801327e:	2200      	movs	r2, #0
 8013280:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013282:	4b44      	ldr	r3, [pc, #272]	; (8013394 <tcp_receive+0xbe4>)
 8013284:	68db      	ldr	r3, [r3, #12]
 8013286:	899b      	ldrh	r3, [r3, #12]
 8013288:	b29b      	uxth	r3, r3
 801328a:	4618      	mov	r0, r3
 801328c:	f7fb f84a 	bl	800e324 <lwip_htons>
 8013290:	4603      	mov	r3, r0
 8013292:	f003 0301 	and.w	r3, r3, #1
 8013296:	2b00      	cmp	r3, #0
 8013298:	f000 80b4 	beq.w	8013404 <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801329c:	4b43      	ldr	r3, [pc, #268]	; (80133ac <tcp_receive+0xbfc>)
 801329e:	781b      	ldrb	r3, [r3, #0]
 80132a0:	f043 0320 	orr.w	r3, r3, #32
 80132a4:	b2da      	uxtb	r2, r3
 80132a6:	4b41      	ldr	r3, [pc, #260]	; (80133ac <tcp_receive+0xbfc>)
 80132a8:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80132aa:	e0ab      	b.n	8013404 <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132b0:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132b6:	68db      	ldr	r3, [r3, #12]
 80132b8:	685b      	ldr	r3, [r3, #4]
 80132ba:	4a35      	ldr	r2, [pc, #212]	; (8013390 <tcp_receive+0xbe0>)
 80132bc:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	891b      	ldrh	r3, [r3, #8]
 80132c2:	461c      	mov	r4, r3
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	68db      	ldr	r3, [r3, #12]
 80132c8:	899b      	ldrh	r3, [r3, #12]
 80132ca:	b29b      	uxth	r3, r3
 80132cc:	4618      	mov	r0, r3
 80132ce:	f7fb f829 	bl	800e324 <lwip_htons>
 80132d2:	4603      	mov	r3, r0
 80132d4:	f003 0303 	and.w	r3, r3, #3
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d001      	beq.n	80132e0 <tcp_receive+0xb30>
 80132dc:	2301      	movs	r3, #1
 80132de:	e000      	b.n	80132e2 <tcp_receive+0xb32>
 80132e0:	2300      	movs	r3, #0
 80132e2:	191a      	adds	r2, r3, r4
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132e8:	441a      	add	r2, r3
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80132f2:	461c      	mov	r4, r3
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	891b      	ldrh	r3, [r3, #8]
 80132f8:	461d      	mov	r5, r3
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	68db      	ldr	r3, [r3, #12]
 80132fe:	899b      	ldrh	r3, [r3, #12]
 8013300:	b29b      	uxth	r3, r3
 8013302:	4618      	mov	r0, r3
 8013304:	f7fb f80e 	bl	800e324 <lwip_htons>
 8013308:	4603      	mov	r3, r0
 801330a:	f003 0303 	and.w	r3, r3, #3
 801330e:	2b00      	cmp	r3, #0
 8013310:	d001      	beq.n	8013316 <tcp_receive+0xb66>
 8013312:	2301      	movs	r3, #1
 8013314:	e000      	b.n	8013318 <tcp_receive+0xb68>
 8013316:	2300      	movs	r3, #0
 8013318:	442b      	add	r3, r5
 801331a:	429c      	cmp	r4, r3
 801331c:	d206      	bcs.n	801332c <tcp_receive+0xb7c>
 801331e:	4b1e      	ldr	r3, [pc, #120]	; (8013398 <tcp_receive+0xbe8>)
 8013320:	f240 52dd 	movw	r2, #1501	; 0x5dd
 8013324:	4922      	ldr	r1, [pc, #136]	; (80133b0 <tcp_receive+0xc00>)
 8013326:	481e      	ldr	r0, [pc, #120]	; (80133a0 <tcp_receive+0xbf0>)
 8013328:	f007 f896 	bl	801a458 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	891b      	ldrh	r3, [r3, #8]
 8013330:	461c      	mov	r4, r3
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	68db      	ldr	r3, [r3, #12]
 8013336:	899b      	ldrh	r3, [r3, #12]
 8013338:	b29b      	uxth	r3, r3
 801333a:	4618      	mov	r0, r3
 801333c:	f7fa fff2 	bl	800e324 <lwip_htons>
 8013340:	4603      	mov	r3, r0
 8013342:	f003 0303 	and.w	r3, r3, #3
 8013346:	2b00      	cmp	r3, #0
 8013348:	d001      	beq.n	801334e <tcp_receive+0xb9e>
 801334a:	2301      	movs	r3, #1
 801334c:	e000      	b.n	8013350 <tcp_receive+0xba0>
 801334e:	2300      	movs	r3, #0
 8013350:	1919      	adds	r1, r3, r4
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013356:	b28b      	uxth	r3, r1
 8013358:	1ad3      	subs	r3, r2, r3
 801335a:	b29a      	uxth	r2, r3
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8013360:	6878      	ldr	r0, [r7, #4]
 8013362:	f7fd f87f 	bl	8010464 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	685b      	ldr	r3, [r3, #4]
 801336a:	891b      	ldrh	r3, [r3, #8]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d028      	beq.n	80133c2 <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8013370:	4b0d      	ldr	r3, [pc, #52]	; (80133a8 <tcp_receive+0xbf8>)
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d01d      	beq.n	80133b4 <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 8013378:	4b0b      	ldr	r3, [pc, #44]	; (80133a8 <tcp_receive+0xbf8>)
 801337a:	681a      	ldr	r2, [r3, #0]
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	685b      	ldr	r3, [r3, #4]
 8013380:	4619      	mov	r1, r3
 8013382:	4610      	mov	r0, r2
 8013384:	f7fc faa6 	bl	800f8d4 <pbuf_cat>
 8013388:	e018      	b.n	80133bc <tcp_receive+0xc0c>
 801338a:	bf00      	nop
 801338c:	2000ec02 	.word	0x2000ec02
 8013390:	2000ebf8 	.word	0x2000ebf8
 8013394:	2000ebd8 	.word	0x2000ebd8
 8013398:	0801d038 	.word	0x0801d038
 801339c:	0801d33c 	.word	0x0801d33c
 80133a0:	0801d07c 	.word	0x0801d07c
 80133a4:	0801d378 	.word	0x0801d378
 80133a8:	2000ec08 	.word	0x2000ec08
 80133ac:	2000ec05 	.word	0x2000ec05
 80133b0:	0801d398 	.word	0x0801d398
            } else {
              recv_data = cseg->p;
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	685b      	ldr	r3, [r3, #4]
 80133b8:	4a71      	ldr	r2, [pc, #452]	; (8013580 <tcp_receive+0xdd0>)
 80133ba:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	2200      	movs	r2, #0
 80133c0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	68db      	ldr	r3, [r3, #12]
 80133c6:	899b      	ldrh	r3, [r3, #12]
 80133c8:	b29b      	uxth	r3, r3
 80133ca:	4618      	mov	r0, r3
 80133cc:	f7fa ffaa 	bl	800e324 <lwip_htons>
 80133d0:	4603      	mov	r3, r0
 80133d2:	f003 0301 	and.w	r3, r3, #1
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d00d      	beq.n	80133f6 <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80133da:	4b6a      	ldr	r3, [pc, #424]	; (8013584 <tcp_receive+0xdd4>)
 80133dc:	781b      	ldrb	r3, [r3, #0]
 80133de:	f043 0320 	orr.w	r3, r3, #32
 80133e2:	b2da      	uxtb	r2, r3
 80133e4:	4b67      	ldr	r3, [pc, #412]	; (8013584 <tcp_receive+0xdd4>)
 80133e6:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	7d1b      	ldrb	r3, [r3, #20]
 80133ec:	2b04      	cmp	r3, #4
 80133ee:	d102      	bne.n	80133f6 <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	2207      	movs	r2, #7
 80133f4:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	681a      	ldr	r2, [r3, #0]
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 80133fe:	68f8      	ldr	r0, [r7, #12]
 8013400:	f7fd fcc0 	bl	8010d84 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013408:	2b00      	cmp	r3, #0
 801340a:	d008      	beq.n	801341e <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013410:	68db      	ldr	r3, [r3, #12]
 8013412:	685a      	ldr	r2, [r3, #4]
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8013418:	429a      	cmp	r2, r3
 801341a:	f43f af47 	beq.w	80132ac <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	7e9b      	ldrb	r3, [r3, #26]
 8013422:	f003 0301 	and.w	r3, r3, #1
 8013426:	2b00      	cmp	r3, #0
 8013428:	d00e      	beq.n	8013448 <tcp_receive+0xc98>
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	7e9b      	ldrb	r3, [r3, #26]
 801342e:	f023 0301 	bic.w	r3, r3, #1
 8013432:	b2da      	uxtb	r2, r3
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	769a      	strb	r2, [r3, #26]
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	7e9b      	ldrb	r3, [r3, #26]
 801343c:	f043 0302 	orr.w	r3, r3, #2
 8013440:	b2da      	uxtb	r2, r3
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013446:	e181      	b.n	801374c <tcp_receive+0xf9c>
        tcp_ack(pcb);
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	7e9b      	ldrb	r3, [r3, #26]
 801344c:	f043 0301 	orr.w	r3, r3, #1
 8013450:	b2da      	uxtb	r2, r3
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013456:	e179      	b.n	801374c <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8013458:	6878      	ldr	r0, [r7, #4]
 801345a:	f001 f8c3 	bl	80145e4 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013462:	2b00      	cmp	r3, #0
 8013464:	d106      	bne.n	8013474 <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8013466:	4848      	ldr	r0, [pc, #288]	; (8013588 <tcp_receive+0xdd8>)
 8013468:	f7fd fca4 	bl	8010db4 <tcp_seg_copy>
 801346c:	4602      	mov	r2, r0
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 8013472:	e16b      	b.n	801374c <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8013474:	2300      	movs	r3, #0
 8013476:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801347c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801347e:	e150      	b.n	8013722 <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 8013480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013482:	68db      	ldr	r3, [r3, #12]
 8013484:	685a      	ldr	r2, [r3, #4]
 8013486:	4b41      	ldr	r3, [pc, #260]	; (801358c <tcp_receive+0xddc>)
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	429a      	cmp	r2, r3
 801348c:	d11d      	bne.n	80134ca <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801348e:	4b3e      	ldr	r3, [pc, #248]	; (8013588 <tcp_receive+0xdd8>)
 8013490:	891a      	ldrh	r2, [r3, #8]
 8013492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013494:	891b      	ldrh	r3, [r3, #8]
 8013496:	429a      	cmp	r2, r3
 8013498:	f240 8148 	bls.w	801372c <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 801349c:	483a      	ldr	r0, [pc, #232]	; (8013588 <tcp_receive+0xdd8>)
 801349e:	f7fd fc89 	bl	8010db4 <tcp_seg_copy>
 80134a2:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	f000 8142 	beq.w	8013730 <tcp_receive+0xf80>
                  if (prev != NULL) {
 80134ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d003      	beq.n	80134ba <tcp_receive+0xd0a>
                    prev->next = cseg;
 80134b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134b4:	68fa      	ldr	r2, [r7, #12]
 80134b6:	601a      	str	r2, [r3, #0]
 80134b8:	e002      	b.n	80134c0 <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	68fa      	ldr	r2, [r7, #12]
 80134be:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 80134c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80134c2:	68f8      	ldr	r0, [r7, #12]
 80134c4:	f7ff f8fe 	bl	80126c4 <tcp_oos_insert_segment>
                }
                break;
 80134c8:	e132      	b.n	8013730 <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80134ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d117      	bne.n	8013500 <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80134d0:	4b2e      	ldr	r3, [pc, #184]	; (801358c <tcp_receive+0xddc>)
 80134d2:	681a      	ldr	r2, [r3, #0]
 80134d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134d6:	68db      	ldr	r3, [r3, #12]
 80134d8:	685b      	ldr	r3, [r3, #4]
 80134da:	1ad3      	subs	r3, r2, r3
 80134dc:	2b00      	cmp	r3, #0
 80134de:	da57      	bge.n	8013590 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 80134e0:	4829      	ldr	r0, [pc, #164]	; (8013588 <tcp_receive+0xdd8>)
 80134e2:	f7fd fc67 	bl	8010db4 <tcp_seg_copy>
 80134e6:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	f000 8122 	beq.w	8013734 <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	68fa      	ldr	r2, [r7, #12]
 80134f4:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 80134f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80134f8:	68f8      	ldr	r0, [r7, #12]
 80134fa:	f7ff f8e3 	bl	80126c4 <tcp_oos_insert_segment>
                  }
                  break;
 80134fe:	e119      	b.n	8013734 <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8013500:	4b22      	ldr	r3, [pc, #136]	; (801358c <tcp_receive+0xddc>)
 8013502:	681a      	ldr	r2, [r3, #0]
 8013504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013506:	68db      	ldr	r3, [r3, #12]
 8013508:	685b      	ldr	r3, [r3, #4]
 801350a:	1ad3      	subs	r3, r2, r3
 801350c:	3b01      	subs	r3, #1
 801350e:	2b00      	cmp	r3, #0
 8013510:	db3e      	blt.n	8013590 <tcp_receive+0xde0>
 8013512:	4b1e      	ldr	r3, [pc, #120]	; (801358c <tcp_receive+0xddc>)
 8013514:	681a      	ldr	r2, [r3, #0]
 8013516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013518:	68db      	ldr	r3, [r3, #12]
 801351a:	685b      	ldr	r3, [r3, #4]
 801351c:	1ad3      	subs	r3, r2, r3
 801351e:	3301      	adds	r3, #1
 8013520:	2b00      	cmp	r3, #0
 8013522:	dc35      	bgt.n	8013590 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8013524:	4818      	ldr	r0, [pc, #96]	; (8013588 <tcp_receive+0xdd8>)
 8013526:	f7fd fc45 	bl	8010db4 <tcp_seg_copy>
 801352a:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	2b00      	cmp	r3, #0
 8013530:	f000 8102 	beq.w	8013738 <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013536:	68db      	ldr	r3, [r3, #12]
 8013538:	685b      	ldr	r3, [r3, #4]
 801353a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801353c:	8912      	ldrh	r2, [r2, #8]
 801353e:	441a      	add	r2, r3
 8013540:	4b12      	ldr	r3, [pc, #72]	; (801358c <tcp_receive+0xddc>)
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	1ad3      	subs	r3, r2, r3
 8013546:	2b00      	cmp	r3, #0
 8013548:	dd12      	ble.n	8013570 <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801354a:	4b10      	ldr	r3, [pc, #64]	; (801358c <tcp_receive+0xddc>)
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	b29a      	uxth	r2, r3
 8013550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013552:	68db      	ldr	r3, [r3, #12]
 8013554:	685b      	ldr	r3, [r3, #4]
 8013556:	b29b      	uxth	r3, r3
 8013558:	1ad3      	subs	r3, r2, r3
 801355a:	b29a      	uxth	r2, r3
 801355c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801355e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013562:	685a      	ldr	r2, [r3, #4]
 8013564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013566:	891b      	ldrh	r3, [r3, #8]
 8013568:	4619      	mov	r1, r3
 801356a:	4610      	mov	r0, r2
 801356c:	f7fb ff66 	bl	800f43c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013572:	68fa      	ldr	r2, [r7, #12]
 8013574:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8013576:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013578:	68f8      	ldr	r0, [r7, #12]
 801357a:	f7ff f8a3 	bl	80126c4 <tcp_oos_insert_segment>
                  }
                  break;
 801357e:	e0db      	b.n	8013738 <tcp_receive+0xf88>
 8013580:	2000ec08 	.word	0x2000ec08
 8013584:	2000ec05 	.word	0x2000ec05
 8013588:	2000ebd8 	.word	0x2000ebd8
 801358c:	2000ebf8 	.word	0x2000ebf8
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	2b00      	cmp	r3, #0
 8013596:	f040 80bf 	bne.w	8013718 <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801359a:	4b7c      	ldr	r3, [pc, #496]	; (801378c <tcp_receive+0xfdc>)
 801359c:	681a      	ldr	r2, [r3, #0]
 801359e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135a0:	68db      	ldr	r3, [r3, #12]
 80135a2:	685b      	ldr	r3, [r3, #4]
 80135a4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	f340 80b6 	ble.w	8013718 <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80135ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ae:	68db      	ldr	r3, [r3, #12]
 80135b0:	899b      	ldrh	r3, [r3, #12]
 80135b2:	b29b      	uxth	r3, r3
 80135b4:	4618      	mov	r0, r3
 80135b6:	f7fa feb5 	bl	800e324 <lwip_htons>
 80135ba:	4603      	mov	r3, r0
 80135bc:	f003 0301 	and.w	r3, r3, #1
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	f040 80bb 	bne.w	801373c <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80135c6:	4872      	ldr	r0, [pc, #456]	; (8013790 <tcp_receive+0xfe0>)
 80135c8:	f7fd fbf4 	bl	8010db4 <tcp_seg_copy>
 80135cc:	4602      	mov	r2, r0
 80135ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135d0:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80135d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	f000 80b2 	beq.w	8013740 <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80135dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135de:	68db      	ldr	r3, [r3, #12]
 80135e0:	685b      	ldr	r3, [r3, #4]
 80135e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135e4:	8912      	ldrh	r2, [r2, #8]
 80135e6:	441a      	add	r2, r3
 80135e8:	4b68      	ldr	r3, [pc, #416]	; (801378c <tcp_receive+0xfdc>)
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	1ad3      	subs	r3, r2, r3
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	dd12      	ble.n	8013618 <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80135f2:	4b66      	ldr	r3, [pc, #408]	; (801378c <tcp_receive+0xfdc>)
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	b29a      	uxth	r2, r3
 80135f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135fa:	68db      	ldr	r3, [r3, #12]
 80135fc:	685b      	ldr	r3, [r3, #4]
 80135fe:	b29b      	uxth	r3, r3
 8013600:	1ad3      	subs	r3, r2, r3
 8013602:	b29a      	uxth	r2, r3
 8013604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013606:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8013608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801360a:	685a      	ldr	r2, [r3, #4]
 801360c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801360e:	891b      	ldrh	r3, [r3, #8]
 8013610:	4619      	mov	r1, r3
 8013612:	4610      	mov	r0, r2
 8013614:	f7fb ff12 	bl	800f43c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8013618:	4b5e      	ldr	r3, [pc, #376]	; (8013794 <tcp_receive+0xfe4>)
 801361a:	881b      	ldrh	r3, [r3, #0]
 801361c:	461a      	mov	r2, r3
 801361e:	4b5b      	ldr	r3, [pc, #364]	; (801378c <tcp_receive+0xfdc>)
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	441a      	add	r2, r3
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013628:	6879      	ldr	r1, [r7, #4]
 801362a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801362c:	440b      	add	r3, r1
 801362e:	1ad3      	subs	r3, r2, r3
 8013630:	2b00      	cmp	r3, #0
 8013632:	f340 8085 	ble.w	8013740 <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	68db      	ldr	r3, [r3, #12]
 801363c:	899b      	ldrh	r3, [r3, #12]
 801363e:	b29b      	uxth	r3, r3
 8013640:	4618      	mov	r0, r3
 8013642:	f7fa fe6f 	bl	800e324 <lwip_htons>
 8013646:	4603      	mov	r3, r0
 8013648:	f003 0301 	and.w	r3, r3, #1
 801364c:	2b00      	cmp	r3, #0
 801364e:	d01e      	beq.n	801368e <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	68db      	ldr	r3, [r3, #12]
 8013656:	899b      	ldrh	r3, [r3, #12]
 8013658:	b29b      	uxth	r3, r3
 801365a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801365e:	b29c      	uxth	r4, r3
 8013660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	68db      	ldr	r3, [r3, #12]
 8013666:	899b      	ldrh	r3, [r3, #12]
 8013668:	b29b      	uxth	r3, r3
 801366a:	4618      	mov	r0, r3
 801366c:	f7fa fe5a 	bl	800e324 <lwip_htons>
 8013670:	4603      	mov	r3, r0
 8013672:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013676:	b29b      	uxth	r3, r3
 8013678:	4618      	mov	r0, r3
 801367a:	f7fa fe53 	bl	800e324 <lwip_htons>
 801367e:	4603      	mov	r3, r0
 8013680:	461a      	mov	r2, r3
 8013682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	68db      	ldr	r3, [r3, #12]
 8013688:	4322      	orrs	r2, r4
 801368a:	b292      	uxth	r2, r2
 801368c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013692:	b29a      	uxth	r2, r3
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013698:	4413      	add	r3, r2
 801369a:	b299      	uxth	r1, r3
 801369c:	4b3b      	ldr	r3, [pc, #236]	; (801378c <tcp_receive+0xfdc>)
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	b29a      	uxth	r2, r3
 80136a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	1a8a      	subs	r2, r1, r2
 80136a8:	b292      	uxth	r2, r2
 80136aa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80136ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	685a      	ldr	r2, [r3, #4]
 80136b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	891b      	ldrh	r3, [r3, #8]
 80136b8:	4619      	mov	r1, r3
 80136ba:	4610      	mov	r0, r2
 80136bc:	f7fb febe 	bl	800f43c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80136c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	891c      	ldrh	r4, [r3, #8]
 80136c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	68db      	ldr	r3, [r3, #12]
 80136cc:	899b      	ldrh	r3, [r3, #12]
 80136ce:	b29b      	uxth	r3, r3
 80136d0:	4618      	mov	r0, r3
 80136d2:	f7fa fe27 	bl	800e324 <lwip_htons>
 80136d6:	4603      	mov	r3, r0
 80136d8:	f003 0303 	and.w	r3, r3, #3
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d001      	beq.n	80136e4 <tcp_receive+0xf34>
 80136e0:	2301      	movs	r3, #1
 80136e2:	e000      	b.n	80136e6 <tcp_receive+0xf36>
 80136e4:	2300      	movs	r3, #0
 80136e6:	4423      	add	r3, r4
 80136e8:	b29a      	uxth	r2, r3
 80136ea:	4b2a      	ldr	r3, [pc, #168]	; (8013794 <tcp_receive+0xfe4>)
 80136ec:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80136ee:	4b29      	ldr	r3, [pc, #164]	; (8013794 <tcp_receive+0xfe4>)
 80136f0:	881b      	ldrh	r3, [r3, #0]
 80136f2:	461a      	mov	r2, r3
 80136f4:	4b25      	ldr	r3, [pc, #148]	; (801378c <tcp_receive+0xfdc>)
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	441a      	add	r2, r3
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136fe:	6879      	ldr	r1, [r7, #4]
 8013700:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013702:	440b      	add	r3, r1
 8013704:	429a      	cmp	r2, r3
 8013706:	d01b      	beq.n	8013740 <tcp_receive+0xf90>
 8013708:	4b23      	ldr	r3, [pc, #140]	; (8013798 <tcp_receive+0xfe8>)
 801370a:	f240 627a 	movw	r2, #1658	; 0x67a
 801370e:	4923      	ldr	r1, [pc, #140]	; (801379c <tcp_receive+0xfec>)
 8013710:	4823      	ldr	r0, [pc, #140]	; (80137a0 <tcp_receive+0xff0>)
 8013712:	f006 fea1 	bl	801a458 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013716:	e013      	b.n	8013740 <tcp_receive+0xf90>
              }
            }
            prev = next;
 8013718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801371a:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801371c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013724:	2b00      	cmp	r3, #0
 8013726:	f47f aeab 	bne.w	8013480 <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 801372a:	e00f      	b.n	801374c <tcp_receive+0xf9c>
                break;
 801372c:	bf00      	nop
 801372e:	e00d      	b.n	801374c <tcp_receive+0xf9c>
                break;
 8013730:	bf00      	nop
 8013732:	e00b      	b.n	801374c <tcp_receive+0xf9c>
                  break;
 8013734:	bf00      	nop
 8013736:	e009      	b.n	801374c <tcp_receive+0xf9c>
                  break;
 8013738:	bf00      	nop
 801373a:	e007      	b.n	801374c <tcp_receive+0xf9c>
                  break;
 801373c:	bf00      	nop
 801373e:	e005      	b.n	801374c <tcp_receive+0xf9c>
                break;
 8013740:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8013742:	e003      	b.n	801374c <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013744:	6878      	ldr	r0, [r7, #4]
 8013746:	f000 ff4d 	bl	80145e4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801374a:	e01a      	b.n	8013782 <tcp_receive+0xfd2>
 801374c:	e019      	b.n	8013782 <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801374e:	4b0f      	ldr	r3, [pc, #60]	; (801378c <tcp_receive+0xfdc>)
 8013750:	681a      	ldr	r2, [r3, #0]
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013756:	1ad3      	subs	r3, r2, r3
 8013758:	2b00      	cmp	r3, #0
 801375a:	db0a      	blt.n	8013772 <tcp_receive+0xfc2>
 801375c:	4b0b      	ldr	r3, [pc, #44]	; (801378c <tcp_receive+0xfdc>)
 801375e:	681a      	ldr	r2, [r3, #0]
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013764:	6879      	ldr	r1, [r7, #4]
 8013766:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013768:	440b      	add	r3, r1
 801376a:	1ad3      	subs	r3, r2, r3
 801376c:	3301      	adds	r3, #1
 801376e:	2b00      	cmp	r3, #0
 8013770:	dd07      	ble.n	8013782 <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	7e9b      	ldrb	r3, [r3, #26]
 8013776:	f043 0302 	orr.w	r3, r3, #2
 801377a:	b2da      	uxtb	r2, r3
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8013780:	e7ff      	b.n	8013782 <tcp_receive+0xfd2>
 8013782:	bf00      	nop
 8013784:	3734      	adds	r7, #52	; 0x34
 8013786:	46bd      	mov	sp, r7
 8013788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801378a:	bf00      	nop
 801378c:	2000ebf8 	.word	0x2000ebf8
 8013790:	2000ebd8 	.word	0x2000ebd8
 8013794:	2000ec02 	.word	0x2000ec02
 8013798:	0801d038 	.word	0x0801d038
 801379c:	0801d304 	.word	0x0801d304
 80137a0:	0801d07c 	.word	0x0801d07c

080137a4 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 80137a4:	b480      	push	{r7}
 80137a6:	b083      	sub	sp, #12
 80137a8:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80137aa:	4b17      	ldr	r3, [pc, #92]	; (8013808 <tcp_getoptbyte+0x64>)
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d005      	beq.n	80137be <tcp_getoptbyte+0x1a>
 80137b2:	4b16      	ldr	r3, [pc, #88]	; (801380c <tcp_getoptbyte+0x68>)
 80137b4:	881a      	ldrh	r2, [r3, #0]
 80137b6:	4b16      	ldr	r3, [pc, #88]	; (8013810 <tcp_getoptbyte+0x6c>)
 80137b8:	881b      	ldrh	r3, [r3, #0]
 80137ba:	429a      	cmp	r2, r3
 80137bc:	d20e      	bcs.n	80137dc <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80137be:	4b15      	ldr	r3, [pc, #84]	; (8013814 <tcp_getoptbyte+0x70>)
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	3314      	adds	r3, #20
 80137c4:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 80137c6:	4b11      	ldr	r3, [pc, #68]	; (801380c <tcp_getoptbyte+0x68>)
 80137c8:	881b      	ldrh	r3, [r3, #0]
 80137ca:	1c5a      	adds	r2, r3, #1
 80137cc:	b291      	uxth	r1, r2
 80137ce:	4a0f      	ldr	r2, [pc, #60]	; (801380c <tcp_getoptbyte+0x68>)
 80137d0:	8011      	strh	r1, [r2, #0]
 80137d2:	461a      	mov	r2, r3
 80137d4:	683b      	ldr	r3, [r7, #0]
 80137d6:	4413      	add	r3, r2
 80137d8:	781b      	ldrb	r3, [r3, #0]
 80137da:	e010      	b.n	80137fe <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80137dc:	4b0b      	ldr	r3, [pc, #44]	; (801380c <tcp_getoptbyte+0x68>)
 80137de:	881b      	ldrh	r3, [r3, #0]
 80137e0:	1c5a      	adds	r2, r3, #1
 80137e2:	b291      	uxth	r1, r2
 80137e4:	4a09      	ldr	r2, [pc, #36]	; (801380c <tcp_getoptbyte+0x68>)
 80137e6:	8011      	strh	r1, [r2, #0]
 80137e8:	b2da      	uxtb	r2, r3
 80137ea:	4b09      	ldr	r3, [pc, #36]	; (8013810 <tcp_getoptbyte+0x6c>)
 80137ec:	881b      	ldrh	r3, [r3, #0]
 80137ee:	b2db      	uxtb	r3, r3
 80137f0:	1ad3      	subs	r3, r2, r3
 80137f2:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 80137f4:	4b04      	ldr	r3, [pc, #16]	; (8013808 <tcp_getoptbyte+0x64>)
 80137f6:	681a      	ldr	r2, [r3, #0]
 80137f8:	79fb      	ldrb	r3, [r7, #7]
 80137fa:	4413      	add	r3, r2
 80137fc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80137fe:	4618      	mov	r0, r3
 8013800:	370c      	adds	r7, #12
 8013802:	46bd      	mov	sp, r7
 8013804:	bc80      	pop	{r7}
 8013806:	4770      	bx	lr
 8013808:	2000ebf0 	.word	0x2000ebf0
 801380c:	2000ebf4 	.word	0x2000ebf4
 8013810:	2000ebee 	.word	0x2000ebee
 8013814:	2000ebe8 	.word	0x2000ebe8

08013818 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013818:	b580      	push	{r7, lr}
 801381a:	b084      	sub	sp, #16
 801381c:	af00      	add	r7, sp, #0
 801381e:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8013820:	4b2e      	ldr	r3, [pc, #184]	; (80138dc <tcp_parseopt+0xc4>)
 8013822:	881b      	ldrh	r3, [r3, #0]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d055      	beq.n	80138d4 <tcp_parseopt+0xbc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013828:	4b2d      	ldr	r3, [pc, #180]	; (80138e0 <tcp_parseopt+0xc8>)
 801382a:	2200      	movs	r2, #0
 801382c:	801a      	strh	r2, [r3, #0]
 801382e:	e045      	b.n	80138bc <tcp_parseopt+0xa4>
      u8_t opt = tcp_getoptbyte();
 8013830:	f7ff ffb8 	bl	80137a4 <tcp_getoptbyte>
 8013834:	4603      	mov	r3, r0
 8013836:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013838:	7bfb      	ldrb	r3, [r7, #15]
 801383a:	2b02      	cmp	r3, #2
 801383c:	d006      	beq.n	801384c <tcp_parseopt+0x34>
 801383e:	2b02      	cmp	r3, #2
 8013840:	dc2b      	bgt.n	801389a <tcp_parseopt+0x82>
 8013842:	2b00      	cmp	r3, #0
 8013844:	d041      	beq.n	80138ca <tcp_parseopt+0xb2>
 8013846:	2b01      	cmp	r3, #1
 8013848:	d127      	bne.n	801389a <tcp_parseopt+0x82>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case LWIP_TCP_OPT_NOP:
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 801384a:	e037      	b.n	80138bc <tcp_parseopt+0xa4>
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801384c:	f7ff ffaa 	bl	80137a4 <tcp_getoptbyte>
 8013850:	4603      	mov	r3, r0
 8013852:	2b04      	cmp	r3, #4
 8013854:	d13b      	bne.n	80138ce <tcp_parseopt+0xb6>
 8013856:	4b22      	ldr	r3, [pc, #136]	; (80138e0 <tcp_parseopt+0xc8>)
 8013858:	881b      	ldrh	r3, [r3, #0]
 801385a:	3301      	adds	r3, #1
 801385c:	4a1f      	ldr	r2, [pc, #124]	; (80138dc <tcp_parseopt+0xc4>)
 801385e:	8812      	ldrh	r2, [r2, #0]
 8013860:	4293      	cmp	r3, r2
 8013862:	da34      	bge.n	80138ce <tcp_parseopt+0xb6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8013864:	f7ff ff9e 	bl	80137a4 <tcp_getoptbyte>
 8013868:	4603      	mov	r3, r0
 801386a:	b29b      	uxth	r3, r3
 801386c:	021b      	lsls	r3, r3, #8
 801386e:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8013870:	f7ff ff98 	bl	80137a4 <tcp_getoptbyte>
 8013874:	4603      	mov	r3, r0
 8013876:	b29a      	uxth	r2, r3
 8013878:	89bb      	ldrh	r3, [r7, #12]
 801387a:	4313      	orrs	r3, r2
 801387c:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801387e:	89bb      	ldrh	r3, [r7, #12]
 8013880:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013884:	d804      	bhi.n	8013890 <tcp_parseopt+0x78>
 8013886:	89bb      	ldrh	r3, [r7, #12]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d001      	beq.n	8013890 <tcp_parseopt+0x78>
 801388c:	89ba      	ldrh	r2, [r7, #12]
 801388e:	e001      	b.n	8013894 <tcp_parseopt+0x7c>
 8013890:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8013898:	e010      	b.n	80138bc <tcp_parseopt+0xa4>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 801389a:	f7ff ff83 	bl	80137a4 <tcp_getoptbyte>
 801389e:	4603      	mov	r3, r0
 80138a0:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 80138a2:	7afb      	ldrb	r3, [r7, #11]
 80138a4:	2b01      	cmp	r3, #1
 80138a6:	d914      	bls.n	80138d2 <tcp_parseopt+0xba>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 80138a8:	7afb      	ldrb	r3, [r7, #11]
 80138aa:	b29a      	uxth	r2, r3
 80138ac:	4b0c      	ldr	r3, [pc, #48]	; (80138e0 <tcp_parseopt+0xc8>)
 80138ae:	881b      	ldrh	r3, [r3, #0]
 80138b0:	4413      	add	r3, r2
 80138b2:	b29b      	uxth	r3, r3
 80138b4:	3b02      	subs	r3, #2
 80138b6:	b29a      	uxth	r2, r3
 80138b8:	4b09      	ldr	r3, [pc, #36]	; (80138e0 <tcp_parseopt+0xc8>)
 80138ba:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80138bc:	4b08      	ldr	r3, [pc, #32]	; (80138e0 <tcp_parseopt+0xc8>)
 80138be:	881a      	ldrh	r2, [r3, #0]
 80138c0:	4b06      	ldr	r3, [pc, #24]	; (80138dc <tcp_parseopt+0xc4>)
 80138c2:	881b      	ldrh	r3, [r3, #0]
 80138c4:	429a      	cmp	r2, r3
 80138c6:	d3b3      	bcc.n	8013830 <tcp_parseopt+0x18>
 80138c8:	e004      	b.n	80138d4 <tcp_parseopt+0xbc>
        return;
 80138ca:	bf00      	nop
 80138cc:	e002      	b.n	80138d4 <tcp_parseopt+0xbc>
          return;
 80138ce:	bf00      	nop
 80138d0:	e000      	b.n	80138d4 <tcp_parseopt+0xbc>
          return;
 80138d2:	bf00      	nop
      }
    }
  }
}
 80138d4:	3710      	adds	r7, #16
 80138d6:	46bd      	mov	sp, r7
 80138d8:	bd80      	pop	{r7, pc}
 80138da:	bf00      	nop
 80138dc:	2000ebec 	.word	0x2000ebec
 80138e0:	2000ebf4 	.word	0x2000ebf4

080138e4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80138e4:	b480      	push	{r7}
 80138e6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80138e8:	4b05      	ldr	r3, [pc, #20]	; (8013900 <tcp_trigger_input_pcb_close+0x1c>)
 80138ea:	781b      	ldrb	r3, [r3, #0]
 80138ec:	f043 0310 	orr.w	r3, r3, #16
 80138f0:	b2da      	uxtb	r2, r3
 80138f2:	4b03      	ldr	r3, [pc, #12]	; (8013900 <tcp_trigger_input_pcb_close+0x1c>)
 80138f4:	701a      	strb	r2, [r3, #0]
}
 80138f6:	bf00      	nop
 80138f8:	46bd      	mov	sp, r7
 80138fa:	bc80      	pop	{r7}
 80138fc:	4770      	bx	lr
 80138fe:	bf00      	nop
 8013900:	2000ec05 	.word	0x2000ec05

08013904 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8013904:	b580      	push	{r7, lr}
 8013906:	b086      	sub	sp, #24
 8013908:	af00      	add	r7, sp, #0
 801390a:	60f8      	str	r0, [r7, #12]
 801390c:	607b      	str	r3, [r7, #4]
 801390e:	460b      	mov	r3, r1
 8013910:	817b      	strh	r3, [r7, #10]
 8013912:	4613      	mov	r3, r2
 8013914:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013916:	897a      	ldrh	r2, [r7, #10]
 8013918:	893b      	ldrh	r3, [r7, #8]
 801391a:	4413      	add	r3, r2
 801391c:	b29b      	uxth	r3, r3
 801391e:	3314      	adds	r3, #20
 8013920:	b29b      	uxth	r3, r3
 8013922:	2200      	movs	r2, #0
 8013924:	4619      	mov	r1, r3
 8013926:	2001      	movs	r0, #1
 8013928:	f7fb fb84 	bl	800f034 <pbuf_alloc>
 801392c:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801392e:	697b      	ldr	r3, [r7, #20]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d056      	beq.n	80139e2 <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013934:	897b      	ldrh	r3, [r7, #10]
 8013936:	3313      	adds	r3, #19
 8013938:	697a      	ldr	r2, [r7, #20]
 801393a:	8952      	ldrh	r2, [r2, #10]
 801393c:	4293      	cmp	r3, r2
 801393e:	db05      	blt.n	801394c <tcp_output_alloc_header+0x48>
 8013940:	4b2a      	ldr	r3, [pc, #168]	; (80139ec <tcp_output_alloc_header+0xe8>)
 8013942:	2272      	movs	r2, #114	; 0x72
 8013944:	492a      	ldr	r1, [pc, #168]	; (80139f0 <tcp_output_alloc_header+0xec>)
 8013946:	482b      	ldr	r0, [pc, #172]	; (80139f4 <tcp_output_alloc_header+0xf0>)
 8013948:	f006 fd86 	bl	801a458 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801394c:	697b      	ldr	r3, [r7, #20]
 801394e:	685b      	ldr	r3, [r3, #4]
 8013950:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	8adb      	ldrh	r3, [r3, #22]
 8013956:	4618      	mov	r0, r3
 8013958:	f7fa fce4 	bl	800e324 <lwip_htons>
 801395c:	4603      	mov	r3, r0
 801395e:	461a      	mov	r2, r3
 8013960:	693b      	ldr	r3, [r7, #16]
 8013962:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	8b1b      	ldrh	r3, [r3, #24]
 8013968:	4618      	mov	r0, r3
 801396a:	f7fa fcdb 	bl	800e324 <lwip_htons>
 801396e:	4603      	mov	r3, r0
 8013970:	461a      	mov	r2, r3
 8013972:	693b      	ldr	r3, [r7, #16]
 8013974:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013976:	693b      	ldr	r3, [r7, #16]
 8013978:	687a      	ldr	r2, [r7, #4]
 801397a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013980:	4618      	mov	r0, r3
 8013982:	f7fa fcdc 	bl	800e33e <lwip_htonl>
 8013986:	4602      	mov	r2, r0
 8013988:	693b      	ldr	r3, [r7, #16]
 801398a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 801398c:	897b      	ldrh	r3, [r7, #10]
 801398e:	089b      	lsrs	r3, r3, #2
 8013990:	b29b      	uxth	r3, r3
 8013992:	3305      	adds	r3, #5
 8013994:	b29b      	uxth	r3, r3
 8013996:	031b      	lsls	r3, r3, #12
 8013998:	b29b      	uxth	r3, r3
 801399a:	f043 0310 	orr.w	r3, r3, #16
 801399e:	b29b      	uxth	r3, r3
 80139a0:	4618      	mov	r0, r3
 80139a2:	f7fa fcbf 	bl	800e324 <lwip_htons>
 80139a6:	4603      	mov	r3, r0
 80139a8:	461a      	mov	r2, r3
 80139aa:	693b      	ldr	r3, [r7, #16]
 80139ac:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80139b2:	4618      	mov	r0, r3
 80139b4:	f7fa fcb6 	bl	800e324 <lwip_htons>
 80139b8:	4603      	mov	r3, r0
 80139ba:	461a      	mov	r2, r3
 80139bc:	693b      	ldr	r3, [r7, #16]
 80139be:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80139c0:	693b      	ldr	r3, [r7, #16]
 80139c2:	2200      	movs	r2, #0
 80139c4:	741a      	strb	r2, [r3, #16]
 80139c6:	2200      	movs	r2, #0
 80139c8:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80139ca:	693b      	ldr	r3, [r7, #16]
 80139cc:	2200      	movs	r2, #0
 80139ce:	749a      	strb	r2, [r3, #18]
 80139d0:	2200      	movs	r2, #0
 80139d2:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139d8:	68fa      	ldr	r2, [r7, #12]
 80139da:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80139dc:	441a      	add	r2, r3
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80139e2:	697b      	ldr	r3, [r7, #20]
}
 80139e4:	4618      	mov	r0, r3
 80139e6:	3718      	adds	r7, #24
 80139e8:	46bd      	mov	sp, r7
 80139ea:	bd80      	pop	{r7, pc}
 80139ec:	0801d3c0 	.word	0x0801d3c0
 80139f0:	0801d3f4 	.word	0x0801d3f4
 80139f4:	0801d424 	.word	0x0801d424

080139f8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80139f8:	b590      	push	{r4, r7, lr}
 80139fa:	b085      	sub	sp, #20
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d02d      	beq.n	8013a64 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013a0c:	60fb      	str	r3, [r7, #12]
 8013a0e:	e002      	b.n	8013a16 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d1f8      	bne.n	8013a10 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	68db      	ldr	r3, [r3, #12]
 8013a22:	899b      	ldrh	r3, [r3, #12]
 8013a24:	b29b      	uxth	r3, r3
 8013a26:	4618      	mov	r0, r3
 8013a28:	f7fa fc7c 	bl	800e324 <lwip_htons>
 8013a2c:	4603      	mov	r3, r0
 8013a2e:	f003 0307 	and.w	r3, r3, #7
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d116      	bne.n	8013a64 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	68db      	ldr	r3, [r3, #12]
 8013a3a:	899b      	ldrh	r3, [r3, #12]
 8013a3c:	b29c      	uxth	r4, r3
 8013a3e:	2001      	movs	r0, #1
 8013a40:	f7fa fc70 	bl	800e324 <lwip_htons>
 8013a44:	4603      	mov	r3, r0
 8013a46:	461a      	mov	r2, r3
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	68db      	ldr	r3, [r3, #12]
 8013a4c:	4322      	orrs	r2, r4
 8013a4e:	b292      	uxth	r2, r2
 8013a50:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	7e9b      	ldrb	r3, [r3, #26]
 8013a56:	f043 0320 	orr.w	r3, r3, #32
 8013a5a:	b2da      	uxtb	r2, r3
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8013a60:	2300      	movs	r3, #0
 8013a62:	e004      	b.n	8013a6e <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013a64:	2101      	movs	r1, #1
 8013a66:	6878      	ldr	r0, [r7, #4]
 8013a68:	f000 fcc0 	bl	80143ec <tcp_enqueue_flags>
 8013a6c:	4603      	mov	r3, r0
}
 8013a6e:	4618      	mov	r0, r3
 8013a70:	3714      	adds	r7, #20
 8013a72:	46bd      	mov	sp, r7
 8013a74:	bd90      	pop	{r4, r7, pc}
	...

08013a78 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8013a78:	b590      	push	{r4, r7, lr}
 8013a7a:	b087      	sub	sp, #28
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	60f8      	str	r0, [r7, #12]
 8013a80:	60b9      	str	r1, [r7, #8]
 8013a82:	603b      	str	r3, [r7, #0]
 8013a84:	4613      	mov	r3, r2
 8013a86:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013a88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013a8c:	009b      	lsls	r3, r3, #2
 8013a8e:	b2db      	uxtb	r3, r3
 8013a90:	f003 0304 	and.w	r3, r3, #4
 8013a94:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013a96:	2003      	movs	r0, #3
 8013a98:	f7fb f830 	bl	800eafc <memp_malloc>
 8013a9c:	6138      	str	r0, [r7, #16]
 8013a9e:	693b      	ldr	r3, [r7, #16]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d104      	bne.n	8013aae <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013aa4:	68b8      	ldr	r0, [r7, #8]
 8013aa6:	f7fb fe3d 	bl	800f724 <pbuf_free>
    return NULL;
 8013aaa:	2300      	movs	r3, #0
 8013aac:	e061      	b.n	8013b72 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8013aae:	693b      	ldr	r3, [r7, #16]
 8013ab0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013ab4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013ab6:	693b      	ldr	r3, [r7, #16]
 8013ab8:	2200      	movs	r2, #0
 8013aba:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013abc:	693b      	ldr	r3, [r7, #16]
 8013abe:	68ba      	ldr	r2, [r7, #8]
 8013ac0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013ac2:	68bb      	ldr	r3, [r7, #8]
 8013ac4:	891a      	ldrh	r2, [r3, #8]
 8013ac6:	7dfb      	ldrb	r3, [r7, #23]
 8013ac8:	b29b      	uxth	r3, r3
 8013aca:	429a      	cmp	r2, r3
 8013acc:	d205      	bcs.n	8013ada <tcp_create_segment+0x62>
 8013ace:	4b2b      	ldr	r3, [pc, #172]	; (8013b7c <tcp_create_segment+0x104>)
 8013ad0:	22ba      	movs	r2, #186	; 0xba
 8013ad2:	492b      	ldr	r1, [pc, #172]	; (8013b80 <tcp_create_segment+0x108>)
 8013ad4:	482b      	ldr	r0, [pc, #172]	; (8013b84 <tcp_create_segment+0x10c>)
 8013ad6:	f006 fcbf 	bl	801a458 <iprintf>
  seg->len = p->tot_len - optlen;
 8013ada:	68bb      	ldr	r3, [r7, #8]
 8013adc:	891a      	ldrh	r2, [r3, #8]
 8013ade:	7dfb      	ldrb	r3, [r7, #23]
 8013ae0:	b29b      	uxth	r3, r3
 8013ae2:	1ad3      	subs	r3, r2, r3
 8013ae4:	b29a      	uxth	r2, r3
 8013ae6:	693b      	ldr	r3, [r7, #16]
 8013ae8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8013aea:	2114      	movs	r1, #20
 8013aec:	68b8      	ldr	r0, [r7, #8]
 8013aee:	f7fb fdf5 	bl	800f6dc <pbuf_header>
 8013af2:	4603      	mov	r3, r0
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d004      	beq.n	8013b02 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013af8:	6938      	ldr	r0, [r7, #16]
 8013afa:	f7fd f943 	bl	8010d84 <tcp_seg_free>
    return NULL;
 8013afe:	2300      	movs	r3, #0
 8013b00:	e037      	b.n	8013b72 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013b02:	693b      	ldr	r3, [r7, #16]
 8013b04:	685b      	ldr	r3, [r3, #4]
 8013b06:	685a      	ldr	r2, [r3, #4]
 8013b08:	693b      	ldr	r3, [r7, #16]
 8013b0a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	8ada      	ldrh	r2, [r3, #22]
 8013b10:	693b      	ldr	r3, [r7, #16]
 8013b12:	68dc      	ldr	r4, [r3, #12]
 8013b14:	4610      	mov	r0, r2
 8013b16:	f7fa fc05 	bl	800e324 <lwip_htons>
 8013b1a:	4603      	mov	r3, r0
 8013b1c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	8b1a      	ldrh	r2, [r3, #24]
 8013b22:	693b      	ldr	r3, [r7, #16]
 8013b24:	68dc      	ldr	r4, [r3, #12]
 8013b26:	4610      	mov	r0, r2
 8013b28:	f7fa fbfc 	bl	800e324 <lwip_htons>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013b30:	693b      	ldr	r3, [r7, #16]
 8013b32:	68dc      	ldr	r4, [r3, #12]
 8013b34:	6838      	ldr	r0, [r7, #0]
 8013b36:	f7fa fc02 	bl	800e33e <lwip_htonl>
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8013b3e:	7dfb      	ldrb	r3, [r7, #23]
 8013b40:	089b      	lsrs	r3, r3, #2
 8013b42:	b2db      	uxtb	r3, r3
 8013b44:	b29b      	uxth	r3, r3
 8013b46:	3305      	adds	r3, #5
 8013b48:	b29b      	uxth	r3, r3
 8013b4a:	031b      	lsls	r3, r3, #12
 8013b4c:	b29a      	uxth	r2, r3
 8013b4e:	79fb      	ldrb	r3, [r7, #7]
 8013b50:	b29b      	uxth	r3, r3
 8013b52:	4313      	orrs	r3, r2
 8013b54:	b29a      	uxth	r2, r3
 8013b56:	693b      	ldr	r3, [r7, #16]
 8013b58:	68dc      	ldr	r4, [r3, #12]
 8013b5a:	4610      	mov	r0, r2
 8013b5c:	f7fa fbe2 	bl	800e324 <lwip_htons>
 8013b60:	4603      	mov	r3, r0
 8013b62:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013b64:	693b      	ldr	r3, [r7, #16]
 8013b66:	68db      	ldr	r3, [r3, #12]
 8013b68:	2200      	movs	r2, #0
 8013b6a:	749a      	strb	r2, [r3, #18]
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	74da      	strb	r2, [r3, #19]
  return seg;
 8013b70:	693b      	ldr	r3, [r7, #16]
}
 8013b72:	4618      	mov	r0, r3
 8013b74:	371c      	adds	r7, #28
 8013b76:	46bd      	mov	sp, r7
 8013b78:	bd90      	pop	{r4, r7, pc}
 8013b7a:	bf00      	nop
 8013b7c:	0801d3c0 	.word	0x0801d3c0
 8013b80:	0801d44c 	.word	0x0801d44c
 8013b84:	0801d424 	.word	0x0801d424

08013b88 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b086      	sub	sp, #24
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	607b      	str	r3, [r7, #4]
 8013b90:	4603      	mov	r3, r0
 8013b92:	73fb      	strb	r3, [r7, #15]
 8013b94:	460b      	mov	r3, r1
 8013b96:	81bb      	strh	r3, [r7, #12]
 8013b98:	4613      	mov	r3, r2
 8013b9a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013b9c:	89bb      	ldrh	r3, [r7, #12]
 8013b9e:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8013ba0:	89ba      	ldrh	r2, [r7, #12]
 8013ba2:	897b      	ldrh	r3, [r7, #10]
 8013ba4:	429a      	cmp	r2, r3
 8013ba6:	d221      	bcs.n	8013bec <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013ba8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013bac:	f003 0302 	and.w	r3, r3, #2
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d111      	bne.n	8013bd8 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8013bb4:	6a3b      	ldr	r3, [r7, #32]
 8013bb6:	7e9b      	ldrb	r3, [r3, #26]
 8013bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d115      	bne.n	8013bec <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8013bc0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d007      	beq.n	8013bd8 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8013bc8:	6a3b      	ldr	r3, [r7, #32]
 8013bca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d103      	bne.n	8013bd8 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8013bd0:	6a3b      	ldr	r3, [r7, #32]
 8013bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d009      	beq.n	8013bec <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8013bd8:	89bb      	ldrh	r3, [r7, #12]
 8013bda:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8013bde:	f023 0203 	bic.w	r2, r3, #3
 8013be2:	897b      	ldrh	r3, [r7, #10]
 8013be4:	4293      	cmp	r3, r2
 8013be6:	bf28      	it	cs
 8013be8:	4613      	movcs	r3, r2
 8013bea:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8013bec:	8af9      	ldrh	r1, [r7, #22]
 8013bee:	7bfb      	ldrb	r3, [r7, #15]
 8013bf0:	2200      	movs	r2, #0
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	f7fb fa1e 	bl	800f034 <pbuf_alloc>
 8013bf8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013bfa:	693b      	ldr	r3, [r7, #16]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d101      	bne.n	8013c04 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8013c00:	2300      	movs	r3, #0
 8013c02:	e019      	b.n	8013c38 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8013c04:	693b      	ldr	r3, [r7, #16]
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d006      	beq.n	8013c1a <tcp_pbuf_prealloc+0x92>
 8013c0c:	4b0c      	ldr	r3, [pc, #48]	; (8013c40 <tcp_pbuf_prealloc+0xb8>)
 8013c0e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8013c12:	490c      	ldr	r1, [pc, #48]	; (8013c44 <tcp_pbuf_prealloc+0xbc>)
 8013c14:	480c      	ldr	r0, [pc, #48]	; (8013c48 <tcp_pbuf_prealloc+0xc0>)
 8013c16:	f006 fc1f 	bl	801a458 <iprintf>
  *oversize = p->len - length;
 8013c1a:	693b      	ldr	r3, [r7, #16]
 8013c1c:	895a      	ldrh	r2, [r3, #10]
 8013c1e:	89bb      	ldrh	r3, [r7, #12]
 8013c20:	1ad3      	subs	r3, r2, r3
 8013c22:	b29a      	uxth	r2, r3
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8013c28:	693b      	ldr	r3, [r7, #16]
 8013c2a:	89ba      	ldrh	r2, [r7, #12]
 8013c2c:	811a      	strh	r2, [r3, #8]
 8013c2e:	693b      	ldr	r3, [r7, #16]
 8013c30:	891a      	ldrh	r2, [r3, #8]
 8013c32:	693b      	ldr	r3, [r7, #16]
 8013c34:	815a      	strh	r2, [r3, #10]
  return p;
 8013c36:	693b      	ldr	r3, [r7, #16]
}
 8013c38:	4618      	mov	r0, r3
 8013c3a:	3718      	adds	r7, #24
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	bd80      	pop	{r7, pc}
 8013c40:	0801d3c0 	.word	0x0801d3c0
 8013c44:	0801d464 	.word	0x0801d464
 8013c48:	0801d424 	.word	0x0801d424

08013c4c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b082      	sub	sp, #8
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
 8013c54:	460b      	mov	r3, r1
 8013c56:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	7d1b      	ldrb	r3, [r3, #20]
 8013c5c:	2b04      	cmp	r3, #4
 8013c5e:	d00e      	beq.n	8013c7e <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8013c64:	2b07      	cmp	r3, #7
 8013c66:	d00a      	beq.n	8013c7e <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013c6c:	2b02      	cmp	r3, #2
 8013c6e:	d006      	beq.n	8013c7e <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8013c74:	2b03      	cmp	r3, #3
 8013c76:	d002      	beq.n	8013c7e <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013c78:	f06f 030a 	mvn.w	r3, #10
 8013c7c:	e04f      	b.n	8013d1e <tcp_write_checks+0xd2>
  } else if (len == 0) {
 8013c7e:	887b      	ldrh	r3, [r7, #2]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d101      	bne.n	8013c88 <tcp_write_checks+0x3c>
    return ERR_OK;
 8013c84:	2300      	movs	r3, #0
 8013c86:	e04a      	b.n	8013d1e <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013c8e:	887a      	ldrh	r2, [r7, #2]
 8013c90:	429a      	cmp	r2, r3
 8013c92:	d909      	bls.n	8013ca8 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	7e9b      	ldrb	r3, [r3, #26]
 8013c98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013c9c:	b2da      	uxtb	r2, r3
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8013ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8013ca6:	e03a      	b.n	8013d1e <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013cae:	2b08      	cmp	r3, #8
 8013cb0:	d806      	bhi.n	8013cc0 <tcp_write_checks+0x74>
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013cb8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8013cbc:	4293      	cmp	r3, r2
 8013cbe:	d909      	bls.n	8013cd4 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	7e9b      	ldrb	r3, [r3, #26]
 8013cc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013cc8:	b2da      	uxtb	r2, r3
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8013cce:	f04f 33ff 	mov.w	r3, #4294967295
 8013cd2:	e024      	b.n	8013d1e <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d00f      	beq.n	8013cfe <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d11a      	bne.n	8013d1c <tcp_write_checks+0xd0>
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d116      	bne.n	8013d1c <tcp_write_checks+0xd0>
 8013cee:	4b0e      	ldr	r3, [pc, #56]	; (8013d28 <tcp_write_checks+0xdc>)
 8013cf0:	f240 1255 	movw	r2, #341	; 0x155
 8013cf4:	490d      	ldr	r1, [pc, #52]	; (8013d2c <tcp_write_checks+0xe0>)
 8013cf6:	480e      	ldr	r0, [pc, #56]	; (8013d30 <tcp_write_checks+0xe4>)
 8013cf8:	f006 fbae 	bl	801a458 <iprintf>
 8013cfc:	e00e      	b.n	8013d1c <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d103      	bne.n	8013d0e <tcp_write_checks+0xc2>
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d006      	beq.n	8013d1c <tcp_write_checks+0xd0>
 8013d0e:	4b06      	ldr	r3, [pc, #24]	; (8013d28 <tcp_write_checks+0xdc>)
 8013d10:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8013d14:	4907      	ldr	r1, [pc, #28]	; (8013d34 <tcp_write_checks+0xe8>)
 8013d16:	4806      	ldr	r0, [pc, #24]	; (8013d30 <tcp_write_checks+0xe4>)
 8013d18:	f006 fb9e 	bl	801a458 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8013d1c:	2300      	movs	r3, #0
}
 8013d1e:	4618      	mov	r0, r3
 8013d20:	3708      	adds	r7, #8
 8013d22:	46bd      	mov	sp, r7
 8013d24:	bd80      	pop	{r7, pc}
 8013d26:	bf00      	nop
 8013d28:	0801d3c0 	.word	0x0801d3c0
 8013d2c:	0801d478 	.word	0x0801d478
 8013d30:	0801d424 	.word	0x0801d424
 8013d34:	0801d4b4 	.word	0x0801d4b4

08013d38 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8013d38:	b590      	push	{r4, r7, lr}
 8013d3a:	b09b      	sub	sp, #108	; 0x6c
 8013d3c:	af04      	add	r7, sp, #16
 8013d3e:	60f8      	str	r0, [r7, #12]
 8013d40:	60b9      	str	r1, [r7, #8]
 8013d42:	4611      	mov	r1, r2
 8013d44:	461a      	mov	r2, r3
 8013d46:	460b      	mov	r3, r1
 8013d48:	80fb      	strh	r3, [r7, #6]
 8013d4a:	4613      	mov	r3, r2
 8013d4c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8013d4e:	2300      	movs	r3, #0
 8013d50:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8013d52:	2300      	movs	r3, #0
 8013d54:	653b      	str	r3, [r7, #80]	; 0x50
 8013d56:	2300      	movs	r3, #0
 8013d58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8013d5e:	2300      	movs	r3, #0
 8013d60:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8013d62:	2300      	movs	r3, #0
 8013d64:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8013d68:	2300      	movs	r3, #0
 8013d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 8013d6e:	2300      	movs	r3, #0
 8013d70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8013d74:	2300      	movs	r3, #0
 8013d76:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8013d78:	2300      	movs	r3, #0
 8013d7a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013d86:	085b      	lsrs	r3, r3, #1
 8013d88:	b29a      	uxth	r2, r3
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d8e:	4293      	cmp	r3, r2
 8013d90:	bf28      	it	cs
 8013d92:	4613      	movcs	r3, r2
 8013d94:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8013d96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d102      	bne.n	8013da2 <tcp_write+0x6a>
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013da0:	e000      	b.n	8013da4 <tcp_write+0x6c>
 8013da2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013da4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8013da6:	68bb      	ldr	r3, [r7, #8]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d109      	bne.n	8013dc0 <tcp_write+0x88>
 8013dac:	4b92      	ldr	r3, [pc, #584]	; (8013ff8 <tcp_write+0x2c0>)
 8013dae:	f240 1291 	movw	r2, #401	; 0x191
 8013db2:	4992      	ldr	r1, [pc, #584]	; (8013ffc <tcp_write+0x2c4>)
 8013db4:	4892      	ldr	r0, [pc, #584]	; (8014000 <tcp_write+0x2c8>)
 8013db6:	f006 fb4f 	bl	801a458 <iprintf>
 8013dba:	f06f 030f 	mvn.w	r3, #15
 8013dbe:	e30a      	b.n	80143d6 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8013dc0:	88fb      	ldrh	r3, [r7, #6]
 8013dc2:	4619      	mov	r1, r3
 8013dc4:	68f8      	ldr	r0, [r7, #12]
 8013dc6:	f7ff ff41 	bl	8013c4c <tcp_write_checks>
 8013dca:	4603      	mov	r3, r0
 8013dcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8013dd0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d002      	beq.n	8013dde <tcp_write+0xa6>
    return err;
 8013dd8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013ddc:	e2fb      	b.n	80143d6 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013de4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	f000 80f4 	beq.w	8013fda <tcp_write+0x2a2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013df6:	653b      	str	r3, [r7, #80]	; 0x50
 8013df8:	e002      	b.n	8013e00 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8013dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d1f8      	bne.n	8013dfa <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8013e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e0a:	7a9b      	ldrb	r3, [r3, #10]
 8013e0c:	009b      	lsls	r3, r3, #2
 8013e0e:	b29b      	uxth	r3, r3
 8013e10:	f003 0304 	and.w	r3, r3, #4
 8013e14:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8013e16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013e18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e1a:	891b      	ldrh	r3, [r3, #8]
 8013e1c:	4619      	mov	r1, r3
 8013e1e:	8c3b      	ldrh	r3, [r7, #32]
 8013e20:	440b      	add	r3, r1
 8013e22:	429a      	cmp	r2, r3
 8013e24:	da06      	bge.n	8013e34 <tcp_write+0xfc>
 8013e26:	4b74      	ldr	r3, [pc, #464]	; (8013ff8 <tcp_write+0x2c0>)
 8013e28:	f240 12c7 	movw	r2, #455	; 0x1c7
 8013e2c:	4975      	ldr	r1, [pc, #468]	; (8014004 <tcp_write+0x2cc>)
 8013e2e:	4874      	ldr	r0, [pc, #464]	; (8014000 <tcp_write+0x2c8>)
 8013e30:	f006 fb12 	bl	801a458 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8013e34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e36:	891a      	ldrh	r2, [r3, #8]
 8013e38:	8c3b      	ldrh	r3, [r7, #32]
 8013e3a:	4413      	add	r3, r2
 8013e3c:	b29b      	uxth	r3, r3
 8013e3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013e40:	1ad3      	subs	r3, r2, r3
 8013e42:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013e4a:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8013e4c:	8a7b      	ldrh	r3, [r7, #18]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d026      	beq.n	8013ea0 <tcp_write+0x168>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8013e52:	8a7b      	ldrh	r3, [r7, #18]
 8013e54:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013e56:	429a      	cmp	r2, r3
 8013e58:	d206      	bcs.n	8013e68 <tcp_write+0x130>
 8013e5a:	4b67      	ldr	r3, [pc, #412]	; (8013ff8 <tcp_write+0x2c0>)
 8013e5c:	f240 12d9 	movw	r2, #473	; 0x1d9
 8013e60:	4969      	ldr	r1, [pc, #420]	; (8014008 <tcp_write+0x2d0>)
 8013e62:	4867      	ldr	r0, [pc, #412]	; (8014000 <tcp_write+0x2c8>)
 8013e64:	f006 faf8 	bl	801a458 <iprintf>
      seg = last_unsent;
 8013e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013e6c:	8a7b      	ldrh	r3, [r7, #18]
 8013e6e:	88fa      	ldrh	r2, [r7, #6]
 8013e70:	4293      	cmp	r3, r2
 8013e72:	bf28      	it	cs
 8013e74:	4613      	movcs	r3, r2
 8013e76:	b29b      	uxth	r3, r3
 8013e78:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013e7a:	4293      	cmp	r3, r2
 8013e7c:	bf28      	it	cs
 8013e7e:	4613      	movcs	r3, r2
 8013e80:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8013e82:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013e86:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013e88:	4413      	add	r3, r2
 8013e8a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8013e8e:	8a7a      	ldrh	r2, [r7, #18]
 8013e90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013e92:	1ad3      	subs	r3, r2, r3
 8013e94:	b29b      	uxth	r3, r3
 8013e96:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8013e98:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013e9a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013e9c:	1ad3      	subs	r3, r2, r3
 8013e9e:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8013ea0:	8a7b      	ldrh	r3, [r7, #18]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d00b      	beq.n	8013ebe <tcp_write+0x186>
 8013ea6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013eaa:	88fb      	ldrh	r3, [r7, #6]
 8013eac:	429a      	cmp	r2, r3
 8013eae:	d006      	beq.n	8013ebe <tcp_write+0x186>
 8013eb0:	4b51      	ldr	r3, [pc, #324]	; (8013ff8 <tcp_write+0x2c0>)
 8013eb2:	f240 12e1 	movw	r2, #481	; 0x1e1
 8013eb6:	4955      	ldr	r1, [pc, #340]	; (801400c <tcp_write+0x2d4>)
 8013eb8:	4851      	ldr	r0, [pc, #324]	; (8014000 <tcp_write+0x2c8>)
 8013eba:	f006 facd 	bl	801a458 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013ebe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013ec2:	88fb      	ldrh	r3, [r7, #6]
 8013ec4:	429a      	cmp	r2, r3
 8013ec6:	f080 8169 	bcs.w	801419c <tcp_write+0x464>
 8013eca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	f000 8165 	beq.w	801419c <tcp_write+0x464>
 8013ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ed4:	891b      	ldrh	r3, [r3, #8]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	f000 8160 	beq.w	801419c <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013edc:	88fa      	ldrh	r2, [r7, #6]
 8013ede:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013ee2:	1ad2      	subs	r2, r2, r3
 8013ee4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013ee6:	4293      	cmp	r3, r2
 8013ee8:	bfa8      	it	ge
 8013eea:	4613      	movge	r3, r2
 8013eec:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ef0:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013ef2:	797b      	ldrb	r3, [r7, #5]
 8013ef4:	f003 0301 	and.w	r3, r3, #1
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d027      	beq.n	8013f4c <tcp_write+0x214>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8013efc:	f107 0012 	add.w	r0, r7, #18
 8013f00:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013f02:	8bf9      	ldrh	r1, [r7, #30]
 8013f04:	2301      	movs	r3, #1
 8013f06:	9302      	str	r3, [sp, #8]
 8013f08:	797b      	ldrb	r3, [r7, #5]
 8013f0a:	9301      	str	r3, [sp, #4]
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	9300      	str	r3, [sp, #0]
 8013f10:	4603      	mov	r3, r0
 8013f12:	2004      	movs	r0, #4
 8013f14:	f7ff fe38 	bl	8013b88 <tcp_pbuf_prealloc>
 8013f18:	6578      	str	r0, [r7, #84]	; 0x54
 8013f1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	f000 8228 	beq.w	8014372 <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8013f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013f24:	6858      	ldr	r0, [r3, #4]
 8013f26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013f2a:	68ba      	ldr	r2, [r7, #8]
 8013f2c:	4413      	add	r3, r2
 8013f2e:	8bfa      	ldrh	r2, [r7, #30]
 8013f30:	4619      	mov	r1, r3
 8013f32:	f006 f9e6 	bl	801a302 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8013f36:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013f38:	f7fb fc8e 	bl	800f858 <pbuf_clen>
 8013f3c:	4603      	mov	r3, r0
 8013f3e:	461a      	mov	r2, r3
 8013f40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013f44:	4413      	add	r3, r2
 8013f46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013f4a:	e03f      	b.n	8013fcc <tcp_write+0x294>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f4e:	685b      	ldr	r3, [r3, #4]
 8013f50:	637b      	str	r3, [r7, #52]	; 0x34
 8013f52:	e002      	b.n	8013f5a <tcp_write+0x222>
 8013f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	637b      	str	r3, [r7, #52]	; 0x34
 8013f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d1f8      	bne.n	8013f54 <tcp_write+0x21c>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f64:	7b1b      	ldrb	r3, [r3, #12]
 8013f66:	2b01      	cmp	r3, #1
 8013f68:	d115      	bne.n	8013f96 <tcp_write+0x25e>
 8013f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f6c:	685b      	ldr	r3, [r3, #4]
 8013f6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013f70:	8952      	ldrh	r2, [r2, #10]
 8013f72:	4413      	add	r3, r2
 8013f74:	68ba      	ldr	r2, [r7, #8]
 8013f76:	429a      	cmp	r2, r3
 8013f78:	d10d      	bne.n	8013f96 <tcp_write+0x25e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8013f7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d006      	beq.n	8013f90 <tcp_write+0x258>
 8013f82:	4b1d      	ldr	r3, [pc, #116]	; (8013ff8 <tcp_write+0x2c0>)
 8013f84:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8013f88:	4921      	ldr	r1, [pc, #132]	; (8014010 <tcp_write+0x2d8>)
 8013f8a:	481d      	ldr	r0, [pc, #116]	; (8014000 <tcp_write+0x2c8>)
 8013f8c:	f006 fa64 	bl	801a458 <iprintf>
          extendlen = seglen;
 8013f90:	8bfb      	ldrh	r3, [r7, #30]
 8013f92:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8013f94:	e01a      	b.n	8013fcc <tcp_write+0x294>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8013f96:	8bfb      	ldrh	r3, [r7, #30]
 8013f98:	2201      	movs	r2, #1
 8013f9a:	4619      	mov	r1, r3
 8013f9c:	2004      	movs	r0, #4
 8013f9e:	f7fb f849 	bl	800f034 <pbuf_alloc>
 8013fa2:	6578      	str	r0, [r7, #84]	; 0x54
 8013fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	f000 81e5 	beq.w	8014376 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8013fac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013fb0:	68ba      	ldr	r2, [r7, #8]
 8013fb2:	441a      	add	r2, r3
 8013fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013fb6:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8013fb8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013fba:	f7fb fc4d 	bl	800f858 <pbuf_clen>
 8013fbe:	4603      	mov	r3, r0
 8013fc0:	461a      	mov	r2, r3
 8013fc2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013fc6:	4413      	add	r3, r2
 8013fc8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8013fcc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013fd0:	8bfb      	ldrh	r3, [r7, #30]
 8013fd2:	4413      	add	r3, r2
 8013fd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8013fd8:	e0e0      	b.n	801419c <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	f000 80db 	beq.w	801419c <tcp_write+0x464>
 8013fe6:	4b04      	ldr	r3, [pc, #16]	; (8013ff8 <tcp_write+0x2c0>)
 8013fe8:	f44f 7209 	mov.w	r2, #548	; 0x224
 8013fec:	4909      	ldr	r1, [pc, #36]	; (8014014 <tcp_write+0x2dc>)
 8013fee:	4804      	ldr	r0, [pc, #16]	; (8014000 <tcp_write+0x2c8>)
 8013ff0:	f006 fa32 	bl	801a458 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8013ff4:	e0d2      	b.n	801419c <tcp_write+0x464>
 8013ff6:	bf00      	nop
 8013ff8:	0801d3c0 	.word	0x0801d3c0
 8013ffc:	0801d4e8 	.word	0x0801d4e8
 8014000:	0801d424 	.word	0x0801d424
 8014004:	0801d51c 	.word	0x0801d51c
 8014008:	0801d534 	.word	0x0801d534
 801400c:	0801d554 	.word	0x0801d554
 8014010:	0801d574 	.word	0x0801d574
 8014014:	0801d5a0 	.word	0x0801d5a0
    struct pbuf *p;
    u16_t left = len - pos;
 8014018:	88fa      	ldrh	r2, [r7, #6]
 801401a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801401e:	1ad3      	subs	r3, r2, r3
 8014020:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8014022:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014026:	b29b      	uxth	r3, r3
 8014028:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801402a:	1ad3      	subs	r3, r2, r3
 801402c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801402e:	8b7a      	ldrh	r2, [r7, #26]
 8014030:	8bbb      	ldrh	r3, [r7, #28]
 8014032:	4293      	cmp	r3, r2
 8014034:	bf28      	it	cs
 8014036:	4613      	movcs	r3, r2
 8014038:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801403a:	797b      	ldrb	r3, [r7, #5]
 801403c:	f003 0301 	and.w	r3, r3, #1
 8014040:	2b00      	cmp	r3, #0
 8014042:	d036      	beq.n	80140b2 <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8014044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014048:	b29a      	uxth	r2, r3
 801404a:	8b3b      	ldrh	r3, [r7, #24]
 801404c:	4413      	add	r3, r2
 801404e:	b299      	uxth	r1, r3
 8014050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014052:	2b00      	cmp	r3, #0
 8014054:	bf0c      	ite	eq
 8014056:	2301      	moveq	r3, #1
 8014058:	2300      	movne	r3, #0
 801405a:	b2db      	uxtb	r3, r3
 801405c:	f107 0012 	add.w	r0, r7, #18
 8014060:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014062:	9302      	str	r3, [sp, #8]
 8014064:	797b      	ldrb	r3, [r7, #5]
 8014066:	9301      	str	r3, [sp, #4]
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	9300      	str	r3, [sp, #0]
 801406c:	4603      	mov	r3, r0
 801406e:	2000      	movs	r0, #0
 8014070:	f7ff fd8a 	bl	8013b88 <tcp_pbuf_prealloc>
 8014074:	6338      	str	r0, [r7, #48]	; 0x30
 8014076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014078:	2b00      	cmp	r3, #0
 801407a:	f000 817e 	beq.w	801437a <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801407e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014080:	895b      	ldrh	r3, [r3, #10]
 8014082:	8b3a      	ldrh	r2, [r7, #24]
 8014084:	429a      	cmp	r2, r3
 8014086:	d906      	bls.n	8014096 <tcp_write+0x35e>
 8014088:	4b8f      	ldr	r3, [pc, #572]	; (80142c8 <tcp_write+0x590>)
 801408a:	f44f 7210 	mov.w	r2, #576	; 0x240
 801408e:	498f      	ldr	r1, [pc, #572]	; (80142cc <tcp_write+0x594>)
 8014090:	488f      	ldr	r0, [pc, #572]	; (80142d0 <tcp_write+0x598>)
 8014092:	f006 f9e1 	bl	801a458 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8014096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014098:	685a      	ldr	r2, [r3, #4]
 801409a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801409e:	18d0      	adds	r0, r2, r3
 80140a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80140a4:	68ba      	ldr	r2, [r7, #8]
 80140a6:	4413      	add	r3, r2
 80140a8:	8b3a      	ldrh	r2, [r7, #24]
 80140aa:	4619      	mov	r1, r3
 80140ac:	f006 f929 	bl	801a302 <memcpy>
 80140b0:	e02e      	b.n	8014110 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80140b2:	8a7b      	ldrh	r3, [r7, #18]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d006      	beq.n	80140c6 <tcp_write+0x38e>
 80140b8:	4b83      	ldr	r3, [pc, #524]	; (80142c8 <tcp_write+0x590>)
 80140ba:	f240 224b 	movw	r2, #587	; 0x24b
 80140be:	4985      	ldr	r1, [pc, #532]	; (80142d4 <tcp_write+0x59c>)
 80140c0:	4883      	ldr	r0, [pc, #524]	; (80142d0 <tcp_write+0x598>)
 80140c2:	f006 f9c9 	bl	801a458 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80140c6:	8b3b      	ldrh	r3, [r7, #24]
 80140c8:	2201      	movs	r2, #1
 80140ca:	4619      	mov	r1, r3
 80140cc:	2000      	movs	r0, #0
 80140ce:	f7fa ffb1 	bl	800f034 <pbuf_alloc>
 80140d2:	6178      	str	r0, [r7, #20]
 80140d4:	697b      	ldr	r3, [r7, #20]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	f000 8151 	beq.w	801437e <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 80140dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80140e0:	68ba      	ldr	r2, [r7, #8]
 80140e2:	441a      	add	r2, r3
 80140e4:	697b      	ldr	r3, [r7, #20]
 80140e6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80140e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140ec:	b29b      	uxth	r3, r3
 80140ee:	2200      	movs	r2, #0
 80140f0:	4619      	mov	r1, r3
 80140f2:	2000      	movs	r0, #0
 80140f4:	f7fa ff9e 	bl	800f034 <pbuf_alloc>
 80140f8:	6338      	str	r0, [r7, #48]	; 0x30
 80140fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d103      	bne.n	8014108 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8014100:	6978      	ldr	r0, [r7, #20]
 8014102:	f7fb fb0f 	bl	800f724 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8014106:	e13d      	b.n	8014384 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8014108:	6979      	ldr	r1, [r7, #20]
 801410a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801410c:	f7fb fbe2 	bl	800f8d4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8014110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014112:	f7fb fba1 	bl	800f858 <pbuf_clen>
 8014116:	4603      	mov	r3, r0
 8014118:	461a      	mov	r2, r3
 801411a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801411e:	4413      	add	r3, r2
 8014120:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8014124:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014128:	2b09      	cmp	r3, #9
 801412a:	d805      	bhi.n	8014138 <tcp_write+0x400>
 801412c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014130:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8014134:	4293      	cmp	r3, r2
 8014136:	d903      	bls.n	8014140 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8014138:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801413a:	f7fb faf3 	bl	800f724 <pbuf_free>
      goto memerr;
 801413e:	e121      	b.n	8014384 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014144:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014148:	441a      	add	r2, r3
 801414a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801414e:	9300      	str	r3, [sp, #0]
 8014150:	4613      	mov	r3, r2
 8014152:	2200      	movs	r2, #0
 8014154:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014156:	68f8      	ldr	r0, [r7, #12]
 8014158:	f7ff fc8e 	bl	8013a78 <tcp_create_segment>
 801415c:	64f8      	str	r0, [r7, #76]	; 0x4c
 801415e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014160:	2b00      	cmp	r3, #0
 8014162:	f000 810e 	beq.w	8014382 <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8014166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014168:	2b00      	cmp	r3, #0
 801416a:	d102      	bne.n	8014172 <tcp_write+0x43a>
      queue = seg;
 801416c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801416e:	647b      	str	r3, [r7, #68]	; 0x44
 8014170:	e00c      	b.n	801418c <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8014172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014174:	2b00      	cmp	r3, #0
 8014176:	d106      	bne.n	8014186 <tcp_write+0x44e>
 8014178:	4b53      	ldr	r3, [pc, #332]	; (80142c8 <tcp_write+0x590>)
 801417a:	f240 2285 	movw	r2, #645	; 0x285
 801417e:	4956      	ldr	r1, [pc, #344]	; (80142d8 <tcp_write+0x5a0>)
 8014180:	4853      	ldr	r0, [pc, #332]	; (80142d0 <tcp_write+0x598>)
 8014182:	f006 f969 	bl	801a458 <iprintf>
      prev_seg->next = seg;
 8014186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014188:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801418a:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801418c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801418e:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8014190:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014194:	8b3b      	ldrh	r3, [r7, #24]
 8014196:	4413      	add	r3, r2
 8014198:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801419c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80141a0:	88fb      	ldrh	r3, [r7, #6]
 80141a2:	429a      	cmp	r2, r3
 80141a4:	f4ff af38 	bcc.w	8014018 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80141a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d02c      	beq.n	8014208 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80141ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141b0:	685b      	ldr	r3, [r3, #4]
 80141b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80141b4:	e01e      	b.n	80141f4 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 80141b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141b8:	891a      	ldrh	r2, [r3, #8]
 80141ba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80141bc:	4413      	add	r3, r2
 80141be:	b29a      	uxth	r2, r3
 80141c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141c2:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80141c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d110      	bne.n	80141ee <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80141cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ce:	685b      	ldr	r3, [r3, #4]
 80141d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80141d2:	8952      	ldrh	r2, [r2, #10]
 80141d4:	4413      	add	r3, r2
 80141d6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80141d8:	68b9      	ldr	r1, [r7, #8]
 80141da:	4618      	mov	r0, r3
 80141dc:	f006 f891 	bl	801a302 <memcpy>
        p->len += oversize_used;
 80141e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141e2:	895a      	ldrh	r2, [r3, #10]
 80141e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80141e6:	4413      	add	r3, r2
 80141e8:	b29a      	uxth	r2, r3
 80141ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ec:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80141ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80141f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d1dd      	bne.n	80141b6 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 80141fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141fc:	891a      	ldrh	r2, [r3, #8]
 80141fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014200:	4413      	add	r3, r2
 8014202:	b29a      	uxth	r2, r3
 8014204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014206:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8014208:	8a7a      	ldrh	r2, [r7, #18]
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8014210:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014212:	2b00      	cmp	r3, #0
 8014214:	d018      	beq.n	8014248 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8014216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014218:	2b00      	cmp	r3, #0
 801421a:	d106      	bne.n	801422a <tcp_write+0x4f2>
 801421c:	4b2a      	ldr	r3, [pc, #168]	; (80142c8 <tcp_write+0x590>)
 801421e:	f240 22ba 	movw	r2, #698	; 0x2ba
 8014222:	492e      	ldr	r1, [pc, #184]	; (80142dc <tcp_write+0x5a4>)
 8014224:	482a      	ldr	r0, [pc, #168]	; (80142d0 <tcp_write+0x598>)
 8014226:	f006 f917 	bl	801a458 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801422a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801422c:	685b      	ldr	r3, [r3, #4]
 801422e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014230:	4618      	mov	r0, r3
 8014232:	f7fb fb4f 	bl	800f8d4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8014236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014238:	891a      	ldrh	r2, [r3, #8]
 801423a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801423c:	891b      	ldrh	r3, [r3, #8]
 801423e:	4413      	add	r3, r2
 8014240:	b29a      	uxth	r2, r3
 8014242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014244:	811a      	strh	r2, [r3, #8]
 8014246:	e037      	b.n	80142b8 <tcp_write+0x580>
  } else if (extendlen > 0) {
 8014248:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801424a:	2b00      	cmp	r3, #0
 801424c:	d034      	beq.n	80142b8 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801424e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014250:	2b00      	cmp	r3, #0
 8014252:	d003      	beq.n	801425c <tcp_write+0x524>
 8014254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014256:	685b      	ldr	r3, [r3, #4]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d106      	bne.n	801426a <tcp_write+0x532>
 801425c:	4b1a      	ldr	r3, [pc, #104]	; (80142c8 <tcp_write+0x590>)
 801425e:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8014262:	491f      	ldr	r1, [pc, #124]	; (80142e0 <tcp_write+0x5a8>)
 8014264:	481a      	ldr	r0, [pc, #104]	; (80142d0 <tcp_write+0x598>)
 8014266:	f006 f8f7 	bl	801a458 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801426a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801426c:	685b      	ldr	r3, [r3, #4]
 801426e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014270:	e009      	b.n	8014286 <tcp_write+0x54e>
      p->tot_len += extendlen;
 8014272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014274:	891a      	ldrh	r2, [r3, #8]
 8014276:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014278:	4413      	add	r3, r2
 801427a:	b29a      	uxth	r2, r3
 801427c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801427e:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	62bb      	str	r3, [r7, #40]	; 0x28
 8014286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d1f1      	bne.n	8014272 <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 801428e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014290:	891a      	ldrh	r2, [r3, #8]
 8014292:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014294:	4413      	add	r3, r2
 8014296:	b29a      	uxth	r2, r3
 8014298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801429a:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801429c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801429e:	895a      	ldrh	r2, [r3, #10]
 80142a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80142a2:	4413      	add	r3, r2
 80142a4:	b29a      	uxth	r2, r3
 80142a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142a8:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80142aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80142ac:	891a      	ldrh	r2, [r3, #8]
 80142ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80142b0:	4413      	add	r3, r2
 80142b2:	b29a      	uxth	r2, r3
 80142b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80142b6:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80142b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d112      	bne.n	80142e4 <tcp_write+0x5ac>
    pcb->unsent = queue;
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80142c2:	669a      	str	r2, [r3, #104]	; 0x68
 80142c4:	e011      	b.n	80142ea <tcp_write+0x5b2>
 80142c6:	bf00      	nop
 80142c8:	0801d3c0 	.word	0x0801d3c0
 80142cc:	0801d5d0 	.word	0x0801d5d0
 80142d0:	0801d424 	.word	0x0801d424
 80142d4:	0801d610 	.word	0x0801d610
 80142d8:	0801d620 	.word	0x0801d620
 80142dc:	0801d634 	.word	0x0801d634
 80142e0:	0801d66c 	.word	0x0801d66c
  } else {
    last_unsent->next = queue;
 80142e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80142e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80142e8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80142ee:	88fb      	ldrh	r3, [r7, #6]
 80142f0:	441a      	add	r2, r3
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80142fc:	88fb      	ldrh	r3, [r7, #6]
 80142fe:	1ad3      	subs	r3, r2, r3
 8014300:	b29a      	uxth	r2, r3
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801430e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014318:	2b00      	cmp	r3, #0
 801431a:	d00e      	beq.n	801433a <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014320:	2b00      	cmp	r3, #0
 8014322:	d10a      	bne.n	801433a <tcp_write+0x602>
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014328:	2b00      	cmp	r3, #0
 801432a:	d106      	bne.n	801433a <tcp_write+0x602>
 801432c:	4b2c      	ldr	r3, [pc, #176]	; (80143e0 <tcp_write+0x6a8>)
 801432e:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 8014332:	492c      	ldr	r1, [pc, #176]	; (80143e4 <tcp_write+0x6ac>)
 8014334:	482c      	ldr	r0, [pc, #176]	; (80143e8 <tcp_write+0x6b0>)
 8014336:	f006 f88f 	bl	801a458 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 801433a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801433c:	2b00      	cmp	r3, #0
 801433e:	d016      	beq.n	801436e <tcp_write+0x636>
 8014340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014342:	68db      	ldr	r3, [r3, #12]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d012      	beq.n	801436e <tcp_write+0x636>
 8014348:	797b      	ldrb	r3, [r7, #5]
 801434a:	f003 0302 	and.w	r3, r3, #2
 801434e:	2b00      	cmp	r3, #0
 8014350:	d10d      	bne.n	801436e <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8014352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014354:	68db      	ldr	r3, [r3, #12]
 8014356:	899b      	ldrh	r3, [r3, #12]
 8014358:	b29c      	uxth	r4, r3
 801435a:	2008      	movs	r0, #8
 801435c:	f7f9 ffe2 	bl	800e324 <lwip_htons>
 8014360:	4603      	mov	r3, r0
 8014362:	461a      	mov	r2, r3
 8014364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014366:	68db      	ldr	r3, [r3, #12]
 8014368:	4322      	orrs	r2, r4
 801436a:	b292      	uxth	r2, r2
 801436c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801436e:	2300      	movs	r3, #0
 8014370:	e031      	b.n	80143d6 <tcp_write+0x69e>
          goto memerr;
 8014372:	bf00      	nop
 8014374:	e006      	b.n	8014384 <tcp_write+0x64c>
            goto memerr;
 8014376:	bf00      	nop
 8014378:	e004      	b.n	8014384 <tcp_write+0x64c>
        goto memerr;
 801437a:	bf00      	nop
 801437c:	e002      	b.n	8014384 <tcp_write+0x64c>
        goto memerr;
 801437e:	bf00      	nop
 8014380:	e000      	b.n	8014384 <tcp_write+0x64c>
      goto memerr;
 8014382:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	7e9b      	ldrb	r3, [r3, #26]
 8014388:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801438c:	b2da      	uxtb	r2, r3
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8014392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014394:	2b00      	cmp	r3, #0
 8014396:	d002      	beq.n	801439e <tcp_write+0x666>
    pbuf_free(concat_p);
 8014398:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801439a:	f7fb f9c3 	bl	800f724 <pbuf_free>
  }
  if (queue != NULL) {
 801439e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d002      	beq.n	80143aa <tcp_write+0x672>
    tcp_segs_free(queue);
 80143a4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80143a6:	f7fc fcd8 	bl	8010d5a <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d00e      	beq.n	80143d2 <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d10a      	bne.n	80143d2 <tcp_write+0x69a>
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d106      	bne.n	80143d2 <tcp_write+0x69a>
 80143c4:	4b06      	ldr	r3, [pc, #24]	; (80143e0 <tcp_write+0x6a8>)
 80143c6:	f240 3201 	movw	r2, #769	; 0x301
 80143ca:	4906      	ldr	r1, [pc, #24]	; (80143e4 <tcp_write+0x6ac>)
 80143cc:	4806      	ldr	r0, [pc, #24]	; (80143e8 <tcp_write+0x6b0>)
 80143ce:	f006 f843 	bl	801a458 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80143d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80143d6:	4618      	mov	r0, r3
 80143d8:	375c      	adds	r7, #92	; 0x5c
 80143da:	46bd      	mov	sp, r7
 80143dc:	bd90      	pop	{r4, r7, pc}
 80143de:	bf00      	nop
 80143e0:	0801d3c0 	.word	0x0801d3c0
 80143e4:	0801d6a4 	.word	0x0801d6a4
 80143e8:	0801d424 	.word	0x0801d424

080143ec <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80143ec:	b580      	push	{r7, lr}
 80143ee:	b08a      	sub	sp, #40	; 0x28
 80143f0:	af02      	add	r7, sp, #8
 80143f2:	6078      	str	r0, [r7, #4]
 80143f4:	460b      	mov	r3, r1
 80143f6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80143f8:	2300      	movs	r3, #0
 80143fa:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80143fc:	2300      	movs	r3, #0
 80143fe:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014400:	78fb      	ldrb	r3, [r7, #3]
 8014402:	f003 0303 	and.w	r3, r3, #3
 8014406:	2b00      	cmp	r3, #0
 8014408:	d106      	bne.n	8014418 <tcp_enqueue_flags+0x2c>
 801440a:	4b6f      	ldr	r3, [pc, #444]	; (80145c8 <tcp_enqueue_flags+0x1dc>)
 801440c:	f240 321a 	movw	r2, #794	; 0x31a
 8014410:	496e      	ldr	r1, [pc, #440]	; (80145cc <tcp_enqueue_flags+0x1e0>)
 8014412:	486f      	ldr	r0, [pc, #444]	; (80145d0 <tcp_enqueue_flags+0x1e4>)
 8014414:	f006 f820 	bl	801a458 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801441e:	2b08      	cmp	r3, #8
 8014420:	d806      	bhi.n	8014430 <tcp_enqueue_flags+0x44>
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014428:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801442c:	4293      	cmp	r3, r2
 801442e:	d90e      	bls.n	801444e <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8014430:	78fb      	ldrb	r3, [r7, #3]
 8014432:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8014436:	2b00      	cmp	r3, #0
 8014438:	d109      	bne.n	801444e <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	7e9b      	ldrb	r3, [r3, #26]
 801443e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014442:	b2da      	uxtb	r2, r3
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8014448:	f04f 33ff 	mov.w	r3, #4294967295
 801444c:	e0b7      	b.n	80145be <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 801444e:	78fb      	ldrb	r3, [r7, #3]
 8014450:	f003 0302 	and.w	r3, r3, #2
 8014454:	2b00      	cmp	r3, #0
 8014456:	d001      	beq.n	801445c <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8014458:	2301      	movs	r3, #1
 801445a:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801445c:	7ffb      	ldrb	r3, [r7, #31]
 801445e:	009b      	lsls	r3, r3, #2
 8014460:	b2db      	uxtb	r3, r3
 8014462:	f003 0304 	and.w	r3, r3, #4
 8014466:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014468:	7dfb      	ldrb	r3, [r7, #23]
 801446a:	b29b      	uxth	r3, r3
 801446c:	2200      	movs	r2, #0
 801446e:	4619      	mov	r1, r3
 8014470:	2000      	movs	r0, #0
 8014472:	f7fa fddf 	bl	800f034 <pbuf_alloc>
 8014476:	6138      	str	r0, [r7, #16]
 8014478:	693b      	ldr	r3, [r7, #16]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d109      	bne.n	8014492 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	7e9b      	ldrb	r3, [r3, #26]
 8014482:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014486:	b2da      	uxtb	r2, r3
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801448c:	f04f 33ff 	mov.w	r3, #4294967295
 8014490:	e095      	b.n	80145be <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014492:	693b      	ldr	r3, [r7, #16]
 8014494:	895a      	ldrh	r2, [r3, #10]
 8014496:	7dfb      	ldrb	r3, [r7, #23]
 8014498:	b29b      	uxth	r3, r3
 801449a:	429a      	cmp	r2, r3
 801449c:	d206      	bcs.n	80144ac <tcp_enqueue_flags+0xc0>
 801449e:	4b4a      	ldr	r3, [pc, #296]	; (80145c8 <tcp_enqueue_flags+0x1dc>)
 80144a0:	f44f 7250 	mov.w	r2, #832	; 0x340
 80144a4:	494b      	ldr	r1, [pc, #300]	; (80145d4 <tcp_enqueue_flags+0x1e8>)
 80144a6:	484a      	ldr	r0, [pc, #296]	; (80145d0 <tcp_enqueue_flags+0x1e4>)
 80144a8:	f005 ffd6 	bl	801a458 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80144b0:	78fa      	ldrb	r2, [r7, #3]
 80144b2:	7ffb      	ldrb	r3, [r7, #31]
 80144b4:	9300      	str	r3, [sp, #0]
 80144b6:	460b      	mov	r3, r1
 80144b8:	6939      	ldr	r1, [r7, #16]
 80144ba:	6878      	ldr	r0, [r7, #4]
 80144bc:	f7ff fadc 	bl	8013a78 <tcp_create_segment>
 80144c0:	60f8      	str	r0, [r7, #12]
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d109      	bne.n	80144dc <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	7e9b      	ldrb	r3, [r3, #26]
 80144cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80144d0:	b2da      	uxtb	r2, r3
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80144d6:	f04f 33ff 	mov.w	r3, #4294967295
 80144da:	e070      	b.n	80145be <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	68db      	ldr	r3, [r3, #12]
 80144e0:	f003 0303 	and.w	r3, r3, #3
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d006      	beq.n	80144f6 <tcp_enqueue_flags+0x10a>
 80144e8:	4b37      	ldr	r3, [pc, #220]	; (80145c8 <tcp_enqueue_flags+0x1dc>)
 80144ea:	f240 3249 	movw	r2, #841	; 0x349
 80144ee:	493a      	ldr	r1, [pc, #232]	; (80145d8 <tcp_enqueue_flags+0x1ec>)
 80144f0:	4837      	ldr	r0, [pc, #220]	; (80145d0 <tcp_enqueue_flags+0x1e4>)
 80144f2:	f005 ffb1 	bl	801a458 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	891b      	ldrh	r3, [r3, #8]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d006      	beq.n	801450c <tcp_enqueue_flags+0x120>
 80144fe:	4b32      	ldr	r3, [pc, #200]	; (80145c8 <tcp_enqueue_flags+0x1dc>)
 8014500:	f240 324a 	movw	r2, #842	; 0x34a
 8014504:	4935      	ldr	r1, [pc, #212]	; (80145dc <tcp_enqueue_flags+0x1f0>)
 8014506:	4832      	ldr	r0, [pc, #200]	; (80145d0 <tcp_enqueue_flags+0x1e4>)
 8014508:	f005 ffa6 	bl	801a458 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014510:	2b00      	cmp	r3, #0
 8014512:	d103      	bne.n	801451c <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	68fa      	ldr	r2, [r7, #12]
 8014518:	669a      	str	r2, [r3, #104]	; 0x68
 801451a:	e00d      	b.n	8014538 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014520:	61bb      	str	r3, [r7, #24]
 8014522:	e002      	b.n	801452a <tcp_enqueue_flags+0x13e>
 8014524:	69bb      	ldr	r3, [r7, #24]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	61bb      	str	r3, [r7, #24]
 801452a:	69bb      	ldr	r3, [r7, #24]
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d1f8      	bne.n	8014524 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8014532:	69bb      	ldr	r3, [r7, #24]
 8014534:	68fa      	ldr	r2, [r7, #12]
 8014536:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	2200      	movs	r2, #0
 801453c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014540:	78fb      	ldrb	r3, [r7, #3]
 8014542:	f003 0302 	and.w	r3, r3, #2
 8014546:	2b00      	cmp	r3, #0
 8014548:	d104      	bne.n	8014554 <tcp_enqueue_flags+0x168>
 801454a:	78fb      	ldrb	r3, [r7, #3]
 801454c:	f003 0301 	and.w	r3, r3, #1
 8014550:	2b00      	cmp	r3, #0
 8014552:	d004      	beq.n	801455e <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014558:	1c5a      	adds	r2, r3, #1
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801455e:	78fb      	ldrb	r3, [r7, #3]
 8014560:	f003 0301 	and.w	r3, r3, #1
 8014564:	2b00      	cmp	r3, #0
 8014566:	d006      	beq.n	8014576 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	7e9b      	ldrb	r3, [r3, #26]
 801456c:	f043 0320 	orr.w	r3, r3, #32
 8014570:	b2da      	uxtb	r2, r3
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	685b      	ldr	r3, [r3, #4]
 801457a:	4618      	mov	r0, r3
 801457c:	f7fb f96c 	bl	800f858 <pbuf_clen>
 8014580:	4603      	mov	r3, r0
 8014582:	461a      	mov	r2, r3
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801458a:	4413      	add	r3, r2
 801458c:	b29a      	uxth	r2, r3
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801459a:	2b00      	cmp	r3, #0
 801459c:	d00e      	beq.n	80145bc <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d10a      	bne.n	80145bc <tcp_enqueue_flags+0x1d0>
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d106      	bne.n	80145bc <tcp_enqueue_flags+0x1d0>
 80145ae:	4b06      	ldr	r3, [pc, #24]	; (80145c8 <tcp_enqueue_flags+0x1dc>)
 80145b0:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80145b4:	490a      	ldr	r1, [pc, #40]	; (80145e0 <tcp_enqueue_flags+0x1f4>)
 80145b6:	4806      	ldr	r0, [pc, #24]	; (80145d0 <tcp_enqueue_flags+0x1e4>)
 80145b8:	f005 ff4e 	bl	801a458 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80145bc:	2300      	movs	r3, #0
}
 80145be:	4618      	mov	r0, r3
 80145c0:	3720      	adds	r7, #32
 80145c2:	46bd      	mov	sp, r7
 80145c4:	bd80      	pop	{r7, pc}
 80145c6:	bf00      	nop
 80145c8:	0801d3c0 	.word	0x0801d3c0
 80145cc:	0801d6c4 	.word	0x0801d6c4
 80145d0:	0801d424 	.word	0x0801d424
 80145d4:	0801d71c 	.word	0x0801d71c
 80145d8:	0801d758 	.word	0x0801d758
 80145dc:	0801d770 	.word	0x0801d770
 80145e0:	0801d79c 	.word	0x0801d79c

080145e4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80145e4:	b590      	push	{r4, r7, lr}
 80145e6:	b08b      	sub	sp, #44	; 0x2c
 80145e8:	af04      	add	r7, sp, #16
 80145ea:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 80145ec:	2300      	movs	r3, #0
 80145ee:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80145f0:	7dbb      	ldrb	r3, [r7, #22]
 80145f2:	b29c      	uxth	r4, r3
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80145f8:	4618      	mov	r0, r3
 80145fa:	f7f9 fea0 	bl	800e33e <lwip_htonl>
 80145fe:	4603      	mov	r3, r0
 8014600:	2200      	movs	r2, #0
 8014602:	4621      	mov	r1, r4
 8014604:	6878      	ldr	r0, [r7, #4]
 8014606:	f7ff f97d 	bl	8013904 <tcp_output_alloc_header>
 801460a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801460c:	693b      	ldr	r3, [r7, #16]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d109      	bne.n	8014626 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	7e9b      	ldrb	r3, [r3, #26]
 8014616:	f043 0303 	orr.w	r3, r3, #3
 801461a:	b2da      	uxtb	r2, r3
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014620:	f06f 0301 	mvn.w	r3, #1
 8014624:	e036      	b.n	8014694 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	3304      	adds	r3, #4
 801462a:	4618      	mov	r0, r3
 801462c:	f004 f9c0 	bl	80189b0 <ip4_route>
 8014630:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d102      	bne.n	801463e <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8014638:	23fc      	movs	r3, #252	; 0xfc
 801463a:	75fb      	strb	r3, [r7, #23]
 801463c:	e012      	b.n	8014664 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 801463e:	6879      	ldr	r1, [r7, #4]
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	1d18      	adds	r0, r3, #4
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	7a9c      	ldrb	r4, [r3, #10]
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	7a5b      	ldrb	r3, [r3, #9]
 801464c:	68fa      	ldr	r2, [r7, #12]
 801464e:	9202      	str	r2, [sp, #8]
 8014650:	2206      	movs	r2, #6
 8014652:	9201      	str	r2, [sp, #4]
 8014654:	9300      	str	r3, [sp, #0]
 8014656:	4623      	mov	r3, r4
 8014658:	4602      	mov	r2, r0
 801465a:	6938      	ldr	r0, [r7, #16]
 801465c:	f004 fb70 	bl	8018d40 <ip4_output_if>
 8014660:	4603      	mov	r3, r0
 8014662:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8014664:	6938      	ldr	r0, [r7, #16]
 8014666:	f7fb f85d 	bl	800f724 <pbuf_free>

  if (err != ERR_OK) {
 801466a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d007      	beq.n	8014682 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	7e9b      	ldrb	r3, [r3, #26]
 8014676:	f043 0303 	orr.w	r3, r3, #3
 801467a:	b2da      	uxtb	r2, r3
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	769a      	strb	r2, [r3, #26]
 8014680:	e006      	b.n	8014690 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	7e9b      	ldrb	r3, [r3, #26]
 8014686:	f023 0303 	bic.w	r3, r3, #3
 801468a:	b2da      	uxtb	r2, r3
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8014690:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014694:	4618      	mov	r0, r3
 8014696:	371c      	adds	r7, #28
 8014698:	46bd      	mov	sp, r7
 801469a:	bd90      	pop	{r4, r7, pc}

0801469c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801469c:	b5b0      	push	{r4, r5, r7, lr}
 801469e:	b08a      	sub	sp, #40	; 0x28
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	7d1b      	ldrb	r3, [r3, #20]
 80146a8:	2b01      	cmp	r3, #1
 80146aa:	d106      	bne.n	80146ba <tcp_output+0x1e>
 80146ac:	4b99      	ldr	r3, [pc, #612]	; (8014914 <tcp_output+0x278>)
 80146ae:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80146b2:	4999      	ldr	r1, [pc, #612]	; (8014918 <tcp_output+0x27c>)
 80146b4:	4899      	ldr	r0, [pc, #612]	; (801491c <tcp_output+0x280>)
 80146b6:	f005 fecf 	bl	801a458 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80146ba:	4b99      	ldr	r3, [pc, #612]	; (8014920 <tcp_output+0x284>)
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	687a      	ldr	r2, [r7, #4]
 80146c0:	429a      	cmp	r2, r3
 80146c2:	d101      	bne.n	80146c8 <tcp_output+0x2c>
    return ERR_OK;
 80146c4:	2300      	movs	r3, #0
 80146c6:	e1cb      	b.n	8014a60 <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80146d4:	4293      	cmp	r3, r2
 80146d6:	bf28      	it	cs
 80146d8:	4613      	movcs	r3, r2
 80146da:	b29b      	uxth	r3, r3
 80146dc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80146e2:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	7e9b      	ldrb	r3, [r3, #26]
 80146e8:	f003 0302 	and.w	r3, r3, #2
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d017      	beq.n	8014720 <tcp_output+0x84>
 80146f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d00f      	beq.n	8014716 <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 80146f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146f8:	68db      	ldr	r3, [r3, #12]
 80146fa:	685b      	ldr	r3, [r3, #4]
 80146fc:	4618      	mov	r0, r3
 80146fe:	f7f9 fe1e 	bl	800e33e <lwip_htonl>
 8014702:	4602      	mov	r2, r0
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014708:	1ad3      	subs	r3, r2, r3
 801470a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801470c:	8912      	ldrh	r2, [r2, #8]
 801470e:	4413      	add	r3, r2
     (seg == NULL ||
 8014710:	69ba      	ldr	r2, [r7, #24]
 8014712:	429a      	cmp	r2, r3
 8014714:	d204      	bcs.n	8014720 <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 8014716:	6878      	ldr	r0, [r7, #4]
 8014718:	f7ff ff64 	bl	80145e4 <tcp_send_empty_ack>
 801471c:	4603      	mov	r3, r0
 801471e:	e19f      	b.n	8014a60 <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014724:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014726:	6a3b      	ldr	r3, [r7, #32]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d007      	beq.n	801473c <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 801472c:	e002      	b.n	8014734 <tcp_output+0x98>
 801472e:	6a3b      	ldr	r3, [r7, #32]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	623b      	str	r3, [r7, #32]
 8014734:	6a3b      	ldr	r3, [r7, #32]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d1f8      	bne.n	801472e <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	3304      	adds	r3, #4
 8014740:	4618      	mov	r0, r3
 8014742:	f004 f935 	bl	80189b0 <ip4_route>
 8014746:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014748:	697b      	ldr	r3, [r7, #20]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d102      	bne.n	8014754 <tcp_output+0xb8>
    return ERR_RTE;
 801474e:	f06f 0303 	mvn.w	r3, #3
 8014752:	e185      	b.n	8014a60 <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d003      	beq.n	8014762 <tcp_output+0xc6>
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d111      	bne.n	8014786 <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014762:	697b      	ldr	r3, [r7, #20]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d002      	beq.n	801476e <tcp_output+0xd2>
 8014768:	697b      	ldr	r3, [r7, #20]
 801476a:	3304      	adds	r3, #4
 801476c:	e000      	b.n	8014770 <tcp_output+0xd4>
 801476e:	2300      	movs	r3, #0
 8014770:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014772:	693b      	ldr	r3, [r7, #16]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d102      	bne.n	801477e <tcp_output+0xe2>
      return ERR_RTE;
 8014778:	f06f 0303 	mvn.w	r3, #3
 801477c:	e170      	b.n	8014a60 <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801477e:	693b      	ldr	r3, [r7, #16]
 8014780:	681a      	ldr	r2, [r3, #0]
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8014786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014788:	2b00      	cmp	r3, #0
 801478a:	f000 813f 	beq.w	8014a0c <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014790:	68db      	ldr	r3, [r3, #12]
 8014792:	685b      	ldr	r3, [r3, #4]
 8014794:	4618      	mov	r0, r3
 8014796:	f7f9 fdd2 	bl	800e33e <lwip_htonl>
 801479a:	4602      	mov	r2, r0
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80147a0:	1ad3      	subs	r3, r2, r3
 80147a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147a4:	8912      	ldrh	r2, [r2, #8]
 80147a6:	4413      	add	r3, r2
  if (seg != NULL &&
 80147a8:	69ba      	ldr	r2, [r7, #24]
 80147aa:	429a      	cmp	r2, r3
 80147ac:	f080 812e 	bcs.w	8014a0c <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80147b0:	69bb      	ldr	r3, [r7, #24]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	f000 812a 	beq.w	8014a0c <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80147be:	461a      	mov	r2, r3
 80147c0:	69bb      	ldr	r3, [r7, #24]
 80147c2:	4293      	cmp	r3, r2
 80147c4:	f040 8122 	bne.w	8014a0c <tcp_output+0x370>
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	f040 811d 	bne.w	8014a0c <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80147d8:	2b00      	cmp	r3, #0
 80147da:	f040 812c 	bne.w	8014a36 <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	2200      	movs	r2, #0
 80147e2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	2201      	movs	r2, #1
 80147ea:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 80147ee:	e122      	b.n	8014a36 <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80147f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147f2:	68db      	ldr	r3, [r3, #12]
 80147f4:	899b      	ldrh	r3, [r3, #12]
 80147f6:	b29b      	uxth	r3, r3
 80147f8:	4618      	mov	r0, r3
 80147fa:	f7f9 fd93 	bl	800e324 <lwip_htons>
 80147fe:	4603      	mov	r3, r0
 8014800:	f003 0304 	and.w	r3, r3, #4
 8014804:	2b00      	cmp	r3, #0
 8014806:	d006      	beq.n	8014816 <tcp_output+0x17a>
 8014808:	4b42      	ldr	r3, [pc, #264]	; (8014914 <tcp_output+0x278>)
 801480a:	f240 4245 	movw	r2, #1093	; 0x445
 801480e:	4945      	ldr	r1, [pc, #276]	; (8014924 <tcp_output+0x288>)
 8014810:	4842      	ldr	r0, [pc, #264]	; (801491c <tcp_output+0x280>)
 8014812:	f005 fe21 	bl	801a458 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801481a:	2b00      	cmp	r3, #0
 801481c:	d01f      	beq.n	801485e <tcp_output+0x1c2>
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	7e9b      	ldrb	r3, [r3, #26]
 8014822:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014826:	2b00      	cmp	r3, #0
 8014828:	d119      	bne.n	801485e <tcp_output+0x1c2>
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801482e:	2b00      	cmp	r3, #0
 8014830:	d00b      	beq.n	801484a <tcp_output+0x1ae>
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d110      	bne.n	801485e <tcp_output+0x1c2>
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014840:	891a      	ldrh	r2, [r3, #8]
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014846:	429a      	cmp	r2, r3
 8014848:	d209      	bcs.n	801485e <tcp_output+0x1c2>
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014850:	2b00      	cmp	r3, #0
 8014852:	d004      	beq.n	801485e <tcp_output+0x1c2>
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801485a:	2b08      	cmp	r3, #8
 801485c:	d901      	bls.n	8014862 <tcp_output+0x1c6>
 801485e:	2301      	movs	r3, #1
 8014860:	e000      	b.n	8014864 <tcp_output+0x1c8>
 8014862:	2300      	movs	r3, #0
 8014864:	2b00      	cmp	r3, #0
 8014866:	d106      	bne.n	8014876 <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	7e9b      	ldrb	r3, [r3, #26]
 801486c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014870:	2b00      	cmp	r3, #0
 8014872:	f000 80e2 	beq.w	8014a3a <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	7d1b      	ldrb	r3, [r3, #20]
 801487a:	2b02      	cmp	r3, #2
 801487c:	d00d      	beq.n	801489a <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014880:	68db      	ldr	r3, [r3, #12]
 8014882:	899b      	ldrh	r3, [r3, #12]
 8014884:	b29c      	uxth	r4, r3
 8014886:	2010      	movs	r0, #16
 8014888:	f7f9 fd4c 	bl	800e324 <lwip_htons>
 801488c:	4603      	mov	r3, r0
 801488e:	461a      	mov	r2, r3
 8014890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014892:	68db      	ldr	r3, [r3, #12]
 8014894:	4322      	orrs	r2, r4
 8014896:	b292      	uxth	r2, r2
 8014898:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 801489a:	697a      	ldr	r2, [r7, #20]
 801489c:	6879      	ldr	r1, [r7, #4]
 801489e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80148a0:	f000 f8e2 	bl	8014a68 <tcp_output_segment>
 80148a4:	4603      	mov	r3, r0
 80148a6:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80148a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d009      	beq.n	80148c4 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	7e9b      	ldrb	r3, [r3, #26]
 80148b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80148b8:	b2da      	uxtb	r2, r3
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	769a      	strb	r2, [r3, #26]
      return err;
 80148be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80148c2:	e0cd      	b.n	8014a60 <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 80148c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148c6:	681a      	ldr	r2, [r3, #0]
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	7d1b      	ldrb	r3, [r3, #20]
 80148d0:	2b02      	cmp	r3, #2
 80148d2:	d006      	beq.n	80148e2 <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	7e9b      	ldrb	r3, [r3, #26]
 80148d8:	f023 0303 	bic.w	r3, r3, #3
 80148dc:	b2da      	uxtb	r2, r3
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80148e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148e4:	68db      	ldr	r3, [r3, #12]
 80148e6:	685b      	ldr	r3, [r3, #4]
 80148e8:	4618      	mov	r0, r3
 80148ea:	f7f9 fd28 	bl	800e33e <lwip_htonl>
 80148ee:	4604      	mov	r4, r0
 80148f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148f2:	891b      	ldrh	r3, [r3, #8]
 80148f4:	461d      	mov	r5, r3
 80148f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148f8:	68db      	ldr	r3, [r3, #12]
 80148fa:	899b      	ldrh	r3, [r3, #12]
 80148fc:	b29b      	uxth	r3, r3
 80148fe:	4618      	mov	r0, r3
 8014900:	f7f9 fd10 	bl	800e324 <lwip_htons>
 8014904:	4603      	mov	r3, r0
 8014906:	f003 0303 	and.w	r3, r3, #3
 801490a:	2b00      	cmp	r3, #0
 801490c:	d00c      	beq.n	8014928 <tcp_output+0x28c>
 801490e:	2301      	movs	r3, #1
 8014910:	e00b      	b.n	801492a <tcp_output+0x28e>
 8014912:	bf00      	nop
 8014914:	0801d3c0 	.word	0x0801d3c0
 8014918:	0801d7c4 	.word	0x0801d7c4
 801491c:	0801d424 	.word	0x0801d424
 8014920:	2000ec0c 	.word	0x2000ec0c
 8014924:	0801d7ec 	.word	0x0801d7ec
 8014928:	2300      	movs	r3, #0
 801492a:	442b      	add	r3, r5
 801492c:	4423      	add	r3, r4
 801492e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014934:	68bb      	ldr	r3, [r7, #8]
 8014936:	1ad3      	subs	r3, r2, r3
 8014938:	2b00      	cmp	r3, #0
 801493a:	da02      	bge.n	8014942 <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	68ba      	ldr	r2, [r7, #8]
 8014940:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014944:	891b      	ldrh	r3, [r3, #8]
 8014946:	461c      	mov	r4, r3
 8014948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801494a:	68db      	ldr	r3, [r3, #12]
 801494c:	899b      	ldrh	r3, [r3, #12]
 801494e:	b29b      	uxth	r3, r3
 8014950:	4618      	mov	r0, r3
 8014952:	f7f9 fce7 	bl	800e324 <lwip_htons>
 8014956:	4603      	mov	r3, r0
 8014958:	f003 0303 	and.w	r3, r3, #3
 801495c:	2b00      	cmp	r3, #0
 801495e:	d001      	beq.n	8014964 <tcp_output+0x2c8>
 8014960:	2301      	movs	r3, #1
 8014962:	e000      	b.n	8014966 <tcp_output+0x2ca>
 8014964:	2300      	movs	r3, #0
 8014966:	4423      	add	r3, r4
 8014968:	2b00      	cmp	r3, #0
 801496a:	d049      	beq.n	8014a00 <tcp_output+0x364>
      seg->next = NULL;
 801496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801496e:	2200      	movs	r2, #0
 8014970:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014976:	2b00      	cmp	r3, #0
 8014978:	d105      	bne.n	8014986 <tcp_output+0x2ea>
        pcb->unacked = seg;
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801497e:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8014980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014982:	623b      	str	r3, [r7, #32]
 8014984:	e03f      	b.n	8014a06 <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014988:	68db      	ldr	r3, [r3, #12]
 801498a:	685b      	ldr	r3, [r3, #4]
 801498c:	4618      	mov	r0, r3
 801498e:	f7f9 fcd6 	bl	800e33e <lwip_htonl>
 8014992:	4604      	mov	r4, r0
 8014994:	6a3b      	ldr	r3, [r7, #32]
 8014996:	68db      	ldr	r3, [r3, #12]
 8014998:	685b      	ldr	r3, [r3, #4]
 801499a:	4618      	mov	r0, r3
 801499c:	f7f9 fccf 	bl	800e33e <lwip_htonl>
 80149a0:	4603      	mov	r3, r0
 80149a2:	1ae3      	subs	r3, r4, r3
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	da24      	bge.n	80149f2 <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	336c      	adds	r3, #108	; 0x6c
 80149ac:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80149ae:	e002      	b.n	80149b6 <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 80149b0:	69fb      	ldr	r3, [r7, #28]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80149b6:	69fb      	ldr	r3, [r7, #28]
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d011      	beq.n	80149e2 <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80149be:	69fb      	ldr	r3, [r7, #28]
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	68db      	ldr	r3, [r3, #12]
 80149c4:	685b      	ldr	r3, [r3, #4]
 80149c6:	4618      	mov	r0, r3
 80149c8:	f7f9 fcb9 	bl	800e33e <lwip_htonl>
 80149cc:	4604      	mov	r4, r0
 80149ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149d0:	68db      	ldr	r3, [r3, #12]
 80149d2:	685b      	ldr	r3, [r3, #4]
 80149d4:	4618      	mov	r0, r3
 80149d6:	f7f9 fcb2 	bl	800e33e <lwip_htonl>
 80149da:	4603      	mov	r3, r0
 80149dc:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80149de:	2b00      	cmp	r3, #0
 80149e0:	dbe6      	blt.n	80149b0 <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 80149e2:	69fb      	ldr	r3, [r7, #28]
 80149e4:	681a      	ldr	r2, [r3, #0]
 80149e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149e8:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80149ea:	69fb      	ldr	r3, [r7, #28]
 80149ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80149ee:	601a      	str	r2, [r3, #0]
 80149f0:	e009      	b.n	8014a06 <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80149f2:	6a3b      	ldr	r3, [r7, #32]
 80149f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80149f6:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80149f8:	6a3b      	ldr	r3, [r7, #32]
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	623b      	str	r3, [r7, #32]
 80149fe:	e002      	b.n	8014a06 <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014a00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a02:	f7fc f9bf 	bl	8010d84 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014a0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d015      	beq.n	8014a3e <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a14:	68db      	ldr	r3, [r3, #12]
 8014a16:	685b      	ldr	r3, [r3, #4]
 8014a18:	4618      	mov	r0, r3
 8014a1a:	f7f9 fc90 	bl	800e33e <lwip_htonl>
 8014a1e:	4602      	mov	r2, r0
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014a24:	1ad3      	subs	r3, r2, r3
 8014a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a28:	8912      	ldrh	r2, [r2, #8]
 8014a2a:	4413      	add	r3, r2
  while (seg != NULL &&
 8014a2c:	69ba      	ldr	r2, [r7, #24]
 8014a2e:	429a      	cmp	r2, r3
 8014a30:	f4bf aede 	bcs.w	80147f0 <tcp_output+0x154>
  }
output_done:
 8014a34:	e003      	b.n	8014a3e <tcp_output+0x3a2>
    goto output_done;
 8014a36:	bf00      	nop
 8014a38:	e002      	b.n	8014a40 <tcp_output+0x3a4>
      break;
 8014a3a:	bf00      	nop
 8014a3c:	e000      	b.n	8014a40 <tcp_output+0x3a4>
output_done:
 8014a3e:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d103      	bne.n	8014a50 <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	2200      	movs	r2, #0
 8014a4c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	7e9b      	ldrb	r3, [r3, #26]
 8014a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014a58:	b2da      	uxtb	r2, r3
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8014a5e:	2300      	movs	r3, #0
}
 8014a60:	4618      	mov	r0, r3
 8014a62:	3728      	adds	r7, #40	; 0x28
 8014a64:	46bd      	mov	sp, r7
 8014a66:	bdb0      	pop	{r4, r5, r7, pc}

08014a68 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014a68:	b5b0      	push	{r4, r5, r7, lr}
 8014a6a:	b08c      	sub	sp, #48	; 0x30
 8014a6c:	af04      	add	r7, sp, #16
 8014a6e:	60f8      	str	r0, [r7, #12]
 8014a70:	60b9      	str	r1, [r7, #8]
 8014a72:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	685b      	ldr	r3, [r3, #4]
 8014a78:	89db      	ldrh	r3, [r3, #14]
 8014a7a:	2b01      	cmp	r3, #1
 8014a7c:	d001      	beq.n	8014a82 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8014a7e:	2300      	movs	r3, #0
 8014a80:	e08a      	b.n	8014b98 <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014a82:	68bb      	ldr	r3, [r7, #8]
 8014a84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	68dc      	ldr	r4, [r3, #12]
 8014a8a:	4610      	mov	r0, r2
 8014a8c:	f7f9 fc57 	bl	800e33e <lwip_htonl>
 8014a90:	4603      	mov	r3, r0
 8014a92:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014a94:	68bb      	ldr	r3, [r7, #8]
 8014a96:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	68dc      	ldr	r4, [r3, #12]
 8014a9c:	4610      	mov	r0, r2
 8014a9e:	f7f9 fc41 	bl	800e324 <lwip_htons>
 8014aa2:	4603      	mov	r3, r0
 8014aa4:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014aa6:	68bb      	ldr	r3, [r7, #8]
 8014aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014aaa:	68ba      	ldr	r2, [r7, #8]
 8014aac:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014aae:	441a      	add	r2, r3
 8014ab0:	68bb      	ldr	r3, [r7, #8]
 8014ab2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	68db      	ldr	r3, [r3, #12]
 8014ab8:	3314      	adds	r3, #20
 8014aba:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	7a9b      	ldrb	r3, [r3, #10]
 8014ac0:	f003 0301 	and.w	r3, r3, #1
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d014      	beq.n	8014af2 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8014ac8:	68bb      	ldr	r3, [r7, #8]
 8014aca:	3304      	adds	r3, #4
 8014acc:	4619      	mov	r1, r3
 8014ace:	f44f 7006 	mov.w	r0, #536	; 0x218
 8014ad2:	f7fc fc7b 	bl	80113cc <tcp_eff_send_mss_impl>
 8014ad6:	4603      	mov	r3, r0
 8014ad8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014ada:	8b7b      	ldrh	r3, [r7, #26]
 8014adc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	f7f9 fc2c 	bl	800e33e <lwip_htonl>
 8014ae6:	4602      	mov	r2, r0
 8014ae8:	69fb      	ldr	r3, [r7, #28]
 8014aea:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014aec:	69fb      	ldr	r3, [r7, #28]
 8014aee:	3304      	adds	r3, #4
 8014af0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8014af2:	68bb      	ldr	r3, [r7, #8]
 8014af4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	da02      	bge.n	8014b02 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8014afc:	68bb      	ldr	r3, [r7, #8]
 8014afe:	2200      	movs	r2, #0
 8014b00:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8014b02:	68bb      	ldr	r3, [r7, #8]
 8014b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d10c      	bne.n	8014b24 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8014b0a:	4b25      	ldr	r3, [pc, #148]	; (8014ba0 <tcp_output_segment+0x138>)
 8014b0c:	681a      	ldr	r2, [r3, #0]
 8014b0e:	68bb      	ldr	r3, [r7, #8]
 8014b10:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	68db      	ldr	r3, [r3, #12]
 8014b16:	685b      	ldr	r3, [r3, #4]
 8014b18:	4618      	mov	r0, r3
 8014b1a:	f7f9 fc10 	bl	800e33e <lwip_htonl>
 8014b1e:	4602      	mov	r2, r0
 8014b20:	68bb      	ldr	r3, [r7, #8]
 8014b22:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	68da      	ldr	r2, [r3, #12]
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	685b      	ldr	r3, [r3, #4]
 8014b2c:	685b      	ldr	r3, [r3, #4]
 8014b2e:	1ad3      	subs	r3, r2, r3
 8014b30:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	685b      	ldr	r3, [r3, #4]
 8014b36:	8959      	ldrh	r1, [r3, #10]
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	685b      	ldr	r3, [r3, #4]
 8014b3c:	8b3a      	ldrh	r2, [r7, #24]
 8014b3e:	1a8a      	subs	r2, r1, r2
 8014b40:	b292      	uxth	r2, r2
 8014b42:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	685b      	ldr	r3, [r3, #4]
 8014b48:	8919      	ldrh	r1, [r3, #8]
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	685b      	ldr	r3, [r3, #4]
 8014b4e:	8b3a      	ldrh	r2, [r7, #24]
 8014b50:	1a8a      	subs	r2, r1, r2
 8014b52:	b292      	uxth	r2, r2
 8014b54:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	685b      	ldr	r3, [r3, #4]
 8014b5a:	68fa      	ldr	r2, [r7, #12]
 8014b5c:	68d2      	ldr	r2, [r2, #12]
 8014b5e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	68db      	ldr	r3, [r3, #12]
 8014b64:	2200      	movs	r2, #0
 8014b66:	741a      	strb	r2, [r3, #16]
 8014b68:	2200      	movs	r2, #0
 8014b6a:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	6858      	ldr	r0, [r3, #4]
 8014b70:	68b9      	ldr	r1, [r7, #8]
 8014b72:	68bb      	ldr	r3, [r7, #8]
 8014b74:	1d1c      	adds	r4, r3, #4
 8014b76:	68bb      	ldr	r3, [r7, #8]
 8014b78:	7a9d      	ldrb	r5, [r3, #10]
 8014b7a:	68bb      	ldr	r3, [r7, #8]
 8014b7c:	7a5b      	ldrb	r3, [r3, #9]
 8014b7e:	687a      	ldr	r2, [r7, #4]
 8014b80:	9202      	str	r2, [sp, #8]
 8014b82:	2206      	movs	r2, #6
 8014b84:	9201      	str	r2, [sp, #4]
 8014b86:	9300      	str	r3, [sp, #0]
 8014b88:	462b      	mov	r3, r5
 8014b8a:	4622      	mov	r2, r4
 8014b8c:	f004 f8d8 	bl	8018d40 <ip4_output_if>
 8014b90:	4603      	mov	r3, r0
 8014b92:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8014b94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014b98:	4618      	mov	r0, r3
 8014b9a:	3720      	adds	r7, #32
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8014ba0:	2000ebc0 	.word	0x2000ebc0

08014ba4 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b08c      	sub	sp, #48	; 0x30
 8014ba8:	af04      	add	r7, sp, #16
 8014baa:	60f8      	str	r0, [r7, #12]
 8014bac:	60b9      	str	r1, [r7, #8]
 8014bae:	607a      	str	r2, [r7, #4]
 8014bb0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8014bb2:	2200      	movs	r2, #0
 8014bb4:	2114      	movs	r1, #20
 8014bb6:	2001      	movs	r0, #1
 8014bb8:	f7fa fa3c 	bl	800f034 <pbuf_alloc>
 8014bbc:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8014bbe:	69fb      	ldr	r3, [r7, #28]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d05b      	beq.n	8014c7c <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014bc4:	69fb      	ldr	r3, [r7, #28]
 8014bc6:	895b      	ldrh	r3, [r3, #10]
 8014bc8:	2b13      	cmp	r3, #19
 8014bca:	d806      	bhi.n	8014bda <tcp_rst+0x36>
 8014bcc:	4b2d      	ldr	r3, [pc, #180]	; (8014c84 <tcp_rst+0xe0>)
 8014bce:	f240 524c 	movw	r2, #1356	; 0x54c
 8014bd2:	492d      	ldr	r1, [pc, #180]	; (8014c88 <tcp_rst+0xe4>)
 8014bd4:	482d      	ldr	r0, [pc, #180]	; (8014c8c <tcp_rst+0xe8>)
 8014bd6:	f005 fc3f 	bl	801a458 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8014bda:	69fb      	ldr	r3, [r7, #28]
 8014bdc:	685b      	ldr	r3, [r3, #4]
 8014bde:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8014be0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014be2:	4618      	mov	r0, r3
 8014be4:	f7f9 fb9e 	bl	800e324 <lwip_htons>
 8014be8:	4603      	mov	r3, r0
 8014bea:	461a      	mov	r2, r3
 8014bec:	69bb      	ldr	r3, [r7, #24]
 8014bee:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8014bf0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	f7f9 fb96 	bl	800e324 <lwip_htons>
 8014bf8:	4603      	mov	r3, r0
 8014bfa:	461a      	mov	r2, r3
 8014bfc:	69bb      	ldr	r3, [r7, #24]
 8014bfe:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8014c00:	68f8      	ldr	r0, [r7, #12]
 8014c02:	f7f9 fb9c 	bl	800e33e <lwip_htonl>
 8014c06:	4602      	mov	r2, r0
 8014c08:	69bb      	ldr	r3, [r7, #24]
 8014c0a:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8014c0c:	68b8      	ldr	r0, [r7, #8]
 8014c0e:	f7f9 fb96 	bl	800e33e <lwip_htonl>
 8014c12:	4602      	mov	r2, r0
 8014c14:	69bb      	ldr	r3, [r7, #24]
 8014c16:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8014c18:	f245 0014 	movw	r0, #20500	; 0x5014
 8014c1c:	f7f9 fb82 	bl	800e324 <lwip_htons>
 8014c20:	4603      	mov	r3, r0
 8014c22:	461a      	mov	r2, r3
 8014c24:	69bb      	ldr	r3, [r7, #24]
 8014c26:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8014c28:	69bb      	ldr	r3, [r7, #24]
 8014c2a:	2200      	movs	r2, #0
 8014c2c:	f042 0208 	orr.w	r2, r2, #8
 8014c30:	739a      	strb	r2, [r3, #14]
 8014c32:	2200      	movs	r2, #0
 8014c34:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8014c38:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8014c3a:	69bb      	ldr	r3, [r7, #24]
 8014c3c:	2200      	movs	r2, #0
 8014c3e:	741a      	strb	r2, [r3, #16]
 8014c40:	2200      	movs	r2, #0
 8014c42:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8014c44:	69bb      	ldr	r3, [r7, #24]
 8014c46:	2200      	movs	r2, #0
 8014c48:	749a      	strb	r2, [r3, #18]
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8014c4e:	6838      	ldr	r0, [r7, #0]
 8014c50:	f003 feae 	bl	80189b0 <ip4_route>
 8014c54:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8014c56:	697b      	ldr	r3, [r7, #20]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d00b      	beq.n	8014c74 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8014c5c:	697b      	ldr	r3, [r7, #20]
 8014c5e:	9302      	str	r3, [sp, #8]
 8014c60:	2306      	movs	r3, #6
 8014c62:	9301      	str	r3, [sp, #4]
 8014c64:	2300      	movs	r3, #0
 8014c66:	9300      	str	r3, [sp, #0]
 8014c68:	23ff      	movs	r3, #255	; 0xff
 8014c6a:	683a      	ldr	r2, [r7, #0]
 8014c6c:	6879      	ldr	r1, [r7, #4]
 8014c6e:	69f8      	ldr	r0, [r7, #28]
 8014c70:	f004 f866 	bl	8018d40 <ip4_output_if>
  }
  pbuf_free(p);
 8014c74:	69f8      	ldr	r0, [r7, #28]
 8014c76:	f7fa fd55 	bl	800f724 <pbuf_free>
 8014c7a:	e000      	b.n	8014c7e <tcp_rst+0xda>
    return;
 8014c7c:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014c7e:	3720      	adds	r7, #32
 8014c80:	46bd      	mov	sp, r7
 8014c82:	bd80      	pop	{r7, pc}
 8014c84:	0801d3c0 	.word	0x0801d3c0
 8014c88:	0801d3f4 	.word	0x0801d3f4
 8014c8c:	0801d424 	.word	0x0801d424

08014c90 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014c90:	b580      	push	{r7, lr}
 8014c92:	b084      	sub	sp, #16
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d029      	beq.n	8014cf4 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ca4:	60fb      	str	r3, [r7, #12]
 8014ca6:	e002      	b.n	8014cae <tcp_rexmit_rto+0x1e>
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	60fb      	str	r3, [r7, #12]
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d1f8      	bne.n	8014ca8 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	2200      	movs	r2, #0
 8014cca:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014cd2:	2bff      	cmp	r3, #255	; 0xff
 8014cd4:	d007      	beq.n	8014ce6 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014cdc:	3301      	adds	r3, #1
 8014cde:	b2da      	uxtb	r2, r3
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	2200      	movs	r2, #0
 8014cea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8014cec:	6878      	ldr	r0, [r7, #4]
 8014cee:	f7ff fcd5 	bl	801469c <tcp_output>
 8014cf2:	e000      	b.n	8014cf6 <tcp_rexmit_rto+0x66>
    return;
 8014cf4:	bf00      	nop
}
 8014cf6:	3710      	adds	r7, #16
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	bd80      	pop	{r7, pc}

08014cfc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014cfc:	b590      	push	{r4, r7, lr}
 8014cfe:	b085      	sub	sp, #20
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d043      	beq.n	8014d94 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d10:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8014d12:	68bb      	ldr	r3, [r7, #8]
 8014d14:	681a      	ldr	r2, [r3, #0]
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	3368      	adds	r3, #104	; 0x68
 8014d1e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014d20:	e002      	b.n	8014d28 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d011      	beq.n	8014d54 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	68db      	ldr	r3, [r3, #12]
 8014d36:	685b      	ldr	r3, [r3, #4]
 8014d38:	4618      	mov	r0, r3
 8014d3a:	f7f9 fb00 	bl	800e33e <lwip_htonl>
 8014d3e:	4604      	mov	r4, r0
 8014d40:	68bb      	ldr	r3, [r7, #8]
 8014d42:	68db      	ldr	r3, [r3, #12]
 8014d44:	685b      	ldr	r3, [r3, #4]
 8014d46:	4618      	mov	r0, r3
 8014d48:	f7f9 faf9 	bl	800e33e <lwip_htonl>
 8014d4c:	4603      	mov	r3, r0
 8014d4e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	dbe6      	blt.n	8014d22 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	681a      	ldr	r2, [r3, #0]
 8014d58:	68bb      	ldr	r3, [r7, #8]
 8014d5a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	68ba      	ldr	r2, [r7, #8]
 8014d60:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8014d62:	68bb      	ldr	r3, [r7, #8]
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d103      	bne.n	8014d72 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	2200      	movs	r2, #0
 8014d6e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014d78:	2bff      	cmp	r3, #255	; 0xff
 8014d7a:	d007      	beq.n	8014d8c <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014d82:	3301      	adds	r3, #1
 8014d84:	b2da      	uxtb	r2, r3
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	2200      	movs	r2, #0
 8014d90:	635a      	str	r2, [r3, #52]	; 0x34
 8014d92:	e000      	b.n	8014d96 <tcp_rexmit+0x9a>
    return;
 8014d94:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8014d96:	3714      	adds	r7, #20
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	bd90      	pop	{r4, r7, pc}

08014d9c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b082      	sub	sp, #8
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d041      	beq.n	8014e30 <tcp_rexmit_fast+0x94>
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	7e9b      	ldrb	r3, [r3, #26]
 8014db0:	f003 0304 	and.w	r3, r3, #4
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d13b      	bne.n	8014e30 <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8014db8:	6878      	ldr	r0, [r7, #4]
 8014dba:	f7ff ff9f 	bl	8014cfc <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014dca:	4293      	cmp	r3, r2
 8014dcc:	bf28      	it	cs
 8014dce:	4613      	movcs	r3, r2
 8014dd0:	b29b      	uxth	r3, r3
 8014dd2:	0fda      	lsrs	r2, r3, #31
 8014dd4:	4413      	add	r3, r2
 8014dd6:	105b      	asrs	r3, r3, #1
 8014dd8:	b29a      	uxth	r2, r3
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014de6:	461a      	mov	r2, r3
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014dec:	005b      	lsls	r3, r3, #1
 8014dee:	429a      	cmp	r2, r3
 8014df0:	d206      	bcs.n	8014e00 <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014df6:	005b      	lsls	r3, r3, #1
 8014df8:	b29a      	uxth	r2, r3
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014e0a:	4619      	mov	r1, r3
 8014e0c:	0049      	lsls	r1, r1, #1
 8014e0e:	440b      	add	r3, r1
 8014e10:	b29b      	uxth	r3, r3
 8014e12:	4413      	add	r3, r2
 8014e14:	b29a      	uxth	r2, r3
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	7e9b      	ldrb	r3, [r3, #26]
 8014e20:	f043 0304 	orr.w	r3, r3, #4
 8014e24:	b2da      	uxtb	r2, r3
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	2200      	movs	r2, #0
 8014e2e:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 8014e30:	bf00      	nop
 8014e32:	3708      	adds	r7, #8
 8014e34:	46bd      	mov	sp, r7
 8014e36:	bd80      	pop	{r7, pc}

08014e38 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b08a      	sub	sp, #40	; 0x28
 8014e3c:	af04      	add	r7, sp, #16
 8014e3e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014e44:	3b01      	subs	r3, #1
 8014e46:	4618      	mov	r0, r3
 8014e48:	f7f9 fa79 	bl	800e33e <lwip_htonl>
 8014e4c:	4603      	mov	r3, r0
 8014e4e:	2200      	movs	r2, #0
 8014e50:	2100      	movs	r1, #0
 8014e52:	6878      	ldr	r0, [r7, #4]
 8014e54:	f7fe fd56 	bl	8013904 <tcp_output_alloc_header>
 8014e58:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014e5a:	693b      	ldr	r3, [r7, #16]
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d102      	bne.n	8014e66 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014e60:	f04f 33ff 	mov.w	r3, #4294967295
 8014e64:	e021      	b.n	8014eaa <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	3304      	adds	r3, #4
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	f003 fda0 	bl	80189b0 <ip4_route>
 8014e70:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d102      	bne.n	8014e7e <tcp_keepalive+0x46>
    err = ERR_RTE;
 8014e78:	23fc      	movs	r3, #252	; 0xfc
 8014e7a:	75fb      	strb	r3, [r7, #23]
 8014e7c:	e010      	b.n	8014ea0 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8014e7e:	6879      	ldr	r1, [r7, #4]
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	1d1a      	adds	r2, r3, #4
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	7a98      	ldrb	r0, [r3, #10]
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	9302      	str	r3, [sp, #8]
 8014e8c:	2306      	movs	r3, #6
 8014e8e:	9301      	str	r3, [sp, #4]
 8014e90:	2300      	movs	r3, #0
 8014e92:	9300      	str	r3, [sp, #0]
 8014e94:	4603      	mov	r3, r0
 8014e96:	6938      	ldr	r0, [r7, #16]
 8014e98:	f003 ff52 	bl	8018d40 <ip4_output_if>
 8014e9c:	4603      	mov	r3, r0
 8014e9e:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8014ea0:	6938      	ldr	r0, [r7, #16]
 8014ea2:	f7fa fc3f 	bl	800f724 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014ea6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014eaa:	4618      	mov	r0, r3
 8014eac:	3718      	adds	r7, #24
 8014eae:	46bd      	mov	sp, r7
 8014eb0:	bd80      	pop	{r7, pc}

08014eb2 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014eb2:	b590      	push	{r4, r7, lr}
 8014eb4:	b08f      	sub	sp, #60	; 0x3c
 8014eb6:	af04      	add	r7, sp, #16
 8014eb8:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ebe:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8014ec0:	6a3b      	ldr	r3, [r7, #32]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d102      	bne.n	8014ecc <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014eca:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8014ecc:	6a3b      	ldr	r3, [r7, #32]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d101      	bne.n	8014ed6 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	e085      	b.n	8014fe2 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014ed6:	6a3b      	ldr	r3, [r7, #32]
 8014ed8:	68db      	ldr	r3, [r3, #12]
 8014eda:	899b      	ldrh	r3, [r3, #12]
 8014edc:	b29b      	uxth	r3, r3
 8014ede:	4618      	mov	r0, r3
 8014ee0:	f7f9 fa20 	bl	800e324 <lwip_htons>
 8014ee4:	4603      	mov	r3, r0
 8014ee6:	f003 0301 	and.w	r3, r3, #1
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d005      	beq.n	8014efa <tcp_zero_window_probe+0x48>
 8014eee:	6a3b      	ldr	r3, [r7, #32]
 8014ef0:	891b      	ldrh	r3, [r3, #8]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d101      	bne.n	8014efa <tcp_zero_window_probe+0x48>
 8014ef6:	2301      	movs	r3, #1
 8014ef8:	e000      	b.n	8014efc <tcp_zero_window_probe+0x4a>
 8014efa:	2300      	movs	r3, #0
 8014efc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014efe:	7ffb      	ldrb	r3, [r7, #31]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	bf0c      	ite	eq
 8014f04:	2301      	moveq	r3, #1
 8014f06:	2300      	movne	r3, #0
 8014f08:	b2db      	uxtb	r3, r3
 8014f0a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8014f0c:	6a3b      	ldr	r3, [r7, #32]
 8014f0e:	68db      	ldr	r3, [r3, #12]
 8014f10:	685b      	ldr	r3, [r3, #4]
 8014f12:	8bba      	ldrh	r2, [r7, #28]
 8014f14:	2100      	movs	r1, #0
 8014f16:	6878      	ldr	r0, [r7, #4]
 8014f18:	f7fe fcf4 	bl	8013904 <tcp_output_alloc_header>
 8014f1c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014f1e:	69bb      	ldr	r3, [r7, #24]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d102      	bne.n	8014f2a <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014f24:	f04f 33ff 	mov.w	r3, #4294967295
 8014f28:	e05b      	b.n	8014fe2 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014f2a:	69bb      	ldr	r3, [r7, #24]
 8014f2c:	685b      	ldr	r3, [r3, #4]
 8014f2e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014f30:	7ffb      	ldrb	r3, [r7, #31]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d00e      	beq.n	8014f54 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014f36:	697b      	ldr	r3, [r7, #20]
 8014f38:	899b      	ldrh	r3, [r3, #12]
 8014f3a:	b29b      	uxth	r3, r3
 8014f3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014f40:	b29c      	uxth	r4, r3
 8014f42:	2011      	movs	r0, #17
 8014f44:	f7f9 f9ee 	bl	800e324 <lwip_htons>
 8014f48:	4603      	mov	r3, r0
 8014f4a:	4323      	orrs	r3, r4
 8014f4c:	b29a      	uxth	r2, r3
 8014f4e:	697b      	ldr	r3, [r7, #20]
 8014f50:	819a      	strh	r2, [r3, #12]
 8014f52:	e010      	b.n	8014f76 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014f54:	69bb      	ldr	r3, [r7, #24]
 8014f56:	685b      	ldr	r3, [r3, #4]
 8014f58:	3314      	adds	r3, #20
 8014f5a:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014f5c:	6a3b      	ldr	r3, [r7, #32]
 8014f5e:	6858      	ldr	r0, [r3, #4]
 8014f60:	6a3b      	ldr	r3, [r7, #32]
 8014f62:	685b      	ldr	r3, [r3, #4]
 8014f64:	891a      	ldrh	r2, [r3, #8]
 8014f66:	6a3b      	ldr	r3, [r7, #32]
 8014f68:	891b      	ldrh	r3, [r3, #8]
 8014f6a:	1ad3      	subs	r3, r2, r3
 8014f6c:	b29b      	uxth	r3, r3
 8014f6e:	2201      	movs	r2, #1
 8014f70:	6939      	ldr	r1, [r7, #16]
 8014f72:	f7fa fde1 	bl	800fb38 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014f76:	6a3b      	ldr	r3, [r7, #32]
 8014f78:	68db      	ldr	r3, [r3, #12]
 8014f7a:	685b      	ldr	r3, [r3, #4]
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	f7f9 f9de 	bl	800e33e <lwip_htonl>
 8014f82:	4603      	mov	r3, r0
 8014f84:	3301      	adds	r3, #1
 8014f86:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	1ad3      	subs	r3, r2, r3
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	da02      	bge.n	8014f9a <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	68fa      	ldr	r2, [r7, #12]
 8014f98:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	3304      	adds	r3, #4
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f003 fd06 	bl	80189b0 <ip4_route>
 8014fa4:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8014fa6:	68bb      	ldr	r3, [r7, #8]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d103      	bne.n	8014fb4 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8014fac:	23fc      	movs	r3, #252	; 0xfc
 8014fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014fb2:	e011      	b.n	8014fd8 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014fb4:	6879      	ldr	r1, [r7, #4]
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	1d1a      	adds	r2, r3, #4
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	7a98      	ldrb	r0, [r3, #10]
 8014fbe:	68bb      	ldr	r3, [r7, #8]
 8014fc0:	9302      	str	r3, [sp, #8]
 8014fc2:	2306      	movs	r3, #6
 8014fc4:	9301      	str	r3, [sp, #4]
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	9300      	str	r3, [sp, #0]
 8014fca:	4603      	mov	r3, r0
 8014fcc:	69b8      	ldr	r0, [r7, #24]
 8014fce:	f003 feb7 	bl	8018d40 <ip4_output_if>
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8014fd8:	69b8      	ldr	r0, [r7, #24]
 8014fda:	f7fa fba3 	bl	800f724 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014fde:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	372c      	adds	r7, #44	; 0x2c
 8014fe6:	46bd      	mov	sp, r7
 8014fe8:	bd90      	pop	{r4, r7, pc}
	...

08014fec <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b082      	sub	sp, #8
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014ff4:	f7fa fe20 	bl	800fc38 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014ff8:	4b0a      	ldr	r3, [pc, #40]	; (8015024 <tcpip_tcp_timer+0x38>)
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d103      	bne.n	8015008 <tcpip_tcp_timer+0x1c>
 8015000:	4b09      	ldr	r3, [pc, #36]	; (8015028 <tcpip_tcp_timer+0x3c>)
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d005      	beq.n	8015014 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015008:	2200      	movs	r2, #0
 801500a:	4908      	ldr	r1, [pc, #32]	; (801502c <tcpip_tcp_timer+0x40>)
 801500c:	20fa      	movs	r0, #250	; 0xfa
 801500e:	f000 f86f 	bl	80150f0 <sys_timeout>
 8015012:	e003      	b.n	801501c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015014:	4b06      	ldr	r3, [pc, #24]	; (8015030 <tcpip_tcp_timer+0x44>)
 8015016:	2200      	movs	r2, #0
 8015018:	601a      	str	r2, [r3, #0]
  }
}
 801501a:	bf00      	nop
 801501c:	bf00      	nop
 801501e:	3708      	adds	r7, #8
 8015020:	46bd      	mov	sp, r7
 8015022:	bd80      	pop	{r7, pc}
 8015024:	2000ebcc 	.word	0x2000ebcc
 8015028:	2000ebd0 	.word	0x2000ebd0
 801502c:	08014fed 	.word	0x08014fed
 8015030:	2000ec18 	.word	0x2000ec18

08015034 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015034:	b580      	push	{r7, lr}
 8015036:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015038:	4b0a      	ldr	r3, [pc, #40]	; (8015064 <tcp_timer_needed+0x30>)
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	2b00      	cmp	r3, #0
 801503e:	d10f      	bne.n	8015060 <tcp_timer_needed+0x2c>
 8015040:	4b09      	ldr	r3, [pc, #36]	; (8015068 <tcp_timer_needed+0x34>)
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	2b00      	cmp	r3, #0
 8015046:	d103      	bne.n	8015050 <tcp_timer_needed+0x1c>
 8015048:	4b08      	ldr	r3, [pc, #32]	; (801506c <tcp_timer_needed+0x38>)
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d007      	beq.n	8015060 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015050:	4b04      	ldr	r3, [pc, #16]	; (8015064 <tcp_timer_needed+0x30>)
 8015052:	2201      	movs	r2, #1
 8015054:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015056:	2200      	movs	r2, #0
 8015058:	4905      	ldr	r1, [pc, #20]	; (8015070 <tcp_timer_needed+0x3c>)
 801505a:	20fa      	movs	r0, #250	; 0xfa
 801505c:	f000 f848 	bl	80150f0 <sys_timeout>
  }
}
 8015060:	bf00      	nop
 8015062:	bd80      	pop	{r7, pc}
 8015064:	2000ec18 	.word	0x2000ec18
 8015068:	2000ebcc 	.word	0x2000ebcc
 801506c:	2000ebd0 	.word	0x2000ebd0
 8015070:	08014fed 	.word	0x08014fed

08015074 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8015074:	b580      	push	{r7, lr}
 8015076:	b084      	sub	sp, #16
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	685b      	ldr	r3, [r3, #4]
 8015084:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	687a      	ldr	r2, [r7, #4]
 801508c:	4903      	ldr	r1, [pc, #12]	; (801509c <cyclic_timer+0x28>)
 801508e:	4618      	mov	r0, r3
 8015090:	f000 f82e 	bl	80150f0 <sys_timeout>
}
 8015094:	bf00      	nop
 8015096:	3710      	adds	r7, #16
 8015098:	46bd      	mov	sp, r7
 801509a:	bd80      	pop	{r7, pc}
 801509c:	08015075 	.word	0x08015075

080150a0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b082      	sub	sp, #8
 80150a4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80150a6:	2301      	movs	r3, #1
 80150a8:	607b      	str	r3, [r7, #4]
 80150aa:	e00e      	b.n	80150ca <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 80150ac:	4a0d      	ldr	r2, [pc, #52]	; (80150e4 <sys_timeouts_init+0x44>)
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	00db      	lsls	r3, r3, #3
 80150b8:	4a0a      	ldr	r2, [pc, #40]	; (80150e4 <sys_timeouts_init+0x44>)
 80150ba:	4413      	add	r3, r2
 80150bc:	461a      	mov	r2, r3
 80150be:	490a      	ldr	r1, [pc, #40]	; (80150e8 <sys_timeouts_init+0x48>)
 80150c0:	f000 f816 	bl	80150f0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	3301      	adds	r3, #1
 80150c8:	607b      	str	r3, [r7, #4]
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	2b04      	cmp	r3, #4
 80150ce:	d9ed      	bls.n	80150ac <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 80150d0:	f7f3 ff26 	bl	8008f20 <sys_now>
 80150d4:	4603      	mov	r3, r0
 80150d6:	4a05      	ldr	r2, [pc, #20]	; (80150ec <sys_timeouts_init+0x4c>)
 80150d8:	6013      	str	r3, [r2, #0]
}
 80150da:	bf00      	nop
 80150dc:	3708      	adds	r7, #8
 80150de:	46bd      	mov	sp, r7
 80150e0:	bd80      	pop	{r7, pc}
 80150e2:	bf00      	nop
 80150e4:	0801e5e8 	.word	0x0801e5e8
 80150e8:	08015075 	.word	0x08015075
 80150ec:	2000ec14 	.word	0x2000ec14

080150f0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b088      	sub	sp, #32
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	60f8      	str	r0, [r7, #12]
 80150f8:	60b9      	str	r1, [r7, #8]
 80150fa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80150fc:	200a      	movs	r0, #10
 80150fe:	f7f9 fcfd 	bl	800eafc <memp_malloc>
 8015102:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8015104:	697b      	ldr	r3, [r7, #20]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d10a      	bne.n	8015120 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801510a:	697b      	ldr	r3, [r7, #20]
 801510c:	2b00      	cmp	r3, #0
 801510e:	f040 8084 	bne.w	801521a <sys_timeout+0x12a>
 8015112:	4b44      	ldr	r3, [pc, #272]	; (8015224 <sys_timeout+0x134>)
 8015114:	22d4      	movs	r2, #212	; 0xd4
 8015116:	4944      	ldr	r1, [pc, #272]	; (8015228 <sys_timeout+0x138>)
 8015118:	4844      	ldr	r0, [pc, #272]	; (801522c <sys_timeout+0x13c>)
 801511a:	f005 f99d 	bl	801a458 <iprintf>
    return;
 801511e:	e07c      	b.n	801521a <sys_timeout+0x12a>
  }

  now = sys_now();
 8015120:	f7f3 fefe 	bl	8008f20 <sys_now>
 8015124:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8015126:	4b42      	ldr	r3, [pc, #264]	; (8015230 <sys_timeout+0x140>)
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d105      	bne.n	801513a <sys_timeout+0x4a>
    diff = 0;
 801512e:	2300      	movs	r3, #0
 8015130:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8015132:	4a40      	ldr	r2, [pc, #256]	; (8015234 <sys_timeout+0x144>)
 8015134:	693b      	ldr	r3, [r7, #16]
 8015136:	6013      	str	r3, [r2, #0]
 8015138:	e004      	b.n	8015144 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 801513a:	4b3e      	ldr	r3, [pc, #248]	; (8015234 <sys_timeout+0x144>)
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	693a      	ldr	r2, [r7, #16]
 8015140:	1ad3      	subs	r3, r2, r3
 8015142:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8015144:	697b      	ldr	r3, [r7, #20]
 8015146:	2200      	movs	r2, #0
 8015148:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801514a:	697b      	ldr	r3, [r7, #20]
 801514c:	68ba      	ldr	r2, [r7, #8]
 801514e:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015150:	697b      	ldr	r3, [r7, #20]
 8015152:	687a      	ldr	r2, [r7, #4]
 8015154:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8015156:	68fa      	ldr	r2, [r7, #12]
 8015158:	69bb      	ldr	r3, [r7, #24]
 801515a:	441a      	add	r2, r3
 801515c:	697b      	ldr	r3, [r7, #20]
 801515e:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8015160:	4b33      	ldr	r3, [pc, #204]	; (8015230 <sys_timeout+0x140>)
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d103      	bne.n	8015170 <sys_timeout+0x80>
    next_timeout = timeout;
 8015168:	4a31      	ldr	r2, [pc, #196]	; (8015230 <sys_timeout+0x140>)
 801516a:	697b      	ldr	r3, [r7, #20]
 801516c:	6013      	str	r3, [r2, #0]
    return;
 801516e:	e055      	b.n	801521c <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8015170:	4b2f      	ldr	r3, [pc, #188]	; (8015230 <sys_timeout+0x140>)
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	685b      	ldr	r3, [r3, #4]
 8015176:	68fa      	ldr	r2, [r7, #12]
 8015178:	429a      	cmp	r2, r3
 801517a:	d20f      	bcs.n	801519c <sys_timeout+0xac>
    next_timeout->time -= msecs;
 801517c:	4b2c      	ldr	r3, [pc, #176]	; (8015230 <sys_timeout+0x140>)
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	6859      	ldr	r1, [r3, #4]
 8015182:	4b2b      	ldr	r3, [pc, #172]	; (8015230 <sys_timeout+0x140>)
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	68fa      	ldr	r2, [r7, #12]
 8015188:	1a8a      	subs	r2, r1, r2
 801518a:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 801518c:	4b28      	ldr	r3, [pc, #160]	; (8015230 <sys_timeout+0x140>)
 801518e:	681a      	ldr	r2, [r3, #0]
 8015190:	697b      	ldr	r3, [r7, #20]
 8015192:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8015194:	4a26      	ldr	r2, [pc, #152]	; (8015230 <sys_timeout+0x140>)
 8015196:	697b      	ldr	r3, [r7, #20]
 8015198:	6013      	str	r3, [r2, #0]
 801519a:	e03f      	b.n	801521c <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801519c:	4b24      	ldr	r3, [pc, #144]	; (8015230 <sys_timeout+0x140>)
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	61fb      	str	r3, [r7, #28]
 80151a2:	e036      	b.n	8015212 <sys_timeout+0x122>
      timeout->time -= t->time;
 80151a4:	697b      	ldr	r3, [r7, #20]
 80151a6:	685a      	ldr	r2, [r3, #4]
 80151a8:	69fb      	ldr	r3, [r7, #28]
 80151aa:	685b      	ldr	r3, [r3, #4]
 80151ac:	1ad2      	subs	r2, r2, r3
 80151ae:	697b      	ldr	r3, [r7, #20]
 80151b0:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 80151b2:	69fb      	ldr	r3, [r7, #28]
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d006      	beq.n	80151c8 <sys_timeout+0xd8>
 80151ba:	69fb      	ldr	r3, [r7, #28]
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	685a      	ldr	r2, [r3, #4]
 80151c0:	697b      	ldr	r3, [r7, #20]
 80151c2:	685b      	ldr	r3, [r3, #4]
 80151c4:	429a      	cmp	r2, r3
 80151c6:	d921      	bls.n	801520c <sys_timeout+0x11c>
        if (t->next != NULL) {
 80151c8:	69fb      	ldr	r3, [r7, #28]
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d009      	beq.n	80151e4 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 80151d0:	69fb      	ldr	r3, [r7, #28]
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	6859      	ldr	r1, [r3, #4]
 80151d6:	697b      	ldr	r3, [r7, #20]
 80151d8:	685a      	ldr	r2, [r3, #4]
 80151da:	69fb      	ldr	r3, [r7, #28]
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	1a8a      	subs	r2, r1, r2
 80151e0:	605a      	str	r2, [r3, #4]
 80151e2:	e00b      	b.n	80151fc <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 80151e4:	697b      	ldr	r3, [r7, #20]
 80151e6:	685b      	ldr	r3, [r3, #4]
 80151e8:	68fa      	ldr	r2, [r7, #12]
 80151ea:	429a      	cmp	r2, r3
 80151ec:	d206      	bcs.n	80151fc <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 80151ee:	4b10      	ldr	r3, [pc, #64]	; (8015230 <sys_timeout+0x140>)
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	685a      	ldr	r2, [r3, #4]
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	441a      	add	r2, r3
 80151f8:	697b      	ldr	r3, [r7, #20]
 80151fa:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 80151fc:	69fb      	ldr	r3, [r7, #28]
 80151fe:	681a      	ldr	r2, [r3, #0]
 8015200:	697b      	ldr	r3, [r7, #20]
 8015202:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015204:	69fb      	ldr	r3, [r7, #28]
 8015206:	697a      	ldr	r2, [r7, #20]
 8015208:	601a      	str	r2, [r3, #0]
        break;
 801520a:	e007      	b.n	801521c <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 801520c:	69fb      	ldr	r3, [r7, #28]
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	61fb      	str	r3, [r7, #28]
 8015212:	69fb      	ldr	r3, [r7, #28]
 8015214:	2b00      	cmp	r3, #0
 8015216:	d1c5      	bne.n	80151a4 <sys_timeout+0xb4>
 8015218:	e000      	b.n	801521c <sys_timeout+0x12c>
    return;
 801521a:	bf00      	nop
      }
    }
  }
}
 801521c:	3720      	adds	r7, #32
 801521e:	46bd      	mov	sp, r7
 8015220:	bd80      	pop	{r7, pc}
 8015222:	bf00      	nop
 8015224:	0801d804 	.word	0x0801d804
 8015228:	0801d838 	.word	0x0801d838
 801522c:	0801d878 	.word	0x0801d878
 8015230:	2000ec10 	.word	0x2000ec10
 8015234:	2000ec14 	.word	0x2000ec14

08015238 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8015238:	b580      	push	{r7, lr}
 801523a:	b086      	sub	sp, #24
 801523c:	af00      	add	r7, sp, #0
  if (next_timeout) {
 801523e:	4b24      	ldr	r3, [pc, #144]	; (80152d0 <sys_check_timeouts+0x98>)
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d03f      	beq.n	80152c6 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8015246:	f7f3 fe6b 	bl	8008f20 <sys_now>
 801524a:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 801524c:	4b21      	ldr	r3, [pc, #132]	; (80152d4 <sys_check_timeouts+0x9c>)
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	68fa      	ldr	r2, [r7, #12]
 8015252:	1ad3      	subs	r3, r2, r3
 8015254:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8015256:	2300      	movs	r3, #0
 8015258:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 801525a:	4b1d      	ldr	r3, [pc, #116]	; (80152d0 <sys_check_timeouts+0x98>)
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8015260:	68bb      	ldr	r3, [r7, #8]
 8015262:	2b00      	cmp	r3, #0
 8015264:	d02c      	beq.n	80152c0 <sys_check_timeouts+0x88>
 8015266:	68bb      	ldr	r3, [r7, #8]
 8015268:	685b      	ldr	r3, [r3, #4]
 801526a:	697a      	ldr	r2, [r7, #20]
 801526c:	429a      	cmp	r2, r3
 801526e:	d327      	bcc.n	80152c0 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8015270:	2301      	movs	r3, #1
 8015272:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8015274:	68bb      	ldr	r3, [r7, #8]
 8015276:	685a      	ldr	r2, [r3, #4]
 8015278:	4b16      	ldr	r3, [pc, #88]	; (80152d4 <sys_check_timeouts+0x9c>)
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	4413      	add	r3, r2
 801527e:	4a15      	ldr	r2, [pc, #84]	; (80152d4 <sys_check_timeouts+0x9c>)
 8015280:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8015282:	68bb      	ldr	r3, [r7, #8]
 8015284:	685b      	ldr	r3, [r3, #4]
 8015286:	697a      	ldr	r2, [r7, #20]
 8015288:	1ad3      	subs	r3, r2, r3
 801528a:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 801528c:	68bb      	ldr	r3, [r7, #8]
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	4a0f      	ldr	r2, [pc, #60]	; (80152d0 <sys_check_timeouts+0x98>)
 8015292:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8015294:	68bb      	ldr	r3, [r7, #8]
 8015296:	689b      	ldr	r3, [r3, #8]
 8015298:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 801529a:	68bb      	ldr	r3, [r7, #8]
 801529c:	68db      	ldr	r3, [r3, #12]
 801529e:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80152a0:	68b9      	ldr	r1, [r7, #8]
 80152a2:	200a      	movs	r0, #10
 80152a4:	f7f9 fc7c 	bl	800eba0 <memp_free>
        if (handler != NULL) {
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d008      	beq.n	80152c0 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 80152ae:	480a      	ldr	r0, [pc, #40]	; (80152d8 <sys_check_timeouts+0xa0>)
 80152b0:	f004 fe9a 	bl	8019fe8 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	6838      	ldr	r0, [r7, #0]
 80152b8:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 80152ba:	4807      	ldr	r0, [pc, #28]	; (80152d8 <sys_check_timeouts+0xa0>)
 80152bc:	f004 fea3 	bl	801a006 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 80152c0:	7cfb      	ldrb	r3, [r7, #19]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d1c7      	bne.n	8015256 <sys_check_timeouts+0x1e>
  }
}
 80152c6:	bf00      	nop
 80152c8:	3718      	adds	r7, #24
 80152ca:	46bd      	mov	sp, r7
 80152cc:	bd80      	pop	{r7, pc}
 80152ce:	bf00      	nop
 80152d0:	2000ec10 	.word	0x2000ec10
 80152d4:	2000ec14 	.word	0x2000ec14
 80152d8:	2000928c 	.word	0x2000928c

080152dc <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 80152dc:	b580      	push	{r7, lr}
 80152de:	b082      	sub	sp, #8
 80152e0:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 80152e2:	4b0f      	ldr	r3, [pc, #60]	; (8015320 <sys_timeouts_sleeptime+0x44>)
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d102      	bne.n	80152f0 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 80152ea:	f04f 33ff 	mov.w	r3, #4294967295
 80152ee:	e013      	b.n	8015318 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 80152f0:	f7f3 fe16 	bl	8008f20 <sys_now>
 80152f4:	4602      	mov	r2, r0
 80152f6:	4b0b      	ldr	r3, [pc, #44]	; (8015324 <sys_timeouts_sleeptime+0x48>)
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	1ad3      	subs	r3, r2, r3
 80152fc:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 80152fe:	4b08      	ldr	r3, [pc, #32]	; (8015320 <sys_timeouts_sleeptime+0x44>)
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	685b      	ldr	r3, [r3, #4]
 8015304:	687a      	ldr	r2, [r7, #4]
 8015306:	429a      	cmp	r2, r3
 8015308:	d901      	bls.n	801530e <sys_timeouts_sleeptime+0x32>
    return 0;
 801530a:	2300      	movs	r3, #0
 801530c:	e004      	b.n	8015318 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 801530e:	4b04      	ldr	r3, [pc, #16]	; (8015320 <sys_timeouts_sleeptime+0x44>)
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	685a      	ldr	r2, [r3, #4]
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	1ad3      	subs	r3, r2, r3
  }
}
 8015318:	4618      	mov	r0, r3
 801531a:	3708      	adds	r7, #8
 801531c:	46bd      	mov	sp, r7
 801531e:	bd80      	pop	{r7, pc}
 8015320:	2000ec10 	.word	0x2000ec10
 8015324:	2000ec14 	.word	0x2000ec14

08015328 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b084      	sub	sp, #16
 801532c:	af00      	add	r7, sp, #0
 801532e:	6078      	str	r0, [r7, #4]
 8015330:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8015332:	4b0f      	ldr	r3, [pc, #60]	; (8015370 <sys_timeouts_mbox_fetch+0x48>)
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d105      	bne.n	8015346 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801533a:	2200      	movs	r2, #0
 801533c:	6839      	ldr	r1, [r7, #0]
 801533e:	6878      	ldr	r0, [r7, #4]
 8015340:	f004 fd22 	bl	8019d88 <sys_arch_mbox_fetch>
    return;
 8015344:	e011      	b.n	801536a <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8015346:	f7ff ffc9 	bl	80152dc <sys_timeouts_sleeptime>
 801534a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d008      	beq.n	8015364 <sys_timeouts_mbox_fetch+0x3c>
 8015352:	68fa      	ldr	r2, [r7, #12]
 8015354:	6839      	ldr	r1, [r7, #0]
 8015356:	6878      	ldr	r0, [r7, #4]
 8015358:	f004 fd16 	bl	8019d88 <sys_arch_mbox_fetch>
 801535c:	4603      	mov	r3, r0
 801535e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015362:	d102      	bne.n	801536a <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8015364:	f7ff ff68 	bl	8015238 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8015368:	e7e3      	b.n	8015332 <sys_timeouts_mbox_fetch+0xa>
  }
}
 801536a:	3710      	adds	r7, #16
 801536c:	46bd      	mov	sp, r7
 801536e:	bd80      	pop	{r7, pc}
 8015370:	2000ec10 	.word	0x2000ec10

08015374 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015374:	b480      	push	{r7}
 8015376:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8015378:	bf00      	nop
 801537a:	46bd      	mov	sp, r7
 801537c:	bc80      	pop	{r7}
 801537e:	4770      	bx	lr

08015380 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8015380:	b480      	push	{r7}
 8015382:	b083      	sub	sp, #12
 8015384:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8015386:	2300      	movs	r3, #0
 8015388:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801538a:	4b17      	ldr	r3, [pc, #92]	; (80153e8 <udp_new_port+0x68>)
 801538c:	881b      	ldrh	r3, [r3, #0]
 801538e:	1c5a      	adds	r2, r3, #1
 8015390:	b291      	uxth	r1, r2
 8015392:	4a15      	ldr	r2, [pc, #84]	; (80153e8 <udp_new_port+0x68>)
 8015394:	8011      	strh	r1, [r2, #0]
 8015396:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801539a:	4293      	cmp	r3, r2
 801539c:	d103      	bne.n	80153a6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801539e:	4b12      	ldr	r3, [pc, #72]	; (80153e8 <udp_new_port+0x68>)
 80153a0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80153a4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80153a6:	4b11      	ldr	r3, [pc, #68]	; (80153ec <udp_new_port+0x6c>)
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	603b      	str	r3, [r7, #0]
 80153ac:	e011      	b.n	80153d2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80153ae:	683b      	ldr	r3, [r7, #0]
 80153b0:	8a5a      	ldrh	r2, [r3, #18]
 80153b2:	4b0d      	ldr	r3, [pc, #52]	; (80153e8 <udp_new_port+0x68>)
 80153b4:	881b      	ldrh	r3, [r3, #0]
 80153b6:	429a      	cmp	r2, r3
 80153b8:	d108      	bne.n	80153cc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80153ba:	88fb      	ldrh	r3, [r7, #6]
 80153bc:	3301      	adds	r3, #1
 80153be:	80fb      	strh	r3, [r7, #6]
 80153c0:	88fb      	ldrh	r3, [r7, #6]
 80153c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80153c6:	d3e0      	bcc.n	801538a <udp_new_port+0xa>
        return 0;
 80153c8:	2300      	movs	r3, #0
 80153ca:	e007      	b.n	80153dc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80153cc:	683b      	ldr	r3, [r7, #0]
 80153ce:	68db      	ldr	r3, [r3, #12]
 80153d0:	603b      	str	r3, [r7, #0]
 80153d2:	683b      	ldr	r3, [r7, #0]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d1ea      	bne.n	80153ae <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80153d8:	4b03      	ldr	r3, [pc, #12]	; (80153e8 <udp_new_port+0x68>)
 80153da:	881b      	ldrh	r3, [r3, #0]
}
 80153dc:	4618      	mov	r0, r3
 80153de:	370c      	adds	r7, #12
 80153e0:	46bd      	mov	sp, r7
 80153e2:	bc80      	pop	{r7}
 80153e4:	4770      	bx	lr
 80153e6:	bf00      	nop
 80153e8:	20000018 	.word	0x20000018
 80153ec:	2000ec1c 	.word	0x2000ec1c

080153f0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80153f0:	b480      	push	{r7}
 80153f2:	b085      	sub	sp, #20
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	60f8      	str	r0, [r7, #12]
 80153f8:	60b9      	str	r1, [r7, #8]
 80153fa:	4613      	mov	r3, r2
 80153fc:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80153fe:	79fb      	ldrb	r3, [r7, #7]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d018      	beq.n	8015436 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d013      	beq.n	8015432 <udp_input_local_match+0x42>
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d00f      	beq.n	8015432 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015412:	4b13      	ldr	r3, [pc, #76]	; (8015460 <udp_input_local_match+0x70>)
 8015414:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015416:	f1b3 3fff 	cmp.w	r3, #4294967295
 801541a:	d00a      	beq.n	8015432 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	681a      	ldr	r2, [r3, #0]
 8015420:	4b0f      	ldr	r3, [pc, #60]	; (8015460 <udp_input_local_match+0x70>)
 8015422:	695b      	ldr	r3, [r3, #20]
 8015424:	405a      	eors	r2, r3
 8015426:	68bb      	ldr	r3, [r7, #8]
 8015428:	3308      	adds	r3, #8
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801542e:	2b00      	cmp	r3, #0
 8015430:	d110      	bne.n	8015454 <udp_input_local_match+0x64>
          return 1;
 8015432:	2301      	movs	r3, #1
 8015434:	e00f      	b.n	8015456 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	2b00      	cmp	r3, #0
 801543a:	d009      	beq.n	8015450 <udp_input_local_match+0x60>
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d005      	beq.n	8015450 <udp_input_local_match+0x60>
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	681a      	ldr	r2, [r3, #0]
 8015448:	4b05      	ldr	r3, [pc, #20]	; (8015460 <udp_input_local_match+0x70>)
 801544a:	695b      	ldr	r3, [r3, #20]
 801544c:	429a      	cmp	r2, r3
 801544e:	d101      	bne.n	8015454 <udp_input_local_match+0x64>
      return 1;
 8015450:	2301      	movs	r3, #1
 8015452:	e000      	b.n	8015456 <udp_input_local_match+0x66>
    }
  }

  return 0;
 8015454:	2300      	movs	r3, #0
}
 8015456:	4618      	mov	r0, r3
 8015458:	3714      	adds	r7, #20
 801545a:	46bd      	mov	sp, r7
 801545c:	bc80      	pop	{r7}
 801545e:	4770      	bx	lr
 8015460:	20009290 	.word	0x20009290

08015464 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015464:	b590      	push	{r4, r7, lr}
 8015466:	b08d      	sub	sp, #52	; 0x34
 8015468:	af02      	add	r7, sp, #8
 801546a:	6078      	str	r0, [r7, #4]
 801546c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801546e:	2300      	movs	r3, #0
 8015470:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	895b      	ldrh	r3, [r3, #10]
 8015476:	2b07      	cmp	r3, #7
 8015478:	d803      	bhi.n	8015482 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801547a:	6878      	ldr	r0, [r7, #4]
 801547c:	f7fa f952 	bl	800f724 <pbuf_free>
    goto end;
 8015480:	e0c6      	b.n	8015610 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	685b      	ldr	r3, [r3, #4]
 8015486:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015488:	4b63      	ldr	r3, [pc, #396]	; (8015618 <udp_input+0x1b4>)
 801548a:	695b      	ldr	r3, [r3, #20]
 801548c:	4a62      	ldr	r2, [pc, #392]	; (8015618 <udp_input+0x1b4>)
 801548e:	6812      	ldr	r2, [r2, #0]
 8015490:	4611      	mov	r1, r2
 8015492:	4618      	mov	r0, r3
 8015494:	f003 fd26 	bl	8018ee4 <ip4_addr_isbroadcast_u32>
 8015498:	4603      	mov	r3, r0
 801549a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801549c:	697b      	ldr	r3, [r7, #20]
 801549e:	881b      	ldrh	r3, [r3, #0]
 80154a0:	b29b      	uxth	r3, r3
 80154a2:	4618      	mov	r0, r3
 80154a4:	f7f8 ff3e 	bl	800e324 <lwip_htons>
 80154a8:	4603      	mov	r3, r0
 80154aa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80154ac:	697b      	ldr	r3, [r7, #20]
 80154ae:	885b      	ldrh	r3, [r3, #2]
 80154b0:	b29b      	uxth	r3, r3
 80154b2:	4618      	mov	r0, r3
 80154b4:	f7f8 ff36 	bl	800e324 <lwip_htons>
 80154b8:	4603      	mov	r3, r0
 80154ba:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80154bc:	2300      	movs	r3, #0
 80154be:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80154c0:	2300      	movs	r3, #0
 80154c2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80154c4:	2300      	movs	r3, #0
 80154c6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80154c8:	4b54      	ldr	r3, [pc, #336]	; (801561c <udp_input+0x1b8>)
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	627b      	str	r3, [r7, #36]	; 0x24
 80154ce:	e03b      	b.n	8015548 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80154d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154d2:	8a5b      	ldrh	r3, [r3, #18]
 80154d4:	89fa      	ldrh	r2, [r7, #14]
 80154d6:	429a      	cmp	r2, r3
 80154d8:	d131      	bne.n	801553e <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80154da:	7cfb      	ldrb	r3, [r7, #19]
 80154dc:	461a      	mov	r2, r3
 80154de:	6839      	ldr	r1, [r7, #0]
 80154e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80154e2:	f7ff ff85 	bl	80153f0 <udp_input_local_match>
 80154e6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d028      	beq.n	801553e <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 80154ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154ee:	7c1b      	ldrb	r3, [r3, #16]
 80154f0:	f003 0304 	and.w	r3, r3, #4
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d104      	bne.n	8015502 <udp_input+0x9e>
 80154f8:	69fb      	ldr	r3, [r7, #28]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d101      	bne.n	8015502 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 80154fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015500:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015504:	8a9b      	ldrh	r3, [r3, #20]
 8015506:	8a3a      	ldrh	r2, [r7, #16]
 8015508:	429a      	cmp	r2, r3
 801550a:	d118      	bne.n	801553e <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801550e:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015510:	2b00      	cmp	r3, #0
 8015512:	d005      	beq.n	8015520 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8015514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015516:	685a      	ldr	r2, [r3, #4]
 8015518:	4b3f      	ldr	r3, [pc, #252]	; (8015618 <udp_input+0x1b4>)
 801551a:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801551c:	429a      	cmp	r2, r3
 801551e:	d10e      	bne.n	801553e <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015520:	6a3b      	ldr	r3, [r7, #32]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d014      	beq.n	8015550 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015528:	68da      	ldr	r2, [r3, #12]
 801552a:	6a3b      	ldr	r3, [r7, #32]
 801552c:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801552e:	4b3b      	ldr	r3, [pc, #236]	; (801561c <udp_input+0x1b8>)
 8015530:	681a      	ldr	r2, [r3, #0]
 8015532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015534:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015536:	4a39      	ldr	r2, [pc, #228]	; (801561c <udp_input+0x1b8>)
 8015538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801553a:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801553c:	e008      	b.n	8015550 <udp_input+0xec>
      }
    }

    prev = pcb;
 801553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015540:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015544:	68db      	ldr	r3, [r3, #12]
 8015546:	627b      	str	r3, [r7, #36]	; 0x24
 8015548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801554a:	2b00      	cmp	r3, #0
 801554c:	d1c0      	bne.n	80154d0 <udp_input+0x6c>
 801554e:	e000      	b.n	8015552 <udp_input+0xee>
        break;
 8015550:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015554:	2b00      	cmp	r3, #0
 8015556:	d101      	bne.n	801555c <udp_input+0xf8>
    pcb = uncon_pcb;
 8015558:	69fb      	ldr	r3, [r7, #28]
 801555a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801555e:	2b00      	cmp	r3, #0
 8015560:	d002      	beq.n	8015568 <udp_input+0x104>
    for_us = 1;
 8015562:	2301      	movs	r3, #1
 8015564:	76fb      	strb	r3, [r7, #27]
 8015566:	e00a      	b.n	801557e <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015568:	683b      	ldr	r3, [r7, #0]
 801556a:	3304      	adds	r3, #4
 801556c:	681a      	ldr	r2, [r3, #0]
 801556e:	4b2a      	ldr	r3, [pc, #168]	; (8015618 <udp_input+0x1b4>)
 8015570:	695b      	ldr	r3, [r3, #20]
 8015572:	429a      	cmp	r2, r3
 8015574:	bf0c      	ite	eq
 8015576:	2301      	moveq	r3, #1
 8015578:	2300      	movne	r3, #0
 801557a:	b2db      	uxtb	r3, r3
 801557c:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801557e:	7efb      	ldrb	r3, [r7, #27]
 8015580:	2b00      	cmp	r3, #0
 8015582:	d042      	beq.n	801560a <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8015584:	f06f 0107 	mvn.w	r1, #7
 8015588:	6878      	ldr	r0, [r7, #4]
 801558a:	f7fa f8a7 	bl	800f6dc <pbuf_header>
 801558e:	4603      	mov	r3, r0
 8015590:	2b00      	cmp	r3, #0
 8015592:	d00a      	beq.n	80155aa <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8015594:	4b22      	ldr	r3, [pc, #136]	; (8015620 <udp_input+0x1bc>)
 8015596:	f240 1255 	movw	r2, #341	; 0x155
 801559a:	4922      	ldr	r1, [pc, #136]	; (8015624 <udp_input+0x1c0>)
 801559c:	4822      	ldr	r0, [pc, #136]	; (8015628 <udp_input+0x1c4>)
 801559e:	f004 ff5b 	bl	801a458 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80155a2:	6878      	ldr	r0, [r7, #4]
 80155a4:	f7fa f8be 	bl	800f724 <pbuf_free>
      goto end;
 80155a8:	e032      	b.n	8015610 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 80155aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d012      	beq.n	80155d6 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80155b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155b2:	699b      	ldr	r3, [r3, #24]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d00a      	beq.n	80155ce <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80155b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155ba:	699c      	ldr	r4, [r3, #24]
 80155bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155be:	69d8      	ldr	r0, [r3, #28]
 80155c0:	8a3b      	ldrh	r3, [r7, #16]
 80155c2:	9300      	str	r3, [sp, #0]
 80155c4:	4b19      	ldr	r3, [pc, #100]	; (801562c <udp_input+0x1c8>)
 80155c6:	687a      	ldr	r2, [r7, #4]
 80155c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80155ca:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80155cc:	e021      	b.n	8015612 <udp_input+0x1ae>
        pbuf_free(p);
 80155ce:	6878      	ldr	r0, [r7, #4]
 80155d0:	f7fa f8a8 	bl	800f724 <pbuf_free>
        goto end;
 80155d4:	e01c      	b.n	8015610 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80155d6:	7cfb      	ldrb	r3, [r7, #19]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d112      	bne.n	8015602 <udp_input+0x19e>
 80155dc:	4b0e      	ldr	r3, [pc, #56]	; (8015618 <udp_input+0x1b4>)
 80155de:	695b      	ldr	r3, [r3, #20]
 80155e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80155e4:	2be0      	cmp	r3, #224	; 0xe0
 80155e6:	d00c      	beq.n	8015602 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80155e8:	4b0b      	ldr	r3, [pc, #44]	; (8015618 <udp_input+0x1b4>)
 80155ea:	899b      	ldrh	r3, [r3, #12]
 80155ec:	3308      	adds	r3, #8
 80155ee:	b29b      	uxth	r3, r3
 80155f0:	b21b      	sxth	r3, r3
 80155f2:	4619      	mov	r1, r3
 80155f4:	6878      	ldr	r0, [r7, #4]
 80155f6:	f7fa f883 	bl	800f700 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80155fa:	2103      	movs	r1, #3
 80155fc:	6878      	ldr	r0, [r7, #4]
 80155fe:	f003 f94f 	bl	80188a0 <icmp_dest_unreach>
      pbuf_free(p);
 8015602:	6878      	ldr	r0, [r7, #4]
 8015604:	f7fa f88e 	bl	800f724 <pbuf_free>
  return;
 8015608:	e003      	b.n	8015612 <udp_input+0x1ae>
    pbuf_free(p);
 801560a:	6878      	ldr	r0, [r7, #4]
 801560c:	f7fa f88a 	bl	800f724 <pbuf_free>
  return;
 8015610:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015612:	372c      	adds	r7, #44	; 0x2c
 8015614:	46bd      	mov	sp, r7
 8015616:	bd90      	pop	{r4, r7, pc}
 8015618:	20009290 	.word	0x20009290
 801561c:	2000ec1c 	.word	0x2000ec1c
 8015620:	0801d8a0 	.word	0x0801d8a0
 8015624:	0801d8d0 	.word	0x0801d8d0
 8015628:	0801d8e4 	.word	0x0801d8e4
 801562c:	200092a0 	.word	0x200092a0

08015630 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8015630:	b580      	push	{r7, lr}
 8015632:	b088      	sub	sp, #32
 8015634:	af02      	add	r7, sp, #8
 8015636:	60f8      	str	r0, [r7, #12]
 8015638:	60b9      	str	r1, [r7, #8]
 801563a:	607a      	str	r2, [r7, #4]
 801563c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	2b00      	cmp	r3, #0
 8015642:	d002      	beq.n	801564a <udp_sendto_if+0x1a>
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	2b00      	cmp	r3, #0
 8015648:	d102      	bne.n	8015650 <udp_sendto_if+0x20>
    return ERR_VAL;
 801564a:	f06f 0305 	mvn.w	r3, #5
 801564e:	e028      	b.n	80156a2 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	2b00      	cmp	r3, #0
 8015654:	d009      	beq.n	801566a <udp_sendto_if+0x3a>
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	2b00      	cmp	r3, #0
 801565c:	d005      	beq.n	801566a <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015666:	2be0      	cmp	r3, #224	; 0xe0
 8015668:	d103      	bne.n	8015672 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 801566a:	6a3b      	ldr	r3, [r7, #32]
 801566c:	3304      	adds	r3, #4
 801566e:	617b      	str	r3, [r7, #20]
 8015670:	e00b      	b.n	801568a <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	681a      	ldr	r2, [r3, #0]
 8015676:	6a3b      	ldr	r3, [r7, #32]
 8015678:	3304      	adds	r3, #4
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	429a      	cmp	r2, r3
 801567e:	d002      	beq.n	8015686 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 8015680:	f06f 0303 	mvn.w	r3, #3
 8015684:	e00d      	b.n	80156a2 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801568a:	887a      	ldrh	r2, [r7, #2]
 801568c:	697b      	ldr	r3, [r7, #20]
 801568e:	9301      	str	r3, [sp, #4]
 8015690:	6a3b      	ldr	r3, [r7, #32]
 8015692:	9300      	str	r3, [sp, #0]
 8015694:	4613      	mov	r3, r2
 8015696:	687a      	ldr	r2, [r7, #4]
 8015698:	68b9      	ldr	r1, [r7, #8]
 801569a:	68f8      	ldr	r0, [r7, #12]
 801569c:	f000 f806 	bl	80156ac <udp_sendto_if_src>
 80156a0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80156a2:	4618      	mov	r0, r3
 80156a4:	3718      	adds	r7, #24
 80156a6:	46bd      	mov	sp, r7
 80156a8:	bd80      	pop	{r7, pc}
	...

080156ac <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80156ac:	b580      	push	{r7, lr}
 80156ae:	b08c      	sub	sp, #48	; 0x30
 80156b0:	af04      	add	r7, sp, #16
 80156b2:	60f8      	str	r0, [r7, #12]
 80156b4:	60b9      	str	r1, [r7, #8]
 80156b6:	607a      	str	r2, [r7, #4]
 80156b8:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d002      	beq.n	80156c6 <udp_sendto_if_src+0x1a>
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d102      	bne.n	80156cc <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 80156c6:	f06f 0305 	mvn.w	r3, #5
 80156ca:	e07e      	b.n	80157ca <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	8a5b      	ldrh	r3, [r3, #18]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d10f      	bne.n	80156f4 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80156d4:	68f9      	ldr	r1, [r7, #12]
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	8a5b      	ldrh	r3, [r3, #18]
 80156da:	461a      	mov	r2, r3
 80156dc:	68f8      	ldr	r0, [r7, #12]
 80156de:	f000 f87f 	bl	80157e0 <udp_bind>
 80156e2:	4603      	mov	r3, r0
 80156e4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80156e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d002      	beq.n	80156f4 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80156ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80156f2:	e06a      	b.n	80157ca <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 80156f4:	2108      	movs	r1, #8
 80156f6:	68b8      	ldr	r0, [r7, #8]
 80156f8:	f7f9 fff0 	bl	800f6dc <pbuf_header>
 80156fc:	4603      	mov	r3, r0
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d014      	beq.n	801572c <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8015702:	2200      	movs	r2, #0
 8015704:	2108      	movs	r1, #8
 8015706:	2001      	movs	r0, #1
 8015708:	f7f9 fc94 	bl	800f034 <pbuf_alloc>
 801570c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801570e:	69fb      	ldr	r3, [r7, #28]
 8015710:	2b00      	cmp	r3, #0
 8015712:	d102      	bne.n	801571a <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8015714:	f04f 33ff 	mov.w	r3, #4294967295
 8015718:	e057      	b.n	80157ca <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 801571a:	68bb      	ldr	r3, [r7, #8]
 801571c:	891b      	ldrh	r3, [r3, #8]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d006      	beq.n	8015730 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8015722:	68b9      	ldr	r1, [r7, #8]
 8015724:	69f8      	ldr	r0, [r7, #28]
 8015726:	f7fa f92b 	bl	800f980 <pbuf_chain>
 801572a:	e001      	b.n	8015730 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801572c:	68bb      	ldr	r3, [r7, #8]
 801572e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8015730:	69fb      	ldr	r3, [r7, #28]
 8015732:	895b      	ldrh	r3, [r3, #10]
 8015734:	2b07      	cmp	r3, #7
 8015736:	d806      	bhi.n	8015746 <udp_sendto_if_src+0x9a>
 8015738:	4b26      	ldr	r3, [pc, #152]	; (80157d4 <udp_sendto_if_src+0x128>)
 801573a:	f240 22db 	movw	r2, #731	; 0x2db
 801573e:	4926      	ldr	r1, [pc, #152]	; (80157d8 <udp_sendto_if_src+0x12c>)
 8015740:	4826      	ldr	r0, [pc, #152]	; (80157dc <udp_sendto_if_src+0x130>)
 8015742:	f004 fe89 	bl	801a458 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8015746:	69fb      	ldr	r3, [r7, #28]
 8015748:	685b      	ldr	r3, [r3, #4]
 801574a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	8a5b      	ldrh	r3, [r3, #18]
 8015750:	4618      	mov	r0, r3
 8015752:	f7f8 fde7 	bl	800e324 <lwip_htons>
 8015756:	4603      	mov	r3, r0
 8015758:	461a      	mov	r2, r3
 801575a:	697b      	ldr	r3, [r7, #20]
 801575c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801575e:	887b      	ldrh	r3, [r7, #2]
 8015760:	4618      	mov	r0, r3
 8015762:	f7f8 fddf 	bl	800e324 <lwip_htons>
 8015766:	4603      	mov	r3, r0
 8015768:	461a      	mov	r2, r3
 801576a:	697b      	ldr	r3, [r7, #20]
 801576c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801576e:	697b      	ldr	r3, [r7, #20]
 8015770:	2200      	movs	r2, #0
 8015772:	719a      	strb	r2, [r3, #6]
 8015774:	2200      	movs	r2, #0
 8015776:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8015778:	69fb      	ldr	r3, [r7, #28]
 801577a:	891b      	ldrh	r3, [r3, #8]
 801577c:	4618      	mov	r0, r3
 801577e:	f7f8 fdd1 	bl	800e324 <lwip_htons>
 8015782:	4603      	mov	r3, r0
 8015784:	461a      	mov	r2, r3
 8015786:	697b      	ldr	r3, [r7, #20]
 8015788:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801578a:	2311      	movs	r3, #17
 801578c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	7a9b      	ldrb	r3, [r3, #10]
 8015792:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	7a5b      	ldrb	r3, [r3, #9]
 8015798:	7cb9      	ldrb	r1, [r7, #18]
 801579a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801579c:	9202      	str	r2, [sp, #8]
 801579e:	7cfa      	ldrb	r2, [r7, #19]
 80157a0:	9201      	str	r2, [sp, #4]
 80157a2:	9300      	str	r3, [sp, #0]
 80157a4:	460b      	mov	r3, r1
 80157a6:	687a      	ldr	r2, [r7, #4]
 80157a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80157aa:	69f8      	ldr	r0, [r7, #28]
 80157ac:	f003 faf2 	bl	8018d94 <ip4_output_if_src>
 80157b0:	4603      	mov	r3, r0
 80157b2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80157b4:	69fa      	ldr	r2, [r7, #28]
 80157b6:	68bb      	ldr	r3, [r7, #8]
 80157b8:	429a      	cmp	r2, r3
 80157ba:	d004      	beq.n	80157c6 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 80157bc:	69f8      	ldr	r0, [r7, #28]
 80157be:	f7f9 ffb1 	bl	800f724 <pbuf_free>
    q = NULL;
 80157c2:	2300      	movs	r3, #0
 80157c4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80157c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80157ca:	4618      	mov	r0, r3
 80157cc:	3720      	adds	r7, #32
 80157ce:	46bd      	mov	sp, r7
 80157d0:	bd80      	pop	{r7, pc}
 80157d2:	bf00      	nop
 80157d4:	0801d8a0 	.word	0x0801d8a0
 80157d8:	0801d90c 	.word	0x0801d90c
 80157dc:	0801d8e4 	.word	0x0801d8e4

080157e0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80157e0:	b580      	push	{r7, lr}
 80157e2:	b086      	sub	sp, #24
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	60f8      	str	r0, [r7, #12]
 80157e8:	60b9      	str	r1, [r7, #8]
 80157ea:	4613      	mov	r3, r2
 80157ec:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80157ee:	68bb      	ldr	r3, [r7, #8]
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d101      	bne.n	80157f8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80157f4:	4b30      	ldr	r3, [pc, #192]	; (80158b8 <udp_bind+0xd8>)
 80157f6:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d002      	beq.n	8015804 <udp_bind+0x24>
 80157fe:	68bb      	ldr	r3, [r7, #8]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d102      	bne.n	801580a <udp_bind+0x2a>
    return ERR_VAL;
 8015804:	f06f 0305 	mvn.w	r3, #5
 8015808:	e052      	b.n	80158b0 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801580a:	2300      	movs	r3, #0
 801580c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801580e:	4b2b      	ldr	r3, [pc, #172]	; (80158bc <udp_bind+0xdc>)
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	617b      	str	r3, [r7, #20]
 8015814:	e009      	b.n	801582a <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8015816:	68fa      	ldr	r2, [r7, #12]
 8015818:	697b      	ldr	r3, [r7, #20]
 801581a:	429a      	cmp	r2, r3
 801581c:	d102      	bne.n	8015824 <udp_bind+0x44>
      rebind = 1;
 801581e:	2301      	movs	r3, #1
 8015820:	74fb      	strb	r3, [r7, #19]
      break;
 8015822:	e005      	b.n	8015830 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015824:	697b      	ldr	r3, [r7, #20]
 8015826:	68db      	ldr	r3, [r3, #12]
 8015828:	617b      	str	r3, [r7, #20]
 801582a:	697b      	ldr	r3, [r7, #20]
 801582c:	2b00      	cmp	r3, #0
 801582e:	d1f2      	bne.n	8015816 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8015830:	88fb      	ldrh	r3, [r7, #6]
 8015832:	2b00      	cmp	r3, #0
 8015834:	d109      	bne.n	801584a <udp_bind+0x6a>
    port = udp_new_port();
 8015836:	f7ff fda3 	bl	8015380 <udp_new_port>
 801583a:	4603      	mov	r3, r0
 801583c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801583e:	88fb      	ldrh	r3, [r7, #6]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d11e      	bne.n	8015882 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8015844:	f06f 0307 	mvn.w	r3, #7
 8015848:	e032      	b.n	80158b0 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801584a:	4b1c      	ldr	r3, [pc, #112]	; (80158bc <udp_bind+0xdc>)
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	617b      	str	r3, [r7, #20]
 8015850:	e014      	b.n	801587c <udp_bind+0x9c>
      if (pcb != ipcb) {
 8015852:	68fa      	ldr	r2, [r7, #12]
 8015854:	697b      	ldr	r3, [r7, #20]
 8015856:	429a      	cmp	r2, r3
 8015858:	d00d      	beq.n	8015876 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801585a:	697b      	ldr	r3, [r7, #20]
 801585c:	8a5b      	ldrh	r3, [r3, #18]
 801585e:	88fa      	ldrh	r2, [r7, #6]
 8015860:	429a      	cmp	r2, r3
 8015862:	d108      	bne.n	8015876 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8015864:	697b      	ldr	r3, [r7, #20]
 8015866:	681a      	ldr	r2, [r3, #0]
 8015868:	68bb      	ldr	r3, [r7, #8]
 801586a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801586c:	429a      	cmp	r2, r3
 801586e:	d102      	bne.n	8015876 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015870:	f06f 0307 	mvn.w	r3, #7
 8015874:	e01c      	b.n	80158b0 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015876:	697b      	ldr	r3, [r7, #20]
 8015878:	68db      	ldr	r3, [r3, #12]
 801587a:	617b      	str	r3, [r7, #20]
 801587c:	697b      	ldr	r3, [r7, #20]
 801587e:	2b00      	cmp	r3, #0
 8015880:	d1e7      	bne.n	8015852 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8015882:	68bb      	ldr	r3, [r7, #8]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d002      	beq.n	801588e <udp_bind+0xae>
 8015888:	68bb      	ldr	r3, [r7, #8]
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	e000      	b.n	8015890 <udp_bind+0xb0>
 801588e:	2300      	movs	r3, #0
 8015890:	68fa      	ldr	r2, [r7, #12]
 8015892:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	88fa      	ldrh	r2, [r7, #6]
 8015898:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801589a:	7cfb      	ldrb	r3, [r7, #19]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d106      	bne.n	80158ae <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80158a0:	4b06      	ldr	r3, [pc, #24]	; (80158bc <udp_bind+0xdc>)
 80158a2:	681a      	ldr	r2, [r3, #0]
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80158a8:	4a04      	ldr	r2, [pc, #16]	; (80158bc <udp_bind+0xdc>)
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80158ae:	2300      	movs	r3, #0
}
 80158b0:	4618      	mov	r0, r3
 80158b2:	3718      	adds	r7, #24
 80158b4:	46bd      	mov	sp, r7
 80158b6:	bd80      	pop	{r7, pc}
 80158b8:	0801e610 	.word	0x0801e610
 80158bc:	2000ec1c 	.word	0x2000ec1c

080158c0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80158c0:	b580      	push	{r7, lr}
 80158c2:	b086      	sub	sp, #24
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	60f8      	str	r0, [r7, #12]
 80158c8:	60b9      	str	r1, [r7, #8]
 80158ca:	4613      	mov	r3, r2
 80158cc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d002      	beq.n	80158da <udp_connect+0x1a>
 80158d4:	68bb      	ldr	r3, [r7, #8]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d102      	bne.n	80158e0 <udp_connect+0x20>
    return ERR_VAL;
 80158da:	f06f 0305 	mvn.w	r3, #5
 80158de:	e03e      	b.n	801595e <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	8a5b      	ldrh	r3, [r3, #18]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d10f      	bne.n	8015908 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80158e8:	68f9      	ldr	r1, [r7, #12]
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	8a5b      	ldrh	r3, [r3, #18]
 80158ee:	461a      	mov	r2, r3
 80158f0:	68f8      	ldr	r0, [r7, #12]
 80158f2:	f7ff ff75 	bl	80157e0 <udp_bind>
 80158f6:	4603      	mov	r3, r0
 80158f8:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80158fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d002      	beq.n	8015908 <udp_connect+0x48>
      return err;
 8015902:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015906:	e02a      	b.n	801595e <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8015908:	68bb      	ldr	r3, [r7, #8]
 801590a:	2b00      	cmp	r3, #0
 801590c:	d002      	beq.n	8015914 <udp_connect+0x54>
 801590e:	68bb      	ldr	r3, [r7, #8]
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	e000      	b.n	8015916 <udp_connect+0x56>
 8015914:	2300      	movs	r3, #0
 8015916:	68fa      	ldr	r2, [r7, #12]
 8015918:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	88fa      	ldrh	r2, [r7, #6]
 801591e:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	7c1b      	ldrb	r3, [r3, #16]
 8015924:	f043 0304 	orr.w	r3, r3, #4
 8015928:	b2da      	uxtb	r2, r3
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801592e:	4b0e      	ldr	r3, [pc, #56]	; (8015968 <udp_connect+0xa8>)
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	617b      	str	r3, [r7, #20]
 8015934:	e008      	b.n	8015948 <udp_connect+0x88>
    if (pcb == ipcb) {
 8015936:	68fa      	ldr	r2, [r7, #12]
 8015938:	697b      	ldr	r3, [r7, #20]
 801593a:	429a      	cmp	r2, r3
 801593c:	d101      	bne.n	8015942 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 801593e:	2300      	movs	r3, #0
 8015940:	e00d      	b.n	801595e <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015942:	697b      	ldr	r3, [r7, #20]
 8015944:	68db      	ldr	r3, [r3, #12]
 8015946:	617b      	str	r3, [r7, #20]
 8015948:	697b      	ldr	r3, [r7, #20]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d1f3      	bne.n	8015936 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801594e:	4b06      	ldr	r3, [pc, #24]	; (8015968 <udp_connect+0xa8>)
 8015950:	681a      	ldr	r2, [r3, #0]
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8015956:	4a04      	ldr	r2, [pc, #16]	; (8015968 <udp_connect+0xa8>)
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801595c:	2300      	movs	r3, #0
}
 801595e:	4618      	mov	r0, r3
 8015960:	3718      	adds	r7, #24
 8015962:	46bd      	mov	sp, r7
 8015964:	bd80      	pop	{r7, pc}
 8015966:	bf00      	nop
 8015968:	2000ec1c 	.word	0x2000ec1c

0801596c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801596c:	b480      	push	{r7}
 801596e:	b085      	sub	sp, #20
 8015970:	af00      	add	r7, sp, #0
 8015972:	60f8      	str	r0, [r7, #12]
 8015974:	60b9      	str	r1, [r7, #8]
 8015976:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	68ba      	ldr	r2, [r7, #8]
 801597c:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	687a      	ldr	r2, [r7, #4]
 8015982:	61da      	str	r2, [r3, #28]
}
 8015984:	bf00      	nop
 8015986:	3714      	adds	r7, #20
 8015988:	46bd      	mov	sp, r7
 801598a:	bc80      	pop	{r7}
 801598c:	4770      	bx	lr
	...

08015990 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8015990:	b580      	push	{r7, lr}
 8015992:	b084      	sub	sp, #16
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8015998:	4b15      	ldr	r3, [pc, #84]	; (80159f0 <udp_remove+0x60>)
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	687a      	ldr	r2, [r7, #4]
 801599e:	429a      	cmp	r2, r3
 80159a0:	d105      	bne.n	80159ae <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80159a2:	4b13      	ldr	r3, [pc, #76]	; (80159f0 <udp_remove+0x60>)
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	68db      	ldr	r3, [r3, #12]
 80159a8:	4a11      	ldr	r2, [pc, #68]	; (80159f0 <udp_remove+0x60>)
 80159aa:	6013      	str	r3, [r2, #0]
 80159ac:	e017      	b.n	80159de <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80159ae:	4b10      	ldr	r3, [pc, #64]	; (80159f0 <udp_remove+0x60>)
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	60fb      	str	r3, [r7, #12]
 80159b4:	e010      	b.n	80159d8 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	68db      	ldr	r3, [r3, #12]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d009      	beq.n	80159d2 <udp_remove+0x42>
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	68db      	ldr	r3, [r3, #12]
 80159c2:	687a      	ldr	r2, [r7, #4]
 80159c4:	429a      	cmp	r2, r3
 80159c6:	d104      	bne.n	80159d2 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	68da      	ldr	r2, [r3, #12]
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	60da      	str	r2, [r3, #12]
        break;
 80159d0:	e005      	b.n	80159de <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	68db      	ldr	r3, [r3, #12]
 80159d6:	60fb      	str	r3, [r7, #12]
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d1eb      	bne.n	80159b6 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80159de:	6879      	ldr	r1, [r7, #4]
 80159e0:	2000      	movs	r0, #0
 80159e2:	f7f9 f8dd 	bl	800eba0 <memp_free>
}
 80159e6:	bf00      	nop
 80159e8:	3710      	adds	r7, #16
 80159ea:	46bd      	mov	sp, r7
 80159ec:	bd80      	pop	{r7, pc}
 80159ee:	bf00      	nop
 80159f0:	2000ec1c 	.word	0x2000ec1c

080159f4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80159f4:	b580      	push	{r7, lr}
 80159f6:	b082      	sub	sp, #8
 80159f8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80159fa:	2000      	movs	r0, #0
 80159fc:	f7f9 f87e 	bl	800eafc <memp_malloc>
 8015a00:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d007      	beq.n	8015a18 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015a08:	2220      	movs	r2, #32
 8015a0a:	2100      	movs	r1, #0
 8015a0c:	6878      	ldr	r0, [r7, #4]
 8015a0e:	f004 fc86 	bl	801a31e <memset>
    pcb->ttl = UDP_TTL;
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	22ff      	movs	r2, #255	; 0xff
 8015a16:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015a18:	687b      	ldr	r3, [r7, #4]
}
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	3708      	adds	r7, #8
 8015a1e:	46bd      	mov	sp, r7
 8015a20:	bd80      	pop	{r7, pc}

08015a22 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8015a22:	b580      	push	{r7, lr}
 8015a24:	b084      	sub	sp, #16
 8015a26:	af00      	add	r7, sp, #0
 8015a28:	4603      	mov	r3, r0
 8015a2a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 8015a2c:	f7ff ffe2 	bl	80159f4 <udp_new>
 8015a30:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8015a32:	68fb      	ldr	r3, [r7, #12]
}
 8015a34:	4618      	mov	r0, r3
 8015a36:	3710      	adds	r7, #16
 8015a38:	46bd      	mov	sp, r7
 8015a3a:	bd80      	pop	{r7, pc}

08015a3c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8015a3c:	b480      	push	{r7}
 8015a3e:	b085      	sub	sp, #20
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]
 8015a44:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d01e      	beq.n	8015a8a <udp_netif_ip_addr_changed+0x4e>
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d01a      	beq.n	8015a8a <udp_netif_ip_addr_changed+0x4e>
 8015a54:	683b      	ldr	r3, [r7, #0]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d017      	beq.n	8015a8a <udp_netif_ip_addr_changed+0x4e>
 8015a5a:	683b      	ldr	r3, [r7, #0]
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d013      	beq.n	8015a8a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015a62:	4b0c      	ldr	r3, [pc, #48]	; (8015a94 <udp_netif_ip_addr_changed+0x58>)
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	60fb      	str	r3, [r7, #12]
 8015a68:	e00c      	b.n	8015a84 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	681a      	ldr	r2, [r3, #0]
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	429a      	cmp	r2, r3
 8015a74:	d103      	bne.n	8015a7e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015a76:	683b      	ldr	r3, [r7, #0]
 8015a78:	681a      	ldr	r2, [r3, #0]
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	68db      	ldr	r3, [r3, #12]
 8015a82:	60fb      	str	r3, [r7, #12]
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d1ef      	bne.n	8015a6a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015a8a:	bf00      	nop
 8015a8c:	3714      	adds	r7, #20
 8015a8e:	46bd      	mov	sp, r7
 8015a90:	bc80      	pop	{r7}
 8015a92:	4770      	bx	lr
 8015a94:	2000ec1c 	.word	0x2000ec1c

08015a98 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8015a98:	b580      	push	{r7, lr}
 8015a9a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8015a9c:	4b20      	ldr	r3, [pc, #128]	; (8015b20 <dhcp_inc_pcb_refcount+0x88>)
 8015a9e:	781b      	ldrb	r3, [r3, #0]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d133      	bne.n	8015b0c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8015aa4:	4b1f      	ldr	r3, [pc, #124]	; (8015b24 <dhcp_inc_pcb_refcount+0x8c>)
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d005      	beq.n	8015ab8 <dhcp_inc_pcb_refcount+0x20>
 8015aac:	4b1e      	ldr	r3, [pc, #120]	; (8015b28 <dhcp_inc_pcb_refcount+0x90>)
 8015aae:	22d9      	movs	r2, #217	; 0xd9
 8015ab0:	491e      	ldr	r1, [pc, #120]	; (8015b2c <dhcp_inc_pcb_refcount+0x94>)
 8015ab2:	481f      	ldr	r0, [pc, #124]	; (8015b30 <dhcp_inc_pcb_refcount+0x98>)
 8015ab4:	f004 fcd0 	bl	801a458 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8015ab8:	f7ff ff9c 	bl	80159f4 <udp_new>
 8015abc:	4603      	mov	r3, r0
 8015abe:	4a19      	ldr	r2, [pc, #100]	; (8015b24 <dhcp_inc_pcb_refcount+0x8c>)
 8015ac0:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8015ac2:	4b18      	ldr	r3, [pc, #96]	; (8015b24 <dhcp_inc_pcb_refcount+0x8c>)
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d102      	bne.n	8015ad0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8015aca:	f04f 33ff 	mov.w	r3, #4294967295
 8015ace:	e024      	b.n	8015b1a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8015ad0:	4b14      	ldr	r3, [pc, #80]	; (8015b24 <dhcp_inc_pcb_refcount+0x8c>)
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	7a1a      	ldrb	r2, [r3, #8]
 8015ad6:	4b13      	ldr	r3, [pc, #76]	; (8015b24 <dhcp_inc_pcb_refcount+0x8c>)
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	f042 0220 	orr.w	r2, r2, #32
 8015ade:	b2d2      	uxtb	r2, r2
 8015ae0:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 8015ae2:	4b10      	ldr	r3, [pc, #64]	; (8015b24 <dhcp_inc_pcb_refcount+0x8c>)
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	2244      	movs	r2, #68	; 0x44
 8015ae8:	4912      	ldr	r1, [pc, #72]	; (8015b34 <dhcp_inc_pcb_refcount+0x9c>)
 8015aea:	4618      	mov	r0, r3
 8015aec:	f7ff fe78 	bl	80157e0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 8015af0:	4b0c      	ldr	r3, [pc, #48]	; (8015b24 <dhcp_inc_pcb_refcount+0x8c>)
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	2243      	movs	r2, #67	; 0x43
 8015af6:	490f      	ldr	r1, [pc, #60]	; (8015b34 <dhcp_inc_pcb_refcount+0x9c>)
 8015af8:	4618      	mov	r0, r3
 8015afa:	f7ff fee1 	bl	80158c0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8015afe:	4b09      	ldr	r3, [pc, #36]	; (8015b24 <dhcp_inc_pcb_refcount+0x8c>)
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	2200      	movs	r2, #0
 8015b04:	490c      	ldr	r1, [pc, #48]	; (8015b38 <dhcp_inc_pcb_refcount+0xa0>)
 8015b06:	4618      	mov	r0, r3
 8015b08:	f7ff ff30 	bl	801596c <udp_recv>
  }

  dhcp_pcb_refcount++;
 8015b0c:	4b04      	ldr	r3, [pc, #16]	; (8015b20 <dhcp_inc_pcb_refcount+0x88>)
 8015b0e:	781b      	ldrb	r3, [r3, #0]
 8015b10:	3301      	adds	r3, #1
 8015b12:	b2da      	uxtb	r2, r3
 8015b14:	4b02      	ldr	r3, [pc, #8]	; (8015b20 <dhcp_inc_pcb_refcount+0x88>)
 8015b16:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8015b18:	2300      	movs	r3, #0
}
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	bd80      	pop	{r7, pc}
 8015b1e:	bf00      	nop
 8015b20:	2000ec4c 	.word	0x2000ec4c
 8015b24:	2000ec48 	.word	0x2000ec48
 8015b28:	0801d93c 	.word	0x0801d93c
 8015b2c:	0801d974 	.word	0x0801d974
 8015b30:	0801d99c 	.word	0x0801d99c
 8015b34:	0801e610 	.word	0x0801e610
 8015b38:	0801724d 	.word	0x0801724d

08015b3c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8015b40:	4b0e      	ldr	r3, [pc, #56]	; (8015b7c <dhcp_dec_pcb_refcount+0x40>)
 8015b42:	781b      	ldrb	r3, [r3, #0]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d105      	bne.n	8015b54 <dhcp_dec_pcb_refcount+0x18>
 8015b48:	4b0d      	ldr	r3, [pc, #52]	; (8015b80 <dhcp_dec_pcb_refcount+0x44>)
 8015b4a:	22f3      	movs	r2, #243	; 0xf3
 8015b4c:	490d      	ldr	r1, [pc, #52]	; (8015b84 <dhcp_dec_pcb_refcount+0x48>)
 8015b4e:	480e      	ldr	r0, [pc, #56]	; (8015b88 <dhcp_dec_pcb_refcount+0x4c>)
 8015b50:	f004 fc82 	bl	801a458 <iprintf>
  dhcp_pcb_refcount--;
 8015b54:	4b09      	ldr	r3, [pc, #36]	; (8015b7c <dhcp_dec_pcb_refcount+0x40>)
 8015b56:	781b      	ldrb	r3, [r3, #0]
 8015b58:	3b01      	subs	r3, #1
 8015b5a:	b2da      	uxtb	r2, r3
 8015b5c:	4b07      	ldr	r3, [pc, #28]	; (8015b7c <dhcp_dec_pcb_refcount+0x40>)
 8015b5e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8015b60:	4b06      	ldr	r3, [pc, #24]	; (8015b7c <dhcp_dec_pcb_refcount+0x40>)
 8015b62:	781b      	ldrb	r3, [r3, #0]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d107      	bne.n	8015b78 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8015b68:	4b08      	ldr	r3, [pc, #32]	; (8015b8c <dhcp_dec_pcb_refcount+0x50>)
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	4618      	mov	r0, r3
 8015b6e:	f7ff ff0f 	bl	8015990 <udp_remove>
    dhcp_pcb = NULL;
 8015b72:	4b06      	ldr	r3, [pc, #24]	; (8015b8c <dhcp_dec_pcb_refcount+0x50>)
 8015b74:	2200      	movs	r2, #0
 8015b76:	601a      	str	r2, [r3, #0]
  }
}
 8015b78:	bf00      	nop
 8015b7a:	bd80      	pop	{r7, pc}
 8015b7c:	2000ec4c 	.word	0x2000ec4c
 8015b80:	0801d93c 	.word	0x0801d93c
 8015b84:	0801d9c4 	.word	0x0801d9c4
 8015b88:	0801d99c 	.word	0x0801d99c
 8015b8c:	2000ec48 	.word	0x2000ec48

08015b90 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8015b90:	b580      	push	{r7, lr}
 8015b92:	b084      	sub	sp, #16
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b9c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8015b9e:	210c      	movs	r1, #12
 8015ba0:	68f8      	ldr	r0, [r7, #12]
 8015ba2:	f000 ffb1 	bl	8016b08 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015ba6:	4b06      	ldr	r3, [pc, #24]	; (8015bc0 <dhcp_handle_nak+0x30>)
 8015ba8:	4a05      	ldr	r2, [pc, #20]	; (8015bc0 <dhcp_handle_nak+0x30>)
 8015baa:	4905      	ldr	r1, [pc, #20]	; (8015bc0 <dhcp_handle_nak+0x30>)
 8015bac:	6878      	ldr	r0, [r7, #4]
 8015bae:	f7f9 f885 	bl	800ecbc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8015bb2:	6878      	ldr	r0, [r7, #4]
 8015bb4:	f000 fbe2 	bl	801637c <dhcp_discover>
}
 8015bb8:	bf00      	nop
 8015bba:	3710      	adds	r7, #16
 8015bbc:	46bd      	mov	sp, r7
 8015bbe:	bd80      	pop	{r7, pc}
 8015bc0:	0801e610 	.word	0x0801e610

08015bc4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8015bc4:	b580      	push	{r7, lr}
 8015bc6:	b084      	sub	sp, #16
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bd0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8015bd2:	2108      	movs	r1, #8
 8015bd4:	68f8      	ldr	r0, [r7, #12]
 8015bd6:	f000 ff97 	bl	8016b08 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	3328      	adds	r3, #40	; 0x28
 8015bde:	2200      	movs	r2, #0
 8015be0:	4619      	mov	r1, r3
 8015be2:	6878      	ldr	r0, [r7, #4]
 8015be4:	f002 fb4e 	bl	8018284 <etharp_query>
 8015be8:	4603      	mov	r3, r0
 8015bea:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	7a9b      	ldrb	r3, [r3, #10]
 8015bf0:	2bff      	cmp	r3, #255	; 0xff
 8015bf2:	d005      	beq.n	8015c00 <dhcp_check+0x3c>
    dhcp->tries++;
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	7a9b      	ldrb	r3, [r3, #10]
 8015bf8:	3301      	adds	r3, #1
 8015bfa:	b2da      	uxtb	r2, r3
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 8015c00:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8015c04:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8015c06:	893b      	ldrh	r3, [r7, #8]
 8015c08:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015c0c:	4a06      	ldr	r2, [pc, #24]	; (8015c28 <dhcp_check+0x64>)
 8015c0e:	fb82 1203 	smull	r1, r2, r2, r3
 8015c12:	1152      	asrs	r2, r2, #5
 8015c14:	17db      	asrs	r3, r3, #31
 8015c16:	1ad3      	subs	r3, r2, r3
 8015c18:	b29a      	uxth	r2, r3
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8015c1e:	bf00      	nop
 8015c20:	3710      	adds	r7, #16
 8015c22:	46bd      	mov	sp, r7
 8015c24:	bd80      	pop	{r7, pc}
 8015c26:	bf00      	nop
 8015c28:	10624dd3 	.word	0x10624dd3

08015c2c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 8015c2c:	b580      	push	{r7, lr}
 8015c2e:	b084      	sub	sp, #16
 8015c30:	af00      	add	r7, sp, #0
 8015c32:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c38:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8015c3a:	4b0c      	ldr	r3, [pc, #48]	; (8015c6c <dhcp_handle_offer+0x40>)
 8015c3c:	789b      	ldrb	r3, [r3, #2]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d00f      	beq.n	8015c62 <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8015c42:	4b0b      	ldr	r3, [pc, #44]	; (8015c70 <dhcp_handle_offer+0x44>)
 8015c44:	689b      	ldr	r3, [r3, #8]
 8015c46:	4618      	mov	r0, r3
 8015c48:	f7f8 fb79 	bl	800e33e <lwip_htonl>
 8015c4c:	4602      	mov	r2, r0
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	685b      	ldr	r3, [r3, #4]
 8015c56:	691a      	ldr	r2, [r3, #16]
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	629a      	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8015c5c:	6878      	ldr	r0, [r7, #4]
 8015c5e:	f000 f809 	bl	8015c74 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 8015c62:	bf00      	nop
 8015c64:	3710      	adds	r7, #16
 8015c66:	46bd      	mov	sp, r7
 8015c68:	bd80      	pop	{r7, pc}
 8015c6a:	bf00      	nop
 8015c6c:	2000ec40 	.word	0x2000ec40
 8015c70:	2000ec20 	.word	0x2000ec20

08015c74 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8015c74:	b580      	push	{r7, lr}
 8015c76:	b088      	sub	sp, #32
 8015c78:	af02      	add	r7, sp, #8
 8015c7a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c80:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8015c82:	2101      	movs	r1, #1
 8015c84:	6938      	ldr	r0, [r7, #16]
 8015c86:	f000 ff3f 	bl	8016b08 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8015c8a:	2203      	movs	r2, #3
 8015c8c:	6939      	ldr	r1, [r7, #16]
 8015c8e:	6878      	ldr	r0, [r7, #4]
 8015c90:	f001 fbc2 	bl	8017418 <dhcp_create_msg>
 8015c94:	4603      	mov	r3, r0
 8015c96:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8015c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d159      	bne.n	8015d54 <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015ca0:	2202      	movs	r2, #2
 8015ca2:	2139      	movs	r1, #57	; 0x39
 8015ca4:	6938      	ldr	r0, [r7, #16]
 8015ca6:	f000 ff49 	bl	8016b3c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015cae:	4619      	mov	r1, r3
 8015cb0:	6938      	ldr	r0, [r7, #16]
 8015cb2:	f000 ffa5 	bl	8016c00 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8015cb6:	2204      	movs	r2, #4
 8015cb8:	2132      	movs	r1, #50	; 0x32
 8015cba:	6938      	ldr	r0, [r7, #16]
 8015cbc:	f000 ff3e 	bl	8016b3c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015cc0:	693b      	ldr	r3, [r7, #16]
 8015cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015cc4:	4618      	mov	r0, r3
 8015cc6:	f7f8 fb3a 	bl	800e33e <lwip_htonl>
 8015cca:	4603      	mov	r3, r0
 8015ccc:	4619      	mov	r1, r3
 8015cce:	6938      	ldr	r0, [r7, #16]
 8015cd0:	f000 ffd0 	bl	8016c74 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8015cd4:	2204      	movs	r2, #4
 8015cd6:	2136      	movs	r1, #54	; 0x36
 8015cd8:	6938      	ldr	r0, [r7, #16]
 8015cda:	f000 ff2f 	bl	8016b3c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8015cde:	693b      	ldr	r3, [r7, #16]
 8015ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ce2:	4618      	mov	r0, r3
 8015ce4:	f7f8 fb2b 	bl	800e33e <lwip_htonl>
 8015ce8:	4603      	mov	r3, r0
 8015cea:	4619      	mov	r1, r3
 8015cec:	6938      	ldr	r0, [r7, #16]
 8015cee:	f000 ffc1 	bl	8016c74 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015cf2:	2203      	movs	r2, #3
 8015cf4:	2137      	movs	r1, #55	; 0x37
 8015cf6:	6938      	ldr	r0, [r7, #16]
 8015cf8:	f000 ff20 	bl	8016b3c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015cfc:	2300      	movs	r3, #0
 8015cfe:	75fb      	strb	r3, [r7, #23]
 8015d00:	e009      	b.n	8015d16 <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8015d02:	7dfb      	ldrb	r3, [r7, #23]
 8015d04:	4a29      	ldr	r2, [pc, #164]	; (8015dac <dhcp_select+0x138>)
 8015d06:	5cd3      	ldrb	r3, [r2, r3]
 8015d08:	4619      	mov	r1, r3
 8015d0a:	6938      	ldr	r0, [r7, #16]
 8015d0c:	f000 ff50 	bl	8016bb0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015d10:	7dfb      	ldrb	r3, [r7, #23]
 8015d12:	3301      	adds	r3, #1
 8015d14:	75fb      	strb	r3, [r7, #23]
 8015d16:	7dfb      	ldrb	r3, [r7, #23]
 8015d18:	2b02      	cmp	r3, #2
 8015d1a:	d9f2      	bls.n	8015d02 <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 8015d1c:	6938      	ldr	r0, [r7, #16]
 8015d1e:	f001 fd1f 	bl	8017760 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8015d22:	693b      	ldr	r3, [r7, #16]
 8015d24:	68da      	ldr	r2, [r3, #12]
 8015d26:	693b      	ldr	r3, [r7, #16]
 8015d28:	8a9b      	ldrh	r3, [r3, #20]
 8015d2a:	33f0      	adds	r3, #240	; 0xf0
 8015d2c:	b29b      	uxth	r3, r3
 8015d2e:	4619      	mov	r1, r3
 8015d30:	4610      	mov	r0, r2
 8015d32:	f7f9 fb83 	bl	800f43c <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8015d36:	4b1e      	ldr	r3, [pc, #120]	; (8015db0 <dhcp_select+0x13c>)
 8015d38:	6818      	ldr	r0, [r3, #0]
 8015d3a:	693b      	ldr	r3, [r7, #16]
 8015d3c:	68d9      	ldr	r1, [r3, #12]
 8015d3e:	4b1d      	ldr	r3, [pc, #116]	; (8015db4 <dhcp_select+0x140>)
 8015d40:	9301      	str	r3, [sp, #4]
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	9300      	str	r3, [sp, #0]
 8015d46:	2343      	movs	r3, #67	; 0x43
 8015d48:	4a1b      	ldr	r2, [pc, #108]	; (8015db8 <dhcp_select+0x144>)
 8015d4a:	f7ff fcaf 	bl	80156ac <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8015d4e:	6938      	ldr	r0, [r7, #16]
 8015d50:	f001 fcc4 	bl	80176dc <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8015d54:	693b      	ldr	r3, [r7, #16]
 8015d56:	7a9b      	ldrb	r3, [r3, #10]
 8015d58:	2bff      	cmp	r3, #255	; 0xff
 8015d5a:	d005      	beq.n	8015d68 <dhcp_select+0xf4>
    dhcp->tries++;
 8015d5c:	693b      	ldr	r3, [r7, #16]
 8015d5e:	7a9b      	ldrb	r3, [r3, #10]
 8015d60:	3301      	adds	r3, #1
 8015d62:	b2da      	uxtb	r2, r3
 8015d64:	693b      	ldr	r3, [r7, #16]
 8015d66:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8015d68:	693b      	ldr	r3, [r7, #16]
 8015d6a:	7a9b      	ldrb	r3, [r3, #10]
 8015d6c:	2b05      	cmp	r3, #5
 8015d6e:	d807      	bhi.n	8015d80 <dhcp_select+0x10c>
 8015d70:	693b      	ldr	r3, [r7, #16]
 8015d72:	7a9b      	ldrb	r3, [r3, #10]
 8015d74:	461a      	mov	r2, r3
 8015d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015d7a:	4093      	lsls	r3, r2
 8015d7c:	b29b      	uxth	r3, r3
 8015d7e:	e001      	b.n	8015d84 <dhcp_select+0x110>
 8015d80:	f64e 2360 	movw	r3, #60000	; 0xea60
 8015d84:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8015d86:	89bb      	ldrh	r3, [r7, #12]
 8015d88:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015d8c:	4a0b      	ldr	r2, [pc, #44]	; (8015dbc <dhcp_select+0x148>)
 8015d8e:	fb82 1203 	smull	r1, r2, r2, r3
 8015d92:	1152      	asrs	r2, r2, #5
 8015d94:	17db      	asrs	r3, r3, #31
 8015d96:	1ad3      	subs	r3, r2, r3
 8015d98:	b29a      	uxth	r2, r3
 8015d9a:	693b      	ldr	r3, [r7, #16]
 8015d9c:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015da2:	4618      	mov	r0, r3
 8015da4:	3718      	adds	r7, #24
 8015da6:	46bd      	mov	sp, r7
 8015da8:	bd80      	pop	{r7, pc}
 8015daa:	bf00      	nop
 8015dac:	2000001c 	.word	0x2000001c
 8015db0:	2000ec48 	.word	0x2000ec48
 8015db4:	0801e610 	.word	0x0801e610
 8015db8:	0801e614 	.word	0x0801e614
 8015dbc:	10624dd3 	.word	0x10624dd3

08015dc0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8015dc0:	b580      	push	{r7, lr}
 8015dc2:	b082      	sub	sp, #8
 8015dc4:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 8015dc6:	4b27      	ldr	r3, [pc, #156]	; (8015e64 <dhcp_coarse_tmr+0xa4>)
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 8015dcc:	e042      	b.n	8015e54 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dd2:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8015dd4:	683b      	ldr	r3, [r7, #0]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d039      	beq.n	8015e4e <dhcp_coarse_tmr+0x8e>
 8015dda:	683b      	ldr	r3, [r7, #0]
 8015ddc:	7a5b      	ldrb	r3, [r3, #9]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d035      	beq.n	8015e4e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8015de2:	683b      	ldr	r3, [r7, #0]
 8015de4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d012      	beq.n	8015e10 <dhcp_coarse_tmr+0x50>
 8015dea:	683b      	ldr	r3, [r7, #0]
 8015dec:	8c1b      	ldrh	r3, [r3, #32]
 8015dee:	3301      	adds	r3, #1
 8015df0:	b29a      	uxth	r2, r3
 8015df2:	683b      	ldr	r3, [r7, #0]
 8015df4:	841a      	strh	r2, [r3, #32]
 8015df6:	683b      	ldr	r3, [r7, #0]
 8015df8:	8c1a      	ldrh	r2, [r3, #32]
 8015dfa:	683b      	ldr	r3, [r7, #0]
 8015dfc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8015dfe:	429a      	cmp	r2, r3
 8015e00:	d106      	bne.n	8015e10 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 8015e02:	6878      	ldr	r0, [r7, #4]
 8015e04:	f000 fdc0 	bl	8016988 <dhcp_release>
        dhcp_discover(netif);
 8015e08:	6878      	ldr	r0, [r7, #4]
 8015e0a:	f000 fab7 	bl	801637c <dhcp_discover>
 8015e0e:	e01e      	b.n	8015e4e <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8015e10:	683b      	ldr	r3, [r7, #0]
 8015e12:	8bdb      	ldrh	r3, [r3, #30]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d00b      	beq.n	8015e30 <dhcp_coarse_tmr+0x70>
 8015e18:	683b      	ldr	r3, [r7, #0]
 8015e1a:	8bdb      	ldrh	r3, [r3, #30]
 8015e1c:	1e5a      	subs	r2, r3, #1
 8015e1e:	b291      	uxth	r1, r2
 8015e20:	683a      	ldr	r2, [r7, #0]
 8015e22:	83d1      	strh	r1, [r2, #30]
 8015e24:	2b01      	cmp	r3, #1
 8015e26:	d103      	bne.n	8015e30 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8015e28:	6878      	ldr	r0, [r7, #4]
 8015e2a:	f000 f8c6 	bl	8015fba <dhcp_t2_timeout>
 8015e2e:	e00e      	b.n	8015e4e <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8015e30:	683b      	ldr	r3, [r7, #0]
 8015e32:	8b9b      	ldrh	r3, [r3, #28]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d00a      	beq.n	8015e4e <dhcp_coarse_tmr+0x8e>
 8015e38:	683b      	ldr	r3, [r7, #0]
 8015e3a:	8b9b      	ldrh	r3, [r3, #28]
 8015e3c:	1e5a      	subs	r2, r3, #1
 8015e3e:	b291      	uxth	r1, r2
 8015e40:	683a      	ldr	r2, [r7, #0]
 8015e42:	8391      	strh	r1, [r2, #28]
 8015e44:	2b01      	cmp	r3, #1
 8015e46:	d102      	bne.n	8015e4e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8015e48:	6878      	ldr	r0, [r7, #4]
 8015e4a:	f000 f888 	bl	8015f5e <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d1b9      	bne.n	8015dce <dhcp_coarse_tmr+0xe>
  }
}
 8015e5a:	bf00      	nop
 8015e5c:	bf00      	nop
 8015e5e:	3708      	adds	r7, #8
 8015e60:	46bd      	mov	sp, r7
 8015e62:	bd80      	pop	{r7, pc}
 8015e64:	2000ebb4 	.word	0x2000ebb4

08015e68 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b082      	sub	sp, #8
 8015e6c:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 8015e6e:	4b16      	ldr	r3, [pc, #88]	; (8015ec8 <dhcp_fine_tmr+0x60>)
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 8015e74:	e020      	b.n	8015eb8 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e7a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8015e7c:	683b      	ldr	r3, [r7, #0]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d017      	beq.n	8015eb2 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8015e82:	683b      	ldr	r3, [r7, #0]
 8015e84:	8adb      	ldrh	r3, [r3, #22]
 8015e86:	2b01      	cmp	r3, #1
 8015e88:	d906      	bls.n	8015e98 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8015e8a:	683b      	ldr	r3, [r7, #0]
 8015e8c:	8adb      	ldrh	r3, [r3, #22]
 8015e8e:	3b01      	subs	r3, #1
 8015e90:	b29a      	uxth	r2, r3
 8015e92:	683b      	ldr	r3, [r7, #0]
 8015e94:	82da      	strh	r2, [r3, #22]
 8015e96:	e00c      	b.n	8015eb2 <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 8015e98:	683b      	ldr	r3, [r7, #0]
 8015e9a:	8adb      	ldrh	r3, [r3, #22]
 8015e9c:	2b01      	cmp	r3, #1
 8015e9e:	d108      	bne.n	8015eb2 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8015ea0:	683b      	ldr	r3, [r7, #0]
 8015ea2:	8adb      	ldrh	r3, [r3, #22]
 8015ea4:	3b01      	subs	r3, #1
 8015ea6:	b29a      	uxth	r2, r3
 8015ea8:	683b      	ldr	r3, [r7, #0]
 8015eaa:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8015eac:	6878      	ldr	r0, [r7, #4]
 8015eae:	f000 f80d 	bl	8015ecc <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	681b      	ldr	r3, [r3, #0]
 8015eb6:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d1db      	bne.n	8015e76 <dhcp_fine_tmr+0xe>
  }
}
 8015ebe:	bf00      	nop
 8015ec0:	bf00      	nop
 8015ec2:	3708      	adds	r7, #8
 8015ec4:	46bd      	mov	sp, r7
 8015ec6:	bd80      	pop	{r7, pc}
 8015ec8:	2000ebb4 	.word	0x2000ebb4

08015ecc <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8015ecc:	b580      	push	{r7, lr}
 8015ece:	b084      	sub	sp, #16
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ed8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	7a5b      	ldrb	r3, [r3, #9]
 8015ede:	2b0c      	cmp	r3, #12
 8015ee0:	d003      	beq.n	8015eea <dhcp_timeout+0x1e>
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	7a5b      	ldrb	r3, [r3, #9]
 8015ee6:	2b06      	cmp	r3, #6
 8015ee8:	d103      	bne.n	8015ef2 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8015eea:	6878      	ldr	r0, [r7, #4]
 8015eec:	f000 fa46 	bl	801637c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8015ef0:	e031      	b.n	8015f56 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	7a5b      	ldrb	r3, [r3, #9]
 8015ef6:	2b01      	cmp	r3, #1
 8015ef8:	d10e      	bne.n	8015f18 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	7a9b      	ldrb	r3, [r3, #10]
 8015efe:	2b05      	cmp	r3, #5
 8015f00:	d803      	bhi.n	8015f0a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8015f02:	6878      	ldr	r0, [r7, #4]
 8015f04:	f7ff feb6 	bl	8015c74 <dhcp_select>
}
 8015f08:	e025      	b.n	8015f56 <dhcp_timeout+0x8a>
      dhcp_release(netif);
 8015f0a:	6878      	ldr	r0, [r7, #4]
 8015f0c:	f000 fd3c 	bl	8016988 <dhcp_release>
      dhcp_discover(netif);
 8015f10:	6878      	ldr	r0, [r7, #4]
 8015f12:	f000 fa33 	bl	801637c <dhcp_discover>
}
 8015f16:	e01e      	b.n	8015f56 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	7a5b      	ldrb	r3, [r3, #9]
 8015f1c:	2b08      	cmp	r3, #8
 8015f1e:	d10b      	bne.n	8015f38 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	7a9b      	ldrb	r3, [r3, #10]
 8015f24:	2b01      	cmp	r3, #1
 8015f26:	d803      	bhi.n	8015f30 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8015f28:	6878      	ldr	r0, [r7, #4]
 8015f2a:	f7ff fe4b 	bl	8015bc4 <dhcp_check>
}
 8015f2e:	e012      	b.n	8015f56 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8015f30:	6878      	ldr	r0, [r7, #4]
 8015f32:	f000 faaf 	bl	8016494 <dhcp_bind>
}
 8015f36:	e00e      	b.n	8015f56 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	7a5b      	ldrb	r3, [r3, #9]
 8015f3c:	2b03      	cmp	r3, #3
 8015f3e:	d10a      	bne.n	8015f56 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	7a9b      	ldrb	r3, [r3, #10]
 8015f44:	2b01      	cmp	r3, #1
 8015f46:	d803      	bhi.n	8015f50 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8015f48:	6878      	ldr	r0, [r7, #4]
 8015f4a:	f000 fc89 	bl	8016860 <dhcp_reboot>
}
 8015f4e:	e002      	b.n	8015f56 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8015f50:	6878      	ldr	r0, [r7, #4]
 8015f52:	f000 fa13 	bl	801637c <dhcp_discover>
}
 8015f56:	bf00      	nop
 8015f58:	3710      	adds	r7, #16
 8015f5a:	46bd      	mov	sp, r7
 8015f5c:	bd80      	pop	{r7, pc}

08015f5e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8015f5e:	b580      	push	{r7, lr}
 8015f60:	b084      	sub	sp, #16
 8015f62:	af00      	add	r7, sp, #0
 8015f64:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f6a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	7a5b      	ldrb	r3, [r3, #9]
 8015f70:	2b01      	cmp	r3, #1
 8015f72:	d007      	beq.n	8015f84 <dhcp_t1_timeout+0x26>
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	7a5b      	ldrb	r3, [r3, #9]
 8015f78:	2b0a      	cmp	r3, #10
 8015f7a:	d003      	beq.n	8015f84 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8015f7c:	68fb      	ldr	r3, [r7, #12]
 8015f7e:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015f80:	2b05      	cmp	r3, #5
 8015f82:	d116      	bne.n	8015fb2 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8015f84:	6878      	ldr	r0, [r7, #4]
 8015f86:	f000 fb5f 	bl	8016648 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	8b5b      	ldrh	r3, [r3, #26]
 8015f8e:	461a      	mov	r2, r3
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	8c1b      	ldrh	r3, [r3, #32]
 8015f94:	1ad3      	subs	r3, r2, r3
 8015f96:	2b01      	cmp	r3, #1
 8015f98:	dd0b      	ble.n	8015fb2 <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	8b5b      	ldrh	r3, [r3, #26]
 8015f9e:	461a      	mov	r2, r3
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	8c1b      	ldrh	r3, [r3, #32]
 8015fa4:	1ad3      	subs	r3, r2, r3
 8015fa6:	0fda      	lsrs	r2, r3, #31
 8015fa8:	4413      	add	r3, r2
 8015faa:	105b      	asrs	r3, r3, #1
 8015fac:	b29a      	uxth	r2, r3
 8015fae:	68fb      	ldr	r3, [r7, #12]
 8015fb0:	839a      	strh	r2, [r3, #28]
    }
  }
}
 8015fb2:	bf00      	nop
 8015fb4:	3710      	adds	r7, #16
 8015fb6:	46bd      	mov	sp, r7
 8015fb8:	bd80      	pop	{r7, pc}

08015fba <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8015fba:	b580      	push	{r7, lr}
 8015fbc:	b084      	sub	sp, #16
 8015fbe:	af00      	add	r7, sp, #0
 8015fc0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fc6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	7a5b      	ldrb	r3, [r3, #9]
 8015fcc:	2b01      	cmp	r3, #1
 8015fce:	d00b      	beq.n	8015fe8 <dhcp_t2_timeout+0x2e>
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	7a5b      	ldrb	r3, [r3, #9]
 8015fd4:	2b0a      	cmp	r3, #10
 8015fd6:	d007      	beq.n	8015fe8 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015fdc:	2b05      	cmp	r3, #5
 8015fde:	d003      	beq.n	8015fe8 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	7a5b      	ldrb	r3, [r3, #9]
 8015fe4:	2b04      	cmp	r3, #4
 8015fe6:	d116      	bne.n	8016016 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8015fe8:	6878      	ldr	r0, [r7, #4]
 8015fea:	f000 fbb3 	bl	8016754 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8015ff2:	461a      	mov	r2, r3
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	8c1b      	ldrh	r3, [r3, #32]
 8015ff8:	1ad3      	subs	r3, r2, r3
 8015ffa:	2b01      	cmp	r3, #1
 8015ffc:	dd0b      	ble.n	8016016 <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016002:	461a      	mov	r2, r3
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	8c1b      	ldrh	r3, [r3, #32]
 8016008:	1ad3      	subs	r3, r2, r3
 801600a:	0fda      	lsrs	r2, r3, #31
 801600c:	4413      	add	r3, r2
 801600e:	105b      	asrs	r3, r3, #1
 8016010:	b29a      	uxth	r2, r3
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	83da      	strh	r2, [r3, #30]
    }
  }
}
 8016016:	bf00      	nop
 8016018:	3710      	adds	r7, #16
 801601a:	46bd      	mov	sp, r7
 801601c:	bd80      	pop	{r7, pc}
	...

08016020 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 8016020:	b580      	push	{r7, lr}
 8016022:	b084      	sub	sp, #16
 8016024:	af00      	add	r7, sp, #0
 8016026:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801602c:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	2200      	movs	r2, #0
 8016032:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	2200      	movs	r2, #0
 8016038:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801603a:	4b27      	ldr	r3, [pc, #156]	; (80160d8 <dhcp_handle_ack+0xb8>)
 801603c:	78db      	ldrb	r3, [r3, #3]
 801603e:	2b00      	cmp	r3, #0
 8016040:	d003      	beq.n	801604a <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8016042:	4b26      	ldr	r3, [pc, #152]	; (80160dc <dhcp_handle_ack+0xbc>)
 8016044:	68da      	ldr	r2, [r3, #12]
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	635a      	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801604a:	4b23      	ldr	r3, [pc, #140]	; (80160d8 <dhcp_handle_ack+0xb8>)
 801604c:	791b      	ldrb	r3, [r3, #4]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d004      	beq.n	801605c <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8016052:	4b22      	ldr	r3, [pc, #136]	; (80160dc <dhcp_handle_ack+0xbc>)
 8016054:	691a      	ldr	r2, [r3, #16]
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	639a      	str	r2, [r3, #56]	; 0x38
 801605a:	e004      	b.n	8016066 <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016060:	085a      	lsrs	r2, r3, #1
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8016066:	4b1c      	ldr	r3, [pc, #112]	; (80160d8 <dhcp_handle_ack+0xb8>)
 8016068:	795b      	ldrb	r3, [r3, #5]
 801606a:	2b00      	cmp	r3, #0
 801606c:	d004      	beq.n	8016078 <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801606e:	4b1b      	ldr	r3, [pc, #108]	; (80160dc <dhcp_handle_ack+0xbc>)
 8016070:	695a      	ldr	r2, [r3, #20]
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	63da      	str	r2, [r3, #60]	; 0x3c
 8016076:	e007      	b.n	8016088 <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801607c:	4613      	mov	r3, r2
 801607e:	00db      	lsls	r3, r3, #3
 8016080:	1a9b      	subs	r3, r3, r2
 8016082:	08da      	lsrs	r2, r3, #3
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	685b      	ldr	r3, [r3, #4]
 801608c:	691a      	ldr	r2, [r3, #16]
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	629a      	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8016092:	4b11      	ldr	r3, [pc, #68]	; (80160d8 <dhcp_handle_ack+0xb8>)
 8016094:	799b      	ldrb	r3, [r3, #6]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d00b      	beq.n	80160b2 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801609a:	4b10      	ldr	r3, [pc, #64]	; (80160dc <dhcp_handle_ack+0xbc>)
 801609c:	699b      	ldr	r3, [r3, #24]
 801609e:	4618      	mov	r0, r3
 80160a0:	f7f8 f94d 	bl	800e33e <lwip_htonl>
 80160a4:	4602      	mov	r2, r0
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	62da      	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	2201      	movs	r2, #1
 80160ae:	72da      	strb	r2, [r3, #11]
 80160b0:	e002      	b.n	80160b8 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	2200      	movs	r2, #0
 80160b6:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80160b8:	4b07      	ldr	r3, [pc, #28]	; (80160d8 <dhcp_handle_ack+0xb8>)
 80160ba:	79db      	ldrb	r3, [r3, #7]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d007      	beq.n	80160d0 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80160c0:	4b06      	ldr	r3, [pc, #24]	; (80160dc <dhcp_handle_ack+0xbc>)
 80160c2:	69db      	ldr	r3, [r3, #28]
 80160c4:	4618      	mov	r0, r3
 80160c6:	f7f8 f93a 	bl	800e33e <lwip_htonl>
 80160ca:	4602      	mov	r2, r0
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	631a      	str	r2, [r3, #48]	; 0x30
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80160d0:	bf00      	nop
 80160d2:	3710      	adds	r7, #16
 80160d4:	46bd      	mov	sp, r7
 80160d6:	bd80      	pop	{r7, pc}
 80160d8:	2000ec40 	.word	0x2000ec40
 80160dc:	2000ec20 	.word	0x2000ec20

080160e0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b084      	sub	sp, #16
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d109      	bne.n	8016102 <dhcp_start+0x22>
 80160ee:	4b3c      	ldr	r3, [pc, #240]	; (80161e0 <dhcp_start+0x100>)
 80160f0:	f240 22d6 	movw	r2, #726	; 0x2d6
 80160f4:	493b      	ldr	r1, [pc, #236]	; (80161e4 <dhcp_start+0x104>)
 80160f6:	483c      	ldr	r0, [pc, #240]	; (80161e8 <dhcp_start+0x108>)
 80160f8:	f004 f9ae 	bl	801a458 <iprintf>
 80160fc:	f06f 030f 	mvn.w	r3, #15
 8016100:	e069      	b.n	80161d6 <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8016108:	f003 0301 	and.w	r3, r3, #1
 801610c:	2b00      	cmp	r3, #0
 801610e:	d109      	bne.n	8016124 <dhcp_start+0x44>
 8016110:	4b33      	ldr	r3, [pc, #204]	; (80161e0 <dhcp_start+0x100>)
 8016112:	f240 22d7 	movw	r2, #727	; 0x2d7
 8016116:	4935      	ldr	r1, [pc, #212]	; (80161ec <dhcp_start+0x10c>)
 8016118:	4833      	ldr	r0, [pc, #204]	; (80161e8 <dhcp_start+0x108>)
 801611a:	f004 f99d 	bl	801a458 <iprintf>
 801611e:	f06f 030f 	mvn.w	r3, #15
 8016122:	e058      	b.n	80161d6 <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016128:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801612e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8016132:	d202      	bcs.n	801613a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8016134:	f04f 33ff 	mov.w	r3, #4294967295
 8016138:	e04d      	b.n	80161d6 <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	2b00      	cmp	r3, #0
 801613e:	d10d      	bne.n	801615c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8016140:	2040      	movs	r0, #64	; 0x40
 8016142:	f7f8 fb6b 	bl	800e81c <mem_malloc>
 8016146:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	2b00      	cmp	r3, #0
 801614c:	d102      	bne.n	8016154 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801614e:	f04f 33ff 	mov.w	r3, #4294967295
 8016152:	e040      	b.n	80161d6 <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	68fa      	ldr	r2, [r7, #12]
 8016158:	625a      	str	r2, [r3, #36]	; 0x24
 801615a:	e01b      	b.n	8016194 <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	68db      	ldr	r3, [r3, #12]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d006      	beq.n	8016172 <dhcp_start+0x92>
 8016164:	4b1e      	ldr	r3, [pc, #120]	; (80161e0 <dhcp_start+0x100>)
 8016166:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 801616a:	4921      	ldr	r1, [pc, #132]	; (80161f0 <dhcp_start+0x110>)
 801616c:	481e      	ldr	r0, [pc, #120]	; (80161e8 <dhcp_start+0x108>)
 801616e:	f004 f973 	bl	801a458 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	685b      	ldr	r3, [r3, #4]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d006      	beq.n	8016188 <dhcp_start+0xa8>
 801617a:	4b19      	ldr	r3, [pc, #100]	; (80161e0 <dhcp_start+0x100>)
 801617c:	f240 22f1 	movw	r2, #753	; 0x2f1
 8016180:	491c      	ldr	r1, [pc, #112]	; (80161f4 <dhcp_start+0x114>)
 8016182:	4819      	ldr	r0, [pc, #100]	; (80161e8 <dhcp_start+0x108>)
 8016184:	f004 f968 	bl	801a458 <iprintf>

    if (dhcp->pcb_allocated != 0) {
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	7a1b      	ldrb	r3, [r3, #8]
 801618c:	2b00      	cmp	r3, #0
 801618e:	d001      	beq.n	8016194 <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8016190:	f7ff fcd4 	bl	8015b3c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8016194:	2240      	movs	r2, #64	; 0x40
 8016196:	2100      	movs	r1, #0
 8016198:	68f8      	ldr	r0, [r7, #12]
 801619a:	f004 f8c0 	bl	801a31e <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801619e:	f7ff fc7b 	bl	8015a98 <dhcp_inc_pcb_refcount>
 80161a2:	4603      	mov	r3, r0
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d002      	beq.n	80161ae <dhcp_start+0xce>
    return ERR_MEM;
 80161a8:	f04f 33ff 	mov.w	r3, #4294967295
 80161ac:	e013      	b.n	80161d6 <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	2201      	movs	r2, #1
 80161b2:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80161b4:	6878      	ldr	r0, [r7, #4]
 80161b6:	f000 f8e1 	bl	801637c <dhcp_discover>
 80161ba:	4603      	mov	r3, r0
 80161bc:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80161be:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d005      	beq.n	80161d2 <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 80161c6:	6878      	ldr	r0, [r7, #4]
 80161c8:	f000 fc66 	bl	8016a98 <dhcp_stop>
    return ERR_MEM;
 80161cc:	f04f 33ff 	mov.w	r3, #4294967295
 80161d0:	e001      	b.n	80161d6 <dhcp_start+0xf6>
  }
  return result;
 80161d2:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80161d6:	4618      	mov	r0, r3
 80161d8:	3710      	adds	r7, #16
 80161da:	46bd      	mov	sp, r7
 80161dc:	bd80      	pop	{r7, pc}
 80161de:	bf00      	nop
 80161e0:	0801d93c 	.word	0x0801d93c
 80161e4:	0801d9e8 	.word	0x0801d9e8
 80161e8:	0801d99c 	.word	0x0801d99c
 80161ec:	0801da2c 	.word	0x0801da2c
 80161f0:	0801da50 	.word	0x0801da50
 80161f4:	0801da68 	.word	0x0801da68

080161f8 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 80161f8:	b580      	push	{r7, lr}
 80161fa:	b084      	sub	sp, #16
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016204:	60fb      	str	r3, [r7, #12]

  if (!dhcp)
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	2b00      	cmp	r3, #0
 801620a:	d01a      	beq.n	8016242 <dhcp_network_changed+0x4a>
    return;
  switch (dhcp->state) {
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	7a5b      	ldrb	r3, [r3, #9]
 8016210:	2b0a      	cmp	r3, #10
 8016212:	d008      	beq.n	8016226 <dhcp_network_changed+0x2e>
 8016214:	2b0a      	cmp	r3, #10
 8016216:	dc0d      	bgt.n	8016234 <dhcp_network_changed+0x3c>
 8016218:	2b00      	cmp	r3, #0
 801621a:	d014      	beq.n	8016246 <dhcp_network_changed+0x4e>
 801621c:	2b00      	cmp	r3, #0
 801621e:	db09      	blt.n	8016234 <dhcp_network_changed+0x3c>
 8016220:	3b03      	subs	r3, #3
 8016222:	2b02      	cmp	r3, #2
 8016224:	d806      	bhi.n	8016234 <dhcp_network_changed+0x3c>
  case DHCP_STATE_REBINDING:
  case DHCP_STATE_RENEWING:
  case DHCP_STATE_BOUND:
  case DHCP_STATE_REBOOTING:
    dhcp->tries = 0;
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	2200      	movs	r2, #0
 801622a:	729a      	strb	r2, [r3, #10]
    dhcp_reboot(netif);
 801622c:	6878      	ldr	r0, [r7, #4]
 801622e:	f000 fb17 	bl	8016860 <dhcp_reboot>
    break;
 8016232:	e009      	b.n	8016248 <dhcp_network_changed+0x50>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    /* ensure we start with short timeouts, even if already discovering */
    dhcp->tries = 0;
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	2200      	movs	r2, #0
 8016238:	729a      	strb	r2, [r3, #10]
    dhcp_discover(netif);
 801623a:	6878      	ldr	r0, [r7, #4]
 801623c:	f000 f89e 	bl	801637c <dhcp_discover>
    break;
 8016240:	e002      	b.n	8016248 <dhcp_network_changed+0x50>
    return;
 8016242:	bf00      	nop
 8016244:	e000      	b.n	8016248 <dhcp_network_changed+0x50>
    break;
 8016246:	bf00      	nop
  }
}
 8016248:	3710      	adds	r7, #16
 801624a:	46bd      	mov	sp, r7
 801624c:	bd80      	pop	{r7, pc}
	...

08016250 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8016250:	b580      	push	{r7, lr}
 8016252:	b084      	sub	sp, #16
 8016254:	af00      	add	r7, sp, #0
 8016256:	6078      	str	r0, [r7, #4]
 8016258:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d107      	bne.n	8016270 <dhcp_arp_reply+0x20>
 8016260:	4b0e      	ldr	r3, [pc, #56]	; (801629c <dhcp_arp_reply+0x4c>)
 8016262:	f240 327b 	movw	r2, #891	; 0x37b
 8016266:	490e      	ldr	r1, [pc, #56]	; (80162a0 <dhcp_arp_reply+0x50>)
 8016268:	480e      	ldr	r0, [pc, #56]	; (80162a4 <dhcp_arp_reply+0x54>)
 801626a:	f004 f8f5 	bl	801a458 <iprintf>
 801626e:	e012      	b.n	8016296 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016274:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	2b00      	cmp	r3, #0
 801627a:	d00c      	beq.n	8016296 <dhcp_arp_reply+0x46>
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	7a5b      	ldrb	r3, [r3, #9]
 8016280:	2b08      	cmp	r3, #8
 8016282:	d108      	bne.n	8016296 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8016284:	683b      	ldr	r3, [r7, #0]
 8016286:	681a      	ldr	r2, [r3, #0]
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801628c:	429a      	cmp	r2, r3
 801628e:	d102      	bne.n	8016296 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8016290:	6878      	ldr	r0, [r7, #4]
 8016292:	f000 f809 	bl	80162a8 <dhcp_decline>
    }
  }
}
 8016296:	3710      	adds	r7, #16
 8016298:	46bd      	mov	sp, r7
 801629a:	bd80      	pop	{r7, pc}
 801629c:	0801d93c 	.word	0x0801d93c
 80162a0:	0801d9e8 	.word	0x0801d9e8
 80162a4:	0801d99c 	.word	0x0801d99c

080162a8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b086      	sub	sp, #24
 80162ac:	af02      	add	r7, sp, #8
 80162ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162b4:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 80162b6:	2300      	movs	r3, #0
 80162b8:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80162ba:	210c      	movs	r1, #12
 80162bc:	68f8      	ldr	r0, [r7, #12]
 80162be:	f000 fc23 	bl	8016b08 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 80162c2:	2204      	movs	r2, #4
 80162c4:	68f9      	ldr	r1, [r7, #12]
 80162c6:	6878      	ldr	r0, [r7, #4]
 80162c8:	f001 f8a6 	bl	8017418 <dhcp_create_msg>
 80162cc:	4603      	mov	r3, r0
 80162ce:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 80162d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d12a      	bne.n	801632e <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 80162d8:	2204      	movs	r2, #4
 80162da:	2132      	movs	r1, #50	; 0x32
 80162dc:	68f8      	ldr	r0, [r7, #12]
 80162de:	f000 fc2d 	bl	8016b3c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80162e6:	4618      	mov	r0, r3
 80162e8:	f7f8 f829 	bl	800e33e <lwip_htonl>
 80162ec:	4603      	mov	r3, r0
 80162ee:	4619      	mov	r1, r3
 80162f0:	68f8      	ldr	r0, [r7, #12]
 80162f2:	f000 fcbf 	bl	8016c74 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 80162f6:	68f8      	ldr	r0, [r7, #12]
 80162f8:	f001 fa32 	bl	8017760 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	68da      	ldr	r2, [r3, #12]
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	8a9b      	ldrh	r3, [r3, #20]
 8016304:	33f0      	adds	r3, #240	; 0xf0
 8016306:	b29b      	uxth	r3, r3
 8016308:	4619      	mov	r1, r3
 801630a:	4610      	mov	r0, r2
 801630c:	f7f9 f896 	bl	800f43c <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8016310:	4b16      	ldr	r3, [pc, #88]	; (801636c <dhcp_decline+0xc4>)
 8016312:	6818      	ldr	r0, [r3, #0]
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	68d9      	ldr	r1, [r3, #12]
 8016318:	4b15      	ldr	r3, [pc, #84]	; (8016370 <dhcp_decline+0xc8>)
 801631a:	9301      	str	r3, [sp, #4]
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	9300      	str	r3, [sp, #0]
 8016320:	2343      	movs	r3, #67	; 0x43
 8016322:	4a14      	ldr	r2, [pc, #80]	; (8016374 <dhcp_decline+0xcc>)
 8016324:	f7ff f9c2 	bl	80156ac <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8016328:	68f8      	ldr	r0, [r7, #12]
 801632a:	f001 f9d7 	bl	80176dc <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	7a9b      	ldrb	r3, [r3, #10]
 8016332:	2bff      	cmp	r3, #255	; 0xff
 8016334:	d005      	beq.n	8016342 <dhcp_decline+0x9a>
    dhcp->tries++;
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	7a9b      	ldrb	r3, [r3, #10]
 801633a:	3301      	adds	r3, #1
 801633c:	b2da      	uxtb	r2, r3
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 8016342:	f242 7310 	movw	r3, #10000	; 0x2710
 8016346:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8016348:	893b      	ldrh	r3, [r7, #8]
 801634a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801634e:	4a0a      	ldr	r2, [pc, #40]	; (8016378 <dhcp_decline+0xd0>)
 8016350:	fb82 1203 	smull	r1, r2, r2, r3
 8016354:	1152      	asrs	r2, r2, #5
 8016356:	17db      	asrs	r3, r3, #31
 8016358:	1ad3      	subs	r3, r2, r3
 801635a:	b29a      	uxth	r2, r3
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016360:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016364:	4618      	mov	r0, r3
 8016366:	3710      	adds	r7, #16
 8016368:	46bd      	mov	sp, r7
 801636a:	bd80      	pop	{r7, pc}
 801636c:	2000ec48 	.word	0x2000ec48
 8016370:	0801e610 	.word	0x0801e610
 8016374:	0801e614 	.word	0x0801e614
 8016378:	10624dd3 	.word	0x10624dd3

0801637c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801637c:	b580      	push	{r7, lr}
 801637e:	b088      	sub	sp, #32
 8016380:	af02      	add	r7, sp, #8
 8016382:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016388:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 801638a:	2300      	movs	r3, #0
 801638c:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801638e:	693b      	ldr	r3, [r7, #16]
 8016390:	2200      	movs	r2, #0
 8016392:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8016394:	2106      	movs	r1, #6
 8016396:	6938      	ldr	r0, [r7, #16]
 8016398:	f000 fbb6 	bl	8016b08 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 801639c:	2201      	movs	r2, #1
 801639e:	6939      	ldr	r1, [r7, #16]
 80163a0:	6878      	ldr	r0, [r7, #4]
 80163a2:	f001 f839 	bl	8017418 <dhcp_create_msg>
 80163a6:	4603      	mov	r3, r0
 80163a8:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 80163aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d13b      	bne.n	801642a <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80163b2:	2202      	movs	r2, #2
 80163b4:	2139      	movs	r1, #57	; 0x39
 80163b6:	6938      	ldr	r0, [r7, #16]
 80163b8:	f000 fbc0 	bl	8016b3c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80163c0:	4619      	mov	r1, r3
 80163c2:	6938      	ldr	r0, [r7, #16]
 80163c4:	f000 fc1c 	bl	8016c00 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80163c8:	2203      	movs	r2, #3
 80163ca:	2137      	movs	r1, #55	; 0x37
 80163cc:	6938      	ldr	r0, [r7, #16]
 80163ce:	f000 fbb5 	bl	8016b3c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80163d2:	2300      	movs	r3, #0
 80163d4:	75fb      	strb	r3, [r7, #23]
 80163d6:	e009      	b.n	80163ec <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80163d8:	7dfb      	ldrb	r3, [r7, #23]
 80163da:	4a29      	ldr	r2, [pc, #164]	; (8016480 <dhcp_discover+0x104>)
 80163dc:	5cd3      	ldrb	r3, [r2, r3]
 80163de:	4619      	mov	r1, r3
 80163e0:	6938      	ldr	r0, [r7, #16]
 80163e2:	f000 fbe5 	bl	8016bb0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80163e6:	7dfb      	ldrb	r3, [r7, #23]
 80163e8:	3301      	adds	r3, #1
 80163ea:	75fb      	strb	r3, [r7, #23]
 80163ec:	7dfb      	ldrb	r3, [r7, #23]
 80163ee:	2b02      	cmp	r3, #2
 80163f0:	d9f2      	bls.n	80163d8 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 80163f2:	6938      	ldr	r0, [r7, #16]
 80163f4:	f001 f9b4 	bl	8017760 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80163f8:	693b      	ldr	r3, [r7, #16]
 80163fa:	68da      	ldr	r2, [r3, #12]
 80163fc:	693b      	ldr	r3, [r7, #16]
 80163fe:	8a9b      	ldrh	r3, [r3, #20]
 8016400:	33f0      	adds	r3, #240	; 0xf0
 8016402:	b29b      	uxth	r3, r3
 8016404:	4619      	mov	r1, r3
 8016406:	4610      	mov	r0, r2
 8016408:	f7f9 f818 	bl	800f43c <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 801640c:	4b1d      	ldr	r3, [pc, #116]	; (8016484 <dhcp_discover+0x108>)
 801640e:	6818      	ldr	r0, [r3, #0]
 8016410:	693b      	ldr	r3, [r7, #16]
 8016412:	68d9      	ldr	r1, [r3, #12]
 8016414:	4b1c      	ldr	r3, [pc, #112]	; (8016488 <dhcp_discover+0x10c>)
 8016416:	9301      	str	r3, [sp, #4]
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	9300      	str	r3, [sp, #0]
 801641c:	2343      	movs	r3, #67	; 0x43
 801641e:	4a1b      	ldr	r2, [pc, #108]	; (801648c <dhcp_discover+0x110>)
 8016420:	f7ff f944 	bl	80156ac <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 8016424:	6938      	ldr	r0, [r7, #16]
 8016426:	f001 f959 	bl	80176dc <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801642a:	693b      	ldr	r3, [r7, #16]
 801642c:	7a9b      	ldrb	r3, [r3, #10]
 801642e:	2bff      	cmp	r3, #255	; 0xff
 8016430:	d005      	beq.n	801643e <dhcp_discover+0xc2>
    dhcp->tries++;
 8016432:	693b      	ldr	r3, [r7, #16]
 8016434:	7a9b      	ldrb	r3, [r3, #10]
 8016436:	3301      	adds	r3, #1
 8016438:	b2da      	uxtb	r2, r3
 801643a:	693b      	ldr	r3, [r7, #16]
 801643c:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 801643e:	693b      	ldr	r3, [r7, #16]
 8016440:	7a9b      	ldrb	r3, [r3, #10]
 8016442:	2b05      	cmp	r3, #5
 8016444:	d807      	bhi.n	8016456 <dhcp_discover+0xda>
 8016446:	693b      	ldr	r3, [r7, #16]
 8016448:	7a9b      	ldrb	r3, [r3, #10]
 801644a:	461a      	mov	r2, r3
 801644c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016450:	4093      	lsls	r3, r2
 8016452:	b29b      	uxth	r3, r3
 8016454:	e001      	b.n	801645a <dhcp_discover+0xde>
 8016456:	f64e 2360 	movw	r3, #60000	; 0xea60
 801645a:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801645c:	89bb      	ldrh	r3, [r7, #12]
 801645e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016462:	4a0b      	ldr	r2, [pc, #44]	; (8016490 <dhcp_discover+0x114>)
 8016464:	fb82 1203 	smull	r1, r2, r2, r3
 8016468:	1152      	asrs	r2, r2, #5
 801646a:	17db      	asrs	r3, r3, #31
 801646c:	1ad3      	subs	r3, r2, r3
 801646e:	b29a      	uxth	r2, r3
 8016470:	693b      	ldr	r3, [r7, #16]
 8016472:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016474:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016478:	4618      	mov	r0, r3
 801647a:	3718      	adds	r7, #24
 801647c:	46bd      	mov	sp, r7
 801647e:	bd80      	pop	{r7, pc}
 8016480:	2000001c 	.word	0x2000001c
 8016484:	2000ec48 	.word	0x2000ec48
 8016488:	0801e610 	.word	0x0801e610
 801648c:	0801e614 	.word	0x0801e614
 8016490:	10624dd3 	.word	0x10624dd3

08016494 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b088      	sub	sp, #32
 8016498:	af00      	add	r7, sp, #0
 801649a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d107      	bne.n	80164b2 <dhcp_bind+0x1e>
 80164a2:	4b64      	ldr	r3, [pc, #400]	; (8016634 <dhcp_bind+0x1a0>)
 80164a4:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80164a8:	4963      	ldr	r1, [pc, #396]	; (8016638 <dhcp_bind+0x1a4>)
 80164aa:	4864      	ldr	r0, [pc, #400]	; (801663c <dhcp_bind+0x1a8>)
 80164ac:	f003 ffd4 	bl	801a458 <iprintf>
 80164b0:	e0bc      	b.n	801662c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164b6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80164b8:	69bb      	ldr	r3, [r7, #24]
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d107      	bne.n	80164ce <dhcp_bind+0x3a>
 80164be:	4b5d      	ldr	r3, [pc, #372]	; (8016634 <dhcp_bind+0x1a0>)
 80164c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80164c4:	495e      	ldr	r1, [pc, #376]	; (8016640 <dhcp_bind+0x1ac>)
 80164c6:	485d      	ldr	r0, [pc, #372]	; (801663c <dhcp_bind+0x1a8>)
 80164c8:	f003 ffc6 	bl	801a458 <iprintf>
 80164cc:	e0ae      	b.n	801662c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80164ce:	69bb      	ldr	r3, [r7, #24]
 80164d0:	2200      	movs	r2, #0
 80164d2:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80164d4:	69bb      	ldr	r3, [r7, #24]
 80164d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80164d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164dc:	d019      	beq.n	8016512 <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80164de:	69bb      	ldr	r3, [r7, #24]
 80164e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80164e2:	331e      	adds	r3, #30
 80164e4:	4a57      	ldr	r2, [pc, #348]	; (8016644 <dhcp_bind+0x1b0>)
 80164e6:	fba2 2303 	umull	r2, r3, r2, r3
 80164ea:	095b      	lsrs	r3, r3, #5
 80164ec:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 80164ee:	69fb      	ldr	r3, [r7, #28]
 80164f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80164f4:	d302      	bcc.n	80164fc <dhcp_bind+0x68>
       timeout = 0xffff;
 80164f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80164fa:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 80164fc:	69fb      	ldr	r3, [r7, #28]
 80164fe:	b29a      	uxth	r2, r3
 8016500:	69bb      	ldr	r3, [r7, #24]
 8016502:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 8016504:	69bb      	ldr	r3, [r7, #24]
 8016506:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016508:	2b00      	cmp	r3, #0
 801650a:	d102      	bne.n	8016512 <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 801650c:	69bb      	ldr	r3, [r7, #24]
 801650e:	2201      	movs	r2, #1
 8016510:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8016512:	69bb      	ldr	r3, [r7, #24]
 8016514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016516:	f1b3 3fff 	cmp.w	r3, #4294967295
 801651a:	d01d      	beq.n	8016558 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801651c:	69bb      	ldr	r3, [r7, #24]
 801651e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016520:	331e      	adds	r3, #30
 8016522:	4a48      	ldr	r2, [pc, #288]	; (8016644 <dhcp_bind+0x1b0>)
 8016524:	fba2 2303 	umull	r2, r3, r2, r3
 8016528:	095b      	lsrs	r3, r3, #5
 801652a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801652c:	69fb      	ldr	r3, [r7, #28]
 801652e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016532:	d302      	bcc.n	801653a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8016534:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016538:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801653a:	69fb      	ldr	r3, [r7, #28]
 801653c:	b29a      	uxth	r2, r3
 801653e:	69bb      	ldr	r3, [r7, #24]
 8016540:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 8016542:	69bb      	ldr	r3, [r7, #24]
 8016544:	8b1b      	ldrh	r3, [r3, #24]
 8016546:	2b00      	cmp	r3, #0
 8016548:	d102      	bne.n	8016550 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801654a:	69bb      	ldr	r3, [r7, #24]
 801654c:	2201      	movs	r2, #1
 801654e:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8016550:	69bb      	ldr	r3, [r7, #24]
 8016552:	8b1a      	ldrh	r2, [r3, #24]
 8016554:	69bb      	ldr	r3, [r7, #24]
 8016556:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8016558:	69bb      	ldr	r3, [r7, #24]
 801655a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801655c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016560:	d01d      	beq.n	801659e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8016562:	69bb      	ldr	r3, [r7, #24]
 8016564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016566:	331e      	adds	r3, #30
 8016568:	4a36      	ldr	r2, [pc, #216]	; (8016644 <dhcp_bind+0x1b0>)
 801656a:	fba2 2303 	umull	r2, r3, r2, r3
 801656e:	095b      	lsrs	r3, r3, #5
 8016570:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8016572:	69fb      	ldr	r3, [r7, #28]
 8016574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016578:	d302      	bcc.n	8016580 <dhcp_bind+0xec>
      timeout = 0xffff;
 801657a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801657e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8016580:	69fb      	ldr	r3, [r7, #28]
 8016582:	b29a      	uxth	r2, r3
 8016584:	69bb      	ldr	r3, [r7, #24]
 8016586:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 8016588:	69bb      	ldr	r3, [r7, #24]
 801658a:	8b5b      	ldrh	r3, [r3, #26]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d102      	bne.n	8016596 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8016590:	69bb      	ldr	r3, [r7, #24]
 8016592:	2201      	movs	r2, #1
 8016594:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8016596:	69bb      	ldr	r3, [r7, #24]
 8016598:	8b5a      	ldrh	r2, [r3, #26]
 801659a:	69bb      	ldr	r3, [r7, #24]
 801659c:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801659e:	69bb      	ldr	r3, [r7, #24]
 80165a0:	8b1a      	ldrh	r2, [r3, #24]
 80165a2:	69bb      	ldr	r3, [r7, #24]
 80165a4:	8b5b      	ldrh	r3, [r3, #26]
 80165a6:	429a      	cmp	r2, r3
 80165a8:	d306      	bcc.n	80165b8 <dhcp_bind+0x124>
 80165aa:	69bb      	ldr	r3, [r7, #24]
 80165ac:	8b5b      	ldrh	r3, [r3, #26]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d002      	beq.n	80165b8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80165b2:	69bb      	ldr	r3, [r7, #24]
 80165b4:	2200      	movs	r2, #0
 80165b6:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 80165b8:	69bb      	ldr	r3, [r7, #24]
 80165ba:	7adb      	ldrb	r3, [r3, #11]
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d003      	beq.n	80165c8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80165c0:	69bb      	ldr	r3, [r7, #24]
 80165c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165c4:	613b      	str	r3, [r7, #16]
 80165c6:	e014      	b.n	80165f2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80165c8:	69bb      	ldr	r3, [r7, #24]
 80165ca:	3328      	adds	r3, #40	; 0x28
 80165cc:	781b      	ldrb	r3, [r3, #0]
 80165ce:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80165d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	db02      	blt.n	80165de <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80165d8:	23ff      	movs	r3, #255	; 0xff
 80165da:	613b      	str	r3, [r7, #16]
 80165dc:	e009      	b.n	80165f2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80165de:	7dfb      	ldrb	r3, [r7, #23]
 80165e0:	2bbf      	cmp	r3, #191	; 0xbf
 80165e2:	d903      	bls.n	80165ec <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80165e4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80165e8:	613b      	str	r3, [r7, #16]
 80165ea:	e002      	b.n	80165f2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80165ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80165f0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80165f2:	69bb      	ldr	r3, [r7, #24]
 80165f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165f6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d108      	bne.n	8016610 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80165fe:	69bb      	ldr	r3, [r7, #24]
 8016600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016602:	693b      	ldr	r3, [r7, #16]
 8016604:	4013      	ands	r3, r2
 8016606:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801660e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8016610:	210a      	movs	r1, #10
 8016612:	69b8      	ldr	r0, [r7, #24]
 8016614:	f000 fa78 	bl	8016b08 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8016618:	69bb      	ldr	r3, [r7, #24]
 801661a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801661e:	f107 030c 	add.w	r3, r7, #12
 8016622:	f107 0210 	add.w	r2, r7, #16
 8016626:	6878      	ldr	r0, [r7, #4]
 8016628:	f7f8 fb48 	bl	800ecbc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801662c:	3720      	adds	r7, #32
 801662e:	46bd      	mov	sp, r7
 8016630:	bd80      	pop	{r7, pc}
 8016632:	bf00      	nop
 8016634:	0801d93c 	.word	0x0801d93c
 8016638:	0801da7c 	.word	0x0801da7c
 801663c:	0801d99c 	.word	0x0801d99c
 8016640:	0801da98 	.word	0x0801da98
 8016644:	88888889 	.word	0x88888889

08016648 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8016648:	b580      	push	{r7, lr}
 801664a:	b088      	sub	sp, #32
 801664c:	af02      	add	r7, sp, #8
 801664e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016654:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8016656:	2105      	movs	r1, #5
 8016658:	6938      	ldr	r0, [r7, #16]
 801665a:	f000 fa55 	bl	8016b08 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801665e:	2203      	movs	r2, #3
 8016660:	6939      	ldr	r1, [r7, #16]
 8016662:	6878      	ldr	r0, [r7, #4]
 8016664:	f000 fed8 	bl	8017418 <dhcp_create_msg>
 8016668:	4603      	mov	r3, r0
 801666a:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 801666c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016670:	2b00      	cmp	r3, #0
 8016672:	d13b      	bne.n	80166ec <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016674:	2202      	movs	r2, #2
 8016676:	2139      	movs	r1, #57	; 0x39
 8016678:	6938      	ldr	r0, [r7, #16]
 801667a:	f000 fa5f 	bl	8016b3c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016682:	4619      	mov	r1, r3
 8016684:	6938      	ldr	r0, [r7, #16]
 8016686:	f000 fabb 	bl	8016c00 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801668a:	2203      	movs	r2, #3
 801668c:	2137      	movs	r1, #55	; 0x37
 801668e:	6938      	ldr	r0, [r7, #16]
 8016690:	f000 fa54 	bl	8016b3c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016694:	2300      	movs	r3, #0
 8016696:	75fb      	strb	r3, [r7, #23]
 8016698:	e009      	b.n	80166ae <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801669a:	7dfb      	ldrb	r3, [r7, #23]
 801669c:	4a2a      	ldr	r2, [pc, #168]	; (8016748 <dhcp_renew+0x100>)
 801669e:	5cd3      	ldrb	r3, [r2, r3]
 80166a0:	4619      	mov	r1, r3
 80166a2:	6938      	ldr	r0, [r7, #16]
 80166a4:	f000 fa84 	bl	8016bb0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80166a8:	7dfb      	ldrb	r3, [r7, #23]
 80166aa:	3301      	adds	r3, #1
 80166ac:	75fb      	strb	r3, [r7, #23]
 80166ae:	7dfb      	ldrb	r3, [r7, #23]
 80166b0:	2b02      	cmp	r3, #2
 80166b2:	d9f2      	bls.n	801669a <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 80166b4:	6938      	ldr	r0, [r7, #16]
 80166b6:	f001 f853 	bl	8017760 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80166ba:	693b      	ldr	r3, [r7, #16]
 80166bc:	68da      	ldr	r2, [r3, #12]
 80166be:	693b      	ldr	r3, [r7, #16]
 80166c0:	8a9b      	ldrh	r3, [r3, #20]
 80166c2:	33f0      	adds	r3, #240	; 0xf0
 80166c4:	b29b      	uxth	r3, r3
 80166c6:	4619      	mov	r1, r3
 80166c8:	4610      	mov	r0, r2
 80166ca:	f7f8 feb7 	bl	800f43c <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 80166ce:	4b1f      	ldr	r3, [pc, #124]	; (801674c <dhcp_renew+0x104>)
 80166d0:	6818      	ldr	r0, [r3, #0]
 80166d2:	693b      	ldr	r3, [r7, #16]
 80166d4:	68d9      	ldr	r1, [r3, #12]
 80166d6:	693b      	ldr	r3, [r7, #16]
 80166d8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	9300      	str	r3, [sp, #0]
 80166e0:	2343      	movs	r3, #67	; 0x43
 80166e2:	f7fe ffa5 	bl	8015630 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 80166e6:	6938      	ldr	r0, [r7, #16]
 80166e8:	f000 fff8 	bl	80176dc <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80166ec:	693b      	ldr	r3, [r7, #16]
 80166ee:	7a9b      	ldrb	r3, [r3, #10]
 80166f0:	2bff      	cmp	r3, #255	; 0xff
 80166f2:	d005      	beq.n	8016700 <dhcp_renew+0xb8>
    dhcp->tries++;
 80166f4:	693b      	ldr	r3, [r7, #16]
 80166f6:	7a9b      	ldrb	r3, [r3, #10]
 80166f8:	3301      	adds	r3, #1
 80166fa:	b2da      	uxtb	r2, r3
 80166fc:	693b      	ldr	r3, [r7, #16]
 80166fe:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 8016700:	693b      	ldr	r3, [r7, #16]
 8016702:	7a9b      	ldrb	r3, [r3, #10]
 8016704:	2b09      	cmp	r3, #9
 8016706:	d80a      	bhi.n	801671e <dhcp_renew+0xd6>
 8016708:	693b      	ldr	r3, [r7, #16]
 801670a:	7a9b      	ldrb	r3, [r3, #10]
 801670c:	b29b      	uxth	r3, r3
 801670e:	461a      	mov	r2, r3
 8016710:	0152      	lsls	r2, r2, #5
 8016712:	1ad2      	subs	r2, r2, r3
 8016714:	0092      	lsls	r2, r2, #2
 8016716:	4413      	add	r3, r2
 8016718:	011b      	lsls	r3, r3, #4
 801671a:	b29b      	uxth	r3, r3
 801671c:	e001      	b.n	8016722 <dhcp_renew+0xda>
 801671e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8016722:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8016724:	89bb      	ldrh	r3, [r7, #12]
 8016726:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801672a:	4a09      	ldr	r2, [pc, #36]	; (8016750 <dhcp_renew+0x108>)
 801672c:	fb82 1203 	smull	r1, r2, r2, r3
 8016730:	1152      	asrs	r2, r2, #5
 8016732:	17db      	asrs	r3, r3, #31
 8016734:	1ad3      	subs	r3, r2, r3
 8016736:	b29a      	uxth	r2, r3
 8016738:	693b      	ldr	r3, [r7, #16]
 801673a:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801673c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016740:	4618      	mov	r0, r3
 8016742:	3718      	adds	r7, #24
 8016744:	46bd      	mov	sp, r7
 8016746:	bd80      	pop	{r7, pc}
 8016748:	2000001c 	.word	0x2000001c
 801674c:	2000ec48 	.word	0x2000ec48
 8016750:	10624dd3 	.word	0x10624dd3

08016754 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8016754:	b580      	push	{r7, lr}
 8016756:	b088      	sub	sp, #32
 8016758:	af02      	add	r7, sp, #8
 801675a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016760:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8016762:	2104      	movs	r1, #4
 8016764:	6938      	ldr	r0, [r7, #16]
 8016766:	f000 f9cf 	bl	8016b08 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 801676a:	2203      	movs	r2, #3
 801676c:	6939      	ldr	r1, [r7, #16]
 801676e:	6878      	ldr	r0, [r7, #4]
 8016770:	f000 fe52 	bl	8017418 <dhcp_create_msg>
 8016774:	4603      	mov	r3, r0
 8016776:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8016778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801677c:	2b00      	cmp	r3, #0
 801677e:	d139      	bne.n	80167f4 <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016780:	2202      	movs	r2, #2
 8016782:	2139      	movs	r1, #57	; 0x39
 8016784:	6938      	ldr	r0, [r7, #16]
 8016786:	f000 f9d9 	bl	8016b3c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801678e:	4619      	mov	r1, r3
 8016790:	6938      	ldr	r0, [r7, #16]
 8016792:	f000 fa35 	bl	8016c00 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016796:	2203      	movs	r2, #3
 8016798:	2137      	movs	r1, #55	; 0x37
 801679a:	6938      	ldr	r0, [r7, #16]
 801679c:	f000 f9ce 	bl	8016b3c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80167a0:	2300      	movs	r3, #0
 80167a2:	75fb      	strb	r3, [r7, #23]
 80167a4:	e009      	b.n	80167ba <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80167a6:	7dfb      	ldrb	r3, [r7, #23]
 80167a8:	4a29      	ldr	r2, [pc, #164]	; (8016850 <dhcp_rebind+0xfc>)
 80167aa:	5cd3      	ldrb	r3, [r2, r3]
 80167ac:	4619      	mov	r1, r3
 80167ae:	6938      	ldr	r0, [r7, #16]
 80167b0:	f000 f9fe 	bl	8016bb0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80167b4:	7dfb      	ldrb	r3, [r7, #23]
 80167b6:	3301      	adds	r3, #1
 80167b8:	75fb      	strb	r3, [r7, #23]
 80167ba:	7dfb      	ldrb	r3, [r7, #23]
 80167bc:	2b02      	cmp	r3, #2
 80167be:	d9f2      	bls.n	80167a6 <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 80167c0:	6938      	ldr	r0, [r7, #16]
 80167c2:	f000 ffcd 	bl	8017760 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80167c6:	693b      	ldr	r3, [r7, #16]
 80167c8:	68da      	ldr	r2, [r3, #12]
 80167ca:	693b      	ldr	r3, [r7, #16]
 80167cc:	8a9b      	ldrh	r3, [r3, #20]
 80167ce:	33f0      	adds	r3, #240	; 0xf0
 80167d0:	b29b      	uxth	r3, r3
 80167d2:	4619      	mov	r1, r3
 80167d4:	4610      	mov	r0, r2
 80167d6:	f7f8 fe31 	bl	800f43c <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 80167da:	4b1e      	ldr	r3, [pc, #120]	; (8016854 <dhcp_rebind+0x100>)
 80167dc:	6818      	ldr	r0, [r3, #0]
 80167de:	693b      	ldr	r3, [r7, #16]
 80167e0:	68d9      	ldr	r1, [r3, #12]
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	9300      	str	r3, [sp, #0]
 80167e6:	2343      	movs	r3, #67	; 0x43
 80167e8:	4a1b      	ldr	r2, [pc, #108]	; (8016858 <dhcp_rebind+0x104>)
 80167ea:	f7fe ff21 	bl	8015630 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 80167ee:	6938      	ldr	r0, [r7, #16]
 80167f0:	f000 ff74 	bl	80176dc <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80167f4:	693b      	ldr	r3, [r7, #16]
 80167f6:	7a9b      	ldrb	r3, [r3, #10]
 80167f8:	2bff      	cmp	r3, #255	; 0xff
 80167fa:	d005      	beq.n	8016808 <dhcp_rebind+0xb4>
    dhcp->tries++;
 80167fc:	693b      	ldr	r3, [r7, #16]
 80167fe:	7a9b      	ldrb	r3, [r3, #10]
 8016800:	3301      	adds	r3, #1
 8016802:	b2da      	uxtb	r2, r3
 8016804:	693b      	ldr	r3, [r7, #16]
 8016806:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8016808:	693b      	ldr	r3, [r7, #16]
 801680a:	7a9b      	ldrb	r3, [r3, #10]
 801680c:	2b09      	cmp	r3, #9
 801680e:	d80a      	bhi.n	8016826 <dhcp_rebind+0xd2>
 8016810:	693b      	ldr	r3, [r7, #16]
 8016812:	7a9b      	ldrb	r3, [r3, #10]
 8016814:	b29b      	uxth	r3, r3
 8016816:	461a      	mov	r2, r3
 8016818:	0152      	lsls	r2, r2, #5
 801681a:	1ad2      	subs	r2, r2, r3
 801681c:	0092      	lsls	r2, r2, #2
 801681e:	4413      	add	r3, r2
 8016820:	00db      	lsls	r3, r3, #3
 8016822:	b29b      	uxth	r3, r3
 8016824:	e001      	b.n	801682a <dhcp_rebind+0xd6>
 8016826:	f242 7310 	movw	r3, #10000	; 0x2710
 801682a:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801682c:	89bb      	ldrh	r3, [r7, #12]
 801682e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016832:	4a0a      	ldr	r2, [pc, #40]	; (801685c <dhcp_rebind+0x108>)
 8016834:	fb82 1203 	smull	r1, r2, r2, r3
 8016838:	1152      	asrs	r2, r2, #5
 801683a:	17db      	asrs	r3, r3, #31
 801683c:	1ad3      	subs	r3, r2, r3
 801683e:	b29a      	uxth	r2, r3
 8016840:	693b      	ldr	r3, [r7, #16]
 8016842:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016844:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016848:	4618      	mov	r0, r3
 801684a:	3718      	adds	r7, #24
 801684c:	46bd      	mov	sp, r7
 801684e:	bd80      	pop	{r7, pc}
 8016850:	2000001c 	.word	0x2000001c
 8016854:	2000ec48 	.word	0x2000ec48
 8016858:	0801e614 	.word	0x0801e614
 801685c:	10624dd3 	.word	0x10624dd3

08016860 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8016860:	b580      	push	{r7, lr}
 8016862:	b088      	sub	sp, #32
 8016864:	af02      	add	r7, sp, #8
 8016866:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801686c:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801686e:	2103      	movs	r1, #3
 8016870:	6938      	ldr	r0, [r7, #16]
 8016872:	f000 f949 	bl	8016b08 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8016876:	2203      	movs	r2, #3
 8016878:	6939      	ldr	r1, [r7, #16]
 801687a:	6878      	ldr	r0, [r7, #4]
 801687c:	f000 fdcc 	bl	8017418 <dhcp_create_msg>
 8016880:	4603      	mov	r3, r0
 8016882:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8016884:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016888:	2b00      	cmp	r3, #0
 801688a:	d147      	bne.n	801691c <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801688c:	2202      	movs	r2, #2
 801688e:	2139      	movs	r1, #57	; 0x39
 8016890:	6938      	ldr	r0, [r7, #16]
 8016892:	f000 f953 	bl	8016b3c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8016896:	f44f 7110 	mov.w	r1, #576	; 0x240
 801689a:	6938      	ldr	r0, [r7, #16]
 801689c:	f000 f9b0 	bl	8016c00 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 80168a0:	2204      	movs	r2, #4
 80168a2:	2132      	movs	r1, #50	; 0x32
 80168a4:	6938      	ldr	r0, [r7, #16]
 80168a6:	f000 f949 	bl	8016b3c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80168aa:	693b      	ldr	r3, [r7, #16]
 80168ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80168ae:	4618      	mov	r0, r3
 80168b0:	f7f7 fd45 	bl	800e33e <lwip_htonl>
 80168b4:	4603      	mov	r3, r0
 80168b6:	4619      	mov	r1, r3
 80168b8:	6938      	ldr	r0, [r7, #16]
 80168ba:	f000 f9db 	bl	8016c74 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80168be:	2203      	movs	r2, #3
 80168c0:	2137      	movs	r1, #55	; 0x37
 80168c2:	6938      	ldr	r0, [r7, #16]
 80168c4:	f000 f93a 	bl	8016b3c <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80168c8:	2300      	movs	r3, #0
 80168ca:	75fb      	strb	r3, [r7, #23]
 80168cc:	e009      	b.n	80168e2 <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80168ce:	7dfb      	ldrb	r3, [r7, #23]
 80168d0:	4a29      	ldr	r2, [pc, #164]	; (8016978 <dhcp_reboot+0x118>)
 80168d2:	5cd3      	ldrb	r3, [r2, r3]
 80168d4:	4619      	mov	r1, r3
 80168d6:	6938      	ldr	r0, [r7, #16]
 80168d8:	f000 f96a 	bl	8016bb0 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80168dc:	7dfb      	ldrb	r3, [r7, #23]
 80168de:	3301      	adds	r3, #1
 80168e0:	75fb      	strb	r3, [r7, #23]
 80168e2:	7dfb      	ldrb	r3, [r7, #23]
 80168e4:	2b02      	cmp	r3, #2
 80168e6:	d9f2      	bls.n	80168ce <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 80168e8:	6938      	ldr	r0, [r7, #16]
 80168ea:	f000 ff39 	bl	8017760 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80168ee:	693b      	ldr	r3, [r7, #16]
 80168f0:	68da      	ldr	r2, [r3, #12]
 80168f2:	693b      	ldr	r3, [r7, #16]
 80168f4:	8a9b      	ldrh	r3, [r3, #20]
 80168f6:	33f0      	adds	r3, #240	; 0xf0
 80168f8:	b29b      	uxth	r3, r3
 80168fa:	4619      	mov	r1, r3
 80168fc:	4610      	mov	r0, r2
 80168fe:	f7f8 fd9d 	bl	800f43c <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8016902:	4b1e      	ldr	r3, [pc, #120]	; (801697c <dhcp_reboot+0x11c>)
 8016904:	6818      	ldr	r0, [r3, #0]
 8016906:	693b      	ldr	r3, [r7, #16]
 8016908:	68d9      	ldr	r1, [r3, #12]
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	9300      	str	r3, [sp, #0]
 801690e:	2343      	movs	r3, #67	; 0x43
 8016910:	4a1b      	ldr	r2, [pc, #108]	; (8016980 <dhcp_reboot+0x120>)
 8016912:	f7fe fe8d 	bl	8015630 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8016916:	6938      	ldr	r0, [r7, #16]
 8016918:	f000 fee0 	bl	80176dc <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801691c:	693b      	ldr	r3, [r7, #16]
 801691e:	7a9b      	ldrb	r3, [r3, #10]
 8016920:	2bff      	cmp	r3, #255	; 0xff
 8016922:	d005      	beq.n	8016930 <dhcp_reboot+0xd0>
    dhcp->tries++;
 8016924:	693b      	ldr	r3, [r7, #16]
 8016926:	7a9b      	ldrb	r3, [r3, #10]
 8016928:	3301      	adds	r3, #1
 801692a:	b2da      	uxtb	r2, r3
 801692c:	693b      	ldr	r3, [r7, #16]
 801692e:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8016930:	693b      	ldr	r3, [r7, #16]
 8016932:	7a9b      	ldrb	r3, [r3, #10]
 8016934:	2b09      	cmp	r3, #9
 8016936:	d80a      	bhi.n	801694e <dhcp_reboot+0xee>
 8016938:	693b      	ldr	r3, [r7, #16]
 801693a:	7a9b      	ldrb	r3, [r3, #10]
 801693c:	b29b      	uxth	r3, r3
 801693e:	461a      	mov	r2, r3
 8016940:	0152      	lsls	r2, r2, #5
 8016942:	1ad2      	subs	r2, r2, r3
 8016944:	0092      	lsls	r2, r2, #2
 8016946:	4413      	add	r3, r2
 8016948:	00db      	lsls	r3, r3, #3
 801694a:	b29b      	uxth	r3, r3
 801694c:	e001      	b.n	8016952 <dhcp_reboot+0xf2>
 801694e:	f242 7310 	movw	r3, #10000	; 0x2710
 8016952:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8016954:	89bb      	ldrh	r3, [r7, #12]
 8016956:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801695a:	4a0a      	ldr	r2, [pc, #40]	; (8016984 <dhcp_reboot+0x124>)
 801695c:	fb82 1203 	smull	r1, r2, r2, r3
 8016960:	1152      	asrs	r2, r2, #5
 8016962:	17db      	asrs	r3, r3, #31
 8016964:	1ad3      	subs	r3, r2, r3
 8016966:	b29a      	uxth	r2, r3
 8016968:	693b      	ldr	r3, [r7, #16]
 801696a:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801696c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016970:	4618      	mov	r0, r3
 8016972:	3718      	adds	r7, #24
 8016974:	46bd      	mov	sp, r7
 8016976:	bd80      	pop	{r7, pc}
 8016978:	2000001c 	.word	0x2000001c
 801697c:	2000ec48 	.word	0x2000ec48
 8016980:	0801e614 	.word	0x0801e614
 8016984:	10624dd3 	.word	0x10624dd3

08016988 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 8016988:	b580      	push	{r7, lr}
 801698a:	b088      	sub	sp, #32
 801698c:	af02      	add	r7, sp, #8
 801698e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016994:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 8016996:	697b      	ldr	r3, [r7, #20]
 8016998:	2b00      	cmp	r3, #0
 801699a:	d102      	bne.n	80169a2 <dhcp_release+0x1a>
    return ERR_ARG;
 801699c:	f06f 030f 	mvn.w	r3, #15
 80169a0:	e072      	b.n	8016a88 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80169a2:	697b      	ldr	r3, [r7, #20]
 80169a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169a6:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 80169a8:	6878      	ldr	r0, [r7, #4]
 80169aa:	f000 ff33 	bl	8017814 <dhcp_supplied_address>
 80169ae:	4603      	mov	r3, r0
 80169b0:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80169b2:	2100      	movs	r1, #0
 80169b4:	6978      	ldr	r0, [r7, #20]
 80169b6:	f000 f8a7 	bl	8016b08 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80169ba:	697b      	ldr	r3, [r7, #20]
 80169bc:	2200      	movs	r2, #0
 80169be:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80169c0:	697b      	ldr	r3, [r7, #20]
 80169c2:	2200      	movs	r2, #0
 80169c4:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80169c6:	697b      	ldr	r3, [r7, #20]
 80169c8:	2200      	movs	r2, #0
 80169ca:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80169cc:	697b      	ldr	r3, [r7, #20]
 80169ce:	2200      	movs	r2, #0
 80169d0:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80169d2:	697b      	ldr	r3, [r7, #20]
 80169d4:	2200      	movs	r2, #0
 80169d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80169d8:	697b      	ldr	r3, [r7, #20]
 80169da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80169dc:	697b      	ldr	r3, [r7, #20]
 80169de:	639a      	str	r2, [r3, #56]	; 0x38
 80169e0:	697b      	ldr	r3, [r7, #20]
 80169e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80169e4:	697b      	ldr	r3, [r7, #20]
 80169e6:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80169e8:	697b      	ldr	r3, [r7, #20]
 80169ea:	2200      	movs	r2, #0
 80169ec:	845a      	strh	r2, [r3, #34]	; 0x22
 80169ee:	697b      	ldr	r3, [r7, #20]
 80169f0:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80169f2:	697b      	ldr	r3, [r7, #20]
 80169f4:	841a      	strh	r2, [r3, #32]
 80169f6:	697b      	ldr	r3, [r7, #20]
 80169f8:	8c1a      	ldrh	r2, [r3, #32]
 80169fa:	697b      	ldr	r3, [r7, #20]
 80169fc:	83da      	strh	r2, [r3, #30]
 80169fe:	697b      	ldr	r3, [r7, #20]
 8016a00:	8bda      	ldrh	r2, [r3, #30]
 8016a02:	697b      	ldr	r3, [r7, #20]
 8016a04:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 8016a06:	7cfb      	ldrb	r3, [r7, #19]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d101      	bne.n	8016a10 <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 8016a0c:	2300      	movs	r3, #0
 8016a0e:	e03b      	b.n	8016a88 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 8016a10:	2207      	movs	r2, #7
 8016a12:	6979      	ldr	r1, [r7, #20]
 8016a14:	6878      	ldr	r0, [r7, #4]
 8016a16:	f000 fcff 	bl	8017418 <dhcp_create_msg>
 8016a1a:	4603      	mov	r3, r0
 8016a1c:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 8016a1e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d128      	bne.n	8016a78 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8016a26:	2204      	movs	r2, #4
 8016a28:	2136      	movs	r1, #54	; 0x36
 8016a2a:	6978      	ldr	r0, [r7, #20]
 8016a2c:	f000 f886 	bl	8016b3c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	4618      	mov	r0, r3
 8016a34:	f7f7 fc83 	bl	800e33e <lwip_htonl>
 8016a38:	4603      	mov	r3, r0
 8016a3a:	4619      	mov	r1, r3
 8016a3c:	6978      	ldr	r0, [r7, #20]
 8016a3e:	f000 f919 	bl	8016c74 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 8016a42:	6978      	ldr	r0, [r7, #20]
 8016a44:	f000 fe8c 	bl	8017760 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8016a48:	697b      	ldr	r3, [r7, #20]
 8016a4a:	68da      	ldr	r2, [r3, #12]
 8016a4c:	697b      	ldr	r3, [r7, #20]
 8016a4e:	8a9b      	ldrh	r3, [r3, #20]
 8016a50:	33f0      	adds	r3, #240	; 0xf0
 8016a52:	b29b      	uxth	r3, r3
 8016a54:	4619      	mov	r1, r3
 8016a56:	4610      	mov	r0, r2
 8016a58:	f7f8 fcf0 	bl	800f43c <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 8016a5c:	4b0c      	ldr	r3, [pc, #48]	; (8016a90 <dhcp_release+0x108>)
 8016a5e:	6818      	ldr	r0, [r3, #0]
 8016a60:	697b      	ldr	r3, [r7, #20]
 8016a62:	68d9      	ldr	r1, [r3, #12]
 8016a64:	f107 020c 	add.w	r2, r7, #12
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	9300      	str	r3, [sp, #0]
 8016a6c:	2343      	movs	r3, #67	; 0x43
 8016a6e:	f7fe fddf 	bl	8015630 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8016a72:	6978      	ldr	r0, [r7, #20]
 8016a74:	f000 fe32 	bl	80176dc <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8016a78:	4b06      	ldr	r3, [pc, #24]	; (8016a94 <dhcp_release+0x10c>)
 8016a7a:	4a06      	ldr	r2, [pc, #24]	; (8016a94 <dhcp_release+0x10c>)
 8016a7c:	4905      	ldr	r1, [pc, #20]	; (8016a94 <dhcp_release+0x10c>)
 8016a7e:	6878      	ldr	r0, [r7, #4]
 8016a80:	f7f8 f91c 	bl	800ecbc <netif_set_addr>

  return result;
 8016a84:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 8016a88:	4618      	mov	r0, r3
 8016a8a:	3718      	adds	r7, #24
 8016a8c:	46bd      	mov	sp, r7
 8016a8e:	bd80      	pop	{r7, pc}
 8016a90:	2000ec48 	.word	0x2000ec48
 8016a94:	0801e610 	.word	0x0801e610

08016a98 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 8016a98:	b580      	push	{r7, lr}
 8016a9a:	b084      	sub	sp, #16
 8016a9c:	af00      	add	r7, sp, #0
 8016a9e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d107      	bne.n	8016ab6 <dhcp_stop+0x1e>
 8016aa6:	4b14      	ldr	r3, [pc, #80]	; (8016af8 <dhcp_stop+0x60>)
 8016aa8:	f240 5242 	movw	r2, #1346	; 0x542
 8016aac:	4913      	ldr	r1, [pc, #76]	; (8016afc <dhcp_stop+0x64>)
 8016aae:	4814      	ldr	r0, [pc, #80]	; (8016b00 <dhcp_stop+0x68>)
 8016ab0:	f003 fcd2 	bl	801a458 <iprintf>
 8016ab4:	e01d      	b.n	8016af2 <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016aba:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d017      	beq.n	8016af2 <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	685b      	ldr	r3, [r3, #4]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d006      	beq.n	8016ad8 <dhcp_stop+0x40>
 8016aca:	4b0b      	ldr	r3, [pc, #44]	; (8016af8 <dhcp_stop+0x60>)
 8016acc:	f240 524f 	movw	r2, #1359	; 0x54f
 8016ad0:	490c      	ldr	r1, [pc, #48]	; (8016b04 <dhcp_stop+0x6c>)
 8016ad2:	480b      	ldr	r0, [pc, #44]	; (8016b00 <dhcp_stop+0x68>)
 8016ad4:	f003 fcc0 	bl	801a458 <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8016ad8:	2100      	movs	r1, #0
 8016ada:	68f8      	ldr	r0, [r7, #12]
 8016adc:	f000 f814 	bl	8016b08 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	7a1b      	ldrb	r3, [r3, #8]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d004      	beq.n	8016af2 <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8016ae8:	f7ff f828 	bl	8015b3c <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	2200      	movs	r2, #0
 8016af0:	721a      	strb	r2, [r3, #8]
    }
  }
}
 8016af2:	3710      	adds	r7, #16
 8016af4:	46bd      	mov	sp, r7
 8016af6:	bd80      	pop	{r7, pc}
 8016af8:	0801d93c 	.word	0x0801d93c
 8016afc:	0801dab0 	.word	0x0801dab0
 8016b00:	0801d99c 	.word	0x0801d99c
 8016b04:	0801da68 	.word	0x0801da68

08016b08 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8016b08:	b480      	push	{r7}
 8016b0a:	b083      	sub	sp, #12
 8016b0c:	af00      	add	r7, sp, #0
 8016b0e:	6078      	str	r0, [r7, #4]
 8016b10:	460b      	mov	r3, r1
 8016b12:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	7a5b      	ldrb	r3, [r3, #9]
 8016b18:	78fa      	ldrb	r2, [r7, #3]
 8016b1a:	429a      	cmp	r2, r3
 8016b1c:	d008      	beq.n	8016b30 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	78fa      	ldrb	r2, [r7, #3]
 8016b22:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	2200      	movs	r2, #0
 8016b28:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	2200      	movs	r2, #0
 8016b2e:	82da      	strh	r2, [r3, #22]
  }
}
 8016b30:	bf00      	nop
 8016b32:	370c      	adds	r7, #12
 8016b34:	46bd      	mov	sp, r7
 8016b36:	bc80      	pop	{r7}
 8016b38:	4770      	bx	lr
	...

08016b3c <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b082      	sub	sp, #8
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	6078      	str	r0, [r7, #4]
 8016b44:	460b      	mov	r3, r1
 8016b46:	70fb      	strb	r3, [r7, #3]
 8016b48:	4613      	mov	r3, r2
 8016b4a:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	8a9b      	ldrh	r3, [r3, #20]
 8016b50:	461a      	mov	r2, r3
 8016b52:	78bb      	ldrb	r3, [r7, #2]
 8016b54:	4413      	add	r3, r2
 8016b56:	3302      	adds	r3, #2
 8016b58:	2b44      	cmp	r3, #68	; 0x44
 8016b5a:	d906      	bls.n	8016b6a <dhcp_option+0x2e>
 8016b5c:	4b11      	ldr	r3, [pc, #68]	; (8016ba4 <dhcp_option+0x68>)
 8016b5e:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8016b62:	4911      	ldr	r1, [pc, #68]	; (8016ba8 <dhcp_option+0x6c>)
 8016b64:	4811      	ldr	r0, [pc, #68]	; (8016bac <dhcp_option+0x70>)
 8016b66:	f003 fc77 	bl	801a458 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	691a      	ldr	r2, [r3, #16]
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	8a9b      	ldrh	r3, [r3, #20]
 8016b72:	1c59      	adds	r1, r3, #1
 8016b74:	b288      	uxth	r0, r1
 8016b76:	6879      	ldr	r1, [r7, #4]
 8016b78:	8288      	strh	r0, [r1, #20]
 8016b7a:	4413      	add	r3, r2
 8016b7c:	78fa      	ldrb	r2, [r7, #3]
 8016b7e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	691a      	ldr	r2, [r3, #16]
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	8a9b      	ldrh	r3, [r3, #20]
 8016b8a:	1c59      	adds	r1, r3, #1
 8016b8c:	b288      	uxth	r0, r1
 8016b8e:	6879      	ldr	r1, [r7, #4]
 8016b90:	8288      	strh	r0, [r1, #20]
 8016b92:	4413      	add	r3, r2
 8016b94:	78ba      	ldrb	r2, [r7, #2]
 8016b96:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8016b9a:	bf00      	nop
 8016b9c:	3708      	adds	r7, #8
 8016b9e:	46bd      	mov	sp, r7
 8016ba0:	bd80      	pop	{r7, pc}
 8016ba2:	bf00      	nop
 8016ba4:	0801d93c 	.word	0x0801d93c
 8016ba8:	0801dacc 	.word	0x0801dacc
 8016bac:	0801d99c 	.word	0x0801d99c

08016bb0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 8016bb0:	b580      	push	{r7, lr}
 8016bb2:	b082      	sub	sp, #8
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	6078      	str	r0, [r7, #4]
 8016bb8:	460b      	mov	r3, r1
 8016bba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	8a9b      	ldrh	r3, [r3, #20]
 8016bc0:	2b43      	cmp	r3, #67	; 0x43
 8016bc2:	d906      	bls.n	8016bd2 <dhcp_option_byte+0x22>
 8016bc4:	4b0b      	ldr	r3, [pc, #44]	; (8016bf4 <dhcp_option_byte+0x44>)
 8016bc6:	f240 527b 	movw	r2, #1403	; 0x57b
 8016bca:	490b      	ldr	r1, [pc, #44]	; (8016bf8 <dhcp_option_byte+0x48>)
 8016bcc:	480b      	ldr	r0, [pc, #44]	; (8016bfc <dhcp_option_byte+0x4c>)
 8016bce:	f003 fc43 	bl	801a458 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	691a      	ldr	r2, [r3, #16]
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	8a9b      	ldrh	r3, [r3, #20]
 8016bda:	1c59      	adds	r1, r3, #1
 8016bdc:	b288      	uxth	r0, r1
 8016bde:	6879      	ldr	r1, [r7, #4]
 8016be0:	8288      	strh	r0, [r1, #20]
 8016be2:	4413      	add	r3, r2
 8016be4:	78fa      	ldrb	r2, [r7, #3]
 8016be6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8016bea:	bf00      	nop
 8016bec:	3708      	adds	r7, #8
 8016bee:	46bd      	mov	sp, r7
 8016bf0:	bd80      	pop	{r7, pc}
 8016bf2:	bf00      	nop
 8016bf4:	0801d93c 	.word	0x0801d93c
 8016bf8:	0801db14 	.word	0x0801db14
 8016bfc:	0801d99c 	.word	0x0801d99c

08016c00 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 8016c00:	b590      	push	{r4, r7, lr}
 8016c02:	b083      	sub	sp, #12
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	6078      	str	r0, [r7, #4]
 8016c08:	460b      	mov	r3, r1
 8016c0a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	8a9b      	ldrh	r3, [r3, #20]
 8016c10:	3302      	adds	r3, #2
 8016c12:	2b44      	cmp	r3, #68	; 0x44
 8016c14:	d906      	bls.n	8016c24 <dhcp_option_short+0x24>
 8016c16:	4b14      	ldr	r3, [pc, #80]	; (8016c68 <dhcp_option_short+0x68>)
 8016c18:	f240 5282 	movw	r2, #1410	; 0x582
 8016c1c:	4913      	ldr	r1, [pc, #76]	; (8016c6c <dhcp_option_short+0x6c>)
 8016c1e:	4814      	ldr	r0, [pc, #80]	; (8016c70 <dhcp_option_short+0x70>)
 8016c20:	f003 fc1a 	bl	801a458 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8016c24:	887b      	ldrh	r3, [r7, #2]
 8016c26:	0a1b      	lsrs	r3, r3, #8
 8016c28:	b298      	uxth	r0, r3
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	691a      	ldr	r2, [r3, #16]
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	8a9b      	ldrh	r3, [r3, #20]
 8016c32:	1c59      	adds	r1, r3, #1
 8016c34:	b28c      	uxth	r4, r1
 8016c36:	6879      	ldr	r1, [r7, #4]
 8016c38:	828c      	strh	r4, [r1, #20]
 8016c3a:	b2c1      	uxtb	r1, r0
 8016c3c:	4413      	add	r3, r2
 8016c3e:	460a      	mov	r2, r1
 8016c40:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	691a      	ldr	r2, [r3, #16]
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	8a9b      	ldrh	r3, [r3, #20]
 8016c4c:	1c59      	adds	r1, r3, #1
 8016c4e:	b288      	uxth	r0, r1
 8016c50:	6879      	ldr	r1, [r7, #4]
 8016c52:	8288      	strh	r0, [r1, #20]
 8016c54:	8879      	ldrh	r1, [r7, #2]
 8016c56:	b2c9      	uxtb	r1, r1
 8016c58:	4413      	add	r3, r2
 8016c5a:	460a      	mov	r2, r1
 8016c5c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8016c60:	bf00      	nop
 8016c62:	370c      	adds	r7, #12
 8016c64:	46bd      	mov	sp, r7
 8016c66:	bd90      	pop	{r4, r7, pc}
 8016c68:	0801d93c 	.word	0x0801d93c
 8016c6c:	0801db50 	.word	0x0801db50
 8016c70:	0801d99c 	.word	0x0801d99c

08016c74 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 8016c74:	b590      	push	{r4, r7, lr}
 8016c76:	b083      	sub	sp, #12
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	6078      	str	r0, [r7, #4]
 8016c7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	8a9b      	ldrh	r3, [r3, #20]
 8016c82:	3304      	adds	r3, #4
 8016c84:	2b44      	cmp	r3, #68	; 0x44
 8016c86:	d906      	bls.n	8016c96 <dhcp_option_long+0x22>
 8016c88:	4b22      	ldr	r3, [pc, #136]	; (8016d14 <dhcp_option_long+0xa0>)
 8016c8a:	f240 528a 	movw	r2, #1418	; 0x58a
 8016c8e:	4922      	ldr	r1, [pc, #136]	; (8016d18 <dhcp_option_long+0xa4>)
 8016c90:	4822      	ldr	r0, [pc, #136]	; (8016d1c <dhcp_option_long+0xa8>)
 8016c92:	f003 fbe1 	bl	801a458 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8016c96:	683b      	ldr	r3, [r7, #0]
 8016c98:	0e18      	lsrs	r0, r3, #24
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	691a      	ldr	r2, [r3, #16]
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	8a9b      	ldrh	r3, [r3, #20]
 8016ca2:	1c59      	adds	r1, r3, #1
 8016ca4:	b28c      	uxth	r4, r1
 8016ca6:	6879      	ldr	r1, [r7, #4]
 8016ca8:	828c      	strh	r4, [r1, #20]
 8016caa:	b2c1      	uxtb	r1, r0
 8016cac:	4413      	add	r3, r2
 8016cae:	460a      	mov	r2, r1
 8016cb0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8016cb4:	683b      	ldr	r3, [r7, #0]
 8016cb6:	0c18      	lsrs	r0, r3, #16
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	691a      	ldr	r2, [r3, #16]
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	8a9b      	ldrh	r3, [r3, #20]
 8016cc0:	1c59      	adds	r1, r3, #1
 8016cc2:	b28c      	uxth	r4, r1
 8016cc4:	6879      	ldr	r1, [r7, #4]
 8016cc6:	828c      	strh	r4, [r1, #20]
 8016cc8:	b2c1      	uxtb	r1, r0
 8016cca:	4413      	add	r3, r2
 8016ccc:	460a      	mov	r2, r1
 8016cce:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8016cd2:	683b      	ldr	r3, [r7, #0]
 8016cd4:	0a18      	lsrs	r0, r3, #8
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	691a      	ldr	r2, [r3, #16]
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	8a9b      	ldrh	r3, [r3, #20]
 8016cde:	1c59      	adds	r1, r3, #1
 8016ce0:	b28c      	uxth	r4, r1
 8016ce2:	6879      	ldr	r1, [r7, #4]
 8016ce4:	828c      	strh	r4, [r1, #20]
 8016ce6:	b2c1      	uxtb	r1, r0
 8016ce8:	4413      	add	r3, r2
 8016cea:	460a      	mov	r2, r1
 8016cec:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	691a      	ldr	r2, [r3, #16]
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	8a9b      	ldrh	r3, [r3, #20]
 8016cf8:	1c59      	adds	r1, r3, #1
 8016cfa:	b288      	uxth	r0, r1
 8016cfc:	6879      	ldr	r1, [r7, #4]
 8016cfe:	8288      	strh	r0, [r1, #20]
 8016d00:	6839      	ldr	r1, [r7, #0]
 8016d02:	b2c9      	uxtb	r1, r1
 8016d04:	4413      	add	r3, r2
 8016d06:	460a      	mov	r2, r1
 8016d08:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8016d0c:	bf00      	nop
 8016d0e:	370c      	adds	r7, #12
 8016d10:	46bd      	mov	sp, r7
 8016d12:	bd90      	pop	{r4, r7, pc}
 8016d14:	0801d93c 	.word	0x0801d93c
 8016d18:	0801db94 	.word	0x0801db94
 8016d1c:	0801d99c 	.word	0x0801d99c

08016d20 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 8016d20:	b580      	push	{r7, lr}
 8016d22:	b08e      	sub	sp, #56	; 0x38
 8016d24:	af00      	add	r7, sp, #0
 8016d26:	6078      	str	r0, [r7, #4]
 8016d28:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	627b      	str	r3, [r7, #36]	; 0x24
  int parse_sname_as_options = 0;
 8016d2e:	2300      	movs	r3, #0
 8016d30:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8016d32:	2208      	movs	r2, #8
 8016d34:	2100      	movs	r1, #0
 8016d36:	48b3      	ldr	r0, [pc, #716]	; (8017004 <dhcp_parse_reply+0x2e4>)
 8016d38:	f003 faf1 	bl	801a31e <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8016d3c:	683b      	ldr	r3, [r7, #0]
 8016d3e:	895b      	ldrh	r3, [r3, #10]
 8016d40:	2b2b      	cmp	r3, #43	; 0x2b
 8016d42:	d802      	bhi.n	8016d4a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8016d44:	f06f 0301 	mvn.w	r3, #1
 8016d48:	e26a      	b.n	8017220 <dhcp_parse_reply+0x500>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8016d4a:	683b      	ldr	r3, [r7, #0]
 8016d4c:	685a      	ldr	r2, [r3, #4]
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8016d52:	23f0      	movs	r3, #240	; 0xf0
 8016d54:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8016d56:	683b      	ldr	r3, [r7, #0]
 8016d58:	891b      	ldrh	r3, [r3, #8]
 8016d5a:	85bb      	strh	r3, [r7, #44]	; 0x2c
again:
  q = p;
 8016d5c:	683b      	ldr	r3, [r7, #0]
 8016d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 8016d60:	e00c      	b.n	8016d7c <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 8016d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d64:	895b      	ldrh	r3, [r3, #10]
 8016d66:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016d68:	1ad3      	subs	r3, r2, r3
 8016d6a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max -= q->len;
 8016d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d6e:	895b      	ldrh	r3, [r3, #10]
 8016d70:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8016d72:	1ad3      	subs	r3, r2, r3
 8016d74:	85bb      	strh	r3, [r7, #44]	; 0x2c
    q = q->next;
 8016d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 8016d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d004      	beq.n	8016d8c <dhcp_parse_reply+0x6c>
 8016d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d84:	895b      	ldrh	r3, [r3, #10]
 8016d86:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016d88:	429a      	cmp	r2, r3
 8016d8a:	d2ea      	bcs.n	8016d62 <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 8016d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d102      	bne.n	8016d98 <dhcp_parse_reply+0x78>
    return ERR_BUF;
 8016d92:	f06f 0301 	mvn.w	r3, #1
 8016d96:	e243      	b.n	8017220 <dhcp_parse_reply+0x500>
  }
  offset = options_idx;
 8016d98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016d9a:	867b      	strh	r3, [r7, #50]	; 0x32
  offset_max = options_idx_max;
 8016d9c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016d9e:	863b      	strh	r3, [r7, #48]	; 0x30
  options = (u8_t*)q->payload;
 8016da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016da2:	685b      	ldr	r3, [r3, #4]
 8016da4:	637b      	str	r3, [r7, #52]	; 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8016da6:	e1fb      	b.n	80171a0 <dhcp_parse_reply+0x480>
    u8_t op = options[offset];
 8016da8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8016daa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016dac:	4413      	add	r3, r2
 8016dae:	781b      	ldrb	r3, [r3, #0]
 8016db0:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 8016db2:	2300      	movs	r3, #0
 8016db4:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 8016db6:	f04f 33ff 	mov.w	r3, #4294967295
 8016dba:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 8016dbc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8016dbe:	3302      	adds	r3, #2
 8016dc0:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8016dc2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8016dc4:	3301      	adds	r3, #1
 8016dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016dc8:	8952      	ldrh	r2, [r2, #10]
 8016dca:	4293      	cmp	r3, r2
 8016dcc:	da06      	bge.n	8016ddc <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 8016dce:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8016dd0:	3301      	adds	r3, #1
 8016dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016dd4:	4413      	add	r3, r2
 8016dd6:	781b      	ldrb	r3, [r3, #0]
 8016dd8:	77fb      	strb	r3, [r7, #31]
 8016dda:	e00a      	b.n	8016df2 <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 8016ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d004      	beq.n	8016dee <dhcp_parse_reply+0xce>
 8016de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	685b      	ldr	r3, [r3, #4]
 8016dea:	781b      	ldrb	r3, [r3, #0]
 8016dec:	e000      	b.n	8016df0 <dhcp_parse_reply+0xd0>
 8016dee:	2300      	movs	r3, #0
 8016df0:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8016df2:	7ffb      	ldrb	r3, [r7, #31]
 8016df4:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 8016df6:	7d7b      	ldrb	r3, [r7, #21]
 8016df8:	2b3b      	cmp	r3, #59	; 0x3b
 8016dfa:	f200 8121 	bhi.w	8017040 <dhcp_parse_reply+0x320>
 8016dfe:	a201      	add	r2, pc, #4	; (adr r2, 8016e04 <dhcp_parse_reply+0xe4>)
 8016e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e04:	08016ef5 	.word	0x08016ef5
 8016e08:	08016f05 	.word	0x08016f05
 8016e0c:	08017041 	.word	0x08017041
 8016e10:	08016f25 	.word	0x08016f25
 8016e14:	08017041 	.word	0x08017041
 8016e18:	08017041 	.word	0x08017041
 8016e1c:	08017041 	.word	0x08017041
 8016e20:	08017041 	.word	0x08017041
 8016e24:	08017041 	.word	0x08017041
 8016e28:	08017041 	.word	0x08017041
 8016e2c:	08017041 	.word	0x08017041
 8016e30:	08017041 	.word	0x08017041
 8016e34:	08017041 	.word	0x08017041
 8016e38:	08017041 	.word	0x08017041
 8016e3c:	08017041 	.word	0x08017041
 8016e40:	08017041 	.word	0x08017041
 8016e44:	08017041 	.word	0x08017041
 8016e48:	08017041 	.word	0x08017041
 8016e4c:	08017041 	.word	0x08017041
 8016e50:	08017041 	.word	0x08017041
 8016e54:	08017041 	.word	0x08017041
 8016e58:	08017041 	.word	0x08017041
 8016e5c:	08017041 	.word	0x08017041
 8016e60:	08017041 	.word	0x08017041
 8016e64:	08017041 	.word	0x08017041
 8016e68:	08017041 	.word	0x08017041
 8016e6c:	08017041 	.word	0x08017041
 8016e70:	08017041 	.word	0x08017041
 8016e74:	08017041 	.word	0x08017041
 8016e78:	08017041 	.word	0x08017041
 8016e7c:	08017041 	.word	0x08017041
 8016e80:	08017041 	.word	0x08017041
 8016e84:	08017041 	.word	0x08017041
 8016e88:	08017041 	.word	0x08017041
 8016e8c:	08017041 	.word	0x08017041
 8016e90:	08017041 	.word	0x08017041
 8016e94:	08017041 	.word	0x08017041
 8016e98:	08017041 	.word	0x08017041
 8016e9c:	08017041 	.word	0x08017041
 8016ea0:	08017041 	.word	0x08017041
 8016ea4:	08017041 	.word	0x08017041
 8016ea8:	08017041 	.word	0x08017041
 8016eac:	08017041 	.word	0x08017041
 8016eb0:	08017041 	.word	0x08017041
 8016eb4:	08017041 	.word	0x08017041
 8016eb8:	08017041 	.word	0x08017041
 8016ebc:	08017041 	.word	0x08017041
 8016ec0:	08017041 	.word	0x08017041
 8016ec4:	08017041 	.word	0x08017041
 8016ec8:	08017041 	.word	0x08017041
 8016ecc:	08017041 	.word	0x08017041
 8016ed0:	08016f4b 	.word	0x08016f4b
 8016ed4:	08016f6b 	.word	0x08016f6b
 8016ed8:	08016fa5 	.word	0x08016fa5
 8016edc:	08016fc5 	.word	0x08016fc5
 8016ee0:	08017041 	.word	0x08017041
 8016ee4:	08017041 	.word	0x08017041
 8016ee8:	08017041 	.word	0x08017041
 8016eec:	08016fe5 	.word	0x08016fe5
 8016ef0:	08017021 	.word	0x08017021
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8016ef4:	2300      	movs	r3, #0
 8016ef6:	77fb      	strb	r3, [r7, #31]
 8016ef8:	7ffb      	ldrb	r3, [r7, #31]
 8016efa:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 8016efc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8016efe:	3b01      	subs	r3, #1
 8016f00:	867b      	strh	r3, [r7, #50]	; 0x32
        break;
 8016f02:	e0a0      	b.n	8017046 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016f04:	7ffb      	ldrb	r3, [r7, #31]
 8016f06:	2b04      	cmp	r3, #4
 8016f08:	d009      	beq.n	8016f1e <dhcp_parse_reply+0x1fe>
 8016f0a:	4b3f      	ldr	r3, [pc, #252]	; (8017008 <dhcp_parse_reply+0x2e8>)
 8016f0c:	f240 52f6 	movw	r2, #1526	; 0x5f6
 8016f10:	493e      	ldr	r1, [pc, #248]	; (801700c <dhcp_parse_reply+0x2ec>)
 8016f12:	483f      	ldr	r0, [pc, #252]	; (8017010 <dhcp_parse_reply+0x2f0>)
 8016f14:	f003 faa0 	bl	801a458 <iprintf>
 8016f18:	f06f 0305 	mvn.w	r3, #5
 8016f1c:	e180      	b.n	8017220 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8016f1e:	2306      	movs	r3, #6
 8016f20:	61bb      	str	r3, [r7, #24]
        break;
 8016f22:	e090      	b.n	8017046 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8016f24:	2304      	movs	r3, #4
 8016f26:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8016f28:	7ffa      	ldrb	r2, [r7, #31]
 8016f2a:	7fbb      	ldrb	r3, [r7, #30]
 8016f2c:	429a      	cmp	r2, r3
 8016f2e:	d209      	bcs.n	8016f44 <dhcp_parse_reply+0x224>
 8016f30:	4b35      	ldr	r3, [pc, #212]	; (8017008 <dhcp_parse_reply+0x2e8>)
 8016f32:	f240 52fb 	movw	r2, #1531	; 0x5fb
 8016f36:	4937      	ldr	r1, [pc, #220]	; (8017014 <dhcp_parse_reply+0x2f4>)
 8016f38:	4835      	ldr	r0, [pc, #212]	; (8017010 <dhcp_parse_reply+0x2f0>)
 8016f3a:	f003 fa8d 	bl	801a458 <iprintf>
 8016f3e:	f06f 0305 	mvn.w	r3, #5
 8016f42:	e16d      	b.n	8017220 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8016f44:	2307      	movs	r3, #7
 8016f46:	61bb      	str	r3, [r7, #24]
        break;
 8016f48:	e07d      	b.n	8017046 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016f4a:	7ffb      	ldrb	r3, [r7, #31]
 8016f4c:	2b04      	cmp	r3, #4
 8016f4e:	d009      	beq.n	8016f64 <dhcp_parse_reply+0x244>
 8016f50:	4b2d      	ldr	r3, [pc, #180]	; (8017008 <dhcp_parse_reply+0x2e8>)
 8016f52:	f240 6209 	movw	r2, #1545	; 0x609
 8016f56:	492d      	ldr	r1, [pc, #180]	; (801700c <dhcp_parse_reply+0x2ec>)
 8016f58:	482d      	ldr	r0, [pc, #180]	; (8017010 <dhcp_parse_reply+0x2f0>)
 8016f5a:	f003 fa7d 	bl	801a458 <iprintf>
 8016f5e:	f06f 0305 	mvn.w	r3, #5
 8016f62:	e15d      	b.n	8017220 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8016f64:	2303      	movs	r3, #3
 8016f66:	61bb      	str	r3, [r7, #24]
        break;
 8016f68:	e06d      	b.n	8017046 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8016f6a:	7ffb      	ldrb	r3, [r7, #31]
 8016f6c:	2b01      	cmp	r3, #1
 8016f6e:	d009      	beq.n	8016f84 <dhcp_parse_reply+0x264>
 8016f70:	4b25      	ldr	r3, [pc, #148]	; (8017008 <dhcp_parse_reply+0x2e8>)
 8016f72:	f240 6217 	movw	r2, #1559	; 0x617
 8016f76:	4928      	ldr	r1, [pc, #160]	; (8017018 <dhcp_parse_reply+0x2f8>)
 8016f78:	4825      	ldr	r0, [pc, #148]	; (8017010 <dhcp_parse_reply+0x2f0>)
 8016f7a:	f003 fa6d 	bl	801a458 <iprintf>
 8016f7e:	f06f 0305 	mvn.w	r3, #5
 8016f82:	e14d      	b.n	8017220 <dhcp_parse_reply+0x500>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8016f84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016f86:	2bf0      	cmp	r3, #240	; 0xf0
 8016f88:	d009      	beq.n	8016f9e <dhcp_parse_reply+0x27e>
 8016f8a:	4b1f      	ldr	r3, [pc, #124]	; (8017008 <dhcp_parse_reply+0x2e8>)
 8016f8c:	f240 6219 	movw	r2, #1561	; 0x619
 8016f90:	4922      	ldr	r1, [pc, #136]	; (801701c <dhcp_parse_reply+0x2fc>)
 8016f92:	481f      	ldr	r0, [pc, #124]	; (8017010 <dhcp_parse_reply+0x2f0>)
 8016f94:	f003 fa60 	bl	801a458 <iprintf>
 8016f98:	f06f 0305 	mvn.w	r3, #5
 8016f9c:	e140      	b.n	8017220 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8016f9e:	2300      	movs	r3, #0
 8016fa0:	61bb      	str	r3, [r7, #24]
        break;
 8016fa2:	e050      	b.n	8017046 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8016fa4:	7ffb      	ldrb	r3, [r7, #31]
 8016fa6:	2b01      	cmp	r3, #1
 8016fa8:	d009      	beq.n	8016fbe <dhcp_parse_reply+0x29e>
 8016faa:	4b17      	ldr	r3, [pc, #92]	; (8017008 <dhcp_parse_reply+0x2e8>)
 8016fac:	f240 621d 	movw	r2, #1565	; 0x61d
 8016fb0:	4919      	ldr	r1, [pc, #100]	; (8017018 <dhcp_parse_reply+0x2f8>)
 8016fb2:	4817      	ldr	r0, [pc, #92]	; (8017010 <dhcp_parse_reply+0x2f0>)
 8016fb4:	f003 fa50 	bl	801a458 <iprintf>
 8016fb8:	f06f 0305 	mvn.w	r3, #5
 8016fbc:	e130      	b.n	8017220 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8016fbe:	2301      	movs	r3, #1
 8016fc0:	61bb      	str	r3, [r7, #24]
        break;
 8016fc2:	e040      	b.n	8017046 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016fc4:	7ffb      	ldrb	r3, [r7, #31]
 8016fc6:	2b04      	cmp	r3, #4
 8016fc8:	d009      	beq.n	8016fde <dhcp_parse_reply+0x2be>
 8016fca:	4b0f      	ldr	r3, [pc, #60]	; (8017008 <dhcp_parse_reply+0x2e8>)
 8016fcc:	f240 6221 	movw	r2, #1569	; 0x621
 8016fd0:	490e      	ldr	r1, [pc, #56]	; (801700c <dhcp_parse_reply+0x2ec>)
 8016fd2:	480f      	ldr	r0, [pc, #60]	; (8017010 <dhcp_parse_reply+0x2f0>)
 8016fd4:	f003 fa40 	bl	801a458 <iprintf>
 8016fd8:	f06f 0305 	mvn.w	r3, #5
 8016fdc:	e120      	b.n	8017220 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8016fde:	2302      	movs	r3, #2
 8016fe0:	61bb      	str	r3, [r7, #24]
        break;
 8016fe2:	e030      	b.n	8017046 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016fe4:	7ffb      	ldrb	r3, [r7, #31]
 8016fe6:	2b04      	cmp	r3, #4
 8016fe8:	d009      	beq.n	8016ffe <dhcp_parse_reply+0x2de>
 8016fea:	4b07      	ldr	r3, [pc, #28]	; (8017008 <dhcp_parse_reply+0x2e8>)
 8016fec:	f240 6225 	movw	r2, #1573	; 0x625
 8016ff0:	4906      	ldr	r1, [pc, #24]	; (801700c <dhcp_parse_reply+0x2ec>)
 8016ff2:	4807      	ldr	r0, [pc, #28]	; (8017010 <dhcp_parse_reply+0x2f0>)
 8016ff4:	f003 fa30 	bl	801a458 <iprintf>
 8016ff8:	f06f 0305 	mvn.w	r3, #5
 8016ffc:	e110      	b.n	8017220 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T1;
 8016ffe:	2304      	movs	r3, #4
 8017000:	61bb      	str	r3, [r7, #24]
        break;
 8017002:	e020      	b.n	8017046 <dhcp_parse_reply+0x326>
 8017004:	2000ec40 	.word	0x2000ec40
 8017008:	0801d93c 	.word	0x0801d93c
 801700c:	0801dbd4 	.word	0x0801dbd4
 8017010:	0801d99c 	.word	0x0801d99c
 8017014:	0801dbe0 	.word	0x0801dbe0
 8017018:	0801dbf4 	.word	0x0801dbf4
 801701c:	0801dc00 	.word	0x0801dc00
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017020:	7ffb      	ldrb	r3, [r7, #31]
 8017022:	2b04      	cmp	r3, #4
 8017024:	d009      	beq.n	801703a <dhcp_parse_reply+0x31a>
 8017026:	4b80      	ldr	r3, [pc, #512]	; (8017228 <dhcp_parse_reply+0x508>)
 8017028:	f240 6229 	movw	r2, #1577	; 0x629
 801702c:	497f      	ldr	r1, [pc, #508]	; (801722c <dhcp_parse_reply+0x50c>)
 801702e:	4880      	ldr	r0, [pc, #512]	; (8017230 <dhcp_parse_reply+0x510>)
 8017030:	f003 fa12 	bl	801a458 <iprintf>
 8017034:	f06f 0305 	mvn.w	r3, #5
 8017038:	e0f2      	b.n	8017220 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T2;
 801703a:	2305      	movs	r3, #5
 801703c:	61bb      	str	r3, [r7, #24]
        break;
 801703e:	e002      	b.n	8017046 <dhcp_parse_reply+0x326>
      default:
        decode_len = 0;
 8017040:	2300      	movs	r3, #0
 8017042:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 8017044:	bf00      	nop
    }
    offset += len + 2;
 8017046:	7ffb      	ldrb	r3, [r7, #31]
 8017048:	b29a      	uxth	r2, r3
 801704a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801704c:	4413      	add	r3, r2
 801704e:	b29b      	uxth	r3, r3
 8017050:	3302      	adds	r3, #2
 8017052:	867b      	strh	r3, [r7, #50]	; 0x32
    if (decode_len > 0) {
 8017054:	7fbb      	ldrb	r3, [r7, #30]
 8017056:	2b00      	cmp	r3, #0
 8017058:	d079      	beq.n	801714e <dhcp_parse_reply+0x42e>
      u32_t value = 0;
 801705a:	2300      	movs	r3, #0
 801705c:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801705e:	69bb      	ldr	r3, [r7, #24]
 8017060:	2b00      	cmp	r3, #0
 8017062:	db02      	blt.n	801706a <dhcp_parse_reply+0x34a>
 8017064:	69bb      	ldr	r3, [r7, #24]
 8017066:	2b07      	cmp	r3, #7
 8017068:	dd06      	ble.n	8017078 <dhcp_parse_reply+0x358>
 801706a:	4b6f      	ldr	r3, [pc, #444]	; (8017228 <dhcp_parse_reply+0x508>)
 801706c:	f240 6236 	movw	r2, #1590	; 0x636
 8017070:	4970      	ldr	r1, [pc, #448]	; (8017234 <dhcp_parse_reply+0x514>)
 8017072:	486f      	ldr	r0, [pc, #444]	; (8017230 <dhcp_parse_reply+0x510>)
 8017074:	f003 f9f0 	bl	801a458 <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 8017078:	4a6f      	ldr	r2, [pc, #444]	; (8017238 <dhcp_parse_reply+0x518>)
 801707a:	69bb      	ldr	r3, [r7, #24]
 801707c:	4413      	add	r3, r2
 801707e:	781b      	ldrb	r3, [r3, #0]
 8017080:	2b00      	cmp	r3, #0
 8017082:	d164      	bne.n	801714e <dhcp_parse_reply+0x42e>
        copy_len = LWIP_MIN(decode_len, 4);
 8017084:	7fbb      	ldrb	r3, [r7, #30]
 8017086:	2b04      	cmp	r3, #4
 8017088:	bf28      	it	cs
 801708a:	2304      	movcs	r3, #4
 801708c:	b2db      	uxtb	r3, r3
 801708e:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8017090:	8afb      	ldrh	r3, [r7, #22]
 8017092:	8a7a      	ldrh	r2, [r7, #18]
 8017094:	f107 0108 	add.w	r1, r7, #8
 8017098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801709a:	f7f8 fd4d 	bl	800fb38 <pbuf_copy_partial>
 801709e:	4603      	mov	r3, r0
 80170a0:	461a      	mov	r2, r3
 80170a2:	8a7b      	ldrh	r3, [r7, #18]
 80170a4:	4293      	cmp	r3, r2
 80170a6:	d002      	beq.n	80170ae <dhcp_parse_reply+0x38e>
          return ERR_BUF;
 80170a8:	f06f 0301 	mvn.w	r3, #1
 80170ac:	e0b8      	b.n	8017220 <dhcp_parse_reply+0x500>
        }
        if (decode_len > 4) {
 80170ae:	7fbb      	ldrb	r3, [r7, #30]
 80170b0:	2b04      	cmp	r3, #4
 80170b2:	d927      	bls.n	8017104 <dhcp_parse_reply+0x3e4>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80170b4:	7fbb      	ldrb	r3, [r7, #30]
 80170b6:	f003 0303 	and.w	r3, r3, #3
 80170ba:	b2db      	uxtb	r3, r3
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d009      	beq.n	80170d4 <dhcp_parse_reply+0x3b4>
 80170c0:	4b59      	ldr	r3, [pc, #356]	; (8017228 <dhcp_parse_reply+0x508>)
 80170c2:	f240 623e 	movw	r2, #1598	; 0x63e
 80170c6:	495d      	ldr	r1, [pc, #372]	; (801723c <dhcp_parse_reply+0x51c>)
 80170c8:	4859      	ldr	r0, [pc, #356]	; (8017230 <dhcp_parse_reply+0x510>)
 80170ca:	f003 f9c5 	bl	801a458 <iprintf>
 80170ce:	f06f 0305 	mvn.w	r3, #5
 80170d2:	e0a5      	b.n	8017220 <dhcp_parse_reply+0x500>
          dhcp_got_option(dhcp, decode_idx);
 80170d4:	4a58      	ldr	r2, [pc, #352]	; (8017238 <dhcp_parse_reply+0x518>)
 80170d6:	69bb      	ldr	r3, [r7, #24]
 80170d8:	4413      	add	r3, r2
 80170da:	2201      	movs	r2, #1
 80170dc:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80170de:	68bb      	ldr	r3, [r7, #8]
 80170e0:	4618      	mov	r0, r3
 80170e2:	f7f7 f92c 	bl	800e33e <lwip_htonl>
 80170e6:	4602      	mov	r2, r0
 80170e8:	4955      	ldr	r1, [pc, #340]	; (8017240 <dhcp_parse_reply+0x520>)
 80170ea:	69bb      	ldr	r3, [r7, #24]
 80170ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          decode_len -= 4;
 80170f0:	7fbb      	ldrb	r3, [r7, #30]
 80170f2:	3b04      	subs	r3, #4
 80170f4:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 80170f6:	8afb      	ldrh	r3, [r7, #22]
 80170f8:	3304      	adds	r3, #4
 80170fa:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 80170fc:	69bb      	ldr	r3, [r7, #24]
 80170fe:	3301      	adds	r3, #1
 8017100:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 8017102:	e7ac      	b.n	801705e <dhcp_parse_reply+0x33e>
        } else if (decode_len == 4) {
 8017104:	7fbb      	ldrb	r3, [r7, #30]
 8017106:	2b04      	cmp	r3, #4
 8017108:	d106      	bne.n	8017118 <dhcp_parse_reply+0x3f8>
          value = lwip_ntohl(value);
 801710a:	68bb      	ldr	r3, [r7, #8]
 801710c:	4618      	mov	r0, r3
 801710e:	f7f7 f916 	bl	800e33e <lwip_htonl>
 8017112:	4603      	mov	r3, r0
 8017114:	60bb      	str	r3, [r7, #8]
 8017116:	e010      	b.n	801713a <dhcp_parse_reply+0x41a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8017118:	7fbb      	ldrb	r3, [r7, #30]
 801711a:	2b01      	cmp	r3, #1
 801711c:	d009      	beq.n	8017132 <dhcp_parse_reply+0x412>
 801711e:	4b42      	ldr	r3, [pc, #264]	; (8017228 <dhcp_parse_reply+0x508>)
 8017120:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 8017124:	4947      	ldr	r1, [pc, #284]	; (8017244 <dhcp_parse_reply+0x524>)
 8017126:	4842      	ldr	r0, [pc, #264]	; (8017230 <dhcp_parse_reply+0x510>)
 8017128:	f003 f996 	bl	801a458 <iprintf>
 801712c:	f06f 0305 	mvn.w	r3, #5
 8017130:	e076      	b.n	8017220 <dhcp_parse_reply+0x500>
          value = ((u8_t*)&value)[0];
 8017132:	f107 0308 	add.w	r3, r7, #8
 8017136:	781b      	ldrb	r3, [r3, #0]
 8017138:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 801713a:	4a3f      	ldr	r2, [pc, #252]	; (8017238 <dhcp_parse_reply+0x518>)
 801713c:	69bb      	ldr	r3, [r7, #24]
 801713e:	4413      	add	r3, r2
 8017140:	2201      	movs	r2, #1
 8017142:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 8017144:	68ba      	ldr	r2, [r7, #8]
 8017146:	493e      	ldr	r1, [pc, #248]	; (8017240 <dhcp_parse_reply+0x520>)
 8017148:	69bb      	ldr	r3, [r7, #24]
 801714a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 801714e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017150:	895b      	ldrh	r3, [r3, #10]
 8017152:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8017154:	429a      	cmp	r2, r3
 8017156:	d323      	bcc.n	80171a0 <dhcp_parse_reply+0x480>
      offset -= q->len;
 8017158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801715a:	895b      	ldrh	r3, [r3, #10]
 801715c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 801715e:	1ad3      	subs	r3, r2, r3
 8017160:	867b      	strh	r3, [r7, #50]	; 0x32
      offset_max -= q->len;
 8017162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017164:	895b      	ldrh	r3, [r3, #10]
 8017166:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8017168:	1ad3      	subs	r3, r2, r3
 801716a:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((offset < offset_max) && offset_max) {
 801716c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 801716e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8017170:	429a      	cmp	r2, r3
 8017172:	d223      	bcs.n	80171bc <dhcp_parse_reply+0x49c>
 8017174:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8017176:	2b00      	cmp	r3, #0
 8017178:	d020      	beq.n	80171bc <dhcp_parse_reply+0x49c>
        q = q->next;
 801717a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	62bb      	str	r3, [r7, #40]	; 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8017180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017182:	2b00      	cmp	r3, #0
 8017184:	d109      	bne.n	801719a <dhcp_parse_reply+0x47a>
 8017186:	4b28      	ldr	r3, [pc, #160]	; (8017228 <dhcp_parse_reply+0x508>)
 8017188:	f240 6254 	movw	r2, #1620	; 0x654
 801718c:	492e      	ldr	r1, [pc, #184]	; (8017248 <dhcp_parse_reply+0x528>)
 801718e:	4828      	ldr	r0, [pc, #160]	; (8017230 <dhcp_parse_reply+0x510>)
 8017190:	f003 f962 	bl	801a458 <iprintf>
 8017194:	f06f 0305 	mvn.w	r3, #5
 8017198:	e042      	b.n	8017220 <dhcp_parse_reply+0x500>
        options = (u8_t*)q->payload;
 801719a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801719c:	685b      	ldr	r3, [r3, #4]
 801719e:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80171a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d00a      	beq.n	80171bc <dhcp_parse_reply+0x49c>
 80171a6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80171a8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80171aa:	429a      	cmp	r2, r3
 80171ac:	d206      	bcs.n	80171bc <dhcp_parse_reply+0x49c>
 80171ae:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80171b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80171b2:	4413      	add	r3, r2
 80171b4:	781b      	ldrb	r3, [r3, #0]
 80171b6:	2bff      	cmp	r3, #255	; 0xff
 80171b8:	f47f adf6 	bne.w	8016da8 <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80171bc:	4b1e      	ldr	r3, [pc, #120]	; (8017238 <dhcp_parse_reply+0x518>)
 80171be:	781b      	ldrb	r3, [r3, #0]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d018      	beq.n	80171f6 <dhcp_parse_reply+0x4d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80171c4:	4b1e      	ldr	r3, [pc, #120]	; (8017240 <dhcp_parse_reply+0x520>)
 80171c6:	681b      	ldr	r3, [r3, #0]
 80171c8:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80171ca:	4b1b      	ldr	r3, [pc, #108]	; (8017238 <dhcp_parse_reply+0x518>)
 80171cc:	2200      	movs	r2, #0
 80171ce:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	2b01      	cmp	r3, #1
 80171d4:	d102      	bne.n	80171dc <dhcp_parse_reply+0x4bc>
      parse_file_as_options = 1;
 80171d6:	2301      	movs	r3, #1
 80171d8:	627b      	str	r3, [r7, #36]	; 0x24
 80171da:	e00c      	b.n	80171f6 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	2b02      	cmp	r3, #2
 80171e0:	d102      	bne.n	80171e8 <dhcp_parse_reply+0x4c8>
      parse_sname_as_options = 1;
 80171e2:	2301      	movs	r3, #1
 80171e4:	623b      	str	r3, [r7, #32]
 80171e6:	e006      	b.n	80171f6 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	2b03      	cmp	r3, #3
 80171ec:	d103      	bne.n	80171f6 <dhcp_parse_reply+0x4d6>
      parse_sname_as_options = 1;
 80171ee:	2301      	movs	r3, #1
 80171f0:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 80171f2:	2301      	movs	r3, #1
 80171f4:	627b      	str	r3, [r7, #36]	; 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 80171f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d006      	beq.n	801720a <dhcp_parse_reply+0x4ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80171fc:	2300      	movs	r3, #0
 80171fe:	627b      	str	r3, [r7, #36]	; 0x24
    options_idx = DHCP_FILE_OFS;
 8017200:	236c      	movs	r3, #108	; 0x6c
 8017202:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8017204:	23ec      	movs	r3, #236	; 0xec
 8017206:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 8017208:	e5a8      	b.n	8016d5c <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 801720a:	6a3b      	ldr	r3, [r7, #32]
 801720c:	2b00      	cmp	r3, #0
 801720e:	d006      	beq.n	801721e <dhcp_parse_reply+0x4fe>
    parse_sname_as_options = 0;
 8017210:	2300      	movs	r3, #0
 8017212:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 8017214:	232c      	movs	r3, #44	; 0x2c
 8017216:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8017218:	236c      	movs	r3, #108	; 0x6c
 801721a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 801721c:	e59e      	b.n	8016d5c <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 801721e:	2300      	movs	r3, #0
}
 8017220:	4618      	mov	r0, r3
 8017222:	3738      	adds	r7, #56	; 0x38
 8017224:	46bd      	mov	sp, r7
 8017226:	bd80      	pop	{r7, pc}
 8017228:	0801d93c 	.word	0x0801d93c
 801722c:	0801dbd4 	.word	0x0801dbd4
 8017230:	0801d99c 	.word	0x0801d99c
 8017234:	0801dc18 	.word	0x0801dc18
 8017238:	2000ec40 	.word	0x2000ec40
 801723c:	0801dc2c 	.word	0x0801dc2c
 8017240:	2000ec20 	.word	0x2000ec20
 8017244:	0801dc44 	.word	0x0801dc44
 8017248:	0801dc58 	.word	0x0801dc58

0801724c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801724c:	b580      	push	{r7, lr}
 801724e:	b08a      	sub	sp, #40	; 0x28
 8017250:	af00      	add	r7, sp, #0
 8017252:	60f8      	str	r0, [r7, #12]
 8017254:	60b9      	str	r1, [r7, #8]
 8017256:	607a      	str	r2, [r7, #4]
 8017258:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801725a:	4b69      	ldr	r3, [pc, #420]	; (8017400 <dhcp_recv+0x1b4>)
 801725c:	685b      	ldr	r3, [r3, #4]
 801725e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017260:	6a3b      	ldr	r3, [r7, #32]
 8017262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017264:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	685b      	ldr	r3, [r3, #4]
 801726a:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801726c:	69fb      	ldr	r3, [r7, #28]
 801726e:	2b00      	cmp	r3, #0
 8017270:	f000 80a9 	beq.w	80173c6 <dhcp_recv+0x17a>
 8017274:	69fb      	ldr	r3, [r7, #28]
 8017276:	7a1b      	ldrb	r3, [r3, #8]
 8017278:	2b00      	cmp	r3, #0
 801727a:	f000 80a4 	beq.w	80173c6 <dhcp_recv+0x17a>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 801727e:	69fb      	ldr	r3, [r7, #28]
 8017280:	685b      	ldr	r3, [r3, #4]
 8017282:	2b00      	cmp	r3, #0
 8017284:	d006      	beq.n	8017294 <dhcp_recv+0x48>
 8017286:	4b5f      	ldr	r3, [pc, #380]	; (8017404 <dhcp_recv+0x1b8>)
 8017288:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 801728c:	495e      	ldr	r1, [pc, #376]	; (8017408 <dhcp_recv+0x1bc>)
 801728e:	485f      	ldr	r0, [pc, #380]	; (801740c <dhcp_recv+0x1c0>)
 8017290:	f003 f8e2 	bl	801a458 <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	895b      	ldrh	r3, [r3, #10]
 8017298:	2b2b      	cmp	r3, #43	; 0x2b
 801729a:	f240 8096 	bls.w	80173ca <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801729e:	69bb      	ldr	r3, [r7, #24]
 80172a0:	781b      	ldrb	r3, [r3, #0]
 80172a2:	2b02      	cmp	r3, #2
 80172a4:	f040 8093 	bne.w	80173ce <dhcp_recv+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 80172a8:	2300      	movs	r3, #0
 80172aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80172ae:	e012      	b.n	80172d6 <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80172b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80172b4:	6a3a      	ldr	r2, [r7, #32]
 80172b6:	4413      	add	r3, r2
 80172b8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80172bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80172c0:	69b9      	ldr	r1, [r7, #24]
 80172c2:	440b      	add	r3, r1
 80172c4:	7f1b      	ldrb	r3, [r3, #28]
 80172c6:	429a      	cmp	r2, r3
 80172c8:	f040 8083 	bne.w	80173d2 <dhcp_recv+0x186>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 80172cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80172d0:	3301      	adds	r3, #1
 80172d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80172d6:	6a3b      	ldr	r3, [r7, #32]
 80172d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80172dc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80172e0:	429a      	cmp	r2, r3
 80172e2:	d207      	bcs.n	80172f4 <dhcp_recv+0xa8>
 80172e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80172e8:	2b05      	cmp	r3, #5
 80172ea:	d803      	bhi.n	80172f4 <dhcp_recv+0xa8>
 80172ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80172f0:	2b0f      	cmp	r3, #15
 80172f2:	d9dd      	bls.n	80172b0 <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80172f4:	69bb      	ldr	r3, [r7, #24]
 80172f6:	685b      	ldr	r3, [r3, #4]
 80172f8:	4618      	mov	r0, r3
 80172fa:	f7f7 f820 	bl	800e33e <lwip_htonl>
 80172fe:	4602      	mov	r2, r0
 8017300:	69fb      	ldr	r3, [r7, #28]
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	429a      	cmp	r2, r3
 8017306:	d166      	bne.n	80173d6 <dhcp_recv+0x18a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 8017308:	6879      	ldr	r1, [r7, #4]
 801730a:	69f8      	ldr	r0, [r7, #28]
 801730c:	f7ff fd08 	bl	8016d20 <dhcp_parse_reply>
 8017310:	4603      	mov	r3, r0
 8017312:	2b00      	cmp	r3, #0
 8017314:	d161      	bne.n	80173da <dhcp_recv+0x18e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8017316:	4b3e      	ldr	r3, [pc, #248]	; (8017410 <dhcp_recv+0x1c4>)
 8017318:	785b      	ldrb	r3, [r3, #1]
 801731a:	2b00      	cmp	r3, #0
 801731c:	d05f      	beq.n	80173de <dhcp_recv+0x192>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801731e:	4b3d      	ldr	r3, [pc, #244]	; (8017414 <dhcp_recv+0x1c8>)
 8017320:	685b      	ldr	r3, [r3, #4]
 8017322:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8017324:	7dfb      	ldrb	r3, [r7, #23]
 8017326:	2b05      	cmp	r3, #5
 8017328:	d128      	bne.n	801737c <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801732a:	69fb      	ldr	r3, [r7, #28]
 801732c:	7a5b      	ldrb	r3, [r3, #9]
 801732e:	2b01      	cmp	r3, #1
 8017330:	d111      	bne.n	8017356 <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 8017332:	6a38      	ldr	r0, [r7, #32]
 8017334:	f7fe fe74 	bl	8016020 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8017338:	6a3b      	ldr	r3, [r7, #32]
 801733a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801733e:	f003 0308 	and.w	r3, r3, #8
 8017342:	2b00      	cmp	r3, #0
 8017344:	d003      	beq.n	801734e <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8017346:	6a38      	ldr	r0, [r7, #32]
 8017348:	f7fe fc3c 	bl	8015bc4 <dhcp_check>
 801734c:	e04a      	b.n	80173e4 <dhcp_recv+0x198>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801734e:	6a38      	ldr	r0, [r7, #32]
 8017350:	f7ff f8a0 	bl	8016494 <dhcp_bind>
 8017354:	e046      	b.n	80173e4 <dhcp_recv+0x198>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8017356:	69fb      	ldr	r3, [r7, #28]
 8017358:	7a5b      	ldrb	r3, [r3, #9]
 801735a:	2b03      	cmp	r3, #3
 801735c:	d007      	beq.n	801736e <dhcp_recv+0x122>
 801735e:	69fb      	ldr	r3, [r7, #28]
 8017360:	7a5b      	ldrb	r3, [r3, #9]
 8017362:	2b04      	cmp	r3, #4
 8017364:	d003      	beq.n	801736e <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8017366:	69fb      	ldr	r3, [r7, #28]
 8017368:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801736a:	2b05      	cmp	r3, #5
 801736c:	d13a      	bne.n	80173e4 <dhcp_recv+0x198>
      dhcp_handle_ack(netif);
 801736e:	6a38      	ldr	r0, [r7, #32]
 8017370:	f7fe fe56 	bl	8016020 <dhcp_handle_ack>
      dhcp_bind(netif);
 8017374:	6a38      	ldr	r0, [r7, #32]
 8017376:	f7ff f88d 	bl	8016494 <dhcp_bind>
 801737a:	e033      	b.n	80173e4 <dhcp_recv+0x198>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801737c:	7dfb      	ldrb	r3, [r7, #23]
 801737e:	2b06      	cmp	r3, #6
 8017380:	d113      	bne.n	80173aa <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017382:	69fb      	ldr	r3, [r7, #28]
 8017384:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 8017386:	2b03      	cmp	r3, #3
 8017388:	d00b      	beq.n	80173a2 <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801738a:	69fb      	ldr	r3, [r7, #28]
 801738c:	7a5b      	ldrb	r3, [r3, #9]
 801738e:	2b01      	cmp	r3, #1
 8017390:	d007      	beq.n	80173a2 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8017392:	69fb      	ldr	r3, [r7, #28]
 8017394:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017396:	2b04      	cmp	r3, #4
 8017398:	d003      	beq.n	80173a2 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801739a:	69fb      	ldr	r3, [r7, #28]
 801739c:	7a5b      	ldrb	r3, [r3, #9]
 801739e:	2b05      	cmp	r3, #5
 80173a0:	d103      	bne.n	80173aa <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80173a2:	6a38      	ldr	r0, [r7, #32]
 80173a4:	f7fe fbf4 	bl	8015b90 <dhcp_handle_nak>
 80173a8:	e01c      	b.n	80173e4 <dhcp_recv+0x198>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80173aa:	7dfb      	ldrb	r3, [r7, #23]
 80173ac:	2b02      	cmp	r3, #2
 80173ae:	d118      	bne.n	80173e2 <dhcp_recv+0x196>
 80173b0:	69fb      	ldr	r3, [r7, #28]
 80173b2:	7a5b      	ldrb	r3, [r3, #9]
 80173b4:	2b06      	cmp	r3, #6
 80173b6:	d114      	bne.n	80173e2 <dhcp_recv+0x196>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 80173b8:	69fb      	ldr	r3, [r7, #28]
 80173ba:	2200      	movs	r2, #0
 80173bc:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 80173be:	6a38      	ldr	r0, [r7, #32]
 80173c0:	f7fe fc34 	bl	8015c2c <dhcp_handle_offer>
 80173c4:	e00e      	b.n	80173e4 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 80173c6:	bf00      	nop
 80173c8:	e00c      	b.n	80173e4 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 80173ca:	bf00      	nop
 80173cc:	e00a      	b.n	80173e4 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 80173ce:	bf00      	nop
 80173d0:	e008      	b.n	80173e4 <dhcp_recv+0x198>
      goto free_pbuf_and_return;
 80173d2:	bf00      	nop
 80173d4:	e006      	b.n	80173e4 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 80173d6:	bf00      	nop
 80173d8:	e004      	b.n	80173e4 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 80173da:	bf00      	nop
 80173dc:	e002      	b.n	80173e4 <dhcp_recv+0x198>
    goto free_pbuf_and_return;
 80173de:	bf00      	nop
 80173e0:	e000      	b.n	80173e4 <dhcp_recv+0x198>
  }

free_pbuf_and_return:
 80173e2:	bf00      	nop
  if (dhcp != NULL) {
 80173e4:	69fb      	ldr	r3, [r7, #28]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d002      	beq.n	80173f0 <dhcp_recv+0x1a4>
    dhcp->msg_in = NULL;
 80173ea:	69fb      	ldr	r3, [r7, #28]
 80173ec:	2200      	movs	r2, #0
 80173ee:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 80173f0:	6878      	ldr	r0, [r7, #4]
 80173f2:	f7f8 f997 	bl	800f724 <pbuf_free>
}
 80173f6:	bf00      	nop
 80173f8:	3728      	adds	r7, #40	; 0x28
 80173fa:	46bd      	mov	sp, r7
 80173fc:	bd80      	pop	{r7, pc}
 80173fe:	bf00      	nop
 8017400:	20009290 	.word	0x20009290
 8017404:	0801d93c 	.word	0x0801d93c
 8017408:	0801da68 	.word	0x0801da68
 801740c:	0801d99c 	.word	0x0801d99c
 8017410:	2000ec40 	.word	0x2000ec40
 8017414:	2000ec20 	.word	0x2000ec20

08017418 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 8017418:	b590      	push	{r4, r7, lr}
 801741a:	b087      	sub	sp, #28
 801741c:	af00      	add	r7, sp, #0
 801741e:	60f8      	str	r0, [r7, #12]
 8017420:	60b9      	str	r1, [r7, #8]
 8017422:	4613      	mov	r3, r2
 8017424:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	2b00      	cmp	r3, #0
 801742a:	d109      	bne.n	8017440 <dhcp_create_msg+0x28>
 801742c:	4ba3      	ldr	r3, [pc, #652]	; (80176bc <dhcp_create_msg+0x2a4>)
 801742e:	f240 721d 	movw	r2, #1821	; 0x71d
 8017432:	49a3      	ldr	r1, [pc, #652]	; (80176c0 <dhcp_create_msg+0x2a8>)
 8017434:	48a3      	ldr	r0, [pc, #652]	; (80176c4 <dhcp_create_msg+0x2ac>)
 8017436:	f003 f80f 	bl	801a458 <iprintf>
 801743a:	f06f 030f 	mvn.w	r3, #15
 801743e:	e138      	b.n	80176b2 <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8017440:	68bb      	ldr	r3, [r7, #8]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d109      	bne.n	801745a <dhcp_create_msg+0x42>
 8017446:	4b9d      	ldr	r3, [pc, #628]	; (80176bc <dhcp_create_msg+0x2a4>)
 8017448:	f240 721e 	movw	r2, #1822	; 0x71e
 801744c:	499e      	ldr	r1, [pc, #632]	; (80176c8 <dhcp_create_msg+0x2b0>)
 801744e:	489d      	ldr	r0, [pc, #628]	; (80176c4 <dhcp_create_msg+0x2ac>)
 8017450:	f003 f802 	bl	801a458 <iprintf>
 8017454:	f06f 0305 	mvn.w	r3, #5
 8017458:	e12b      	b.n	80176b2 <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 801745a:	68bb      	ldr	r3, [r7, #8]
 801745c:	68db      	ldr	r3, [r3, #12]
 801745e:	2b00      	cmp	r3, #0
 8017460:	d006      	beq.n	8017470 <dhcp_create_msg+0x58>
 8017462:	4b96      	ldr	r3, [pc, #600]	; (80176bc <dhcp_create_msg+0x2a4>)
 8017464:	f240 721f 	movw	r2, #1823	; 0x71f
 8017468:	4998      	ldr	r1, [pc, #608]	; (80176cc <dhcp_create_msg+0x2b4>)
 801746a:	4896      	ldr	r0, [pc, #600]	; (80176c4 <dhcp_create_msg+0x2ac>)
 801746c:	f002 fff4 	bl	801a458 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 8017470:	68bb      	ldr	r3, [r7, #8]
 8017472:	691b      	ldr	r3, [r3, #16]
 8017474:	2b00      	cmp	r3, #0
 8017476:	d006      	beq.n	8017486 <dhcp_create_msg+0x6e>
 8017478:	4b90      	ldr	r3, [pc, #576]	; (80176bc <dhcp_create_msg+0x2a4>)
 801747a:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 801747e:	4994      	ldr	r1, [pc, #592]	; (80176d0 <dhcp_create_msg+0x2b8>)
 8017480:	4890      	ldr	r0, [pc, #576]	; (80176c4 <dhcp_create_msg+0x2ac>)
 8017482:	f002 ffe9 	bl	801a458 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8017486:	2200      	movs	r2, #0
 8017488:	f44f 719a 	mov.w	r1, #308	; 0x134
 801748c:	2000      	movs	r0, #0
 801748e:	f7f7 fdd1 	bl	800f034 <pbuf_alloc>
 8017492:	4602      	mov	r2, r0
 8017494:	68bb      	ldr	r3, [r7, #8]
 8017496:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 8017498:	68bb      	ldr	r3, [r7, #8]
 801749a:	68db      	ldr	r3, [r3, #12]
 801749c:	2b00      	cmp	r3, #0
 801749e:	d102      	bne.n	80174a6 <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 80174a0:	f04f 33ff 	mov.w	r3, #4294967295
 80174a4:	e105      	b.n	80176b2 <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80174a6:	68bb      	ldr	r3, [r7, #8]
 80174a8:	68db      	ldr	r3, [r3, #12]
 80174aa:	895b      	ldrh	r3, [r3, #10]
 80174ac:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80174b0:	d206      	bcs.n	80174c0 <dhcp_create_msg+0xa8>
 80174b2:	4b82      	ldr	r3, [pc, #520]	; (80176bc <dhcp_create_msg+0x2a4>)
 80174b4:	f240 7227 	movw	r2, #1831	; 0x727
 80174b8:	4986      	ldr	r1, [pc, #536]	; (80176d4 <dhcp_create_msg+0x2bc>)
 80174ba:	4882      	ldr	r0, [pc, #520]	; (80176c4 <dhcp_create_msg+0x2ac>)
 80174bc:	f002 ffcc 	bl	801a458 <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80174c0:	79fb      	ldrb	r3, [r7, #7]
 80174c2:	2b03      	cmp	r3, #3
 80174c4:	d103      	bne.n	80174ce <dhcp_create_msg+0xb6>
 80174c6:	68bb      	ldr	r3, [r7, #8]
 80174c8:	7a5b      	ldrb	r3, [r3, #9]
 80174ca:	2b03      	cmp	r3, #3
 80174cc:	d10d      	bne.n	80174ea <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80174ce:	68bb      	ldr	r3, [r7, #8]
 80174d0:	7a9b      	ldrb	r3, [r3, #10]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d105      	bne.n	80174e2 <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80174d6:	f002 ffd7 	bl	801a488 <rand>
 80174da:	4603      	mov	r3, r0
 80174dc:	461a      	mov	r2, r3
 80174de:	4b7e      	ldr	r3, [pc, #504]	; (80176d8 <dhcp_create_msg+0x2c0>)
 80174e0:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80174e2:	4b7d      	ldr	r3, [pc, #500]	; (80176d8 <dhcp_create_msg+0x2c0>)
 80174e4:	681a      	ldr	r2, [r3, #0]
 80174e6:	68bb      	ldr	r3, [r7, #8]
 80174e8:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 80174ea:	68bb      	ldr	r3, [r7, #8]
 80174ec:	68db      	ldr	r3, [r3, #12]
 80174ee:	685a      	ldr	r2, [r3, #4]
 80174f0:	68bb      	ldr	r3, [r7, #8]
 80174f2:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 80174f4:	68bb      	ldr	r3, [r7, #8]
 80174f6:	691b      	ldr	r3, [r3, #16]
 80174f8:	2201      	movs	r2, #1
 80174fa:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 80174fc:	68bb      	ldr	r3, [r7, #8]
 80174fe:	691b      	ldr	r3, [r3, #16]
 8017500:	2201      	movs	r2, #1
 8017502:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 8017504:	68bb      	ldr	r3, [r7, #8]
 8017506:	691b      	ldr	r3, [r3, #16]
 8017508:	68fa      	ldr	r2, [r7, #12]
 801750a:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 801750e:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 8017510:	68bb      	ldr	r3, [r7, #8]
 8017512:	691b      	ldr	r3, [r3, #16]
 8017514:	2200      	movs	r2, #0
 8017516:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 8017518:	68bb      	ldr	r3, [r7, #8]
 801751a:	681a      	ldr	r2, [r3, #0]
 801751c:	68bb      	ldr	r3, [r7, #8]
 801751e:	691c      	ldr	r4, [r3, #16]
 8017520:	4610      	mov	r0, r2
 8017522:	f7f6 ff0c 	bl	800e33e <lwip_htonl>
 8017526:	4603      	mov	r3, r0
 8017528:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 801752a:	68bb      	ldr	r3, [r7, #8]
 801752c:	691b      	ldr	r3, [r3, #16]
 801752e:	2200      	movs	r2, #0
 8017530:	721a      	strb	r2, [r3, #8]
 8017532:	2200      	movs	r2, #0
 8017534:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 8017536:	68bb      	ldr	r3, [r7, #8]
 8017538:	691b      	ldr	r3, [r3, #16]
 801753a:	2200      	movs	r2, #0
 801753c:	729a      	strb	r2, [r3, #10]
 801753e:	2200      	movs	r2, #0
 8017540:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 8017542:	68bb      	ldr	r3, [r7, #8]
 8017544:	691b      	ldr	r3, [r3, #16]
 8017546:	2200      	movs	r2, #0
 8017548:	731a      	strb	r2, [r3, #12]
 801754a:	2200      	movs	r2, #0
 801754c:	735a      	strb	r2, [r3, #13]
 801754e:	2200      	movs	r2, #0
 8017550:	739a      	strb	r2, [r3, #14]
 8017552:	2200      	movs	r2, #0
 8017554:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8017556:	79fb      	ldrb	r3, [r7, #7]
 8017558:	2b08      	cmp	r3, #8
 801755a:	d010      	beq.n	801757e <dhcp_create_msg+0x166>
 801755c:	79fb      	ldrb	r3, [r7, #7]
 801755e:	2b04      	cmp	r3, #4
 8017560:	d00d      	beq.n	801757e <dhcp_create_msg+0x166>
 8017562:	79fb      	ldrb	r3, [r7, #7]
 8017564:	2b07      	cmp	r3, #7
 8017566:	d00a      	beq.n	801757e <dhcp_create_msg+0x166>
 8017568:	79fb      	ldrb	r3, [r7, #7]
 801756a:	2b03      	cmp	r3, #3
 801756c:	d10d      	bne.n	801758a <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 801756e:	68bb      	ldr	r3, [r7, #8]
 8017570:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8017572:	2b05      	cmp	r3, #5
 8017574:	d003      	beq.n	801757e <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8017576:	68bb      	ldr	r3, [r7, #8]
 8017578:	7a5b      	ldrb	r3, [r3, #9]
 801757a:	2b04      	cmp	r3, #4
 801757c:	d105      	bne.n	801758a <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 801757e:	68fb      	ldr	r3, [r7, #12]
 8017580:	1d1a      	adds	r2, r3, #4
 8017582:	68bb      	ldr	r3, [r7, #8]
 8017584:	691b      	ldr	r3, [r3, #16]
 8017586:	6812      	ldr	r2, [r2, #0]
 8017588:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 801758a:	68bb      	ldr	r3, [r7, #8]
 801758c:	691b      	ldr	r3, [r3, #16]
 801758e:	2200      	movs	r2, #0
 8017590:	741a      	strb	r2, [r3, #16]
 8017592:	2200      	movs	r2, #0
 8017594:	745a      	strb	r2, [r3, #17]
 8017596:	2200      	movs	r2, #0
 8017598:	749a      	strb	r2, [r3, #18]
 801759a:	2200      	movs	r2, #0
 801759c:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 801759e:	68bb      	ldr	r3, [r7, #8]
 80175a0:	691b      	ldr	r3, [r3, #16]
 80175a2:	2200      	movs	r2, #0
 80175a4:	751a      	strb	r2, [r3, #20]
 80175a6:	2200      	movs	r2, #0
 80175a8:	755a      	strb	r2, [r3, #21]
 80175aa:	2200      	movs	r2, #0
 80175ac:	759a      	strb	r2, [r3, #22]
 80175ae:	2200      	movs	r2, #0
 80175b0:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 80175b2:	68bb      	ldr	r3, [r7, #8]
 80175b4:	691b      	ldr	r3, [r3, #16]
 80175b6:	2200      	movs	r2, #0
 80175b8:	761a      	strb	r2, [r3, #24]
 80175ba:	2200      	movs	r2, #0
 80175bc:	765a      	strb	r2, [r3, #25]
 80175be:	2200      	movs	r2, #0
 80175c0:	769a      	strb	r2, [r3, #26]
 80175c2:	2200      	movs	r2, #0
 80175c4:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 80175c6:	2300      	movs	r3, #0
 80175c8:	82fb      	strh	r3, [r7, #22]
 80175ca:	e019      	b.n	8017600 <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80175d2:	b29b      	uxth	r3, r3
 80175d4:	8afa      	ldrh	r2, [r7, #22]
 80175d6:	429a      	cmp	r2, r3
 80175d8:	d208      	bcs.n	80175ec <dhcp_create_msg+0x1d4>
 80175da:	8afb      	ldrh	r3, [r7, #22]
 80175dc:	2b05      	cmp	r3, #5
 80175de:	d805      	bhi.n	80175ec <dhcp_create_msg+0x1d4>
 80175e0:	8afb      	ldrh	r3, [r7, #22]
 80175e2:	68fa      	ldr	r2, [r7, #12]
 80175e4:	4413      	add	r3, r2
 80175e6:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 80175ea:	e000      	b.n	80175ee <dhcp_create_msg+0x1d6>
 80175ec:	2100      	movs	r1, #0
 80175ee:	68bb      	ldr	r3, [r7, #8]
 80175f0:	691a      	ldr	r2, [r3, #16]
 80175f2:	8afb      	ldrh	r3, [r7, #22]
 80175f4:	4413      	add	r3, r2
 80175f6:	460a      	mov	r2, r1
 80175f8:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 80175fa:	8afb      	ldrh	r3, [r7, #22]
 80175fc:	3301      	adds	r3, #1
 80175fe:	82fb      	strh	r3, [r7, #22]
 8017600:	8afb      	ldrh	r3, [r7, #22]
 8017602:	2b0f      	cmp	r3, #15
 8017604:	d9e2      	bls.n	80175cc <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8017606:	2300      	movs	r3, #0
 8017608:	82fb      	strh	r3, [r7, #22]
 801760a:	e009      	b.n	8017620 <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 801760c:	68bb      	ldr	r3, [r7, #8]
 801760e:	691a      	ldr	r2, [r3, #16]
 8017610:	8afb      	ldrh	r3, [r7, #22]
 8017612:	4413      	add	r3, r2
 8017614:	2200      	movs	r2, #0
 8017616:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 801761a:	8afb      	ldrh	r3, [r7, #22]
 801761c:	3301      	adds	r3, #1
 801761e:	82fb      	strh	r3, [r7, #22]
 8017620:	8afb      	ldrh	r3, [r7, #22]
 8017622:	2b3f      	cmp	r3, #63	; 0x3f
 8017624:	d9f2      	bls.n	801760c <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8017626:	2300      	movs	r3, #0
 8017628:	82fb      	strh	r3, [r7, #22]
 801762a:	e009      	b.n	8017640 <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 801762c:	68bb      	ldr	r3, [r7, #8]
 801762e:	691a      	ldr	r2, [r3, #16]
 8017630:	8afb      	ldrh	r3, [r7, #22]
 8017632:	4413      	add	r3, r2
 8017634:	2200      	movs	r2, #0
 8017636:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 801763a:	8afb      	ldrh	r3, [r7, #22]
 801763c:	3301      	adds	r3, #1
 801763e:	82fb      	strh	r3, [r7, #22]
 8017640:	8afb      	ldrh	r3, [r7, #22]
 8017642:	2b7f      	cmp	r3, #127	; 0x7f
 8017644:	d9f2      	bls.n	801762c <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8017646:	68bb      	ldr	r3, [r7, #8]
 8017648:	691b      	ldr	r3, [r3, #16]
 801764a:	2200      	movs	r2, #0
 801764c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8017650:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8017654:	2200      	movs	r2, #0
 8017656:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801765a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801765e:	2200      	movs	r2, #0
 8017660:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8017664:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8017668:	2200      	movs	r2, #0
 801766a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801766e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 8017672:	68bb      	ldr	r3, [r7, #8]
 8017674:	2200      	movs	r2, #0
 8017676:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8017678:	2300      	movs	r3, #0
 801767a:	82fb      	strh	r3, [r7, #22]
 801767c:	e00b      	b.n	8017696 <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 801767e:	68bb      	ldr	r3, [r7, #8]
 8017680:	691a      	ldr	r2, [r3, #16]
 8017682:	8afb      	ldrh	r3, [r7, #22]
 8017684:	8af9      	ldrh	r1, [r7, #22]
 8017686:	b2c9      	uxtb	r1, r1
 8017688:	4413      	add	r3, r2
 801768a:	460a      	mov	r2, r1
 801768c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8017690:	8afb      	ldrh	r3, [r7, #22]
 8017692:	3301      	adds	r3, #1
 8017694:	82fb      	strh	r3, [r7, #22]
 8017696:	8afb      	ldrh	r3, [r7, #22]
 8017698:	2b43      	cmp	r3, #67	; 0x43
 801769a:	d9f0      	bls.n	801767e <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801769c:	2201      	movs	r2, #1
 801769e:	2135      	movs	r1, #53	; 0x35
 80176a0:	68b8      	ldr	r0, [r7, #8]
 80176a2:	f7ff fa4b 	bl	8016b3c <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 80176a6:	79fb      	ldrb	r3, [r7, #7]
 80176a8:	4619      	mov	r1, r3
 80176aa:	68b8      	ldr	r0, [r7, #8]
 80176ac:	f7ff fa80 	bl	8016bb0 <dhcp_option_byte>
  return ERR_OK;
 80176b0:	2300      	movs	r3, #0
}
 80176b2:	4618      	mov	r0, r3
 80176b4:	371c      	adds	r7, #28
 80176b6:	46bd      	mov	sp, r7
 80176b8:	bd90      	pop	{r4, r7, pc}
 80176ba:	bf00      	nop
 80176bc:	0801d93c 	.word	0x0801d93c
 80176c0:	0801dc6c 	.word	0x0801dc6c
 80176c4:	0801d99c 	.word	0x0801d99c
 80176c8:	0801dc8c 	.word	0x0801dc8c
 80176cc:	0801dcac 	.word	0x0801dcac
 80176d0:	0801dcd4 	.word	0x0801dcd4
 80176d4:	0801dcfc 	.word	0x0801dcfc
 80176d8:	2000ec50 	.word	0x2000ec50

080176dc <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 80176dc:	b580      	push	{r7, lr}
 80176de:	b082      	sub	sp, #8
 80176e0:	af00      	add	r7, sp, #0
 80176e2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d107      	bne.n	80176fa <dhcp_delete_msg+0x1e>
 80176ea:	4b18      	ldr	r3, [pc, #96]	; (801774c <dhcp_delete_msg+0x70>)
 80176ec:	f240 726d 	movw	r2, #1901	; 0x76d
 80176f0:	4917      	ldr	r1, [pc, #92]	; (8017750 <dhcp_delete_msg+0x74>)
 80176f2:	4818      	ldr	r0, [pc, #96]	; (8017754 <dhcp_delete_msg+0x78>)
 80176f4:	f002 feb0 	bl	801a458 <iprintf>
 80176f8:	e024      	b.n	8017744 <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	68db      	ldr	r3, [r3, #12]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d106      	bne.n	8017710 <dhcp_delete_msg+0x34>
 8017702:	4b12      	ldr	r3, [pc, #72]	; (801774c <dhcp_delete_msg+0x70>)
 8017704:	f240 726e 	movw	r2, #1902	; 0x76e
 8017708:	4913      	ldr	r1, [pc, #76]	; (8017758 <dhcp_delete_msg+0x7c>)
 801770a:	4812      	ldr	r0, [pc, #72]	; (8017754 <dhcp_delete_msg+0x78>)
 801770c:	f002 fea4 	bl	801a458 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	691b      	ldr	r3, [r3, #16]
 8017714:	2b00      	cmp	r3, #0
 8017716:	d106      	bne.n	8017726 <dhcp_delete_msg+0x4a>
 8017718:	4b0c      	ldr	r3, [pc, #48]	; (801774c <dhcp_delete_msg+0x70>)
 801771a:	f240 726f 	movw	r2, #1903	; 0x76f
 801771e:	490f      	ldr	r1, [pc, #60]	; (801775c <dhcp_delete_msg+0x80>)
 8017720:	480c      	ldr	r0, [pc, #48]	; (8017754 <dhcp_delete_msg+0x78>)
 8017722:	f002 fe99 	bl	801a458 <iprintf>
  if (dhcp->p_out != NULL) {
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	68db      	ldr	r3, [r3, #12]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d004      	beq.n	8017738 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	68db      	ldr	r3, [r3, #12]
 8017732:	4618      	mov	r0, r3
 8017734:	f7f7 fff6 	bl	800f724 <pbuf_free>
  }
  dhcp->p_out = NULL;
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	2200      	movs	r2, #0
 801773c:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	2200      	movs	r2, #0
 8017742:	611a      	str	r2, [r3, #16]
}
 8017744:	3708      	adds	r7, #8
 8017746:	46bd      	mov	sp, r7
 8017748:	bd80      	pop	{r7, pc}
 801774a:	bf00      	nop
 801774c:	0801d93c 	.word	0x0801d93c
 8017750:	0801dd3c 	.word	0x0801dd3c
 8017754:	0801d99c 	.word	0x0801d99c
 8017758:	0801dd5c 	.word	0x0801dd5c
 801775c:	0801dd84 	.word	0x0801dd84

08017760 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 8017760:	b580      	push	{r7, lr}
 8017762:	b082      	sub	sp, #8
 8017764:	af00      	add	r7, sp, #0
 8017766:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	2b00      	cmp	r3, #0
 801776c:	d107      	bne.n	801777e <dhcp_option_trailer+0x1e>
 801776e:	4b24      	ldr	r3, [pc, #144]	; (8017800 <dhcp_option_trailer+0xa0>)
 8017770:	f240 7282 	movw	r2, #1922	; 0x782
 8017774:	4923      	ldr	r1, [pc, #140]	; (8017804 <dhcp_option_trailer+0xa4>)
 8017776:	4824      	ldr	r0, [pc, #144]	; (8017808 <dhcp_option_trailer+0xa8>)
 8017778:	f002 fe6e 	bl	801a458 <iprintf>
 801777c:	e03c      	b.n	80177f8 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	691b      	ldr	r3, [r3, #16]
 8017782:	2b00      	cmp	r3, #0
 8017784:	d106      	bne.n	8017794 <dhcp_option_trailer+0x34>
 8017786:	4b1e      	ldr	r3, [pc, #120]	; (8017800 <dhcp_option_trailer+0xa0>)
 8017788:	f240 7283 	movw	r2, #1923	; 0x783
 801778c:	491f      	ldr	r1, [pc, #124]	; (801780c <dhcp_option_trailer+0xac>)
 801778e:	481e      	ldr	r0, [pc, #120]	; (8017808 <dhcp_option_trailer+0xa8>)
 8017790:	f002 fe62 	bl	801a458 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	8a9b      	ldrh	r3, [r3, #20]
 8017798:	2b43      	cmp	r3, #67	; 0x43
 801779a:	d906      	bls.n	80177aa <dhcp_option_trailer+0x4a>
 801779c:	4b18      	ldr	r3, [pc, #96]	; (8017800 <dhcp_option_trailer+0xa0>)
 801779e:	f240 7284 	movw	r2, #1924	; 0x784
 80177a2:	491b      	ldr	r1, [pc, #108]	; (8017810 <dhcp_option_trailer+0xb0>)
 80177a4:	4818      	ldr	r0, [pc, #96]	; (8017808 <dhcp_option_trailer+0xa8>)
 80177a6:	f002 fe57 	bl	801a458 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	691a      	ldr	r2, [r3, #16]
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	8a9b      	ldrh	r3, [r3, #20]
 80177b2:	1c59      	adds	r1, r3, #1
 80177b4:	b288      	uxth	r0, r1
 80177b6:	6879      	ldr	r1, [r7, #4]
 80177b8:	8288      	strh	r0, [r1, #20]
 80177ba:	4413      	add	r3, r2
 80177bc:	22ff      	movs	r2, #255	; 0xff
 80177be:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 80177c2:	e00b      	b.n	80177dc <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	691a      	ldr	r2, [r3, #16]
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	8a9b      	ldrh	r3, [r3, #20]
 80177cc:	1c59      	adds	r1, r3, #1
 80177ce:	b288      	uxth	r0, r1
 80177d0:	6879      	ldr	r1, [r7, #4]
 80177d2:	8288      	strh	r0, [r1, #20]
 80177d4:	4413      	add	r3, r2
 80177d6:	2200      	movs	r2, #0
 80177d8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	8a9b      	ldrh	r3, [r3, #20]
 80177e0:	2b43      	cmp	r3, #67	; 0x43
 80177e2:	d905      	bls.n	80177f0 <dhcp_option_trailer+0x90>
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	8a9b      	ldrh	r3, [r3, #20]
 80177e8:	f003 0303 	and.w	r3, r3, #3
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d003      	beq.n	80177f8 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 80177f4:	2b43      	cmp	r3, #67	; 0x43
 80177f6:	d9e5      	bls.n	80177c4 <dhcp_option_trailer+0x64>
  }
}
 80177f8:	3708      	adds	r7, #8
 80177fa:	46bd      	mov	sp, r7
 80177fc:	bd80      	pop	{r7, pc}
 80177fe:	bf00      	nop
 8017800:	0801d93c 	.word	0x0801d93c
 8017804:	0801ddac 	.word	0x0801ddac
 8017808:	0801d99c 	.word	0x0801d99c
 801780c:	0801ddd0 	.word	0x0801ddd0
 8017810:	0801ddfc 	.word	0x0801ddfc

08017814 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8017814:	b480      	push	{r7}
 8017816:	b085      	sub	sp, #20
 8017818:	af00      	add	r7, sp, #0
 801781a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	2b00      	cmp	r3, #0
 8017820:	d017      	beq.n	8017852 <dhcp_supplied_address+0x3e>
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017826:	2b00      	cmp	r3, #0
 8017828:	d013      	beq.n	8017852 <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801782e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	7a5b      	ldrb	r3, [r3, #9]
 8017834:	2b0a      	cmp	r3, #10
 8017836:	d007      	beq.n	8017848 <dhcp_supplied_address+0x34>
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	7a5b      	ldrb	r3, [r3, #9]
 801783c:	2b05      	cmp	r3, #5
 801783e:	d003      	beq.n	8017848 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8017844:	2b04      	cmp	r3, #4
 8017846:	d101      	bne.n	801784c <dhcp_supplied_address+0x38>
 8017848:	2301      	movs	r3, #1
 801784a:	e000      	b.n	801784e <dhcp_supplied_address+0x3a>
 801784c:	2300      	movs	r3, #0
 801784e:	b2db      	uxtb	r3, r3
 8017850:	e000      	b.n	8017854 <dhcp_supplied_address+0x40>
  }
  return 0;
 8017852:	2300      	movs	r3, #0
}
 8017854:	4618      	mov	r0, r3
 8017856:	3714      	adds	r7, #20
 8017858:	46bd      	mov	sp, r7
 801785a:	bc80      	pop	{r7}
 801785c:	4770      	bx	lr
	...

08017860 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8017860:	b580      	push	{r7, lr}
 8017862:	b082      	sub	sp, #8
 8017864:	af00      	add	r7, sp, #0
 8017866:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8017868:	4915      	ldr	r1, [pc, #84]	; (80178c0 <etharp_free_entry+0x60>)
 801786a:	687a      	ldr	r2, [r7, #4]
 801786c:	4613      	mov	r3, r2
 801786e:	005b      	lsls	r3, r3, #1
 8017870:	4413      	add	r3, r2
 8017872:	00db      	lsls	r3, r3, #3
 8017874:	440b      	add	r3, r1
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	2b00      	cmp	r3, #0
 801787a:	d013      	beq.n	80178a4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801787c:	4910      	ldr	r1, [pc, #64]	; (80178c0 <etharp_free_entry+0x60>)
 801787e:	687a      	ldr	r2, [r7, #4]
 8017880:	4613      	mov	r3, r2
 8017882:	005b      	lsls	r3, r3, #1
 8017884:	4413      	add	r3, r2
 8017886:	00db      	lsls	r3, r3, #3
 8017888:	440b      	add	r3, r1
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	4618      	mov	r0, r3
 801788e:	f7f7 ff49 	bl	800f724 <pbuf_free>
    arp_table[i].q = NULL;
 8017892:	490b      	ldr	r1, [pc, #44]	; (80178c0 <etharp_free_entry+0x60>)
 8017894:	687a      	ldr	r2, [r7, #4]
 8017896:	4613      	mov	r3, r2
 8017898:	005b      	lsls	r3, r3, #1
 801789a:	4413      	add	r3, r2
 801789c:	00db      	lsls	r3, r3, #3
 801789e:	440b      	add	r3, r1
 80178a0:	2200      	movs	r2, #0
 80178a2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80178a4:	4906      	ldr	r1, [pc, #24]	; (80178c0 <etharp_free_entry+0x60>)
 80178a6:	687a      	ldr	r2, [r7, #4]
 80178a8:	4613      	mov	r3, r2
 80178aa:	005b      	lsls	r3, r3, #1
 80178ac:	4413      	add	r3, r2
 80178ae:	00db      	lsls	r3, r3, #3
 80178b0:	440b      	add	r3, r1
 80178b2:	3314      	adds	r3, #20
 80178b4:	2200      	movs	r2, #0
 80178b6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80178b8:	bf00      	nop
 80178ba:	3708      	adds	r7, #8
 80178bc:	46bd      	mov	sp, r7
 80178be:	bd80      	pop	{r7, pc}
 80178c0:	2000ec54 	.word	0x2000ec54

080178c4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80178c4:	b580      	push	{r7, lr}
 80178c6:	b082      	sub	sp, #8
 80178c8:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80178ca:	2300      	movs	r3, #0
 80178cc:	71fb      	strb	r3, [r7, #7]
 80178ce:	e096      	b.n	80179fe <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80178d0:	79fa      	ldrb	r2, [r7, #7]
 80178d2:	494f      	ldr	r1, [pc, #316]	; (8017a10 <etharp_tmr+0x14c>)
 80178d4:	4613      	mov	r3, r2
 80178d6:	005b      	lsls	r3, r3, #1
 80178d8:	4413      	add	r3, r2
 80178da:	00db      	lsls	r3, r3, #3
 80178dc:	440b      	add	r3, r1
 80178de:	3314      	adds	r3, #20
 80178e0:	781b      	ldrb	r3, [r3, #0]
 80178e2:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 80178e4:	79bb      	ldrb	r3, [r7, #6]
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	f000 8086 	beq.w	80179f8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 80178ec:	79fa      	ldrb	r2, [r7, #7]
 80178ee:	4948      	ldr	r1, [pc, #288]	; (8017a10 <etharp_tmr+0x14c>)
 80178f0:	4613      	mov	r3, r2
 80178f2:	005b      	lsls	r3, r3, #1
 80178f4:	4413      	add	r3, r2
 80178f6:	00db      	lsls	r3, r3, #3
 80178f8:	440b      	add	r3, r1
 80178fa:	3312      	adds	r3, #18
 80178fc:	881b      	ldrh	r3, [r3, #0]
 80178fe:	3301      	adds	r3, #1
 8017900:	b298      	uxth	r0, r3
 8017902:	4943      	ldr	r1, [pc, #268]	; (8017a10 <etharp_tmr+0x14c>)
 8017904:	4613      	mov	r3, r2
 8017906:	005b      	lsls	r3, r3, #1
 8017908:	4413      	add	r3, r2
 801790a:	00db      	lsls	r3, r3, #3
 801790c:	440b      	add	r3, r1
 801790e:	3312      	adds	r3, #18
 8017910:	4602      	mov	r2, r0
 8017912:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017914:	79fa      	ldrb	r2, [r7, #7]
 8017916:	493e      	ldr	r1, [pc, #248]	; (8017a10 <etharp_tmr+0x14c>)
 8017918:	4613      	mov	r3, r2
 801791a:	005b      	lsls	r3, r3, #1
 801791c:	4413      	add	r3, r2
 801791e:	00db      	lsls	r3, r3, #3
 8017920:	440b      	add	r3, r1
 8017922:	3312      	adds	r3, #18
 8017924:	881b      	ldrh	r3, [r3, #0]
 8017926:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801792a:	d215      	bcs.n	8017958 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801792c:	79fa      	ldrb	r2, [r7, #7]
 801792e:	4938      	ldr	r1, [pc, #224]	; (8017a10 <etharp_tmr+0x14c>)
 8017930:	4613      	mov	r3, r2
 8017932:	005b      	lsls	r3, r3, #1
 8017934:	4413      	add	r3, r2
 8017936:	00db      	lsls	r3, r3, #3
 8017938:	440b      	add	r3, r1
 801793a:	3314      	adds	r3, #20
 801793c:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801793e:	2b01      	cmp	r3, #1
 8017940:	d10f      	bne.n	8017962 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8017942:	79fa      	ldrb	r2, [r7, #7]
 8017944:	4932      	ldr	r1, [pc, #200]	; (8017a10 <etharp_tmr+0x14c>)
 8017946:	4613      	mov	r3, r2
 8017948:	005b      	lsls	r3, r3, #1
 801794a:	4413      	add	r3, r2
 801794c:	00db      	lsls	r3, r3, #3
 801794e:	440b      	add	r3, r1
 8017950:	3312      	adds	r3, #18
 8017952:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017954:	2b04      	cmp	r3, #4
 8017956:	d904      	bls.n	8017962 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8017958:	79fb      	ldrb	r3, [r7, #7]
 801795a:	4618      	mov	r0, r3
 801795c:	f7ff ff80 	bl	8017860 <etharp_free_entry>
 8017960:	e04a      	b.n	80179f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8017962:	79fa      	ldrb	r2, [r7, #7]
 8017964:	492a      	ldr	r1, [pc, #168]	; (8017a10 <etharp_tmr+0x14c>)
 8017966:	4613      	mov	r3, r2
 8017968:	005b      	lsls	r3, r3, #1
 801796a:	4413      	add	r3, r2
 801796c:	00db      	lsls	r3, r3, #3
 801796e:	440b      	add	r3, r1
 8017970:	3314      	adds	r3, #20
 8017972:	781b      	ldrb	r3, [r3, #0]
 8017974:	2b03      	cmp	r3, #3
 8017976:	d10a      	bne.n	801798e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8017978:	79fa      	ldrb	r2, [r7, #7]
 801797a:	4925      	ldr	r1, [pc, #148]	; (8017a10 <etharp_tmr+0x14c>)
 801797c:	4613      	mov	r3, r2
 801797e:	005b      	lsls	r3, r3, #1
 8017980:	4413      	add	r3, r2
 8017982:	00db      	lsls	r3, r3, #3
 8017984:	440b      	add	r3, r1
 8017986:	3314      	adds	r3, #20
 8017988:	2204      	movs	r2, #4
 801798a:	701a      	strb	r2, [r3, #0]
 801798c:	e034      	b.n	80179f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801798e:	79fa      	ldrb	r2, [r7, #7]
 8017990:	491f      	ldr	r1, [pc, #124]	; (8017a10 <etharp_tmr+0x14c>)
 8017992:	4613      	mov	r3, r2
 8017994:	005b      	lsls	r3, r3, #1
 8017996:	4413      	add	r3, r2
 8017998:	00db      	lsls	r3, r3, #3
 801799a:	440b      	add	r3, r1
 801799c:	3314      	adds	r3, #20
 801799e:	781b      	ldrb	r3, [r3, #0]
 80179a0:	2b04      	cmp	r3, #4
 80179a2:	d10a      	bne.n	80179ba <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80179a4:	79fa      	ldrb	r2, [r7, #7]
 80179a6:	491a      	ldr	r1, [pc, #104]	; (8017a10 <etharp_tmr+0x14c>)
 80179a8:	4613      	mov	r3, r2
 80179aa:	005b      	lsls	r3, r3, #1
 80179ac:	4413      	add	r3, r2
 80179ae:	00db      	lsls	r3, r3, #3
 80179b0:	440b      	add	r3, r1
 80179b2:	3314      	adds	r3, #20
 80179b4:	2202      	movs	r2, #2
 80179b6:	701a      	strb	r2, [r3, #0]
 80179b8:	e01e      	b.n	80179f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80179ba:	79fa      	ldrb	r2, [r7, #7]
 80179bc:	4914      	ldr	r1, [pc, #80]	; (8017a10 <etharp_tmr+0x14c>)
 80179be:	4613      	mov	r3, r2
 80179c0:	005b      	lsls	r3, r3, #1
 80179c2:	4413      	add	r3, r2
 80179c4:	00db      	lsls	r3, r3, #3
 80179c6:	440b      	add	r3, r1
 80179c8:	3314      	adds	r3, #20
 80179ca:	781b      	ldrb	r3, [r3, #0]
 80179cc:	2b01      	cmp	r3, #1
 80179ce:	d113      	bne.n	80179f8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80179d0:	79fa      	ldrb	r2, [r7, #7]
 80179d2:	490f      	ldr	r1, [pc, #60]	; (8017a10 <etharp_tmr+0x14c>)
 80179d4:	4613      	mov	r3, r2
 80179d6:	005b      	lsls	r3, r3, #1
 80179d8:	4413      	add	r3, r2
 80179da:	00db      	lsls	r3, r3, #3
 80179dc:	440b      	add	r3, r1
 80179de:	3308      	adds	r3, #8
 80179e0:	6818      	ldr	r0, [r3, #0]
 80179e2:	79fa      	ldrb	r2, [r7, #7]
 80179e4:	4613      	mov	r3, r2
 80179e6:	005b      	lsls	r3, r3, #1
 80179e8:	4413      	add	r3, r2
 80179ea:	00db      	lsls	r3, r3, #3
 80179ec:	4a08      	ldr	r2, [pc, #32]	; (8017a10 <etharp_tmr+0x14c>)
 80179ee:	4413      	add	r3, r2
 80179f0:	3304      	adds	r3, #4
 80179f2:	4619      	mov	r1, r3
 80179f4:	f000 fe3c 	bl	8018670 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80179f8:	79fb      	ldrb	r3, [r7, #7]
 80179fa:	3301      	adds	r3, #1
 80179fc:	71fb      	strb	r3, [r7, #7]
 80179fe:	79fb      	ldrb	r3, [r7, #7]
 8017a00:	2b09      	cmp	r3, #9
 8017a02:	f67f af65 	bls.w	80178d0 <etharp_tmr+0xc>
      }
    }
  }
}
 8017a06:	bf00      	nop
 8017a08:	bf00      	nop
 8017a0a:	3708      	adds	r7, #8
 8017a0c:	46bd      	mov	sp, r7
 8017a0e:	bd80      	pop	{r7, pc}
 8017a10:	2000ec54 	.word	0x2000ec54

08017a14 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8017a14:	b580      	push	{r7, lr}
 8017a16:	b088      	sub	sp, #32
 8017a18:	af00      	add	r7, sp, #0
 8017a1a:	60f8      	str	r0, [r7, #12]
 8017a1c:	460b      	mov	r3, r1
 8017a1e:	607a      	str	r2, [r7, #4]
 8017a20:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8017a22:	230a      	movs	r3, #10
 8017a24:	77fb      	strb	r3, [r7, #31]
 8017a26:	230a      	movs	r3, #10
 8017a28:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8017a2a:	230a      	movs	r3, #10
 8017a2c:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8017a2e:	2300      	movs	r3, #0
 8017a30:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8017a32:	230a      	movs	r3, #10
 8017a34:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8017a36:	2300      	movs	r3, #0
 8017a38:	833b      	strh	r3, [r7, #24]
 8017a3a:	2300      	movs	r3, #0
 8017a3c:	82fb      	strh	r3, [r7, #22]
 8017a3e:	2300      	movs	r3, #0
 8017a40:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017a42:	2300      	movs	r3, #0
 8017a44:	773b      	strb	r3, [r7, #28]
 8017a46:	e093      	b.n	8017b70 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8017a48:	7f3a      	ldrb	r2, [r7, #28]
 8017a4a:	4990      	ldr	r1, [pc, #576]	; (8017c8c <etharp_find_entry+0x278>)
 8017a4c:	4613      	mov	r3, r2
 8017a4e:	005b      	lsls	r3, r3, #1
 8017a50:	4413      	add	r3, r2
 8017a52:	00db      	lsls	r3, r3, #3
 8017a54:	440b      	add	r3, r1
 8017a56:	3314      	adds	r3, #20
 8017a58:	781b      	ldrb	r3, [r3, #0]
 8017a5a:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8017a5c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8017a60:	2b0a      	cmp	r3, #10
 8017a62:	d105      	bne.n	8017a70 <etharp_find_entry+0x5c>
 8017a64:	7cfb      	ldrb	r3, [r7, #19]
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d102      	bne.n	8017a70 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8017a6a:	7f3b      	ldrb	r3, [r7, #28]
 8017a6c:	777b      	strb	r3, [r7, #29]
 8017a6e:	e07c      	b.n	8017b6a <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8017a70:	7cfb      	ldrb	r3, [r7, #19]
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d079      	beq.n	8017b6a <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8017a76:	7cfb      	ldrb	r3, [r7, #19]
 8017a78:	2b01      	cmp	r3, #1
 8017a7a:	d009      	beq.n	8017a90 <etharp_find_entry+0x7c>
 8017a7c:	7cfb      	ldrb	r3, [r7, #19]
 8017a7e:	2b01      	cmp	r3, #1
 8017a80:	d806      	bhi.n	8017a90 <etharp_find_entry+0x7c>
 8017a82:	4b83      	ldr	r3, [pc, #524]	; (8017c90 <etharp_find_entry+0x27c>)
 8017a84:	f240 1225 	movw	r2, #293	; 0x125
 8017a88:	4982      	ldr	r1, [pc, #520]	; (8017c94 <etharp_find_entry+0x280>)
 8017a8a:	4883      	ldr	r0, [pc, #524]	; (8017c98 <etharp_find_entry+0x284>)
 8017a8c:	f002 fce4 	bl	801a458 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d00f      	beq.n	8017ab6 <etharp_find_entry+0xa2>
 8017a96:	68fb      	ldr	r3, [r7, #12]
 8017a98:	6819      	ldr	r1, [r3, #0]
 8017a9a:	7f3a      	ldrb	r2, [r7, #28]
 8017a9c:	487b      	ldr	r0, [pc, #492]	; (8017c8c <etharp_find_entry+0x278>)
 8017a9e:	4613      	mov	r3, r2
 8017aa0:	005b      	lsls	r3, r3, #1
 8017aa2:	4413      	add	r3, r2
 8017aa4:	00db      	lsls	r3, r3, #3
 8017aa6:	4403      	add	r3, r0
 8017aa8:	3304      	adds	r3, #4
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	4299      	cmp	r1, r3
 8017aae:	d102      	bne.n	8017ab6 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8017ab0:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8017ab4:	e0e5      	b.n	8017c82 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017ab6:	7cfb      	ldrb	r3, [r7, #19]
 8017ab8:	2b01      	cmp	r3, #1
 8017aba:	d13b      	bne.n	8017b34 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8017abc:	7f3a      	ldrb	r2, [r7, #28]
 8017abe:	4973      	ldr	r1, [pc, #460]	; (8017c8c <etharp_find_entry+0x278>)
 8017ac0:	4613      	mov	r3, r2
 8017ac2:	005b      	lsls	r3, r3, #1
 8017ac4:	4413      	add	r3, r2
 8017ac6:	00db      	lsls	r3, r3, #3
 8017ac8:	440b      	add	r3, r1
 8017aca:	681b      	ldr	r3, [r3, #0]
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d018      	beq.n	8017b02 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8017ad0:	7f3a      	ldrb	r2, [r7, #28]
 8017ad2:	496e      	ldr	r1, [pc, #440]	; (8017c8c <etharp_find_entry+0x278>)
 8017ad4:	4613      	mov	r3, r2
 8017ad6:	005b      	lsls	r3, r3, #1
 8017ad8:	4413      	add	r3, r2
 8017ada:	00db      	lsls	r3, r3, #3
 8017adc:	440b      	add	r3, r1
 8017ade:	3312      	adds	r3, #18
 8017ae0:	881b      	ldrh	r3, [r3, #0]
 8017ae2:	8b3a      	ldrh	r2, [r7, #24]
 8017ae4:	429a      	cmp	r2, r3
 8017ae6:	d840      	bhi.n	8017b6a <etharp_find_entry+0x156>
            old_queue = i;
 8017ae8:	7f3b      	ldrb	r3, [r7, #28]
 8017aea:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8017aec:	7f3a      	ldrb	r2, [r7, #28]
 8017aee:	4967      	ldr	r1, [pc, #412]	; (8017c8c <etharp_find_entry+0x278>)
 8017af0:	4613      	mov	r3, r2
 8017af2:	005b      	lsls	r3, r3, #1
 8017af4:	4413      	add	r3, r2
 8017af6:	00db      	lsls	r3, r3, #3
 8017af8:	440b      	add	r3, r1
 8017afa:	3312      	adds	r3, #18
 8017afc:	881b      	ldrh	r3, [r3, #0]
 8017afe:	833b      	strh	r3, [r7, #24]
 8017b00:	e033      	b.n	8017b6a <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8017b02:	7f3a      	ldrb	r2, [r7, #28]
 8017b04:	4961      	ldr	r1, [pc, #388]	; (8017c8c <etharp_find_entry+0x278>)
 8017b06:	4613      	mov	r3, r2
 8017b08:	005b      	lsls	r3, r3, #1
 8017b0a:	4413      	add	r3, r2
 8017b0c:	00db      	lsls	r3, r3, #3
 8017b0e:	440b      	add	r3, r1
 8017b10:	3312      	adds	r3, #18
 8017b12:	881b      	ldrh	r3, [r3, #0]
 8017b14:	8afa      	ldrh	r2, [r7, #22]
 8017b16:	429a      	cmp	r2, r3
 8017b18:	d827      	bhi.n	8017b6a <etharp_find_entry+0x156>
            old_pending = i;
 8017b1a:	7f3b      	ldrb	r3, [r7, #28]
 8017b1c:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8017b1e:	7f3a      	ldrb	r2, [r7, #28]
 8017b20:	495a      	ldr	r1, [pc, #360]	; (8017c8c <etharp_find_entry+0x278>)
 8017b22:	4613      	mov	r3, r2
 8017b24:	005b      	lsls	r3, r3, #1
 8017b26:	4413      	add	r3, r2
 8017b28:	00db      	lsls	r3, r3, #3
 8017b2a:	440b      	add	r3, r1
 8017b2c:	3312      	adds	r3, #18
 8017b2e:	881b      	ldrh	r3, [r3, #0]
 8017b30:	82fb      	strh	r3, [r7, #22]
 8017b32:	e01a      	b.n	8017b6a <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8017b34:	7cfb      	ldrb	r3, [r7, #19]
 8017b36:	2b01      	cmp	r3, #1
 8017b38:	d917      	bls.n	8017b6a <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8017b3a:	7f3a      	ldrb	r2, [r7, #28]
 8017b3c:	4953      	ldr	r1, [pc, #332]	; (8017c8c <etharp_find_entry+0x278>)
 8017b3e:	4613      	mov	r3, r2
 8017b40:	005b      	lsls	r3, r3, #1
 8017b42:	4413      	add	r3, r2
 8017b44:	00db      	lsls	r3, r3, #3
 8017b46:	440b      	add	r3, r1
 8017b48:	3312      	adds	r3, #18
 8017b4a:	881b      	ldrh	r3, [r3, #0]
 8017b4c:	8aba      	ldrh	r2, [r7, #20]
 8017b4e:	429a      	cmp	r2, r3
 8017b50:	d80b      	bhi.n	8017b6a <etharp_find_entry+0x156>
            old_stable = i;
 8017b52:	7f3b      	ldrb	r3, [r7, #28]
 8017b54:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8017b56:	7f3a      	ldrb	r2, [r7, #28]
 8017b58:	494c      	ldr	r1, [pc, #304]	; (8017c8c <etharp_find_entry+0x278>)
 8017b5a:	4613      	mov	r3, r2
 8017b5c:	005b      	lsls	r3, r3, #1
 8017b5e:	4413      	add	r3, r2
 8017b60:	00db      	lsls	r3, r3, #3
 8017b62:	440b      	add	r3, r1
 8017b64:	3312      	adds	r3, #18
 8017b66:	881b      	ldrh	r3, [r3, #0]
 8017b68:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017b6a:	7f3b      	ldrb	r3, [r7, #28]
 8017b6c:	3301      	adds	r3, #1
 8017b6e:	773b      	strb	r3, [r7, #28]
 8017b70:	7f3b      	ldrb	r3, [r7, #28]
 8017b72:	2b09      	cmp	r3, #9
 8017b74:	f67f af68 	bls.w	8017a48 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017b78:	7afb      	ldrb	r3, [r7, #11]
 8017b7a:	f003 0302 	and.w	r3, r3, #2
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d108      	bne.n	8017b94 <etharp_find_entry+0x180>
 8017b82:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8017b86:	2b0a      	cmp	r3, #10
 8017b88:	d107      	bne.n	8017b9a <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8017b8a:	7afb      	ldrb	r3, [r7, #11]
 8017b8c:	f003 0301 	and.w	r3, r3, #1
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	d102      	bne.n	8017b9a <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8017b94:	f04f 33ff 	mov.w	r3, #4294967295
 8017b98:	e073      	b.n	8017c82 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8017b9a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8017b9e:	2b09      	cmp	r3, #9
 8017ba0:	dc02      	bgt.n	8017ba8 <etharp_find_entry+0x194>
    i = empty;
 8017ba2:	7f7b      	ldrb	r3, [r7, #29]
 8017ba4:	773b      	strb	r3, [r7, #28]
 8017ba6:	e036      	b.n	8017c16 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017ba8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017bac:	2b09      	cmp	r3, #9
 8017bae:	dc13      	bgt.n	8017bd8 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8017bb0:	7fbb      	ldrb	r3, [r7, #30]
 8017bb2:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8017bb4:	7f3a      	ldrb	r2, [r7, #28]
 8017bb6:	4935      	ldr	r1, [pc, #212]	; (8017c8c <etharp_find_entry+0x278>)
 8017bb8:	4613      	mov	r3, r2
 8017bba:	005b      	lsls	r3, r3, #1
 8017bbc:	4413      	add	r3, r2
 8017bbe:	00db      	lsls	r3, r3, #3
 8017bc0:	440b      	add	r3, r1
 8017bc2:	681b      	ldr	r3, [r3, #0]
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d018      	beq.n	8017bfa <etharp_find_entry+0x1e6>
 8017bc8:	4b31      	ldr	r3, [pc, #196]	; (8017c90 <etharp_find_entry+0x27c>)
 8017bca:	f240 126f 	movw	r2, #367	; 0x16f
 8017bce:	4933      	ldr	r1, [pc, #204]	; (8017c9c <etharp_find_entry+0x288>)
 8017bd0:	4831      	ldr	r0, [pc, #196]	; (8017c98 <etharp_find_entry+0x284>)
 8017bd2:	f002 fc41 	bl	801a458 <iprintf>
 8017bd6:	e010      	b.n	8017bfa <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8017bd8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017bdc:	2b09      	cmp	r3, #9
 8017bde:	dc02      	bgt.n	8017be6 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8017be0:	7ffb      	ldrb	r3, [r7, #31]
 8017be2:	773b      	strb	r3, [r7, #28]
 8017be4:	e009      	b.n	8017bfa <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8017be6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017bea:	2b09      	cmp	r3, #9
 8017bec:	dc02      	bgt.n	8017bf4 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8017bee:	7efb      	ldrb	r3, [r7, #27]
 8017bf0:	773b      	strb	r3, [r7, #28]
 8017bf2:	e002      	b.n	8017bfa <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8017bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8017bf8:	e043      	b.n	8017c82 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017bfa:	7f3b      	ldrb	r3, [r7, #28]
 8017bfc:	2b09      	cmp	r3, #9
 8017bfe:	d906      	bls.n	8017c0e <etharp_find_entry+0x1fa>
 8017c00:	4b23      	ldr	r3, [pc, #140]	; (8017c90 <etharp_find_entry+0x27c>)
 8017c02:	f240 1281 	movw	r2, #385	; 0x181
 8017c06:	4926      	ldr	r1, [pc, #152]	; (8017ca0 <etharp_find_entry+0x28c>)
 8017c08:	4823      	ldr	r0, [pc, #140]	; (8017c98 <etharp_find_entry+0x284>)
 8017c0a:	f002 fc25 	bl	801a458 <iprintf>
    etharp_free_entry(i);
 8017c0e:	7f3b      	ldrb	r3, [r7, #28]
 8017c10:	4618      	mov	r0, r3
 8017c12:	f7ff fe25 	bl	8017860 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017c16:	7f3b      	ldrb	r3, [r7, #28]
 8017c18:	2b09      	cmp	r3, #9
 8017c1a:	d906      	bls.n	8017c2a <etharp_find_entry+0x216>
 8017c1c:	4b1c      	ldr	r3, [pc, #112]	; (8017c90 <etharp_find_entry+0x27c>)
 8017c1e:	f240 1285 	movw	r2, #389	; 0x185
 8017c22:	491f      	ldr	r1, [pc, #124]	; (8017ca0 <etharp_find_entry+0x28c>)
 8017c24:	481c      	ldr	r0, [pc, #112]	; (8017c98 <etharp_find_entry+0x284>)
 8017c26:	f002 fc17 	bl	801a458 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8017c2a:	7f3a      	ldrb	r2, [r7, #28]
 8017c2c:	4917      	ldr	r1, [pc, #92]	; (8017c8c <etharp_find_entry+0x278>)
 8017c2e:	4613      	mov	r3, r2
 8017c30:	005b      	lsls	r3, r3, #1
 8017c32:	4413      	add	r3, r2
 8017c34:	00db      	lsls	r3, r3, #3
 8017c36:	440b      	add	r3, r1
 8017c38:	3314      	adds	r3, #20
 8017c3a:	781b      	ldrb	r3, [r3, #0]
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d006      	beq.n	8017c4e <etharp_find_entry+0x23a>
 8017c40:	4b13      	ldr	r3, [pc, #76]	; (8017c90 <etharp_find_entry+0x27c>)
 8017c42:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8017c46:	4917      	ldr	r1, [pc, #92]	; (8017ca4 <etharp_find_entry+0x290>)
 8017c48:	4813      	ldr	r0, [pc, #76]	; (8017c98 <etharp_find_entry+0x284>)
 8017c4a:	f002 fc05 	bl	801a458 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017c4e:	68fb      	ldr	r3, [r7, #12]
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	d00a      	beq.n	8017c6a <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017c54:	7f3a      	ldrb	r2, [r7, #28]
 8017c56:	68fb      	ldr	r3, [r7, #12]
 8017c58:	6819      	ldr	r1, [r3, #0]
 8017c5a:	480c      	ldr	r0, [pc, #48]	; (8017c8c <etharp_find_entry+0x278>)
 8017c5c:	4613      	mov	r3, r2
 8017c5e:	005b      	lsls	r3, r3, #1
 8017c60:	4413      	add	r3, r2
 8017c62:	00db      	lsls	r3, r3, #3
 8017c64:	4403      	add	r3, r0
 8017c66:	3304      	adds	r3, #4
 8017c68:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8017c6a:	7f3a      	ldrb	r2, [r7, #28]
 8017c6c:	4907      	ldr	r1, [pc, #28]	; (8017c8c <etharp_find_entry+0x278>)
 8017c6e:	4613      	mov	r3, r2
 8017c70:	005b      	lsls	r3, r3, #1
 8017c72:	4413      	add	r3, r2
 8017c74:	00db      	lsls	r3, r3, #3
 8017c76:	440b      	add	r3, r1
 8017c78:	3312      	adds	r3, #18
 8017c7a:	2200      	movs	r2, #0
 8017c7c:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8017c7e:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8017c82:	4618      	mov	r0, r3
 8017c84:	3720      	adds	r7, #32
 8017c86:	46bd      	mov	sp, r7
 8017c88:	bd80      	pop	{r7, pc}
 8017c8a:	bf00      	nop
 8017c8c:	2000ec54 	.word	0x2000ec54
 8017c90:	0801de3c 	.word	0x0801de3c
 8017c94:	0801de74 	.word	0x0801de74
 8017c98:	0801deb4 	.word	0x0801deb4
 8017c9c:	0801dedc 	.word	0x0801dedc
 8017ca0:	0801def4 	.word	0x0801def4
 8017ca4:	0801df08 	.word	0x0801df08

08017ca8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017ca8:	b580      	push	{r7, lr}
 8017caa:	b088      	sub	sp, #32
 8017cac:	af02      	add	r7, sp, #8
 8017cae:	60f8      	str	r0, [r7, #12]
 8017cb0:	60b9      	str	r1, [r7, #8]
 8017cb2:	607a      	str	r2, [r7, #4]
 8017cb4:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8017cb6:	68fb      	ldr	r3, [r7, #12]
 8017cb8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017cbc:	2b06      	cmp	r3, #6
 8017cbe:	d006      	beq.n	8017cce <etharp_update_arp_entry+0x26>
 8017cc0:	4b48      	ldr	r3, [pc, #288]	; (8017de4 <etharp_update_arp_entry+0x13c>)
 8017cc2:	f240 12ab 	movw	r2, #427	; 0x1ab
 8017cc6:	4948      	ldr	r1, [pc, #288]	; (8017de8 <etharp_update_arp_entry+0x140>)
 8017cc8:	4848      	ldr	r0, [pc, #288]	; (8017dec <etharp_update_arp_entry+0x144>)
 8017cca:	f002 fbc5 	bl	801a458 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8017cce:	68bb      	ldr	r3, [r7, #8]
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d012      	beq.n	8017cfa <etharp_update_arp_entry+0x52>
 8017cd4:	68bb      	ldr	r3, [r7, #8]
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d00e      	beq.n	8017cfa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017cdc:	68bb      	ldr	r3, [r7, #8]
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	68f9      	ldr	r1, [r7, #12]
 8017ce2:	4618      	mov	r0, r3
 8017ce4:	f001 f8fe 	bl	8018ee4 <ip4_addr_isbroadcast_u32>
 8017ce8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	d105      	bne.n	8017cfa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8017cee:	68bb      	ldr	r3, [r7, #8]
 8017cf0:	681b      	ldr	r3, [r3, #0]
 8017cf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017cf6:	2be0      	cmp	r3, #224	; 0xe0
 8017cf8:	d102      	bne.n	8017d00 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017cfa:	f06f 030f 	mvn.w	r3, #15
 8017cfe:	e06c      	b.n	8017dda <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8017d00:	78fb      	ldrb	r3, [r7, #3]
 8017d02:	68fa      	ldr	r2, [r7, #12]
 8017d04:	4619      	mov	r1, r3
 8017d06:	68b8      	ldr	r0, [r7, #8]
 8017d08:	f7ff fe84 	bl	8017a14 <etharp_find_entry>
 8017d0c:	4603      	mov	r3, r0
 8017d0e:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8017d10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	da02      	bge.n	8017d1e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017d18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017d1c:	e05d      	b.n	8017dda <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8017d1e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017d22:	4933      	ldr	r1, [pc, #204]	; (8017df0 <etharp_update_arp_entry+0x148>)
 8017d24:	4613      	mov	r3, r2
 8017d26:	005b      	lsls	r3, r3, #1
 8017d28:	4413      	add	r3, r2
 8017d2a:	00db      	lsls	r3, r3, #3
 8017d2c:	440b      	add	r3, r1
 8017d2e:	3314      	adds	r3, #20
 8017d30:	2202      	movs	r2, #2
 8017d32:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017d34:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017d38:	492d      	ldr	r1, [pc, #180]	; (8017df0 <etharp_update_arp_entry+0x148>)
 8017d3a:	4613      	mov	r3, r2
 8017d3c:	005b      	lsls	r3, r3, #1
 8017d3e:	4413      	add	r3, r2
 8017d40:	00db      	lsls	r3, r3, #3
 8017d42:	440b      	add	r3, r1
 8017d44:	3308      	adds	r3, #8
 8017d46:	68fa      	ldr	r2, [r7, #12]
 8017d48:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8017d4a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017d4e:	4613      	mov	r3, r2
 8017d50:	005b      	lsls	r3, r3, #1
 8017d52:	4413      	add	r3, r2
 8017d54:	00db      	lsls	r3, r3, #3
 8017d56:	3308      	adds	r3, #8
 8017d58:	4a25      	ldr	r2, [pc, #148]	; (8017df0 <etharp_update_arp_entry+0x148>)
 8017d5a:	4413      	add	r3, r2
 8017d5c:	3304      	adds	r3, #4
 8017d5e:	2206      	movs	r2, #6
 8017d60:	6879      	ldr	r1, [r7, #4]
 8017d62:	4618      	mov	r0, r3
 8017d64:	f002 facd 	bl	801a302 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017d68:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017d6c:	4920      	ldr	r1, [pc, #128]	; (8017df0 <etharp_update_arp_entry+0x148>)
 8017d6e:	4613      	mov	r3, r2
 8017d70:	005b      	lsls	r3, r3, #1
 8017d72:	4413      	add	r3, r2
 8017d74:	00db      	lsls	r3, r3, #3
 8017d76:	440b      	add	r3, r1
 8017d78:	3312      	adds	r3, #18
 8017d7a:	2200      	movs	r2, #0
 8017d7c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8017d7e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017d82:	491b      	ldr	r1, [pc, #108]	; (8017df0 <etharp_update_arp_entry+0x148>)
 8017d84:	4613      	mov	r3, r2
 8017d86:	005b      	lsls	r3, r3, #1
 8017d88:	4413      	add	r3, r2
 8017d8a:	00db      	lsls	r3, r3, #3
 8017d8c:	440b      	add	r3, r1
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d021      	beq.n	8017dd8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017d94:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017d98:	4915      	ldr	r1, [pc, #84]	; (8017df0 <etharp_update_arp_entry+0x148>)
 8017d9a:	4613      	mov	r3, r2
 8017d9c:	005b      	lsls	r3, r3, #1
 8017d9e:	4413      	add	r3, r2
 8017da0:	00db      	lsls	r3, r3, #3
 8017da2:	440b      	add	r3, r1
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017da8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017dac:	4910      	ldr	r1, [pc, #64]	; (8017df0 <etharp_update_arp_entry+0x148>)
 8017dae:	4613      	mov	r3, r2
 8017db0:	005b      	lsls	r3, r3, #1
 8017db2:	4413      	add	r3, r2
 8017db4:	00db      	lsls	r3, r3, #3
 8017db6:	440b      	add	r3, r1
 8017db8:	2200      	movs	r2, #0
 8017dba:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 8017dc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017dc6:	9300      	str	r3, [sp, #0]
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	6939      	ldr	r1, [r7, #16]
 8017dcc:	68f8      	ldr	r0, [r7, #12]
 8017dce:	f001 ff2f 	bl	8019c30 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8017dd2:	6938      	ldr	r0, [r7, #16]
 8017dd4:	f7f7 fca6 	bl	800f724 <pbuf_free>
  }
  return ERR_OK;
 8017dd8:	2300      	movs	r3, #0
}
 8017dda:	4618      	mov	r0, r3
 8017ddc:	3718      	adds	r7, #24
 8017dde:	46bd      	mov	sp, r7
 8017de0:	bd80      	pop	{r7, pc}
 8017de2:	bf00      	nop
 8017de4:	0801de3c 	.word	0x0801de3c
 8017de8:	0801df34 	.word	0x0801df34
 8017dec:	0801deb4 	.word	0x0801deb4
 8017df0:	2000ec54 	.word	0x2000ec54

08017df4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017df4:	b580      	push	{r7, lr}
 8017df6:	b084      	sub	sp, #16
 8017df8:	af00      	add	r7, sp, #0
 8017dfa:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017dfc:	2300      	movs	r3, #0
 8017dfe:	73fb      	strb	r3, [r7, #15]
 8017e00:	e01f      	b.n	8017e42 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8017e02:	7bfa      	ldrb	r2, [r7, #15]
 8017e04:	4913      	ldr	r1, [pc, #76]	; (8017e54 <etharp_cleanup_netif+0x60>)
 8017e06:	4613      	mov	r3, r2
 8017e08:	005b      	lsls	r3, r3, #1
 8017e0a:	4413      	add	r3, r2
 8017e0c:	00db      	lsls	r3, r3, #3
 8017e0e:	440b      	add	r3, r1
 8017e10:	3314      	adds	r3, #20
 8017e12:	781b      	ldrb	r3, [r3, #0]
 8017e14:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017e16:	7bbb      	ldrb	r3, [r7, #14]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d00f      	beq.n	8017e3c <etharp_cleanup_netif+0x48>
 8017e1c:	7bfa      	ldrb	r2, [r7, #15]
 8017e1e:	490d      	ldr	r1, [pc, #52]	; (8017e54 <etharp_cleanup_netif+0x60>)
 8017e20:	4613      	mov	r3, r2
 8017e22:	005b      	lsls	r3, r3, #1
 8017e24:	4413      	add	r3, r2
 8017e26:	00db      	lsls	r3, r3, #3
 8017e28:	440b      	add	r3, r1
 8017e2a:	3308      	adds	r3, #8
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	687a      	ldr	r2, [r7, #4]
 8017e30:	429a      	cmp	r2, r3
 8017e32:	d103      	bne.n	8017e3c <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8017e34:	7bfb      	ldrb	r3, [r7, #15]
 8017e36:	4618      	mov	r0, r3
 8017e38:	f7ff fd12 	bl	8017860 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017e3c:	7bfb      	ldrb	r3, [r7, #15]
 8017e3e:	3301      	adds	r3, #1
 8017e40:	73fb      	strb	r3, [r7, #15]
 8017e42:	7bfb      	ldrb	r3, [r7, #15]
 8017e44:	2b09      	cmp	r3, #9
 8017e46:	d9dc      	bls.n	8017e02 <etharp_cleanup_netif+0xe>
    }
  }
}
 8017e48:	bf00      	nop
 8017e4a:	bf00      	nop
 8017e4c:	3710      	adds	r7, #16
 8017e4e:	46bd      	mov	sp, r7
 8017e50:	bd80      	pop	{r7, pc}
 8017e52:	bf00      	nop
 8017e54:	2000ec54 	.word	0x2000ec54

08017e58 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017e58:	b5b0      	push	{r4, r5, r7, lr}
 8017e5a:	b08a      	sub	sp, #40	; 0x28
 8017e5c:	af04      	add	r7, sp, #16
 8017e5e:	6078      	str	r0, [r7, #4]
 8017e60:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017e62:	683b      	ldr	r3, [r7, #0]
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d107      	bne.n	8017e78 <etharp_input+0x20>
 8017e68:	4b3f      	ldr	r3, [pc, #252]	; (8017f68 <etharp_input+0x110>)
 8017e6a:	f44f 7222 	mov.w	r2, #648	; 0x288
 8017e6e:	493f      	ldr	r1, [pc, #252]	; (8017f6c <etharp_input+0x114>)
 8017e70:	483f      	ldr	r0, [pc, #252]	; (8017f70 <etharp_input+0x118>)
 8017e72:	f002 faf1 	bl	801a458 <iprintf>
 8017e76:	e074      	b.n	8017f62 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	685b      	ldr	r3, [r3, #4]
 8017e7c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8017e7e:	693b      	ldr	r3, [r7, #16]
 8017e80:	881b      	ldrh	r3, [r3, #0]
 8017e82:	b29b      	uxth	r3, r3
 8017e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017e88:	d10c      	bne.n	8017ea4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017e8a:	693b      	ldr	r3, [r7, #16]
 8017e8c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8017e8e:	2b06      	cmp	r3, #6
 8017e90:	d108      	bne.n	8017ea4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017e92:	693b      	ldr	r3, [r7, #16]
 8017e94:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017e96:	2b04      	cmp	r3, #4
 8017e98:	d104      	bne.n	8017ea4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8017e9a:	693b      	ldr	r3, [r7, #16]
 8017e9c:	885b      	ldrh	r3, [r3, #2]
 8017e9e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017ea0:	2b08      	cmp	r3, #8
 8017ea2:	d003      	beq.n	8017eac <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8017ea4:	6878      	ldr	r0, [r7, #4]
 8017ea6:	f7f7 fc3d 	bl	800f724 <pbuf_free>
    return;
 8017eaa:	e05a      	b.n	8017f62 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8017eac:	693b      	ldr	r3, [r7, #16]
 8017eae:	330e      	adds	r3, #14
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8017eb4:	693b      	ldr	r3, [r7, #16]
 8017eb6:	3318      	adds	r3, #24
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017ebc:	683b      	ldr	r3, [r7, #0]
 8017ebe:	3304      	adds	r3, #4
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d102      	bne.n	8017ecc <etharp_input+0x74>
    for_us = 0;
 8017ec6:	2300      	movs	r3, #0
 8017ec8:	75fb      	strb	r3, [r7, #23]
 8017eca:	e009      	b.n	8017ee0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8017ecc:	68ba      	ldr	r2, [r7, #8]
 8017ece:	683b      	ldr	r3, [r7, #0]
 8017ed0:	3304      	adds	r3, #4
 8017ed2:	681b      	ldr	r3, [r3, #0]
 8017ed4:	429a      	cmp	r2, r3
 8017ed6:	bf0c      	ite	eq
 8017ed8:	2301      	moveq	r3, #1
 8017eda:	2300      	movne	r3, #0
 8017edc:	b2db      	uxtb	r3, r3
 8017ede:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8017ee0:	693b      	ldr	r3, [r7, #16]
 8017ee2:	f103 0208 	add.w	r2, r3, #8
 8017ee6:	7dfb      	ldrb	r3, [r7, #23]
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d001      	beq.n	8017ef0 <etharp_input+0x98>
 8017eec:	2301      	movs	r3, #1
 8017eee:	e000      	b.n	8017ef2 <etharp_input+0x9a>
 8017ef0:	2302      	movs	r3, #2
 8017ef2:	f107 010c 	add.w	r1, r7, #12
 8017ef6:	6838      	ldr	r0, [r7, #0]
 8017ef8:	f7ff fed6 	bl	8017ca8 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017efc:	693b      	ldr	r3, [r7, #16]
 8017efe:	88db      	ldrh	r3, [r3, #6]
 8017f00:	b29b      	uxth	r3, r3
 8017f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017f06:	d003      	beq.n	8017f10 <etharp_input+0xb8>
 8017f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017f0c:	d01e      	beq.n	8017f4c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8017f0e:	e025      	b.n	8017f5c <etharp_input+0x104>
    if (for_us) {
 8017f10:	7dfb      	ldrb	r3, [r7, #23]
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d021      	beq.n	8017f5a <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8017f16:	683b      	ldr	r3, [r7, #0]
 8017f18:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 8017f1c:	693b      	ldr	r3, [r7, #16]
 8017f1e:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8017f22:	683b      	ldr	r3, [r7, #0]
 8017f24:	f103 052d 	add.w	r5, r3, #45	; 0x2d
 8017f28:	683b      	ldr	r3, [r7, #0]
 8017f2a:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8017f2c:	693a      	ldr	r2, [r7, #16]
 8017f2e:	3208      	adds	r2, #8
      etharp_raw(netif,
 8017f30:	2102      	movs	r1, #2
 8017f32:	9103      	str	r1, [sp, #12]
 8017f34:	f107 010c 	add.w	r1, r7, #12
 8017f38:	9102      	str	r1, [sp, #8]
 8017f3a:	9201      	str	r2, [sp, #4]
 8017f3c:	9300      	str	r3, [sp, #0]
 8017f3e:	462b      	mov	r3, r5
 8017f40:	4622      	mov	r2, r4
 8017f42:	4601      	mov	r1, r0
 8017f44:	6838      	ldr	r0, [r7, #0]
 8017f46:	f000 fae5 	bl	8018514 <etharp_raw>
    break;
 8017f4a:	e006      	b.n	8017f5a <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 8017f4c:	f107 030c 	add.w	r3, r7, #12
 8017f50:	4619      	mov	r1, r3
 8017f52:	6838      	ldr	r0, [r7, #0]
 8017f54:	f7fe f97c 	bl	8016250 <dhcp_arp_reply>
    break;
 8017f58:	e000      	b.n	8017f5c <etharp_input+0x104>
    break;
 8017f5a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8017f5c:	6878      	ldr	r0, [r7, #4]
 8017f5e:	f7f7 fbe1 	bl	800f724 <pbuf_free>
}
 8017f62:	3718      	adds	r7, #24
 8017f64:	46bd      	mov	sp, r7
 8017f66:	bdb0      	pop	{r4, r5, r7, pc}
 8017f68:	0801de3c 	.word	0x0801de3c
 8017f6c:	0801df8c 	.word	0x0801df8c
 8017f70:	0801deb4 	.word	0x0801deb4

08017f74 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8017f74:	b580      	push	{r7, lr}
 8017f76:	b086      	sub	sp, #24
 8017f78:	af02      	add	r7, sp, #8
 8017f7a:	60f8      	str	r0, [r7, #12]
 8017f7c:	60b9      	str	r1, [r7, #8]
 8017f7e:	4613      	mov	r3, r2
 8017f80:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8017f82:	79fa      	ldrb	r2, [r7, #7]
 8017f84:	4944      	ldr	r1, [pc, #272]	; (8018098 <etharp_output_to_arp_index+0x124>)
 8017f86:	4613      	mov	r3, r2
 8017f88:	005b      	lsls	r3, r3, #1
 8017f8a:	4413      	add	r3, r2
 8017f8c:	00db      	lsls	r3, r3, #3
 8017f8e:	440b      	add	r3, r1
 8017f90:	3314      	adds	r3, #20
 8017f92:	781b      	ldrb	r3, [r3, #0]
 8017f94:	2b01      	cmp	r3, #1
 8017f96:	d806      	bhi.n	8017fa6 <etharp_output_to_arp_index+0x32>
 8017f98:	4b40      	ldr	r3, [pc, #256]	; (801809c <etharp_output_to_arp_index+0x128>)
 8017f9a:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 8017f9e:	4940      	ldr	r1, [pc, #256]	; (80180a0 <etharp_output_to_arp_index+0x12c>)
 8017fa0:	4840      	ldr	r0, [pc, #256]	; (80180a4 <etharp_output_to_arp_index+0x130>)
 8017fa2:	f002 fa59 	bl	801a458 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8017fa6:	79fa      	ldrb	r2, [r7, #7]
 8017fa8:	493b      	ldr	r1, [pc, #236]	; (8018098 <etharp_output_to_arp_index+0x124>)
 8017faa:	4613      	mov	r3, r2
 8017fac:	005b      	lsls	r3, r3, #1
 8017fae:	4413      	add	r3, r2
 8017fb0:	00db      	lsls	r3, r3, #3
 8017fb2:	440b      	add	r3, r1
 8017fb4:	3314      	adds	r3, #20
 8017fb6:	781b      	ldrb	r3, [r3, #0]
 8017fb8:	2b02      	cmp	r3, #2
 8017fba:	d153      	bne.n	8018064 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8017fbc:	79fa      	ldrb	r2, [r7, #7]
 8017fbe:	4936      	ldr	r1, [pc, #216]	; (8018098 <etharp_output_to_arp_index+0x124>)
 8017fc0:	4613      	mov	r3, r2
 8017fc2:	005b      	lsls	r3, r3, #1
 8017fc4:	4413      	add	r3, r2
 8017fc6:	00db      	lsls	r3, r3, #3
 8017fc8:	440b      	add	r3, r1
 8017fca:	3312      	adds	r3, #18
 8017fcc:	881b      	ldrh	r3, [r3, #0]
 8017fce:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8017fd2:	d919      	bls.n	8018008 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017fd4:	79fa      	ldrb	r2, [r7, #7]
 8017fd6:	4613      	mov	r3, r2
 8017fd8:	005b      	lsls	r3, r3, #1
 8017fda:	4413      	add	r3, r2
 8017fdc:	00db      	lsls	r3, r3, #3
 8017fde:	4a2e      	ldr	r2, [pc, #184]	; (8018098 <etharp_output_to_arp_index+0x124>)
 8017fe0:	4413      	add	r3, r2
 8017fe2:	3304      	adds	r3, #4
 8017fe4:	4619      	mov	r1, r3
 8017fe6:	68f8      	ldr	r0, [r7, #12]
 8017fe8:	f000 fb42 	bl	8018670 <etharp_request>
 8017fec:	4603      	mov	r3, r0
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d138      	bne.n	8018064 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017ff2:	79fa      	ldrb	r2, [r7, #7]
 8017ff4:	4928      	ldr	r1, [pc, #160]	; (8018098 <etharp_output_to_arp_index+0x124>)
 8017ff6:	4613      	mov	r3, r2
 8017ff8:	005b      	lsls	r3, r3, #1
 8017ffa:	4413      	add	r3, r2
 8017ffc:	00db      	lsls	r3, r3, #3
 8017ffe:	440b      	add	r3, r1
 8018000:	3314      	adds	r3, #20
 8018002:	2203      	movs	r2, #3
 8018004:	701a      	strb	r2, [r3, #0]
 8018006:	e02d      	b.n	8018064 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018008:	79fa      	ldrb	r2, [r7, #7]
 801800a:	4923      	ldr	r1, [pc, #140]	; (8018098 <etharp_output_to_arp_index+0x124>)
 801800c:	4613      	mov	r3, r2
 801800e:	005b      	lsls	r3, r3, #1
 8018010:	4413      	add	r3, r2
 8018012:	00db      	lsls	r3, r3, #3
 8018014:	440b      	add	r3, r1
 8018016:	3312      	adds	r3, #18
 8018018:	881b      	ldrh	r3, [r3, #0]
 801801a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801801e:	d321      	bcc.n	8018064 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018020:	79fa      	ldrb	r2, [r7, #7]
 8018022:	4613      	mov	r3, r2
 8018024:	005b      	lsls	r3, r3, #1
 8018026:	4413      	add	r3, r2
 8018028:	00db      	lsls	r3, r3, #3
 801802a:	4a1b      	ldr	r2, [pc, #108]	; (8018098 <etharp_output_to_arp_index+0x124>)
 801802c:	4413      	add	r3, r2
 801802e:	1d19      	adds	r1, r3, #4
 8018030:	79fa      	ldrb	r2, [r7, #7]
 8018032:	4613      	mov	r3, r2
 8018034:	005b      	lsls	r3, r3, #1
 8018036:	4413      	add	r3, r2
 8018038:	00db      	lsls	r3, r3, #3
 801803a:	3308      	adds	r3, #8
 801803c:	4a16      	ldr	r2, [pc, #88]	; (8018098 <etharp_output_to_arp_index+0x124>)
 801803e:	4413      	add	r3, r2
 8018040:	3304      	adds	r3, #4
 8018042:	461a      	mov	r2, r3
 8018044:	68f8      	ldr	r0, [r7, #12]
 8018046:	f000 faf1 	bl	801862c <etharp_request_dst>
 801804a:	4603      	mov	r3, r0
 801804c:	2b00      	cmp	r3, #0
 801804e:	d109      	bne.n	8018064 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018050:	79fa      	ldrb	r2, [r7, #7]
 8018052:	4911      	ldr	r1, [pc, #68]	; (8018098 <etharp_output_to_arp_index+0x124>)
 8018054:	4613      	mov	r3, r2
 8018056:	005b      	lsls	r3, r3, #1
 8018058:	4413      	add	r3, r2
 801805a:	00db      	lsls	r3, r3, #3
 801805c:	440b      	add	r3, r1
 801805e:	3314      	adds	r3, #20
 8018060:	2203      	movs	r2, #3
 8018062:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018064:	68fb      	ldr	r3, [r7, #12]
 8018066:	f103 012d 	add.w	r1, r3, #45	; 0x2d
 801806a:	79fa      	ldrb	r2, [r7, #7]
 801806c:	4613      	mov	r3, r2
 801806e:	005b      	lsls	r3, r3, #1
 8018070:	4413      	add	r3, r2
 8018072:	00db      	lsls	r3, r3, #3
 8018074:	3308      	adds	r3, #8
 8018076:	4a08      	ldr	r2, [pc, #32]	; (8018098 <etharp_output_to_arp_index+0x124>)
 8018078:	4413      	add	r3, r2
 801807a:	3304      	adds	r3, #4
 801807c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018080:	9200      	str	r2, [sp, #0]
 8018082:	460a      	mov	r2, r1
 8018084:	68b9      	ldr	r1, [r7, #8]
 8018086:	68f8      	ldr	r0, [r7, #12]
 8018088:	f001 fdd2 	bl	8019c30 <ethernet_output>
 801808c:	4603      	mov	r3, r0
}
 801808e:	4618      	mov	r0, r3
 8018090:	3710      	adds	r7, #16
 8018092:	46bd      	mov	sp, r7
 8018094:	bd80      	pop	{r7, pc}
 8018096:	bf00      	nop
 8018098:	2000ec54 	.word	0x2000ec54
 801809c:	0801de3c 	.word	0x0801de3c
 80180a0:	0801dfac 	.word	0x0801dfac
 80180a4:	0801deb4 	.word	0x0801deb4

080180a8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80180a8:	b580      	push	{r7, lr}
 80180aa:	b08a      	sub	sp, #40	; 0x28
 80180ac:	af02      	add	r7, sp, #8
 80180ae:	60f8      	str	r0, [r7, #12]
 80180b0:	60b9      	str	r1, [r7, #8]
 80180b2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80180b8:	68fb      	ldr	r3, [r7, #12]
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d106      	bne.n	80180cc <etharp_output+0x24>
 80180be:	4b69      	ldr	r3, [pc, #420]	; (8018264 <etharp_output+0x1bc>)
 80180c0:	f240 321b 	movw	r2, #795	; 0x31b
 80180c4:	4968      	ldr	r1, [pc, #416]	; (8018268 <etharp_output+0x1c0>)
 80180c6:	4869      	ldr	r0, [pc, #420]	; (801826c <etharp_output+0x1c4>)
 80180c8:	f002 f9c6 	bl	801a458 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80180cc:	68bb      	ldr	r3, [r7, #8]
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d106      	bne.n	80180e0 <etharp_output+0x38>
 80180d2:	4b64      	ldr	r3, [pc, #400]	; (8018264 <etharp_output+0x1bc>)
 80180d4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80180d8:	4965      	ldr	r1, [pc, #404]	; (8018270 <etharp_output+0x1c8>)
 80180da:	4864      	ldr	r0, [pc, #400]	; (801826c <etharp_output+0x1c4>)
 80180dc:	f002 f9bc 	bl	801a458 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d106      	bne.n	80180f4 <etharp_output+0x4c>
 80180e6:	4b5f      	ldr	r3, [pc, #380]	; (8018264 <etharp_output+0x1bc>)
 80180e8:	f240 321d 	movw	r2, #797	; 0x31d
 80180ec:	4961      	ldr	r1, [pc, #388]	; (8018274 <etharp_output+0x1cc>)
 80180ee:	485f      	ldr	r0, [pc, #380]	; (801826c <etharp_output+0x1c4>)
 80180f0:	f002 f9b2 	bl	801a458 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	68f9      	ldr	r1, [r7, #12]
 80180fa:	4618      	mov	r0, r3
 80180fc:	f000 fef2 	bl	8018ee4 <ip4_addr_isbroadcast_u32>
 8018100:	4603      	mov	r3, r0
 8018102:	2b00      	cmp	r3, #0
 8018104:	d002      	beq.n	801810c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018106:	4b5c      	ldr	r3, [pc, #368]	; (8018278 <etharp_output+0x1d0>)
 8018108:	61fb      	str	r3, [r7, #28]
 801810a:	e09b      	b.n	8018244 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018114:	2be0      	cmp	r3, #224	; 0xe0
 8018116:	d118      	bne.n	801814a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018118:	2301      	movs	r3, #1
 801811a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801811c:	2300      	movs	r3, #0
 801811e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018120:	235e      	movs	r3, #94	; 0x5e
 8018122:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	3301      	adds	r3, #1
 8018128:	781b      	ldrb	r3, [r3, #0]
 801812a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801812e:	b2db      	uxtb	r3, r3
 8018130:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	3302      	adds	r3, #2
 8018136:	781b      	ldrb	r3, [r3, #0]
 8018138:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	3303      	adds	r3, #3
 801813e:	781b      	ldrb	r3, [r3, #0]
 8018140:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018142:	f107 0310 	add.w	r3, r7, #16
 8018146:	61fb      	str	r3, [r7, #28]
 8018148:	e07c      	b.n	8018244 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	681a      	ldr	r2, [r3, #0]
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	3304      	adds	r3, #4
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	405a      	eors	r2, r3
 8018156:	68fb      	ldr	r3, [r7, #12]
 8018158:	3308      	adds	r3, #8
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	4013      	ands	r3, r2
 801815e:	2b00      	cmp	r3, #0
 8018160:	d012      	beq.n	8018188 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018168:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801816c:	4293      	cmp	r3, r2
 801816e:	d00b      	beq.n	8018188 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018170:	68fb      	ldr	r3, [r7, #12]
 8018172:	330c      	adds	r3, #12
 8018174:	681b      	ldr	r3, [r3, #0]
 8018176:	2b00      	cmp	r3, #0
 8018178:	d003      	beq.n	8018182 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	330c      	adds	r3, #12
 801817e:	61bb      	str	r3, [r7, #24]
 8018180:	e002      	b.n	8018188 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018182:	f06f 0303 	mvn.w	r3, #3
 8018186:	e069      	b.n	801825c <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018188:	4b3c      	ldr	r3, [pc, #240]	; (801827c <etharp_output+0x1d4>)
 801818a:	781b      	ldrb	r3, [r3, #0]
 801818c:	4619      	mov	r1, r3
 801818e:	4a3c      	ldr	r2, [pc, #240]	; (8018280 <etharp_output+0x1d8>)
 8018190:	460b      	mov	r3, r1
 8018192:	005b      	lsls	r3, r3, #1
 8018194:	440b      	add	r3, r1
 8018196:	00db      	lsls	r3, r3, #3
 8018198:	4413      	add	r3, r2
 801819a:	3314      	adds	r3, #20
 801819c:	781b      	ldrb	r3, [r3, #0]
 801819e:	2b01      	cmp	r3, #1
 80181a0:	d917      	bls.n	80181d2 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80181a2:	69bb      	ldr	r3, [r7, #24]
 80181a4:	681a      	ldr	r2, [r3, #0]
 80181a6:	4b35      	ldr	r3, [pc, #212]	; (801827c <etharp_output+0x1d4>)
 80181a8:	781b      	ldrb	r3, [r3, #0]
 80181aa:	4618      	mov	r0, r3
 80181ac:	4934      	ldr	r1, [pc, #208]	; (8018280 <etharp_output+0x1d8>)
 80181ae:	4603      	mov	r3, r0
 80181b0:	005b      	lsls	r3, r3, #1
 80181b2:	4403      	add	r3, r0
 80181b4:	00db      	lsls	r3, r3, #3
 80181b6:	440b      	add	r3, r1
 80181b8:	3304      	adds	r3, #4
 80181ba:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80181bc:	429a      	cmp	r2, r3
 80181be:	d108      	bne.n	80181d2 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80181c0:	4b2e      	ldr	r3, [pc, #184]	; (801827c <etharp_output+0x1d4>)
 80181c2:	781b      	ldrb	r3, [r3, #0]
 80181c4:	461a      	mov	r2, r3
 80181c6:	68b9      	ldr	r1, [r7, #8]
 80181c8:	68f8      	ldr	r0, [r7, #12]
 80181ca:	f7ff fed3 	bl	8017f74 <etharp_output_to_arp_index>
 80181ce:	4603      	mov	r3, r0
 80181d0:	e044      	b.n	801825c <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80181d2:	2300      	movs	r3, #0
 80181d4:	75fb      	strb	r3, [r7, #23]
 80181d6:	e02a      	b.n	801822e <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80181d8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80181dc:	4928      	ldr	r1, [pc, #160]	; (8018280 <etharp_output+0x1d8>)
 80181de:	4613      	mov	r3, r2
 80181e0:	005b      	lsls	r3, r3, #1
 80181e2:	4413      	add	r3, r2
 80181e4:	00db      	lsls	r3, r3, #3
 80181e6:	440b      	add	r3, r1
 80181e8:	3314      	adds	r3, #20
 80181ea:	781b      	ldrb	r3, [r3, #0]
 80181ec:	2b01      	cmp	r3, #1
 80181ee:	d918      	bls.n	8018222 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80181f0:	69bb      	ldr	r3, [r7, #24]
 80181f2:	6819      	ldr	r1, [r3, #0]
 80181f4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80181f8:	4821      	ldr	r0, [pc, #132]	; (8018280 <etharp_output+0x1d8>)
 80181fa:	4613      	mov	r3, r2
 80181fc:	005b      	lsls	r3, r3, #1
 80181fe:	4413      	add	r3, r2
 8018200:	00db      	lsls	r3, r3, #3
 8018202:	4403      	add	r3, r0
 8018204:	3304      	adds	r3, #4
 8018206:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018208:	4299      	cmp	r1, r3
 801820a:	d10a      	bne.n	8018222 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 801820c:	7dfa      	ldrb	r2, [r7, #23]
 801820e:	4b1b      	ldr	r3, [pc, #108]	; (801827c <etharp_output+0x1d4>)
 8018210:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018212:	7dfb      	ldrb	r3, [r7, #23]
 8018214:	461a      	mov	r2, r3
 8018216:	68b9      	ldr	r1, [r7, #8]
 8018218:	68f8      	ldr	r0, [r7, #12]
 801821a:	f7ff feab 	bl	8017f74 <etharp_output_to_arp_index>
 801821e:	4603      	mov	r3, r0
 8018220:	e01c      	b.n	801825c <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018222:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018226:	b2db      	uxtb	r3, r3
 8018228:	3301      	adds	r3, #1
 801822a:	b2db      	uxtb	r3, r3
 801822c:	75fb      	strb	r3, [r7, #23]
 801822e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018232:	2b09      	cmp	r3, #9
 8018234:	ddd0      	ble.n	80181d8 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018236:	68ba      	ldr	r2, [r7, #8]
 8018238:	69b9      	ldr	r1, [r7, #24]
 801823a:	68f8      	ldr	r0, [r7, #12]
 801823c:	f000 f822 	bl	8018284 <etharp_query>
 8018240:	4603      	mov	r3, r0
 8018242:	e00b      	b.n	801825c <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8018244:	68fb      	ldr	r3, [r7, #12]
 8018246:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 801824a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801824e:	9300      	str	r3, [sp, #0]
 8018250:	69fb      	ldr	r3, [r7, #28]
 8018252:	68b9      	ldr	r1, [r7, #8]
 8018254:	68f8      	ldr	r0, [r7, #12]
 8018256:	f001 fceb 	bl	8019c30 <ethernet_output>
 801825a:	4603      	mov	r3, r0
}
 801825c:	4618      	mov	r0, r3
 801825e:	3720      	adds	r7, #32
 8018260:	46bd      	mov	sp, r7
 8018262:	bd80      	pop	{r7, pc}
 8018264:	0801de3c 	.word	0x0801de3c
 8018268:	0801df8c 	.word	0x0801df8c
 801826c:	0801deb4 	.word	0x0801deb4
 8018270:	0801dfdc 	.word	0x0801dfdc
 8018274:	0801df7c 	.word	0x0801df7c
 8018278:	0801e618 	.word	0x0801e618
 801827c:	2000ed44 	.word	0x2000ed44
 8018280:	2000ec54 	.word	0x2000ec54

08018284 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018284:	b580      	push	{r7, lr}
 8018286:	b08c      	sub	sp, #48	; 0x30
 8018288:	af02      	add	r7, sp, #8
 801828a:	60f8      	str	r0, [r7, #12]
 801828c:	60b9      	str	r1, [r7, #8]
 801828e:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8018290:	68fb      	ldr	r3, [r7, #12]
 8018292:	332d      	adds	r3, #45	; 0x2d
 8018294:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8018296:	23ff      	movs	r3, #255	; 0xff
 8018298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801829c:	2300      	movs	r3, #0
 801829e:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80182a0:	68bb      	ldr	r3, [r7, #8]
 80182a2:	681b      	ldr	r3, [r3, #0]
 80182a4:	68f9      	ldr	r1, [r7, #12]
 80182a6:	4618      	mov	r0, r3
 80182a8:	f000 fe1c 	bl	8018ee4 <ip4_addr_isbroadcast_u32>
 80182ac:	4603      	mov	r3, r0
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d10c      	bne.n	80182cc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80182b2:	68bb      	ldr	r3, [r7, #8]
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80182ba:	2be0      	cmp	r3, #224	; 0xe0
 80182bc:	d006      	beq.n	80182cc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80182be:	68bb      	ldr	r3, [r7, #8]
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d003      	beq.n	80182cc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80182c4:	68bb      	ldr	r3, [r7, #8]
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d102      	bne.n	80182d2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80182cc:	f06f 030f 	mvn.w	r3, #15
 80182d0:	e10e      	b.n	80184f0 <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80182d2:	68fa      	ldr	r2, [r7, #12]
 80182d4:	2101      	movs	r1, #1
 80182d6:	68b8      	ldr	r0, [r7, #8]
 80182d8:	f7ff fb9c 	bl	8017a14 <etharp_find_entry>
 80182dc:	4603      	mov	r3, r0
 80182de:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 80182e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	da02      	bge.n	80182ee <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 80182e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80182ec:	e100      	b.n	80184f0 <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80182ee:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80182f2:	4981      	ldr	r1, [pc, #516]	; (80184f8 <etharp_query+0x274>)
 80182f4:	4613      	mov	r3, r2
 80182f6:	005b      	lsls	r3, r3, #1
 80182f8:	4413      	add	r3, r2
 80182fa:	00db      	lsls	r3, r3, #3
 80182fc:	440b      	add	r3, r1
 80182fe:	3314      	adds	r3, #20
 8018300:	781b      	ldrb	r3, [r3, #0]
 8018302:	2b00      	cmp	r3, #0
 8018304:	d117      	bne.n	8018336 <etharp_query+0xb2>
    is_new_entry = 1;
 8018306:	2301      	movs	r3, #1
 8018308:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801830a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801830e:	497a      	ldr	r1, [pc, #488]	; (80184f8 <etharp_query+0x274>)
 8018310:	4613      	mov	r3, r2
 8018312:	005b      	lsls	r3, r3, #1
 8018314:	4413      	add	r3, r2
 8018316:	00db      	lsls	r3, r3, #3
 8018318:	440b      	add	r3, r1
 801831a:	3314      	adds	r3, #20
 801831c:	2201      	movs	r2, #1
 801831e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018320:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018324:	4974      	ldr	r1, [pc, #464]	; (80184f8 <etharp_query+0x274>)
 8018326:	4613      	mov	r3, r2
 8018328:	005b      	lsls	r3, r3, #1
 801832a:	4413      	add	r3, r2
 801832c:	00db      	lsls	r3, r3, #3
 801832e:	440b      	add	r3, r1
 8018330:	3308      	adds	r3, #8
 8018332:	68fa      	ldr	r2, [r7, #12]
 8018334:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018336:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801833a:	496f      	ldr	r1, [pc, #444]	; (80184f8 <etharp_query+0x274>)
 801833c:	4613      	mov	r3, r2
 801833e:	005b      	lsls	r3, r3, #1
 8018340:	4413      	add	r3, r2
 8018342:	00db      	lsls	r3, r3, #3
 8018344:	440b      	add	r3, r1
 8018346:	3314      	adds	r3, #20
 8018348:	781b      	ldrb	r3, [r3, #0]
 801834a:	2b01      	cmp	r3, #1
 801834c:	d012      	beq.n	8018374 <etharp_query+0xf0>
 801834e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018352:	4969      	ldr	r1, [pc, #420]	; (80184f8 <etharp_query+0x274>)
 8018354:	4613      	mov	r3, r2
 8018356:	005b      	lsls	r3, r3, #1
 8018358:	4413      	add	r3, r2
 801835a:	00db      	lsls	r3, r3, #3
 801835c:	440b      	add	r3, r1
 801835e:	3314      	adds	r3, #20
 8018360:	781b      	ldrb	r3, [r3, #0]
 8018362:	2b01      	cmp	r3, #1
 8018364:	d806      	bhi.n	8018374 <etharp_query+0xf0>
 8018366:	4b65      	ldr	r3, [pc, #404]	; (80184fc <etharp_query+0x278>)
 8018368:	f240 32c7 	movw	r2, #967	; 0x3c7
 801836c:	4964      	ldr	r1, [pc, #400]	; (8018500 <etharp_query+0x27c>)
 801836e:	4865      	ldr	r0, [pc, #404]	; (8018504 <etharp_query+0x280>)
 8018370:	f002 f872 	bl	801a458 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018374:	6a3b      	ldr	r3, [r7, #32]
 8018376:	2b00      	cmp	r3, #0
 8018378:	d102      	bne.n	8018380 <etharp_query+0xfc>
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	2b00      	cmp	r3, #0
 801837e:	d10c      	bne.n	801839a <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018380:	68b9      	ldr	r1, [r7, #8]
 8018382:	68f8      	ldr	r0, [r7, #12]
 8018384:	f000 f974 	bl	8018670 <etharp_request>
 8018388:	4603      	mov	r3, r0
 801838a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	2b00      	cmp	r3, #0
 8018392:	d102      	bne.n	801839a <etharp_query+0x116>
      return result;
 8018394:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018398:	e0aa      	b.n	80184f0 <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	2b00      	cmp	r3, #0
 801839e:	d106      	bne.n	80183ae <etharp_query+0x12a>
 80183a0:	4b56      	ldr	r3, [pc, #344]	; (80184fc <etharp_query+0x278>)
 80183a2:	f240 32db 	movw	r2, #987	; 0x3db
 80183a6:	4958      	ldr	r1, [pc, #352]	; (8018508 <etharp_query+0x284>)
 80183a8:	4856      	ldr	r0, [pc, #344]	; (8018504 <etharp_query+0x280>)
 80183aa:	f002 f855 	bl	801a458 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80183ae:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80183b2:	4951      	ldr	r1, [pc, #324]	; (80184f8 <etharp_query+0x274>)
 80183b4:	4613      	mov	r3, r2
 80183b6:	005b      	lsls	r3, r3, #1
 80183b8:	4413      	add	r3, r2
 80183ba:	00db      	lsls	r3, r3, #3
 80183bc:	440b      	add	r3, r1
 80183be:	3314      	adds	r3, #20
 80183c0:	781b      	ldrb	r3, [r3, #0]
 80183c2:	2b01      	cmp	r3, #1
 80183c4:	d918      	bls.n	80183f8 <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 80183c6:	7cfa      	ldrb	r2, [r7, #19]
 80183c8:	4b50      	ldr	r3, [pc, #320]	; (801850c <etharp_query+0x288>)
 80183ca:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80183cc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80183d0:	4613      	mov	r3, r2
 80183d2:	005b      	lsls	r3, r3, #1
 80183d4:	4413      	add	r3, r2
 80183d6:	00db      	lsls	r3, r3, #3
 80183d8:	3308      	adds	r3, #8
 80183da:	4a47      	ldr	r2, [pc, #284]	; (80184f8 <etharp_query+0x274>)
 80183dc:	4413      	add	r3, r2
 80183de:	3304      	adds	r3, #4
 80183e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80183e4:	9200      	str	r2, [sp, #0]
 80183e6:	697a      	ldr	r2, [r7, #20]
 80183e8:	6879      	ldr	r1, [r7, #4]
 80183ea:	68f8      	ldr	r0, [r7, #12]
 80183ec:	f001 fc20 	bl	8019c30 <ethernet_output>
 80183f0:	4603      	mov	r3, r0
 80183f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80183f6:	e079      	b.n	80184ec <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80183f8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80183fc:	493e      	ldr	r1, [pc, #248]	; (80184f8 <etharp_query+0x274>)
 80183fe:	4613      	mov	r3, r2
 8018400:	005b      	lsls	r3, r3, #1
 8018402:	4413      	add	r3, r2
 8018404:	00db      	lsls	r3, r3, #3
 8018406:	440b      	add	r3, r1
 8018408:	3314      	adds	r3, #20
 801840a:	781b      	ldrb	r3, [r3, #0]
 801840c:	2b01      	cmp	r3, #1
 801840e:	d16d      	bne.n	80184ec <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018410:	2300      	movs	r3, #0
 8018412:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018418:	e01a      	b.n	8018450 <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801841a:	69fb      	ldr	r3, [r7, #28]
 801841c:	895a      	ldrh	r2, [r3, #10]
 801841e:	69fb      	ldr	r3, [r7, #28]
 8018420:	891b      	ldrh	r3, [r3, #8]
 8018422:	429a      	cmp	r2, r3
 8018424:	d10a      	bne.n	801843c <etharp_query+0x1b8>
 8018426:	69fb      	ldr	r3, [r7, #28]
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	2b00      	cmp	r3, #0
 801842c:	d006      	beq.n	801843c <etharp_query+0x1b8>
 801842e:	4b33      	ldr	r3, [pc, #204]	; (80184fc <etharp_query+0x278>)
 8018430:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8018434:	4936      	ldr	r1, [pc, #216]	; (8018510 <etharp_query+0x28c>)
 8018436:	4833      	ldr	r0, [pc, #204]	; (8018504 <etharp_query+0x280>)
 8018438:	f002 f80e 	bl	801a458 <iprintf>
      if (p->type != PBUF_ROM) {
 801843c:	69fb      	ldr	r3, [r7, #28]
 801843e:	7b1b      	ldrb	r3, [r3, #12]
 8018440:	2b01      	cmp	r3, #1
 8018442:	d002      	beq.n	801844a <etharp_query+0x1c6>
        copy_needed = 1;
 8018444:	2301      	movs	r3, #1
 8018446:	61bb      	str	r3, [r7, #24]
        break;
 8018448:	e005      	b.n	8018456 <etharp_query+0x1d2>
      }
      p = p->next;
 801844a:	69fb      	ldr	r3, [r7, #28]
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018450:	69fb      	ldr	r3, [r7, #28]
 8018452:	2b00      	cmp	r3, #0
 8018454:	d1e1      	bne.n	801841a <etharp_query+0x196>
    }
    if (copy_needed) {
 8018456:	69bb      	ldr	r3, [r7, #24]
 8018458:	2b00      	cmp	r3, #0
 801845a:	d017      	beq.n	801848c <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 801845c:	69fb      	ldr	r3, [r7, #28]
 801845e:	891b      	ldrh	r3, [r3, #8]
 8018460:	2200      	movs	r2, #0
 8018462:	4619      	mov	r1, r3
 8018464:	2002      	movs	r0, #2
 8018466:	f7f6 fde5 	bl	800f034 <pbuf_alloc>
 801846a:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 801846c:	69fb      	ldr	r3, [r7, #28]
 801846e:	2b00      	cmp	r3, #0
 8018470:	d011      	beq.n	8018496 <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 8018472:	6879      	ldr	r1, [r7, #4]
 8018474:	69f8      	ldr	r0, [r7, #28]
 8018476:	f7f7 fa93 	bl	800f9a0 <pbuf_copy>
 801847a:	4603      	mov	r3, r0
 801847c:	2b00      	cmp	r3, #0
 801847e:	d00a      	beq.n	8018496 <etharp_query+0x212>
          pbuf_free(p);
 8018480:	69f8      	ldr	r0, [r7, #28]
 8018482:	f7f7 f94f 	bl	800f724 <pbuf_free>
          p = NULL;
 8018486:	2300      	movs	r3, #0
 8018488:	61fb      	str	r3, [r7, #28]
 801848a:	e004      	b.n	8018496 <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018490:	69f8      	ldr	r0, [r7, #28]
 8018492:	f7f7 f9f7 	bl	800f884 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018496:	69fb      	ldr	r3, [r7, #28]
 8018498:	2b00      	cmp	r3, #0
 801849a:	d024      	beq.n	80184e6 <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801849c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80184a0:	4915      	ldr	r1, [pc, #84]	; (80184f8 <etharp_query+0x274>)
 80184a2:	4613      	mov	r3, r2
 80184a4:	005b      	lsls	r3, r3, #1
 80184a6:	4413      	add	r3, r2
 80184a8:	00db      	lsls	r3, r3, #3
 80184aa:	440b      	add	r3, r1
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d00b      	beq.n	80184ca <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 80184b2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80184b6:	4910      	ldr	r1, [pc, #64]	; (80184f8 <etharp_query+0x274>)
 80184b8:	4613      	mov	r3, r2
 80184ba:	005b      	lsls	r3, r3, #1
 80184bc:	4413      	add	r3, r2
 80184be:	00db      	lsls	r3, r3, #3
 80184c0:	440b      	add	r3, r1
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	4618      	mov	r0, r3
 80184c6:	f7f7 f92d 	bl	800f724 <pbuf_free>
      }
      arp_table[i].q = p;
 80184ca:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80184ce:	490a      	ldr	r1, [pc, #40]	; (80184f8 <etharp_query+0x274>)
 80184d0:	4613      	mov	r3, r2
 80184d2:	005b      	lsls	r3, r3, #1
 80184d4:	4413      	add	r3, r2
 80184d6:	00db      	lsls	r3, r3, #3
 80184d8:	440b      	add	r3, r1
 80184da:	69fa      	ldr	r2, [r7, #28]
 80184dc:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80184de:	2300      	movs	r3, #0
 80184e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80184e4:	e002      	b.n	80184ec <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80184e6:	23ff      	movs	r3, #255	; 0xff
 80184e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80184ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80184f0:	4618      	mov	r0, r3
 80184f2:	3728      	adds	r7, #40	; 0x28
 80184f4:	46bd      	mov	sp, r7
 80184f6:	bd80      	pop	{r7, pc}
 80184f8:	2000ec54 	.word	0x2000ec54
 80184fc:	0801de3c 	.word	0x0801de3c
 8018500:	0801dfe8 	.word	0x0801dfe8
 8018504:	0801deb4 	.word	0x0801deb4
 8018508:	0801dfdc 	.word	0x0801dfdc
 801850c:	2000ed44 	.word	0x2000ed44
 8018510:	0801e010 	.word	0x0801e010

08018514 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018514:	b580      	push	{r7, lr}
 8018516:	b08a      	sub	sp, #40	; 0x28
 8018518:	af02      	add	r7, sp, #8
 801851a:	60f8      	str	r0, [r7, #12]
 801851c:	60b9      	str	r1, [r7, #8]
 801851e:	607a      	str	r2, [r7, #4]
 8018520:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018522:	2300      	movs	r3, #0
 8018524:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018526:	68fb      	ldr	r3, [r7, #12]
 8018528:	2b00      	cmp	r3, #0
 801852a:	d106      	bne.n	801853a <etharp_raw+0x26>
 801852c:	4b3a      	ldr	r3, [pc, #232]	; (8018618 <etharp_raw+0x104>)
 801852e:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8018532:	493a      	ldr	r1, [pc, #232]	; (801861c <etharp_raw+0x108>)
 8018534:	483a      	ldr	r0, [pc, #232]	; (8018620 <etharp_raw+0x10c>)
 8018536:	f001 ff8f 	bl	801a458 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801853a:	2200      	movs	r2, #0
 801853c:	211c      	movs	r1, #28
 801853e:	2002      	movs	r0, #2
 8018540:	f7f6 fd78 	bl	800f034 <pbuf_alloc>
 8018544:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018546:	69bb      	ldr	r3, [r7, #24]
 8018548:	2b00      	cmp	r3, #0
 801854a:	d102      	bne.n	8018552 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801854c:	f04f 33ff 	mov.w	r3, #4294967295
 8018550:	e05d      	b.n	801860e <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018552:	69bb      	ldr	r3, [r7, #24]
 8018554:	895b      	ldrh	r3, [r3, #10]
 8018556:	2b1b      	cmp	r3, #27
 8018558:	d806      	bhi.n	8018568 <etharp_raw+0x54>
 801855a:	4b2f      	ldr	r3, [pc, #188]	; (8018618 <etharp_raw+0x104>)
 801855c:	f240 4263 	movw	r2, #1123	; 0x463
 8018560:	4930      	ldr	r1, [pc, #192]	; (8018624 <etharp_raw+0x110>)
 8018562:	482f      	ldr	r0, [pc, #188]	; (8018620 <etharp_raw+0x10c>)
 8018564:	f001 ff78 	bl	801a458 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8018568:	69bb      	ldr	r3, [r7, #24]
 801856a:	685b      	ldr	r3, [r3, #4]
 801856c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801856e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018570:	4618      	mov	r0, r3
 8018572:	f7f5 fed7 	bl	800e324 <lwip_htons>
 8018576:	4603      	mov	r3, r0
 8018578:	461a      	mov	r2, r3
 801857a:	697b      	ldr	r3, [r7, #20]
 801857c:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801857e:	68fb      	ldr	r3, [r7, #12]
 8018580:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018584:	2b06      	cmp	r3, #6
 8018586:	d006      	beq.n	8018596 <etharp_raw+0x82>
 8018588:	4b23      	ldr	r3, [pc, #140]	; (8018618 <etharp_raw+0x104>)
 801858a:	f240 426a 	movw	r2, #1130	; 0x46a
 801858e:	4926      	ldr	r1, [pc, #152]	; (8018628 <etharp_raw+0x114>)
 8018590:	4823      	ldr	r0, [pc, #140]	; (8018620 <etharp_raw+0x10c>)
 8018592:	f001 ff61 	bl	801a458 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8018596:	697b      	ldr	r3, [r7, #20]
 8018598:	3308      	adds	r3, #8
 801859a:	2206      	movs	r2, #6
 801859c:	6839      	ldr	r1, [r7, #0]
 801859e:	4618      	mov	r0, r3
 80185a0:	f001 feaf 	bl	801a302 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80185a4:	697b      	ldr	r3, [r7, #20]
 80185a6:	3312      	adds	r3, #18
 80185a8:	2206      	movs	r2, #6
 80185aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80185ac:	4618      	mov	r0, r3
 80185ae:	f001 fea8 	bl	801a302 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 80185b2:	697b      	ldr	r3, [r7, #20]
 80185b4:	330e      	adds	r3, #14
 80185b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80185b8:	6812      	ldr	r2, [r2, #0]
 80185ba:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80185bc:	697b      	ldr	r3, [r7, #20]
 80185be:	3318      	adds	r3, #24
 80185c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80185c2:	6812      	ldr	r2, [r2, #0]
 80185c4:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80185c6:	697b      	ldr	r3, [r7, #20]
 80185c8:	2200      	movs	r2, #0
 80185ca:	701a      	strb	r2, [r3, #0]
 80185cc:	2200      	movs	r2, #0
 80185ce:	f042 0201 	orr.w	r2, r2, #1
 80185d2:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80185d4:	697b      	ldr	r3, [r7, #20]
 80185d6:	2200      	movs	r2, #0
 80185d8:	f042 0208 	orr.w	r2, r2, #8
 80185dc:	709a      	strb	r2, [r3, #2]
 80185de:	2200      	movs	r2, #0
 80185e0:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80185e2:	697b      	ldr	r3, [r7, #20]
 80185e4:	2206      	movs	r2, #6
 80185e6:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80185e8:	697b      	ldr	r3, [r7, #20]
 80185ea:	2204      	movs	r2, #4
 80185ec:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80185ee:	f640 0306 	movw	r3, #2054	; 0x806
 80185f2:	9300      	str	r3, [sp, #0]
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	68ba      	ldr	r2, [r7, #8]
 80185f8:	69b9      	ldr	r1, [r7, #24]
 80185fa:	68f8      	ldr	r0, [r7, #12]
 80185fc:	f001 fb18 	bl	8019c30 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8018600:	69b8      	ldr	r0, [r7, #24]
 8018602:	f7f7 f88f 	bl	800f724 <pbuf_free>
  p = NULL;
 8018606:	2300      	movs	r3, #0
 8018608:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801860a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801860e:	4618      	mov	r0, r3
 8018610:	3720      	adds	r7, #32
 8018612:	46bd      	mov	sp, r7
 8018614:	bd80      	pop	{r7, pc}
 8018616:	bf00      	nop
 8018618:	0801de3c 	.word	0x0801de3c
 801861c:	0801df8c 	.word	0x0801df8c
 8018620:	0801deb4 	.word	0x0801deb4
 8018624:	0801e02c 	.word	0x0801e02c
 8018628:	0801e060 	.word	0x0801e060

0801862c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 801862c:	b580      	push	{r7, lr}
 801862e:	b088      	sub	sp, #32
 8018630:	af04      	add	r7, sp, #16
 8018632:	60f8      	str	r0, [r7, #12]
 8018634:	60b9      	str	r1, [r7, #8]
 8018636:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	f103 012d 	add.w	r1, r3, #45	; 0x2d
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801863e:	68fb      	ldr	r3, [r7, #12]
 8018640:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 8018644:	68fb      	ldr	r3, [r7, #12]
 8018646:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018648:	2201      	movs	r2, #1
 801864a:	9203      	str	r2, [sp, #12]
 801864c:	68ba      	ldr	r2, [r7, #8]
 801864e:	9202      	str	r2, [sp, #8]
 8018650:	4a06      	ldr	r2, [pc, #24]	; (801866c <etharp_request_dst+0x40>)
 8018652:	9201      	str	r2, [sp, #4]
 8018654:	9300      	str	r3, [sp, #0]
 8018656:	4603      	mov	r3, r0
 8018658:	687a      	ldr	r2, [r7, #4]
 801865a:	68f8      	ldr	r0, [r7, #12]
 801865c:	f7ff ff5a 	bl	8018514 <etharp_raw>
 8018660:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018662:	4618      	mov	r0, r3
 8018664:	3710      	adds	r7, #16
 8018666:	46bd      	mov	sp, r7
 8018668:	bd80      	pop	{r7, pc}
 801866a:	bf00      	nop
 801866c:	0801e620 	.word	0x0801e620

08018670 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018670:	b580      	push	{r7, lr}
 8018672:	b082      	sub	sp, #8
 8018674:	af00      	add	r7, sp, #0
 8018676:	6078      	str	r0, [r7, #4]
 8018678:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801867a:	4a05      	ldr	r2, [pc, #20]	; (8018690 <etharp_request+0x20>)
 801867c:	6839      	ldr	r1, [r7, #0]
 801867e:	6878      	ldr	r0, [r7, #4]
 8018680:	f7ff ffd4 	bl	801862c <etharp_request_dst>
 8018684:	4603      	mov	r3, r0
}
 8018686:	4618      	mov	r0, r3
 8018688:	3708      	adds	r7, #8
 801868a:	46bd      	mov	sp, r7
 801868c:	bd80      	pop	{r7, pc}
 801868e:	bf00      	nop
 8018690:	0801e618 	.word	0x0801e618

08018694 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018694:	b580      	push	{r7, lr}
 8018696:	b08e      	sub	sp, #56	; 0x38
 8018698:	af04      	add	r7, sp, #16
 801869a:	6078      	str	r0, [r7, #4]
 801869c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801869e:	4b7a      	ldr	r3, [pc, #488]	; (8018888 <icmp_input+0x1f4>)
 80186a0:	689b      	ldr	r3, [r3, #8]
 80186a2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 80186a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186a6:	781b      	ldrb	r3, [r3, #0]
 80186a8:	b29b      	uxth	r3, r3
 80186aa:	f003 030f 	and.w	r3, r3, #15
 80186ae:	b29b      	uxth	r3, r3
 80186b0:	009b      	lsls	r3, r3, #2
 80186b2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80186b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80186b6:	2b13      	cmp	r3, #19
 80186b8:	f240 80d1 	bls.w	801885e <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	895b      	ldrh	r3, [r3, #10]
 80186c0:	2b03      	cmp	r3, #3
 80186c2:	f240 80ce 	bls.w	8018862 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	685b      	ldr	r3, [r3, #4]
 80186ca:	781b      	ldrb	r3, [r3, #0]
 80186cc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 80186d0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	f000 80bb 	beq.w	8018850 <icmp_input+0x1bc>
 80186da:	2b08      	cmp	r3, #8
 80186dc:	f040 80bb 	bne.w	8018856 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 80186e0:	4b6a      	ldr	r3, [pc, #424]	; (801888c <icmp_input+0x1f8>)
 80186e2:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80186e4:	4b68      	ldr	r3, [pc, #416]	; (8018888 <icmp_input+0x1f4>)
 80186e6:	695b      	ldr	r3, [r3, #20]
 80186e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80186ec:	2be0      	cmp	r3, #224	; 0xe0
 80186ee:	f000 80bf 	beq.w	8018870 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80186f2:	4b65      	ldr	r3, [pc, #404]	; (8018888 <icmp_input+0x1f4>)
 80186f4:	695b      	ldr	r3, [r3, #20]
 80186f6:	4a64      	ldr	r2, [pc, #400]	; (8018888 <icmp_input+0x1f4>)
 80186f8:	6812      	ldr	r2, [r2, #0]
 80186fa:	4611      	mov	r1, r2
 80186fc:	4618      	mov	r0, r3
 80186fe:	f000 fbf1 	bl	8018ee4 <ip4_addr_isbroadcast_u32>
 8018702:	4603      	mov	r3, r0
 8018704:	2b00      	cmp	r3, #0
 8018706:	f040 80b5 	bne.w	8018874 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	891b      	ldrh	r3, [r3, #8]
 801870e:	2b07      	cmp	r3, #7
 8018710:	f240 80a9 	bls.w	8018866 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8018714:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018716:	330e      	adds	r3, #14
 8018718:	b29b      	uxth	r3, r3
 801871a:	b21b      	sxth	r3, r3
 801871c:	4619      	mov	r1, r3
 801871e:	6878      	ldr	r0, [r7, #4]
 8018720:	f7f6 ffdc 	bl	800f6dc <pbuf_header>
 8018724:	4603      	mov	r3, r0
 8018726:	2b00      	cmp	r3, #0
 8018728:	d046      	beq.n	80187b8 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	891a      	ldrh	r2, [r3, #8]
 801872e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018730:	4413      	add	r3, r2
 8018732:	b29b      	uxth	r3, r3
 8018734:	2200      	movs	r2, #0
 8018736:	4619      	mov	r1, r3
 8018738:	2002      	movs	r0, #2
 801873a:	f7f6 fc7b 	bl	800f034 <pbuf_alloc>
 801873e:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8018740:	69bb      	ldr	r3, [r7, #24]
 8018742:	2b00      	cmp	r3, #0
 8018744:	f000 8098 	beq.w	8018878 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8018748:	69bb      	ldr	r3, [r7, #24]
 801874a:	895b      	ldrh	r3, [r3, #10]
 801874c:	461a      	mov	r2, r3
 801874e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018750:	3308      	adds	r3, #8
 8018752:	429a      	cmp	r2, r3
 8018754:	d203      	bcs.n	801875e <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8018756:	69b8      	ldr	r0, [r7, #24]
 8018758:	f7f6 ffe4 	bl	800f724 <pbuf_free>
        goto icmperr;
 801875c:	e08d      	b.n	801887a <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 801875e:	69bb      	ldr	r3, [r7, #24]
 8018760:	685b      	ldr	r3, [r3, #4]
 8018762:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018764:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018766:	4618      	mov	r0, r3
 8018768:	f001 fdcb 	bl	801a302 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 801876c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801876e:	425b      	negs	r3, r3
 8018770:	b29b      	uxth	r3, r3
 8018772:	b21b      	sxth	r3, r3
 8018774:	4619      	mov	r1, r3
 8018776:	69b8      	ldr	r0, [r7, #24]
 8018778:	f7f6 ffb0 	bl	800f6dc <pbuf_header>
 801877c:	4603      	mov	r3, r0
 801877e:	2b00      	cmp	r3, #0
 8018780:	d009      	beq.n	8018796 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8018782:	4b43      	ldr	r3, [pc, #268]	; (8018890 <icmp_input+0x1fc>)
 8018784:	22af      	movs	r2, #175	; 0xaf
 8018786:	4943      	ldr	r1, [pc, #268]	; (8018894 <icmp_input+0x200>)
 8018788:	4843      	ldr	r0, [pc, #268]	; (8018898 <icmp_input+0x204>)
 801878a:	f001 fe65 	bl	801a458 <iprintf>
        pbuf_free(r);
 801878e:	69b8      	ldr	r0, [r7, #24]
 8018790:	f7f6 ffc8 	bl	800f724 <pbuf_free>
        goto icmperr;
 8018794:	e071      	b.n	801887a <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8018796:	6879      	ldr	r1, [r7, #4]
 8018798:	69b8      	ldr	r0, [r7, #24]
 801879a:	f7f7 f901 	bl	800f9a0 <pbuf_copy>
 801879e:	4603      	mov	r3, r0
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	d003      	beq.n	80187ac <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 80187a4:	69b8      	ldr	r0, [r7, #24]
 80187a6:	f7f6 ffbd 	bl	800f724 <pbuf_free>
        goto icmperr;
 80187aa:	e066      	b.n	801887a <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 80187ac:	6878      	ldr	r0, [r7, #4]
 80187ae:	f7f6 ffb9 	bl	800f724 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 80187b2:	69bb      	ldr	r3, [r7, #24]
 80187b4:	607b      	str	r3, [r7, #4]
 80187b6:	e015      	b.n	80187e4 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80187b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80187ba:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 80187be:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80187c2:	33f2      	adds	r3, #242	; 0xf2
 80187c4:	b29b      	uxth	r3, r3
 80187c6:	b21b      	sxth	r3, r3
 80187c8:	4619      	mov	r1, r3
 80187ca:	6878      	ldr	r0, [r7, #4]
 80187cc:	f7f6 ff86 	bl	800f6dc <pbuf_header>
 80187d0:	4603      	mov	r3, r0
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d006      	beq.n	80187e4 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80187d6:	4b2e      	ldr	r3, [pc, #184]	; (8018890 <icmp_input+0x1fc>)
 80187d8:	22c0      	movs	r2, #192	; 0xc0
 80187da:	4930      	ldr	r1, [pc, #192]	; (801889c <icmp_input+0x208>)
 80187dc:	482e      	ldr	r0, [pc, #184]	; (8018898 <icmp_input+0x204>)
 80187de:	f001 fe3b 	bl	801a458 <iprintf>
        goto icmperr;
 80187e2:	e04a      	b.n	801887a <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	685b      	ldr	r3, [r3, #4]
 80187e8:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 80187ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80187ee:	4619      	mov	r1, r3
 80187f0:	6878      	ldr	r0, [r7, #4]
 80187f2:	f7f6 ff73 	bl	800f6dc <pbuf_header>
 80187f6:	4603      	mov	r3, r0
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d12b      	bne.n	8018854 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	685b      	ldr	r3, [r3, #4]
 8018800:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 8018802:	69fb      	ldr	r3, [r7, #28]
 8018804:	681a      	ldr	r2, [r3, #0]
 8018806:	693b      	ldr	r3, [r7, #16]
 8018808:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801880a:	4b1f      	ldr	r3, [pc, #124]	; (8018888 <icmp_input+0x1f4>)
 801880c:	691a      	ldr	r2, [r3, #16]
 801880e:	693b      	ldr	r3, [r7, #16]
 8018810:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8018812:	697b      	ldr	r3, [r7, #20]
 8018814:	2200      	movs	r2, #0
 8018816:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8018818:	697b      	ldr	r3, [r7, #20]
 801881a:	2200      	movs	r2, #0
 801881c:	709a      	strb	r2, [r3, #2]
 801881e:	2200      	movs	r2, #0
 8018820:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8018822:	693b      	ldr	r3, [r7, #16]
 8018824:	22ff      	movs	r2, #255	; 0xff
 8018826:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8018828:	693b      	ldr	r3, [r7, #16]
 801882a:	2200      	movs	r2, #0
 801882c:	729a      	strb	r2, [r3, #10]
 801882e:	2200      	movs	r2, #0
 8018830:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8018832:	683b      	ldr	r3, [r7, #0]
 8018834:	9302      	str	r3, [sp, #8]
 8018836:	2301      	movs	r3, #1
 8018838:	9301      	str	r3, [sp, #4]
 801883a:	2300      	movs	r3, #0
 801883c:	9300      	str	r3, [sp, #0]
 801883e:	23ff      	movs	r3, #255	; 0xff
 8018840:	2200      	movs	r2, #0
 8018842:	69f9      	ldr	r1, [r7, #28]
 8018844:	6878      	ldr	r0, [r7, #4]
 8018846:	f000 fa7b 	bl	8018d40 <ip4_output_if>
 801884a:	4603      	mov	r3, r0
 801884c:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 801884e:	e001      	b.n	8018854 <icmp_input+0x1c0>
    break;
 8018850:	bf00      	nop
 8018852:	e000      	b.n	8018856 <icmp_input+0x1c2>
    break;
 8018854:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8018856:	6878      	ldr	r0, [r7, #4]
 8018858:	f7f6 ff64 	bl	800f724 <pbuf_free>
  return;
 801885c:	e011      	b.n	8018882 <icmp_input+0x1ee>
    goto lenerr;
 801885e:	bf00      	nop
 8018860:	e002      	b.n	8018868 <icmp_input+0x1d4>
    goto lenerr;
 8018862:	bf00      	nop
 8018864:	e000      	b.n	8018868 <icmp_input+0x1d4>
      goto lenerr;
 8018866:	bf00      	nop
lenerr:
  pbuf_free(p);
 8018868:	6878      	ldr	r0, [r7, #4]
 801886a:	f7f6 ff5b 	bl	800f724 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801886e:	e008      	b.n	8018882 <icmp_input+0x1ee>
      goto icmperr;
 8018870:	bf00      	nop
 8018872:	e002      	b.n	801887a <icmp_input+0x1e6>
      goto icmperr;
 8018874:	bf00      	nop
 8018876:	e000      	b.n	801887a <icmp_input+0x1e6>
        goto icmperr;
 8018878:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801887a:	6878      	ldr	r0, [r7, #4]
 801887c:	f7f6 ff52 	bl	800f724 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018880:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8018882:	3728      	adds	r7, #40	; 0x28
 8018884:	46bd      	mov	sp, r7
 8018886:	bd80      	pop	{r7, pc}
 8018888:	20009290 	.word	0x20009290
 801888c:	200092a4 	.word	0x200092a4
 8018890:	0801e0a4 	.word	0x0801e0a4
 8018894:	0801e0dc 	.word	0x0801e0dc
 8018898:	0801e114 	.word	0x0801e114
 801889c:	0801e13c 	.word	0x0801e13c

080188a0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80188a0:	b580      	push	{r7, lr}
 80188a2:	b082      	sub	sp, #8
 80188a4:	af00      	add	r7, sp, #0
 80188a6:	6078      	str	r0, [r7, #4]
 80188a8:	460b      	mov	r3, r1
 80188aa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80188ac:	78fb      	ldrb	r3, [r7, #3]
 80188ae:	461a      	mov	r2, r3
 80188b0:	2103      	movs	r1, #3
 80188b2:	6878      	ldr	r0, [r7, #4]
 80188b4:	f000 f814 	bl	80188e0 <icmp_send_response>
}
 80188b8:	bf00      	nop
 80188ba:	3708      	adds	r7, #8
 80188bc:	46bd      	mov	sp, r7
 80188be:	bd80      	pop	{r7, pc}

080188c0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80188c0:	b580      	push	{r7, lr}
 80188c2:	b082      	sub	sp, #8
 80188c4:	af00      	add	r7, sp, #0
 80188c6:	6078      	str	r0, [r7, #4]
 80188c8:	460b      	mov	r3, r1
 80188ca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80188cc:	78fb      	ldrb	r3, [r7, #3]
 80188ce:	461a      	mov	r2, r3
 80188d0:	210b      	movs	r1, #11
 80188d2:	6878      	ldr	r0, [r7, #4]
 80188d4:	f000 f804 	bl	80188e0 <icmp_send_response>
}
 80188d8:	bf00      	nop
 80188da:	3708      	adds	r7, #8
 80188dc:	46bd      	mov	sp, r7
 80188de:	bd80      	pop	{r7, pc}

080188e0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80188e0:	b580      	push	{r7, lr}
 80188e2:	b08c      	sub	sp, #48	; 0x30
 80188e4:	af04      	add	r7, sp, #16
 80188e6:	6078      	str	r0, [r7, #4]
 80188e8:	460b      	mov	r3, r1
 80188ea:	70fb      	strb	r3, [r7, #3]
 80188ec:	4613      	mov	r3, r2
 80188ee:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80188f0:	2200      	movs	r2, #0
 80188f2:	2124      	movs	r1, #36	; 0x24
 80188f4:	2001      	movs	r0, #1
 80188f6:	f7f6 fb9d 	bl	800f034 <pbuf_alloc>
 80188fa:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80188fc:	69fb      	ldr	r3, [r7, #28]
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d04c      	beq.n	801899c <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8018902:	69fb      	ldr	r3, [r7, #28]
 8018904:	895b      	ldrh	r3, [r3, #10]
 8018906:	2b23      	cmp	r3, #35	; 0x23
 8018908:	d806      	bhi.n	8018918 <icmp_send_response+0x38>
 801890a:	4b26      	ldr	r3, [pc, #152]	; (80189a4 <icmp_send_response+0xc4>)
 801890c:	f240 1261 	movw	r2, #353	; 0x161
 8018910:	4925      	ldr	r1, [pc, #148]	; (80189a8 <icmp_send_response+0xc8>)
 8018912:	4826      	ldr	r0, [pc, #152]	; (80189ac <icmp_send_response+0xcc>)
 8018914:	f001 fda0 	bl	801a458 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	685b      	ldr	r3, [r3, #4]
 801891c:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801891e:	69fb      	ldr	r3, [r7, #28]
 8018920:	685b      	ldr	r3, [r3, #4]
 8018922:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8018924:	697b      	ldr	r3, [r7, #20]
 8018926:	78fa      	ldrb	r2, [r7, #3]
 8018928:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801892a:	697b      	ldr	r3, [r7, #20]
 801892c:	78ba      	ldrb	r2, [r7, #2]
 801892e:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8018930:	697b      	ldr	r3, [r7, #20]
 8018932:	2200      	movs	r2, #0
 8018934:	711a      	strb	r2, [r3, #4]
 8018936:	2200      	movs	r2, #0
 8018938:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801893a:	697b      	ldr	r3, [r7, #20]
 801893c:	2200      	movs	r2, #0
 801893e:	719a      	strb	r2, [r3, #6]
 8018940:	2200      	movs	r2, #0
 8018942:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8018944:	69fb      	ldr	r3, [r7, #28]
 8018946:	685b      	ldr	r3, [r3, #4]
 8018948:	f103 0008 	add.w	r0, r3, #8
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	685b      	ldr	r3, [r3, #4]
 8018950:	221c      	movs	r2, #28
 8018952:	4619      	mov	r1, r3
 8018954:	f001 fcd5 	bl	801a302 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8018958:	69bb      	ldr	r3, [r7, #24]
 801895a:	68db      	ldr	r3, [r3, #12]
 801895c:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 801895e:	f107 030c 	add.w	r3, r7, #12
 8018962:	4618      	mov	r0, r3
 8018964:	f000 f824 	bl	80189b0 <ip4_route>
 8018968:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801896a:	693b      	ldr	r3, [r7, #16]
 801896c:	2b00      	cmp	r3, #0
 801896e:	d011      	beq.n	8018994 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8018970:	697b      	ldr	r3, [r7, #20]
 8018972:	2200      	movs	r2, #0
 8018974:	709a      	strb	r2, [r3, #2]
 8018976:	2200      	movs	r2, #0
 8018978:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801897a:	f107 020c 	add.w	r2, r7, #12
 801897e:	693b      	ldr	r3, [r7, #16]
 8018980:	9302      	str	r3, [sp, #8]
 8018982:	2301      	movs	r3, #1
 8018984:	9301      	str	r3, [sp, #4]
 8018986:	2300      	movs	r3, #0
 8018988:	9300      	str	r3, [sp, #0]
 801898a:	23ff      	movs	r3, #255	; 0xff
 801898c:	2100      	movs	r1, #0
 801898e:	69f8      	ldr	r0, [r7, #28]
 8018990:	f000 f9d6 	bl	8018d40 <ip4_output_if>
  }
  pbuf_free(q);
 8018994:	69f8      	ldr	r0, [r7, #28]
 8018996:	f7f6 fec5 	bl	800f724 <pbuf_free>
 801899a:	e000      	b.n	801899e <icmp_send_response+0xbe>
    return;
 801899c:	bf00      	nop
}
 801899e:	3720      	adds	r7, #32
 80189a0:	46bd      	mov	sp, r7
 80189a2:	bd80      	pop	{r7, pc}
 80189a4:	0801e0a4 	.word	0x0801e0a4
 80189a8:	0801e170 	.word	0x0801e170
 80189ac:	0801e114 	.word	0x0801e114

080189b0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80189b0:	b480      	push	{r7}
 80189b2:	b085      	sub	sp, #20
 80189b4:	af00      	add	r7, sp, #0
 80189b6:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80189b8:	4b30      	ldr	r3, [pc, #192]	; (8018a7c <ip4_route+0xcc>)
 80189ba:	681b      	ldr	r3, [r3, #0]
 80189bc:	60fb      	str	r3, [r7, #12]
 80189be:	e036      	b.n	8018a2e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80189c0:	68fb      	ldr	r3, [r7, #12]
 80189c2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80189c6:	f003 0301 	and.w	r3, r3, #1
 80189ca:	b2db      	uxtb	r3, r3
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d02b      	beq.n	8018a28 <ip4_route+0x78>
 80189d0:	68fb      	ldr	r3, [r7, #12]
 80189d2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80189d6:	089b      	lsrs	r3, r3, #2
 80189d8:	f003 0301 	and.w	r3, r3, #1
 80189dc:	b2db      	uxtb	r3, r3
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d022      	beq.n	8018a28 <ip4_route+0x78>
 80189e2:	68fb      	ldr	r3, [r7, #12]
 80189e4:	3304      	adds	r3, #4
 80189e6:	681b      	ldr	r3, [r3, #0]
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	d01d      	beq.n	8018a28 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	681a      	ldr	r2, [r3, #0]
 80189f0:	68fb      	ldr	r3, [r7, #12]
 80189f2:	3304      	adds	r3, #4
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	405a      	eors	r2, r3
 80189f8:	68fb      	ldr	r3, [r7, #12]
 80189fa:	3308      	adds	r3, #8
 80189fc:	681b      	ldr	r3, [r3, #0]
 80189fe:	4013      	ands	r3, r2
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d101      	bne.n	8018a08 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018a04:	68fb      	ldr	r3, [r7, #12]
 8018a06:	e033      	b.n	8018a70 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018a08:	68fb      	ldr	r3, [r7, #12]
 8018a0a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8018a0e:	f003 0302 	and.w	r3, r3, #2
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d108      	bne.n	8018a28 <ip4_route+0x78>
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	681a      	ldr	r2, [r3, #0]
 8018a1a:	68fb      	ldr	r3, [r7, #12]
 8018a1c:	330c      	adds	r3, #12
 8018a1e:	681b      	ldr	r3, [r3, #0]
 8018a20:	429a      	cmp	r2, r3
 8018a22:	d101      	bne.n	8018a28 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018a24:	68fb      	ldr	r3, [r7, #12]
 8018a26:	e023      	b.n	8018a70 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8018a28:	68fb      	ldr	r3, [r7, #12]
 8018a2a:	681b      	ldr	r3, [r3, #0]
 8018a2c:	60fb      	str	r3, [r7, #12]
 8018a2e:	68fb      	ldr	r3, [r7, #12]
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d1c5      	bne.n	80189c0 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018a34:	4b12      	ldr	r3, [pc, #72]	; (8018a80 <ip4_route+0xd0>)
 8018a36:	681b      	ldr	r3, [r3, #0]
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d015      	beq.n	8018a68 <ip4_route+0xb8>
 8018a3c:	4b10      	ldr	r3, [pc, #64]	; (8018a80 <ip4_route+0xd0>)
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8018a44:	f003 0301 	and.w	r3, r3, #1
 8018a48:	2b00      	cmp	r3, #0
 8018a4a:	d00d      	beq.n	8018a68 <ip4_route+0xb8>
 8018a4c:	4b0c      	ldr	r3, [pc, #48]	; (8018a80 <ip4_route+0xd0>)
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8018a54:	f003 0304 	and.w	r3, r3, #4
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	d005      	beq.n	8018a68 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8018a5c:	4b08      	ldr	r3, [pc, #32]	; (8018a80 <ip4_route+0xd0>)
 8018a5e:	681b      	ldr	r3, [r3, #0]
 8018a60:	3304      	adds	r3, #4
 8018a62:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d101      	bne.n	8018a6c <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8018a68:	2300      	movs	r3, #0
 8018a6a:	e001      	b.n	8018a70 <ip4_route+0xc0>
  }

  return netif_default;
 8018a6c:	4b04      	ldr	r3, [pc, #16]	; (8018a80 <ip4_route+0xd0>)
 8018a6e:	681b      	ldr	r3, [r3, #0]
}
 8018a70:	4618      	mov	r0, r3
 8018a72:	3714      	adds	r7, #20
 8018a74:	46bd      	mov	sp, r7
 8018a76:	bc80      	pop	{r7}
 8018a78:	4770      	bx	lr
 8018a7a:	bf00      	nop
 8018a7c:	2000ebb4 	.word	0x2000ebb4
 8018a80:	2000ebb8 	.word	0x2000ebb8

08018a84 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8018a84:	b580      	push	{r7, lr}
 8018a86:	b088      	sub	sp, #32
 8018a88:	af00      	add	r7, sp, #0
 8018a8a:	6078      	str	r0, [r7, #4]
 8018a8c:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8018a8e:	2301      	movs	r3, #1
 8018a90:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	685b      	ldr	r3, [r3, #4]
 8018a96:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8018a98:	69fb      	ldr	r3, [r7, #28]
 8018a9a:	781b      	ldrb	r3, [r3, #0]
 8018a9c:	091b      	lsrs	r3, r3, #4
 8018a9e:	b2db      	uxtb	r3, r3
 8018aa0:	2b04      	cmp	r3, #4
 8018aa2:	d004      	beq.n	8018aae <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018aa4:	6878      	ldr	r0, [r7, #4]
 8018aa6:	f7f6 fe3d 	bl	800f724 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8018aaa:	2300      	movs	r3, #0
 8018aac:	e140      	b.n	8018d30 <ip4_input+0x2ac>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8018aae:	69fb      	ldr	r3, [r7, #28]
 8018ab0:	781b      	ldrb	r3, [r3, #0]
 8018ab2:	b29b      	uxth	r3, r3
 8018ab4:	f003 030f 	and.w	r3, r3, #15
 8018ab8:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8018aba:	89fb      	ldrh	r3, [r7, #14]
 8018abc:	009b      	lsls	r3, r3, #2
 8018abe:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8018ac0:	69fb      	ldr	r3, [r7, #28]
 8018ac2:	885b      	ldrh	r3, [r3, #2]
 8018ac4:	b29b      	uxth	r3, r3
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	f7f5 fc2c 	bl	800e324 <lwip_htons>
 8018acc:	4603      	mov	r3, r0
 8018ace:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	891b      	ldrh	r3, [r3, #8]
 8018ad4:	89ba      	ldrh	r2, [r7, #12]
 8018ad6:	429a      	cmp	r2, r3
 8018ad8:	d204      	bcs.n	8018ae4 <ip4_input+0x60>
    pbuf_realloc(p, iphdr_len);
 8018ada:	89bb      	ldrh	r3, [r7, #12]
 8018adc:	4619      	mov	r1, r3
 8018ade:	6878      	ldr	r0, [r7, #4]
 8018ae0:	f7f6 fcac 	bl	800f43c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	895b      	ldrh	r3, [r3, #10]
 8018ae8:	89fa      	ldrh	r2, [r7, #14]
 8018aea:	429a      	cmp	r2, r3
 8018aec:	d807      	bhi.n	8018afe <ip4_input+0x7a>
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	891b      	ldrh	r3, [r3, #8]
 8018af2:	89ba      	ldrh	r2, [r7, #12]
 8018af4:	429a      	cmp	r2, r3
 8018af6:	d802      	bhi.n	8018afe <ip4_input+0x7a>
 8018af8:	89fb      	ldrh	r3, [r7, #14]
 8018afa:	2b13      	cmp	r3, #19
 8018afc:	d804      	bhi.n	8018b08 <ip4_input+0x84>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8018afe:	6878      	ldr	r0, [r7, #4]
 8018b00:	f7f6 fe10 	bl	800f724 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8018b04:	2300      	movs	r3, #0
 8018b06:	e113      	b.n	8018d30 <ip4_input+0x2ac>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8018b08:	69fb      	ldr	r3, [r7, #28]
 8018b0a:	691b      	ldr	r3, [r3, #16]
 8018b0c:	4a8a      	ldr	r2, [pc, #552]	; (8018d38 <ip4_input+0x2b4>)
 8018b0e:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8018b10:	69fb      	ldr	r3, [r7, #28]
 8018b12:	68db      	ldr	r3, [r3, #12]
 8018b14:	4a88      	ldr	r2, [pc, #544]	; (8018d38 <ip4_input+0x2b4>)
 8018b16:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018b18:	4b87      	ldr	r3, [pc, #540]	; (8018d38 <ip4_input+0x2b4>)
 8018b1a:	695b      	ldr	r3, [r3, #20]
 8018b1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018b20:	2be0      	cmp	r3, #224	; 0xe0
 8018b22:	d112      	bne.n	8018b4a <ip4_input+0xc6>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8018b24:	683b      	ldr	r3, [r7, #0]
 8018b26:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8018b2a:	f003 0301 	and.w	r3, r3, #1
 8018b2e:	b2db      	uxtb	r3, r3
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	d007      	beq.n	8018b44 <ip4_input+0xc0>
 8018b34:	683b      	ldr	r3, [r7, #0]
 8018b36:	3304      	adds	r3, #4
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d002      	beq.n	8018b44 <ip4_input+0xc0>
      netif = inp;
 8018b3e:	683b      	ldr	r3, [r7, #0]
 8018b40:	61bb      	str	r3, [r7, #24]
 8018b42:	e041      	b.n	8018bc8 <ip4_input+0x144>
    } else {
      netif = NULL;
 8018b44:	2300      	movs	r3, #0
 8018b46:	61bb      	str	r3, [r7, #24]
 8018b48:	e03e      	b.n	8018bc8 <ip4_input+0x144>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8018b4a:	2301      	movs	r3, #1
 8018b4c:	613b      	str	r3, [r7, #16]
    netif = inp;
 8018b4e:	683b      	ldr	r3, [r7, #0]
 8018b50:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8018b52:	69bb      	ldr	r3, [r7, #24]
 8018b54:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8018b58:	f003 0301 	and.w	r3, r3, #1
 8018b5c:	b2db      	uxtb	r3, r3
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d014      	beq.n	8018b8c <ip4_input+0x108>
 8018b62:	69bb      	ldr	r3, [r7, #24]
 8018b64:	3304      	adds	r3, #4
 8018b66:	681b      	ldr	r3, [r3, #0]
 8018b68:	2b00      	cmp	r3, #0
 8018b6a:	d00f      	beq.n	8018b8c <ip4_input+0x108>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018b6c:	4b72      	ldr	r3, [pc, #456]	; (8018d38 <ip4_input+0x2b4>)
 8018b6e:	695a      	ldr	r2, [r3, #20]
 8018b70:	69bb      	ldr	r3, [r7, #24]
 8018b72:	3304      	adds	r3, #4
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	429a      	cmp	r2, r3
 8018b78:	d026      	beq.n	8018bc8 <ip4_input+0x144>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8018b7a:	4b6f      	ldr	r3, [pc, #444]	; (8018d38 <ip4_input+0x2b4>)
 8018b7c:	695b      	ldr	r3, [r3, #20]
 8018b7e:	69b9      	ldr	r1, [r7, #24]
 8018b80:	4618      	mov	r0, r3
 8018b82:	f000 f9af 	bl	8018ee4 <ip4_addr_isbroadcast_u32>
 8018b86:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	d11d      	bne.n	8018bc8 <ip4_input+0x144>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8018b8c:	693b      	ldr	r3, [r7, #16]
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d00d      	beq.n	8018bae <ip4_input+0x12a>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8018b92:	4b69      	ldr	r3, [pc, #420]	; (8018d38 <ip4_input+0x2b4>)
 8018b94:	695b      	ldr	r3, [r3, #20]
 8018b96:	b2db      	uxtb	r3, r3
 8018b98:	2b7f      	cmp	r3, #127	; 0x7f
 8018b9a:	d102      	bne.n	8018ba2 <ip4_input+0x11e>
          netif = NULL;
 8018b9c:	2300      	movs	r3, #0
 8018b9e:	61bb      	str	r3, [r7, #24]
          break;
 8018ba0:	e012      	b.n	8018bc8 <ip4_input+0x144>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8018ba2:	2300      	movs	r3, #0
 8018ba4:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 8018ba6:	4b65      	ldr	r3, [pc, #404]	; (8018d3c <ip4_input+0x2b8>)
 8018ba8:	681b      	ldr	r3, [r3, #0]
 8018baa:	61bb      	str	r3, [r7, #24]
 8018bac:	e002      	b.n	8018bb4 <ip4_input+0x130>
      } else {
        netif = netif->next;
 8018bae:	69bb      	ldr	r3, [r7, #24]
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 8018bb4:	69ba      	ldr	r2, [r7, #24]
 8018bb6:	683b      	ldr	r3, [r7, #0]
 8018bb8:	429a      	cmp	r2, r3
 8018bba:	d102      	bne.n	8018bc2 <ip4_input+0x13e>
        netif = netif->next;
 8018bbc:	69bb      	ldr	r3, [r7, #24]
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 8018bc2:	69bb      	ldr	r3, [r7, #24]
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	d1c4      	bne.n	8018b52 <ip4_input+0xce>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8018bc8:	69bb      	ldr	r3, [r7, #24]
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	d111      	bne.n	8018bf2 <ip4_input+0x16e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8018bce:	69fb      	ldr	r3, [r7, #28]
 8018bd0:	7a5b      	ldrb	r3, [r3, #9]
 8018bd2:	2b11      	cmp	r3, #17
 8018bd4:	d10d      	bne.n	8018bf2 <ip4_input+0x16e>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 8018bd6:	89fb      	ldrh	r3, [r7, #14]
 8018bd8:	69fa      	ldr	r2, [r7, #28]
 8018bda:	4413      	add	r3, r2
 8018bdc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8018bde:	68bb      	ldr	r3, [r7, #8]
 8018be0:	885b      	ldrh	r3, [r3, #2]
 8018be2:	b29b      	uxth	r3, r3
 8018be4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8018be8:	d103      	bne.n	8018bf2 <ip4_input+0x16e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8018bea:	683b      	ldr	r3, [r7, #0]
 8018bec:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8018bee:	2300      	movs	r3, #0
 8018bf0:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8018bf2:	697b      	ldr	r3, [r7, #20]
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	d017      	beq.n	8018c28 <ip4_input+0x1a4>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8018bf8:	4b4f      	ldr	r3, [pc, #316]	; (8018d38 <ip4_input+0x2b4>)
 8018bfa:	691b      	ldr	r3, [r3, #16]
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	d013      	beq.n	8018c28 <ip4_input+0x1a4>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018c00:	4b4d      	ldr	r3, [pc, #308]	; (8018d38 <ip4_input+0x2b4>)
 8018c02:	691b      	ldr	r3, [r3, #16]
 8018c04:	6839      	ldr	r1, [r7, #0]
 8018c06:	4618      	mov	r0, r3
 8018c08:	f000 f96c 	bl	8018ee4 <ip4_addr_isbroadcast_u32>
 8018c0c:	4603      	mov	r3, r0
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d105      	bne.n	8018c1e <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018c12:	4b49      	ldr	r3, [pc, #292]	; (8018d38 <ip4_input+0x2b4>)
 8018c14:	691b      	ldr	r3, [r3, #16]
 8018c16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018c1a:	2be0      	cmp	r3, #224	; 0xe0
 8018c1c:	d104      	bne.n	8018c28 <ip4_input+0x1a4>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018c1e:	6878      	ldr	r0, [r7, #4]
 8018c20:	f7f6 fd80 	bl	800f724 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018c24:	2300      	movs	r3, #0
 8018c26:	e083      	b.n	8018d30 <ip4_input+0x2ac>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8018c28:	69bb      	ldr	r3, [r7, #24]
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d104      	bne.n	8018c38 <ip4_input+0x1b4>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8018c2e:	6878      	ldr	r0, [r7, #4]
 8018c30:	f7f6 fd78 	bl	800f724 <pbuf_free>
    return ERR_OK;
 8018c34:	2300      	movs	r3, #0
 8018c36:	e07b      	b.n	8018d30 <ip4_input+0x2ac>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8018c38:	69fb      	ldr	r3, [r7, #28]
 8018c3a:	88db      	ldrh	r3, [r3, #6]
 8018c3c:	b29b      	uxth	r3, r3
 8018c3e:	461a      	mov	r2, r3
 8018c40:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8018c44:	4013      	ands	r3, r2
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d00b      	beq.n	8018c62 <ip4_input+0x1de>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8018c4a:	6878      	ldr	r0, [r7, #4]
 8018c4c:	f000 fc8e 	bl	801956c <ip4_reass>
 8018c50:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d101      	bne.n	8018c5c <ip4_input+0x1d8>
      return ERR_OK;
 8018c58:	2300      	movs	r3, #0
 8018c5a:	e069      	b.n	8018d30 <ip4_input+0x2ac>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	685b      	ldr	r3, [r3, #4]
 8018c60:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8018c62:	4a35      	ldr	r2, [pc, #212]	; (8018d38 <ip4_input+0x2b4>)
 8018c64:	69bb      	ldr	r3, [r7, #24]
 8018c66:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8018c68:	4a33      	ldr	r2, [pc, #204]	; (8018d38 <ip4_input+0x2b4>)
 8018c6a:	683b      	ldr	r3, [r7, #0]
 8018c6c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8018c6e:	4a32      	ldr	r2, [pc, #200]	; (8018d38 <ip4_input+0x2b4>)
 8018c70:	69fb      	ldr	r3, [r7, #28]
 8018c72:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8018c74:	69fb      	ldr	r3, [r7, #28]
 8018c76:	781b      	ldrb	r3, [r3, #0]
 8018c78:	b29b      	uxth	r3, r3
 8018c7a:	f003 030f 	and.w	r3, r3, #15
 8018c7e:	b29b      	uxth	r3, r3
 8018c80:	009b      	lsls	r3, r3, #2
 8018c82:	b29a      	uxth	r2, r3
 8018c84:	4b2c      	ldr	r3, [pc, #176]	; (8018d38 <ip4_input+0x2b4>)
 8018c86:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8018c88:	89fb      	ldrh	r3, [r7, #14]
 8018c8a:	425b      	negs	r3, r3
 8018c8c:	b29b      	uxth	r3, r3
 8018c8e:	b21b      	sxth	r3, r3
 8018c90:	4619      	mov	r1, r3
 8018c92:	6878      	ldr	r0, [r7, #4]
 8018c94:	f7f6 fd22 	bl	800f6dc <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8018c98:	69fb      	ldr	r3, [r7, #28]
 8018c9a:	7a5b      	ldrb	r3, [r3, #9]
 8018c9c:	2b11      	cmp	r3, #17
 8018c9e:	d006      	beq.n	8018cae <ip4_input+0x22a>
 8018ca0:	2b11      	cmp	r3, #17
 8018ca2:	dc13      	bgt.n	8018ccc <ip4_input+0x248>
 8018ca4:	2b01      	cmp	r3, #1
 8018ca6:	d00c      	beq.n	8018cc2 <ip4_input+0x23e>
 8018ca8:	2b06      	cmp	r3, #6
 8018caa:	d005      	beq.n	8018cb8 <ip4_input+0x234>
 8018cac:	e00e      	b.n	8018ccc <ip4_input+0x248>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 8018cae:	6839      	ldr	r1, [r7, #0]
 8018cb0:	6878      	ldr	r0, [r7, #4]
 8018cb2:	f7fc fbd7 	bl	8015464 <udp_input>
      break;
 8018cb6:	e028      	b.n	8018d0a <ip4_input+0x286>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8018cb8:	6839      	ldr	r1, [r7, #0]
 8018cba:	6878      	ldr	r0, [r7, #4]
 8018cbc:	f7f8 fc0c 	bl	80114d8 <tcp_input>
      break;
 8018cc0:	e023      	b.n	8018d0a <ip4_input+0x286>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 8018cc2:	6839      	ldr	r1, [r7, #0]
 8018cc4:	6878      	ldr	r0, [r7, #4]
 8018cc6:	f7ff fce5 	bl	8018694 <icmp_input>
      break;
 8018cca:	e01e      	b.n	8018d0a <ip4_input+0x286>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018ccc:	4b1a      	ldr	r3, [pc, #104]	; (8018d38 <ip4_input+0x2b4>)
 8018cce:	695b      	ldr	r3, [r3, #20]
 8018cd0:	69b9      	ldr	r1, [r7, #24]
 8018cd2:	4618      	mov	r0, r3
 8018cd4:	f000 f906 	bl	8018ee4 <ip4_addr_isbroadcast_u32>
 8018cd8:	4603      	mov	r3, r0
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	d112      	bne.n	8018d04 <ip4_input+0x280>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018cde:	4b16      	ldr	r3, [pc, #88]	; (8018d38 <ip4_input+0x2b4>)
 8018ce0:	695b      	ldr	r3, [r3, #20]
 8018ce2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018ce6:	2be0      	cmp	r3, #224	; 0xe0
 8018ce8:	d00c      	beq.n	8018d04 <ip4_input+0x280>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8018cea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8018cee:	4619      	mov	r1, r3
 8018cf0:	6878      	ldr	r0, [r7, #4]
 8018cf2:	f7f6 fd05 	bl	800f700 <pbuf_header_force>
        p->payload = iphdr;
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	69fa      	ldr	r2, [r7, #28]
 8018cfa:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018cfc:	2102      	movs	r1, #2
 8018cfe:	6878      	ldr	r0, [r7, #4]
 8018d00:	f7ff fdce 	bl	80188a0 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8018d04:	6878      	ldr	r0, [r7, #4]
 8018d06:	f7f6 fd0d 	bl	800f724 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018d0a:	4b0b      	ldr	r3, [pc, #44]	; (8018d38 <ip4_input+0x2b4>)
 8018d0c:	2200      	movs	r2, #0
 8018d0e:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8018d10:	4b09      	ldr	r3, [pc, #36]	; (8018d38 <ip4_input+0x2b4>)
 8018d12:	2200      	movs	r2, #0
 8018d14:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018d16:	4b08      	ldr	r3, [pc, #32]	; (8018d38 <ip4_input+0x2b4>)
 8018d18:	2200      	movs	r2, #0
 8018d1a:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018d1c:	4b06      	ldr	r3, [pc, #24]	; (8018d38 <ip4_input+0x2b4>)
 8018d1e:	2200      	movs	r2, #0
 8018d20:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8018d22:	4b05      	ldr	r3, [pc, #20]	; (8018d38 <ip4_input+0x2b4>)
 8018d24:	2200      	movs	r2, #0
 8018d26:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8018d28:	4b03      	ldr	r3, [pc, #12]	; (8018d38 <ip4_input+0x2b4>)
 8018d2a:	2200      	movs	r2, #0
 8018d2c:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018d2e:	2300      	movs	r3, #0
}
 8018d30:	4618      	mov	r0, r3
 8018d32:	3720      	adds	r7, #32
 8018d34:	46bd      	mov	sp, r7
 8018d36:	bd80      	pop	{r7, pc}
 8018d38:	20009290 	.word	0x20009290
 8018d3c:	2000ebb4 	.word	0x2000ebb4

08018d40 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8018d40:	b580      	push	{r7, lr}
 8018d42:	b08a      	sub	sp, #40	; 0x28
 8018d44:	af04      	add	r7, sp, #16
 8018d46:	60f8      	str	r0, [r7, #12]
 8018d48:	60b9      	str	r1, [r7, #8]
 8018d4a:	607a      	str	r2, [r7, #4]
 8018d4c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8018d4e:	68bb      	ldr	r3, [r7, #8]
 8018d50:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	d009      	beq.n	8018d6c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018d58:	68bb      	ldr	r3, [r7, #8]
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d003      	beq.n	8018d66 <ip4_output_if+0x26>
 8018d5e:	68bb      	ldr	r3, [r7, #8]
 8018d60:	681b      	ldr	r3, [r3, #0]
 8018d62:	2b00      	cmp	r3, #0
 8018d64:	d102      	bne.n	8018d6c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8018d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d68:	3304      	adds	r3, #4
 8018d6a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018d6c:	78fa      	ldrb	r2, [r7, #3]
 8018d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d70:	9302      	str	r3, [sp, #8]
 8018d72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018d76:	9301      	str	r3, [sp, #4]
 8018d78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018d7c:	9300      	str	r3, [sp, #0]
 8018d7e:	4613      	mov	r3, r2
 8018d80:	687a      	ldr	r2, [r7, #4]
 8018d82:	6979      	ldr	r1, [r7, #20]
 8018d84:	68f8      	ldr	r0, [r7, #12]
 8018d86:	f000 f805 	bl	8018d94 <ip4_output_if_src>
 8018d8a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018d8c:	4618      	mov	r0, r3
 8018d8e:	3718      	adds	r7, #24
 8018d90:	46bd      	mov	sp, r7
 8018d92:	bd80      	pop	{r7, pc}

08018d94 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8018d94:	b580      	push	{r7, lr}
 8018d96:	b088      	sub	sp, #32
 8018d98:	af00      	add	r7, sp, #0
 8018d9a:	60f8      	str	r0, [r7, #12]
 8018d9c:	60b9      	str	r1, [r7, #8]
 8018d9e:	607a      	str	r2, [r7, #4]
 8018da0:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8018da2:	68fb      	ldr	r3, [r7, #12]
 8018da4:	89db      	ldrh	r3, [r3, #14]
 8018da6:	2b01      	cmp	r3, #1
 8018da8:	d006      	beq.n	8018db8 <ip4_output_if_src+0x24>
 8018daa:	4b48      	ldr	r3, [pc, #288]	; (8018ecc <ip4_output_if_src+0x138>)
 8018dac:	f240 3233 	movw	r2, #819	; 0x333
 8018db0:	4947      	ldr	r1, [pc, #284]	; (8018ed0 <ip4_output_if_src+0x13c>)
 8018db2:	4848      	ldr	r0, [pc, #288]	; (8018ed4 <ip4_output_if_src+0x140>)
 8018db4:	f001 fb50 	bl	801a458 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	2b00      	cmp	r3, #0
 8018dbc:	d060      	beq.n	8018e80 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8018dbe:	2314      	movs	r3, #20
 8018dc0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8018dc2:	2114      	movs	r1, #20
 8018dc4:	68f8      	ldr	r0, [r7, #12]
 8018dc6:	f7f6 fc89 	bl	800f6dc <pbuf_header>
 8018dca:	4603      	mov	r3, r0
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d002      	beq.n	8018dd6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018dd0:	f06f 0301 	mvn.w	r3, #1
 8018dd4:	e075      	b.n	8018ec2 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018dd6:	68fb      	ldr	r3, [r7, #12]
 8018dd8:	685b      	ldr	r3, [r3, #4]
 8018dda:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018ddc:	68fb      	ldr	r3, [r7, #12]
 8018dde:	895b      	ldrh	r3, [r3, #10]
 8018de0:	2b13      	cmp	r3, #19
 8018de2:	d806      	bhi.n	8018df2 <ip4_output_if_src+0x5e>
 8018de4:	4b39      	ldr	r3, [pc, #228]	; (8018ecc <ip4_output_if_src+0x138>)
 8018de6:	f44f 7258 	mov.w	r2, #864	; 0x360
 8018dea:	493b      	ldr	r1, [pc, #236]	; (8018ed8 <ip4_output_if_src+0x144>)
 8018dec:	4839      	ldr	r0, [pc, #228]	; (8018ed4 <ip4_output_if_src+0x140>)
 8018dee:	f001 fb33 	bl	801a458 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8018df2:	69fb      	ldr	r3, [r7, #28]
 8018df4:	78fa      	ldrb	r2, [r7, #3]
 8018df6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018df8:	69fb      	ldr	r3, [r7, #28]
 8018dfa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018dfe:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	681a      	ldr	r2, [r3, #0]
 8018e04:	69fb      	ldr	r3, [r7, #28]
 8018e06:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018e08:	8b7b      	ldrh	r3, [r7, #26]
 8018e0a:	089b      	lsrs	r3, r3, #2
 8018e0c:	b29b      	uxth	r3, r3
 8018e0e:	b2db      	uxtb	r3, r3
 8018e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e14:	b2da      	uxtb	r2, r3
 8018e16:	69fb      	ldr	r3, [r7, #28]
 8018e18:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018e1a:	69fb      	ldr	r3, [r7, #28]
 8018e1c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018e20:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8018e22:	68fb      	ldr	r3, [r7, #12]
 8018e24:	891b      	ldrh	r3, [r3, #8]
 8018e26:	4618      	mov	r0, r3
 8018e28:	f7f5 fa7c 	bl	800e324 <lwip_htons>
 8018e2c:	4603      	mov	r3, r0
 8018e2e:	461a      	mov	r2, r3
 8018e30:	69fb      	ldr	r3, [r7, #28]
 8018e32:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018e34:	69fb      	ldr	r3, [r7, #28]
 8018e36:	2200      	movs	r2, #0
 8018e38:	719a      	strb	r2, [r3, #6]
 8018e3a:	2200      	movs	r2, #0
 8018e3c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8018e3e:	4b27      	ldr	r3, [pc, #156]	; (8018edc <ip4_output_if_src+0x148>)
 8018e40:	881b      	ldrh	r3, [r3, #0]
 8018e42:	4618      	mov	r0, r3
 8018e44:	f7f5 fa6e 	bl	800e324 <lwip_htons>
 8018e48:	4603      	mov	r3, r0
 8018e4a:	461a      	mov	r2, r3
 8018e4c:	69fb      	ldr	r3, [r7, #28]
 8018e4e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8018e50:	4b22      	ldr	r3, [pc, #136]	; (8018edc <ip4_output_if_src+0x148>)
 8018e52:	881b      	ldrh	r3, [r3, #0]
 8018e54:	3301      	adds	r3, #1
 8018e56:	b29a      	uxth	r2, r3
 8018e58:	4b20      	ldr	r3, [pc, #128]	; (8018edc <ip4_output_if_src+0x148>)
 8018e5a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018e5c:	68bb      	ldr	r3, [r7, #8]
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d104      	bne.n	8018e6c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8018e62:	4b1f      	ldr	r3, [pc, #124]	; (8018ee0 <ip4_output_if_src+0x14c>)
 8018e64:	681a      	ldr	r2, [r3, #0]
 8018e66:	69fb      	ldr	r3, [r7, #28]
 8018e68:	60da      	str	r2, [r3, #12]
 8018e6a:	e003      	b.n	8018e74 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018e6c:	68bb      	ldr	r3, [r7, #8]
 8018e6e:	681a      	ldr	r2, [r3, #0]
 8018e70:	69fb      	ldr	r3, [r7, #28]
 8018e72:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8018e74:	69fb      	ldr	r3, [r7, #28]
 8018e76:	2200      	movs	r2, #0
 8018e78:	729a      	strb	r2, [r3, #10]
 8018e7a:	2200      	movs	r2, #0
 8018e7c:	72da      	strb	r2, [r3, #11]
 8018e7e:	e008      	b.n	8018e92 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8018e80:	68fb      	ldr	r3, [r7, #12]
 8018e82:	685b      	ldr	r3, [r3, #4]
 8018e84:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8018e86:	69fb      	ldr	r3, [r7, #28]
 8018e88:	691b      	ldr	r3, [r3, #16]
 8018e8a:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8018e8c:	f107 0314 	add.w	r3, r7, #20
 8018e90:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8018e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	d00c      	beq.n	8018eb4 <ip4_output_if_src+0x120>
 8018e9a:	68fb      	ldr	r3, [r7, #12]
 8018e9c:	891a      	ldrh	r2, [r3, #8]
 8018e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018ea2:	429a      	cmp	r2, r3
 8018ea4:	d906      	bls.n	8018eb4 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8018ea6:	687a      	ldr	r2, [r7, #4]
 8018ea8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018eaa:	68f8      	ldr	r0, [r7, #12]
 8018eac:	f000 fd0a 	bl	80198c4 <ip4_frag>
 8018eb0:	4603      	mov	r3, r0
 8018eb2:	e006      	b.n	8018ec2 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8018eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018eb6:	695b      	ldr	r3, [r3, #20]
 8018eb8:	687a      	ldr	r2, [r7, #4]
 8018eba:	68f9      	ldr	r1, [r7, #12]
 8018ebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018ebe:	4798      	blx	r3
 8018ec0:	4603      	mov	r3, r0
}
 8018ec2:	4618      	mov	r0, r3
 8018ec4:	3720      	adds	r7, #32
 8018ec6:	46bd      	mov	sp, r7
 8018ec8:	bd80      	pop	{r7, pc}
 8018eca:	bf00      	nop
 8018ecc:	0801e19c 	.word	0x0801e19c
 8018ed0:	0801e1d0 	.word	0x0801e1d0
 8018ed4:	0801e1dc 	.word	0x0801e1dc
 8018ed8:	0801e204 	.word	0x0801e204
 8018edc:	2000ed46 	.word	0x2000ed46
 8018ee0:	0801e610 	.word	0x0801e610

08018ee4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8018ee4:	b480      	push	{r7}
 8018ee6:	b085      	sub	sp, #20
 8018ee8:	af00      	add	r7, sp, #0
 8018eea:	6078      	str	r0, [r7, #4]
 8018eec:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ef8:	d002      	beq.n	8018f00 <ip4_addr_isbroadcast_u32+0x1c>
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d101      	bne.n	8018f04 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018f00:	2301      	movs	r3, #1
 8018f02:	e02a      	b.n	8018f5a <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8018f04:	683b      	ldr	r3, [r7, #0]
 8018f06:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8018f0a:	f003 0302 	and.w	r3, r3, #2
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	d101      	bne.n	8018f16 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8018f12:	2300      	movs	r3, #0
 8018f14:	e021      	b.n	8018f5a <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8018f16:	683b      	ldr	r3, [r7, #0]
 8018f18:	3304      	adds	r3, #4
 8018f1a:	681b      	ldr	r3, [r3, #0]
 8018f1c:	687a      	ldr	r2, [r7, #4]
 8018f1e:	429a      	cmp	r2, r3
 8018f20:	d101      	bne.n	8018f26 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8018f22:	2300      	movs	r3, #0
 8018f24:	e019      	b.n	8018f5a <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8018f26:	68fa      	ldr	r2, [r7, #12]
 8018f28:	683b      	ldr	r3, [r7, #0]
 8018f2a:	3304      	adds	r3, #4
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	405a      	eors	r2, r3
 8018f30:	683b      	ldr	r3, [r7, #0]
 8018f32:	3308      	adds	r3, #8
 8018f34:	681b      	ldr	r3, [r3, #0]
 8018f36:	4013      	ands	r3, r2
 8018f38:	2b00      	cmp	r3, #0
 8018f3a:	d10d      	bne.n	8018f58 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018f3c:	683b      	ldr	r3, [r7, #0]
 8018f3e:	3308      	adds	r3, #8
 8018f40:	681b      	ldr	r3, [r3, #0]
 8018f42:	43da      	mvns	r2, r3
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018f48:	683b      	ldr	r3, [r7, #0]
 8018f4a:	3308      	adds	r3, #8
 8018f4c:	681b      	ldr	r3, [r3, #0]
 8018f4e:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018f50:	429a      	cmp	r2, r3
 8018f52:	d101      	bne.n	8018f58 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8018f54:	2301      	movs	r3, #1
 8018f56:	e000      	b.n	8018f5a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018f58:	2300      	movs	r3, #0
  }
}
 8018f5a:	4618      	mov	r0, r3
 8018f5c:	3714      	adds	r7, #20
 8018f5e:	46bd      	mov	sp, r7
 8018f60:	bc80      	pop	{r7}
 8018f62:	4770      	bx	lr

08018f64 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018f64:	b580      	push	{r7, lr}
 8018f66:	b084      	sub	sp, #16
 8018f68:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8018f6a:	2300      	movs	r3, #0
 8018f6c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8018f6e:	4b12      	ldr	r3, [pc, #72]	; (8018fb8 <ip_reass_tmr+0x54>)
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8018f74:	e018      	b.n	8018fa8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	7fdb      	ldrb	r3, [r3, #31]
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	d00b      	beq.n	8018f96 <ip_reass_tmr+0x32>
      r->timer--;
 8018f7e:	68fb      	ldr	r3, [r7, #12]
 8018f80:	7fdb      	ldrb	r3, [r3, #31]
 8018f82:	3b01      	subs	r3, #1
 8018f84:	b2da      	uxtb	r2, r3
 8018f86:	68fb      	ldr	r3, [r7, #12]
 8018f88:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8018f8a:	68fb      	ldr	r3, [r7, #12]
 8018f8c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	60fb      	str	r3, [r7, #12]
 8018f94:	e008      	b.n	8018fa8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018f9a:	68fb      	ldr	r3, [r7, #12]
 8018f9c:	681b      	ldr	r3, [r3, #0]
 8018f9e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018fa0:	68b9      	ldr	r1, [r7, #8]
 8018fa2:	6878      	ldr	r0, [r7, #4]
 8018fa4:	f000 f80a 	bl	8018fbc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018fa8:	68fb      	ldr	r3, [r7, #12]
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d1e3      	bne.n	8018f76 <ip_reass_tmr+0x12>
     }
   }
}
 8018fae:	bf00      	nop
 8018fb0:	bf00      	nop
 8018fb2:	3710      	adds	r7, #16
 8018fb4:	46bd      	mov	sp, r7
 8018fb6:	bd80      	pop	{r7, pc}
 8018fb8:	2000ed48 	.word	0x2000ed48

08018fbc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018fbc:	b580      	push	{r7, lr}
 8018fbe:	b088      	sub	sp, #32
 8018fc0:	af00      	add	r7, sp, #0
 8018fc2:	6078      	str	r0, [r7, #4]
 8018fc4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018fc6:	2300      	movs	r3, #0
 8018fc8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018fca:	683a      	ldr	r2, [r7, #0]
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	429a      	cmp	r2, r3
 8018fd0:	d105      	bne.n	8018fde <ip_reass_free_complete_datagram+0x22>
 8018fd2:	4b45      	ldr	r3, [pc, #276]	; (80190e8 <ip_reass_free_complete_datagram+0x12c>)
 8018fd4:	22ab      	movs	r2, #171	; 0xab
 8018fd6:	4945      	ldr	r1, [pc, #276]	; (80190ec <ip_reass_free_complete_datagram+0x130>)
 8018fd8:	4845      	ldr	r0, [pc, #276]	; (80190f0 <ip_reass_free_complete_datagram+0x134>)
 8018fda:	f001 fa3d 	bl	801a458 <iprintf>
  if (prev != NULL) {
 8018fde:	683b      	ldr	r3, [r7, #0]
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d00a      	beq.n	8018ffa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018fe4:	683b      	ldr	r3, [r7, #0]
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	687a      	ldr	r2, [r7, #4]
 8018fea:	429a      	cmp	r2, r3
 8018fec:	d005      	beq.n	8018ffa <ip_reass_free_complete_datagram+0x3e>
 8018fee:	4b3e      	ldr	r3, [pc, #248]	; (80190e8 <ip_reass_free_complete_datagram+0x12c>)
 8018ff0:	22ad      	movs	r2, #173	; 0xad
 8018ff2:	4940      	ldr	r1, [pc, #256]	; (80190f4 <ip_reass_free_complete_datagram+0x138>)
 8018ff4:	483e      	ldr	r0, [pc, #248]	; (80190f0 <ip_reass_free_complete_datagram+0x134>)
 8018ff6:	f001 fa2f 	bl	801a458 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	685b      	ldr	r3, [r3, #4]
 8018ffe:	685b      	ldr	r3, [r3, #4]
 8019000:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019002:	697b      	ldr	r3, [r7, #20]
 8019004:	889b      	ldrh	r3, [r3, #4]
 8019006:	b29b      	uxth	r3, r3
 8019008:	2b00      	cmp	r3, #0
 801900a:	d12a      	bne.n	8019062 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	685b      	ldr	r3, [r3, #4]
 8019010:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019012:	697b      	ldr	r3, [r7, #20]
 8019014:	681a      	ldr	r2, [r3, #0]
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801901a:	69bb      	ldr	r3, [r7, #24]
 801901c:	6858      	ldr	r0, [r3, #4]
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	3308      	adds	r3, #8
 8019022:	2214      	movs	r2, #20
 8019024:	4619      	mov	r1, r3
 8019026:	f001 f96c 	bl	801a302 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801902a:	2101      	movs	r1, #1
 801902c:	69b8      	ldr	r0, [r7, #24]
 801902e:	f7ff fc47 	bl	80188c0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8019032:	69b8      	ldr	r0, [r7, #24]
 8019034:	f7f6 fc10 	bl	800f858 <pbuf_clen>
 8019038:	4603      	mov	r3, r0
 801903a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801903c:	8bfa      	ldrh	r2, [r7, #30]
 801903e:	8a7b      	ldrh	r3, [r7, #18]
 8019040:	4413      	add	r3, r2
 8019042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019046:	db05      	blt.n	8019054 <ip_reass_free_complete_datagram+0x98>
 8019048:	4b27      	ldr	r3, [pc, #156]	; (80190e8 <ip_reass_free_complete_datagram+0x12c>)
 801904a:	22bc      	movs	r2, #188	; 0xbc
 801904c:	492a      	ldr	r1, [pc, #168]	; (80190f8 <ip_reass_free_complete_datagram+0x13c>)
 801904e:	4828      	ldr	r0, [pc, #160]	; (80190f0 <ip_reass_free_complete_datagram+0x134>)
 8019050:	f001 fa02 	bl	801a458 <iprintf>
    pbufs_freed += clen;
 8019054:	8bfa      	ldrh	r2, [r7, #30]
 8019056:	8a7b      	ldrh	r3, [r7, #18]
 8019058:	4413      	add	r3, r2
 801905a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801905c:	69b8      	ldr	r0, [r7, #24]
 801905e:	f7f6 fb61 	bl	800f724 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	685b      	ldr	r3, [r3, #4]
 8019066:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019068:	e01f      	b.n	80190aa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801906a:	69bb      	ldr	r3, [r7, #24]
 801906c:	685b      	ldr	r3, [r3, #4]
 801906e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019070:	69bb      	ldr	r3, [r7, #24]
 8019072:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019074:	697b      	ldr	r3, [r7, #20]
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801907a:	68f8      	ldr	r0, [r7, #12]
 801907c:	f7f6 fbec 	bl	800f858 <pbuf_clen>
 8019080:	4603      	mov	r3, r0
 8019082:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019084:	8bfa      	ldrh	r2, [r7, #30]
 8019086:	8a7b      	ldrh	r3, [r7, #18]
 8019088:	4413      	add	r3, r2
 801908a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801908e:	db05      	blt.n	801909c <ip_reass_free_complete_datagram+0xe0>
 8019090:	4b15      	ldr	r3, [pc, #84]	; (80190e8 <ip_reass_free_complete_datagram+0x12c>)
 8019092:	22cc      	movs	r2, #204	; 0xcc
 8019094:	4918      	ldr	r1, [pc, #96]	; (80190f8 <ip_reass_free_complete_datagram+0x13c>)
 8019096:	4816      	ldr	r0, [pc, #88]	; (80190f0 <ip_reass_free_complete_datagram+0x134>)
 8019098:	f001 f9de 	bl	801a458 <iprintf>
    pbufs_freed += clen;
 801909c:	8bfa      	ldrh	r2, [r7, #30]
 801909e:	8a7b      	ldrh	r3, [r7, #18]
 80190a0:	4413      	add	r3, r2
 80190a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80190a4:	68f8      	ldr	r0, [r7, #12]
 80190a6:	f7f6 fb3d 	bl	800f724 <pbuf_free>
  while (p != NULL) {
 80190aa:	69bb      	ldr	r3, [r7, #24]
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d1dc      	bne.n	801906a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80190b0:	6839      	ldr	r1, [r7, #0]
 80190b2:	6878      	ldr	r0, [r7, #4]
 80190b4:	f000 f8c2 	bl	801923c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 80190b8:	4b10      	ldr	r3, [pc, #64]	; (80190fc <ip_reass_free_complete_datagram+0x140>)
 80190ba:	881b      	ldrh	r3, [r3, #0]
 80190bc:	8bfa      	ldrh	r2, [r7, #30]
 80190be:	429a      	cmp	r2, r3
 80190c0:	d905      	bls.n	80190ce <ip_reass_free_complete_datagram+0x112>
 80190c2:	4b09      	ldr	r3, [pc, #36]	; (80190e8 <ip_reass_free_complete_datagram+0x12c>)
 80190c4:	22d2      	movs	r2, #210	; 0xd2
 80190c6:	490e      	ldr	r1, [pc, #56]	; (8019100 <ip_reass_free_complete_datagram+0x144>)
 80190c8:	4809      	ldr	r0, [pc, #36]	; (80190f0 <ip_reass_free_complete_datagram+0x134>)
 80190ca:	f001 f9c5 	bl	801a458 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 80190ce:	4b0b      	ldr	r3, [pc, #44]	; (80190fc <ip_reass_free_complete_datagram+0x140>)
 80190d0:	881a      	ldrh	r2, [r3, #0]
 80190d2:	8bfb      	ldrh	r3, [r7, #30]
 80190d4:	1ad3      	subs	r3, r2, r3
 80190d6:	b29a      	uxth	r2, r3
 80190d8:	4b08      	ldr	r3, [pc, #32]	; (80190fc <ip_reass_free_complete_datagram+0x140>)
 80190da:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80190dc:	8bfb      	ldrh	r3, [r7, #30]
}
 80190de:	4618      	mov	r0, r3
 80190e0:	3720      	adds	r7, #32
 80190e2:	46bd      	mov	sp, r7
 80190e4:	bd80      	pop	{r7, pc}
 80190e6:	bf00      	nop
 80190e8:	0801e234 	.word	0x0801e234
 80190ec:	0801e270 	.word	0x0801e270
 80190f0:	0801e27c 	.word	0x0801e27c
 80190f4:	0801e2a4 	.word	0x0801e2a4
 80190f8:	0801e2b8 	.word	0x0801e2b8
 80190fc:	2000ed4c 	.word	0x2000ed4c
 8019100:	0801e2d8 	.word	0x0801e2d8

08019104 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019104:	b580      	push	{r7, lr}
 8019106:	b08a      	sub	sp, #40	; 0x28
 8019108:	af00      	add	r7, sp, #0
 801910a:	6078      	str	r0, [r7, #4]
 801910c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801910e:	2300      	movs	r3, #0
 8019110:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019112:	2300      	movs	r3, #0
 8019114:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019116:	2300      	movs	r3, #0
 8019118:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801911a:	2300      	movs	r3, #0
 801911c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801911e:	2300      	movs	r3, #0
 8019120:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019122:	4b28      	ldr	r3, [pc, #160]	; (80191c4 <ip_reass_remove_oldest_datagram+0xc0>)
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019128:	e030      	b.n	801918c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801912a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801912c:	695a      	ldr	r2, [r3, #20]
 801912e:	687b      	ldr	r3, [r7, #4]
 8019130:	68db      	ldr	r3, [r3, #12]
 8019132:	429a      	cmp	r2, r3
 8019134:	d10c      	bne.n	8019150 <ip_reass_remove_oldest_datagram+0x4c>
 8019136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019138:	699a      	ldr	r2, [r3, #24]
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	691b      	ldr	r3, [r3, #16]
 801913e:	429a      	cmp	r2, r3
 8019140:	d106      	bne.n	8019150 <ip_reass_remove_oldest_datagram+0x4c>
 8019142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019144:	899a      	ldrh	r2, [r3, #12]
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	889b      	ldrh	r3, [r3, #4]
 801914a:	b29b      	uxth	r3, r3
 801914c:	429a      	cmp	r2, r3
 801914e:	d014      	beq.n	801917a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019150:	693b      	ldr	r3, [r7, #16]
 8019152:	3301      	adds	r3, #1
 8019154:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8019156:	6a3b      	ldr	r3, [r7, #32]
 8019158:	2b00      	cmp	r3, #0
 801915a:	d104      	bne.n	8019166 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801915c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801915e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019160:	69fb      	ldr	r3, [r7, #28]
 8019162:	61bb      	str	r3, [r7, #24]
 8019164:	e009      	b.n	801917a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019168:	7fda      	ldrb	r2, [r3, #31]
 801916a:	6a3b      	ldr	r3, [r7, #32]
 801916c:	7fdb      	ldrb	r3, [r3, #31]
 801916e:	429a      	cmp	r2, r3
 8019170:	d803      	bhi.n	801917a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019174:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019176:	69fb      	ldr	r3, [r7, #28]
 8019178:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801917a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801917c:	681b      	ldr	r3, [r3, #0]
 801917e:	2b00      	cmp	r3, #0
 8019180:	d001      	beq.n	8019186 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8019182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019184:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8019186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801918c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801918e:	2b00      	cmp	r3, #0
 8019190:	d1cb      	bne.n	801912a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8019192:	6a3b      	ldr	r3, [r7, #32]
 8019194:	2b00      	cmp	r3, #0
 8019196:	d008      	beq.n	80191aa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019198:	69b9      	ldr	r1, [r7, #24]
 801919a:	6a38      	ldr	r0, [r7, #32]
 801919c:	f7ff ff0e 	bl	8018fbc <ip_reass_free_complete_datagram>
 80191a0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80191a2:	697a      	ldr	r2, [r7, #20]
 80191a4:	68fb      	ldr	r3, [r7, #12]
 80191a6:	4413      	add	r3, r2
 80191a8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80191aa:	697a      	ldr	r2, [r7, #20]
 80191ac:	683b      	ldr	r3, [r7, #0]
 80191ae:	429a      	cmp	r2, r3
 80191b0:	da02      	bge.n	80191b8 <ip_reass_remove_oldest_datagram+0xb4>
 80191b2:	693b      	ldr	r3, [r7, #16]
 80191b4:	2b01      	cmp	r3, #1
 80191b6:	dcac      	bgt.n	8019112 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80191b8:	697b      	ldr	r3, [r7, #20]
}
 80191ba:	4618      	mov	r0, r3
 80191bc:	3728      	adds	r7, #40	; 0x28
 80191be:	46bd      	mov	sp, r7
 80191c0:	bd80      	pop	{r7, pc}
 80191c2:	bf00      	nop
 80191c4:	2000ed48 	.word	0x2000ed48

080191c8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80191c8:	b580      	push	{r7, lr}
 80191ca:	b084      	sub	sp, #16
 80191cc:	af00      	add	r7, sp, #0
 80191ce:	6078      	str	r0, [r7, #4]
 80191d0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80191d2:	2004      	movs	r0, #4
 80191d4:	f7f5 fc92 	bl	800eafc <memp_malloc>
 80191d8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80191da:	68fb      	ldr	r3, [r7, #12]
 80191dc:	2b00      	cmp	r3, #0
 80191de:	d110      	bne.n	8019202 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80191e0:	6839      	ldr	r1, [r7, #0]
 80191e2:	6878      	ldr	r0, [r7, #4]
 80191e4:	f7ff ff8e 	bl	8019104 <ip_reass_remove_oldest_datagram>
 80191e8:	4602      	mov	r2, r0
 80191ea:	683b      	ldr	r3, [r7, #0]
 80191ec:	4293      	cmp	r3, r2
 80191ee:	dc03      	bgt.n	80191f8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80191f0:	2004      	movs	r0, #4
 80191f2:	f7f5 fc83 	bl	800eafc <memp_malloc>
 80191f6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80191f8:	68fb      	ldr	r3, [r7, #12]
 80191fa:	2b00      	cmp	r3, #0
 80191fc:	d101      	bne.n	8019202 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 80191fe:	2300      	movs	r3, #0
 8019200:	e016      	b.n	8019230 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019202:	2220      	movs	r2, #32
 8019204:	2100      	movs	r1, #0
 8019206:	68f8      	ldr	r0, [r7, #12]
 8019208:	f001 f889 	bl	801a31e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801920c:	68fb      	ldr	r3, [r7, #12]
 801920e:	2203      	movs	r2, #3
 8019210:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019212:	4b09      	ldr	r3, [pc, #36]	; (8019238 <ip_reass_enqueue_new_datagram+0x70>)
 8019214:	681a      	ldr	r2, [r3, #0]
 8019216:	68fb      	ldr	r3, [r7, #12]
 8019218:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801921a:	4a07      	ldr	r2, [pc, #28]	; (8019238 <ip_reass_enqueue_new_datagram+0x70>)
 801921c:	68fb      	ldr	r3, [r7, #12]
 801921e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019220:	68fb      	ldr	r3, [r7, #12]
 8019222:	3308      	adds	r3, #8
 8019224:	2214      	movs	r2, #20
 8019226:	6879      	ldr	r1, [r7, #4]
 8019228:	4618      	mov	r0, r3
 801922a:	f001 f86a 	bl	801a302 <memcpy>
  return ipr;
 801922e:	68fb      	ldr	r3, [r7, #12]
}
 8019230:	4618      	mov	r0, r3
 8019232:	3710      	adds	r7, #16
 8019234:	46bd      	mov	sp, r7
 8019236:	bd80      	pop	{r7, pc}
 8019238:	2000ed48 	.word	0x2000ed48

0801923c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801923c:	b580      	push	{r7, lr}
 801923e:	b082      	sub	sp, #8
 8019240:	af00      	add	r7, sp, #0
 8019242:	6078      	str	r0, [r7, #4]
 8019244:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8019246:	4b10      	ldr	r3, [pc, #64]	; (8019288 <ip_reass_dequeue_datagram+0x4c>)
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	687a      	ldr	r2, [r7, #4]
 801924c:	429a      	cmp	r2, r3
 801924e:	d104      	bne.n	801925a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	4a0c      	ldr	r2, [pc, #48]	; (8019288 <ip_reass_dequeue_datagram+0x4c>)
 8019256:	6013      	str	r3, [r2, #0]
 8019258:	e00d      	b.n	8019276 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801925a:	683b      	ldr	r3, [r7, #0]
 801925c:	2b00      	cmp	r3, #0
 801925e:	d106      	bne.n	801926e <ip_reass_dequeue_datagram+0x32>
 8019260:	4b0a      	ldr	r3, [pc, #40]	; (801928c <ip_reass_dequeue_datagram+0x50>)
 8019262:	f240 1245 	movw	r2, #325	; 0x145
 8019266:	490a      	ldr	r1, [pc, #40]	; (8019290 <ip_reass_dequeue_datagram+0x54>)
 8019268:	480a      	ldr	r0, [pc, #40]	; (8019294 <ip_reass_dequeue_datagram+0x58>)
 801926a:	f001 f8f5 	bl	801a458 <iprintf>
    prev->next = ipr->next;
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	681a      	ldr	r2, [r3, #0]
 8019272:	683b      	ldr	r3, [r7, #0]
 8019274:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8019276:	6879      	ldr	r1, [r7, #4]
 8019278:	2004      	movs	r0, #4
 801927a:	f7f5 fc91 	bl	800eba0 <memp_free>
}
 801927e:	bf00      	nop
 8019280:	3708      	adds	r7, #8
 8019282:	46bd      	mov	sp, r7
 8019284:	bd80      	pop	{r7, pc}
 8019286:	bf00      	nop
 8019288:	2000ed48 	.word	0x2000ed48
 801928c:	0801e234 	.word	0x0801e234
 8019290:	0801e2f4 	.word	0x0801e2f4
 8019294:	0801e27c 	.word	0x0801e27c

08019298 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019298:	b580      	push	{r7, lr}
 801929a:	b08c      	sub	sp, #48	; 0x30
 801929c:	af00      	add	r7, sp, #0
 801929e:	60f8      	str	r0, [r7, #12]
 80192a0:	60b9      	str	r1, [r7, #8]
 80192a2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 80192a4:	2300      	movs	r3, #0
 80192a6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80192a8:	2301      	movs	r3, #1
 80192aa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 80192ac:	68bb      	ldr	r3, [r7, #8]
 80192ae:	685b      	ldr	r3, [r3, #4]
 80192b0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80192b2:	69fb      	ldr	r3, [r7, #28]
 80192b4:	885b      	ldrh	r3, [r3, #2]
 80192b6:	b29b      	uxth	r3, r3
 80192b8:	4618      	mov	r0, r3
 80192ba:	f7f5 f833 	bl	800e324 <lwip_htons>
 80192be:	4603      	mov	r3, r0
 80192c0:	461a      	mov	r2, r3
 80192c2:	69fb      	ldr	r3, [r7, #28]
 80192c4:	781b      	ldrb	r3, [r3, #0]
 80192c6:	b29b      	uxth	r3, r3
 80192c8:	f003 030f 	and.w	r3, r3, #15
 80192cc:	b29b      	uxth	r3, r3
 80192ce:	009b      	lsls	r3, r3, #2
 80192d0:	b29b      	uxth	r3, r3
 80192d2:	1ad3      	subs	r3, r2, r3
 80192d4:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80192d6:	69fb      	ldr	r3, [r7, #28]
 80192d8:	88db      	ldrh	r3, [r3, #6]
 80192da:	b29b      	uxth	r3, r3
 80192dc:	4618      	mov	r0, r3
 80192de:	f7f5 f821 	bl	800e324 <lwip_htons>
 80192e2:	4603      	mov	r3, r0
 80192e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80192e8:	b29b      	uxth	r3, r3
 80192ea:	00db      	lsls	r3, r3, #3
 80192ec:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 80192ee:	68bb      	ldr	r3, [r7, #8]
 80192f0:	685b      	ldr	r3, [r3, #4]
 80192f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80192f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192f6:	2200      	movs	r2, #0
 80192f8:	701a      	strb	r2, [r3, #0]
 80192fa:	2200      	movs	r2, #0
 80192fc:	705a      	strb	r2, [r3, #1]
 80192fe:	2200      	movs	r2, #0
 8019300:	709a      	strb	r2, [r3, #2]
 8019302:	2200      	movs	r2, #0
 8019304:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019308:	8b3a      	ldrh	r2, [r7, #24]
 801930a:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 801930c:	8b3a      	ldrh	r2, [r7, #24]
 801930e:	8b7b      	ldrh	r3, [r7, #26]
 8019310:	4413      	add	r3, r2
 8019312:	b29a      	uxth	r2, r3
 8019314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019316:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019318:	68fb      	ldr	r3, [r7, #12]
 801931a:	685b      	ldr	r3, [r3, #4]
 801931c:	627b      	str	r3, [r7, #36]	; 0x24
 801931e:	e061      	b.n	80193e4 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8019320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019322:	685b      	ldr	r3, [r3, #4]
 8019324:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8019326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019328:	889b      	ldrh	r3, [r3, #4]
 801932a:	b29a      	uxth	r2, r3
 801932c:	697b      	ldr	r3, [r7, #20]
 801932e:	889b      	ldrh	r3, [r3, #4]
 8019330:	b29b      	uxth	r3, r3
 8019332:	429a      	cmp	r2, r3
 8019334:	d232      	bcs.n	801939c <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801933a:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801933c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801933e:	2b00      	cmp	r3, #0
 8019340:	d01f      	beq.n	8019382 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8019342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019344:	889b      	ldrh	r3, [r3, #4]
 8019346:	b29a      	uxth	r2, r3
 8019348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801934a:	88db      	ldrh	r3, [r3, #6]
 801934c:	b29b      	uxth	r3, r3
 801934e:	429a      	cmp	r2, r3
 8019350:	f0c0 80e3 	bcc.w	801951a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8019354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019356:	88db      	ldrh	r3, [r3, #6]
 8019358:	b29a      	uxth	r2, r3
 801935a:	697b      	ldr	r3, [r7, #20]
 801935c:	889b      	ldrh	r3, [r3, #4]
 801935e:	b29b      	uxth	r3, r3
 8019360:	429a      	cmp	r2, r3
 8019362:	f200 80da 	bhi.w	801951a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019368:	68ba      	ldr	r2, [r7, #8]
 801936a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801936c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801936e:	88db      	ldrh	r3, [r3, #6]
 8019370:	b29a      	uxth	r2, r3
 8019372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019374:	889b      	ldrh	r3, [r3, #4]
 8019376:	b29b      	uxth	r3, r3
 8019378:	429a      	cmp	r2, r3
 801937a:	d037      	beq.n	80193ec <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801937c:	2300      	movs	r3, #0
 801937e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019380:	e034      	b.n	80193ec <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8019382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019384:	88db      	ldrh	r3, [r3, #6]
 8019386:	b29a      	uxth	r2, r3
 8019388:	697b      	ldr	r3, [r7, #20]
 801938a:	889b      	ldrh	r3, [r3, #4]
 801938c:	b29b      	uxth	r3, r3
 801938e:	429a      	cmp	r2, r3
 8019390:	f200 80c5 	bhi.w	801951e <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8019394:	68fb      	ldr	r3, [r7, #12]
 8019396:	68ba      	ldr	r2, [r7, #8]
 8019398:	605a      	str	r2, [r3, #4]
      break;
 801939a:	e027      	b.n	80193ec <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 801939c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801939e:	889b      	ldrh	r3, [r3, #4]
 80193a0:	b29a      	uxth	r2, r3
 80193a2:	697b      	ldr	r3, [r7, #20]
 80193a4:	889b      	ldrh	r3, [r3, #4]
 80193a6:	b29b      	uxth	r3, r3
 80193a8:	429a      	cmp	r2, r3
 80193aa:	f000 80ba 	beq.w	8019522 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80193ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193b0:	889b      	ldrh	r3, [r3, #4]
 80193b2:	b29a      	uxth	r2, r3
 80193b4:	697b      	ldr	r3, [r7, #20]
 80193b6:	88db      	ldrh	r3, [r3, #6]
 80193b8:	b29b      	uxth	r3, r3
 80193ba:	429a      	cmp	r2, r3
 80193bc:	f0c0 80b3 	bcc.w	8019526 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80193c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d009      	beq.n	80193da <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 80193c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193c8:	88db      	ldrh	r3, [r3, #6]
 80193ca:	b29a      	uxth	r2, r3
 80193cc:	697b      	ldr	r3, [r7, #20]
 80193ce:	889b      	ldrh	r3, [r3, #4]
 80193d0:	b29b      	uxth	r3, r3
 80193d2:	429a      	cmp	r2, r3
 80193d4:	d001      	beq.n	80193da <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80193d6:	2300      	movs	r3, #0
 80193d8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80193da:	697b      	ldr	r3, [r7, #20]
 80193dc:	681b      	ldr	r3, [r3, #0]
 80193de:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80193e0:	697b      	ldr	r3, [r7, #20]
 80193e2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80193e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	d19a      	bne.n	8019320 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 80193ea:	e000      	b.n	80193ee <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 80193ec:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80193ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	d12d      	bne.n	8019450 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 80193f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d01c      	beq.n	8019434 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80193fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193fc:	88db      	ldrh	r3, [r3, #6]
 80193fe:	b29a      	uxth	r2, r3
 8019400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019402:	889b      	ldrh	r3, [r3, #4]
 8019404:	b29b      	uxth	r3, r3
 8019406:	429a      	cmp	r2, r3
 8019408:	d906      	bls.n	8019418 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 801940a:	4b51      	ldr	r3, [pc, #324]	; (8019550 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801940c:	f240 12ab 	movw	r2, #427	; 0x1ab
 8019410:	4950      	ldr	r1, [pc, #320]	; (8019554 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019412:	4851      	ldr	r0, [pc, #324]	; (8019558 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019414:	f001 f820 	bl	801a458 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801941a:	68ba      	ldr	r2, [r7, #8]
 801941c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801941e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019420:	88db      	ldrh	r3, [r3, #6]
 8019422:	b29a      	uxth	r2, r3
 8019424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019426:	889b      	ldrh	r3, [r3, #4]
 8019428:	b29b      	uxth	r3, r3
 801942a:	429a      	cmp	r2, r3
 801942c:	d010      	beq.n	8019450 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 801942e:	2300      	movs	r3, #0
 8019430:	623b      	str	r3, [r7, #32]
 8019432:	e00d      	b.n	8019450 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8019434:	68fb      	ldr	r3, [r7, #12]
 8019436:	685b      	ldr	r3, [r3, #4]
 8019438:	2b00      	cmp	r3, #0
 801943a:	d006      	beq.n	801944a <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 801943c:	4b44      	ldr	r3, [pc, #272]	; (8019550 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801943e:	f240 12b3 	movw	r2, #435	; 0x1b3
 8019442:	4946      	ldr	r1, [pc, #280]	; (801955c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019444:	4844      	ldr	r0, [pc, #272]	; (8019558 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019446:	f001 f807 	bl	801a458 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801944a:	68fb      	ldr	r3, [r7, #12]
 801944c:	68ba      	ldr	r2, [r7, #8]
 801944e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	2b00      	cmp	r3, #0
 8019454:	d105      	bne.n	8019462 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8019456:	68fb      	ldr	r3, [r7, #12]
 8019458:	7f9b      	ldrb	r3, [r3, #30]
 801945a:	f003 0301 	and.w	r3, r3, #1
 801945e:	2b00      	cmp	r3, #0
 8019460:	d059      	beq.n	8019516 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8019462:	6a3b      	ldr	r3, [r7, #32]
 8019464:	2b00      	cmp	r3, #0
 8019466:	d04f      	beq.n	8019508 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8019468:	68fb      	ldr	r3, [r7, #12]
 801946a:	685b      	ldr	r3, [r3, #4]
 801946c:	2b00      	cmp	r3, #0
 801946e:	d006      	beq.n	801947e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019470:	68fb      	ldr	r3, [r7, #12]
 8019472:	685b      	ldr	r3, [r3, #4]
 8019474:	685b      	ldr	r3, [r3, #4]
 8019476:	889b      	ldrh	r3, [r3, #4]
 8019478:	b29b      	uxth	r3, r3
 801947a:	2b00      	cmp	r3, #0
 801947c:	d002      	beq.n	8019484 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801947e:	2300      	movs	r3, #0
 8019480:	623b      	str	r3, [r7, #32]
 8019482:	e041      	b.n	8019508 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019486:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8019488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801948a:	681b      	ldr	r3, [r3, #0]
 801948c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801948e:	e012      	b.n	80194b6 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8019490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019492:	685b      	ldr	r3, [r3, #4]
 8019494:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8019496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019498:	88db      	ldrh	r3, [r3, #6]
 801949a:	b29a      	uxth	r2, r3
 801949c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801949e:	889b      	ldrh	r3, [r3, #4]
 80194a0:	b29b      	uxth	r3, r3
 80194a2:	429a      	cmp	r2, r3
 80194a4:	d002      	beq.n	80194ac <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 80194a6:	2300      	movs	r3, #0
 80194a8:	623b      	str	r3, [r7, #32]
            break;
 80194aa:	e007      	b.n	80194bc <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 80194ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194ae:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80194b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194b2:	681b      	ldr	r3, [r3, #0]
 80194b4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80194b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d1e9      	bne.n	8019490 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80194bc:	6a3b      	ldr	r3, [r7, #32]
 80194be:	2b00      	cmp	r3, #0
 80194c0:	d022      	beq.n	8019508 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80194c2:	68fb      	ldr	r3, [r7, #12]
 80194c4:	685b      	ldr	r3, [r3, #4]
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d106      	bne.n	80194d8 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 80194ca:	4b21      	ldr	r3, [pc, #132]	; (8019550 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80194cc:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 80194d0:	4923      	ldr	r1, [pc, #140]	; (8019560 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80194d2:	4821      	ldr	r0, [pc, #132]	; (8019558 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80194d4:	f000 ffc0 	bl	801a458 <iprintf>
          LWIP_ASSERT("sanity check",
 80194d8:	68fb      	ldr	r3, [r7, #12]
 80194da:	685b      	ldr	r3, [r3, #4]
 80194dc:	685b      	ldr	r3, [r3, #4]
 80194de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80194e0:	429a      	cmp	r2, r3
 80194e2:	d106      	bne.n	80194f2 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 80194e4:	4b1a      	ldr	r3, [pc, #104]	; (8019550 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80194e6:	f240 12d5 	movw	r2, #469	; 0x1d5
 80194ea:	491d      	ldr	r1, [pc, #116]	; (8019560 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80194ec:	481a      	ldr	r0, [pc, #104]	; (8019558 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80194ee:	f000 ffb3 	bl	801a458 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80194f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194f4:	681b      	ldr	r3, [r3, #0]
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d006      	beq.n	8019508 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 80194fa:	4b15      	ldr	r3, [pc, #84]	; (8019550 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80194fc:	f240 12d7 	movw	r2, #471	; 0x1d7
 8019500:	4918      	ldr	r1, [pc, #96]	; (8019564 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019502:	4815      	ldr	r0, [pc, #84]	; (8019558 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019504:	f000 ffa8 	bl	801a458 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019508:	6a3b      	ldr	r3, [r7, #32]
 801950a:	2b00      	cmp	r3, #0
 801950c:	bf14      	ite	ne
 801950e:	2301      	movne	r3, #1
 8019510:	2300      	moveq	r3, #0
 8019512:	b2db      	uxtb	r3, r3
 8019514:	e018      	b.n	8019548 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8019516:	2300      	movs	r3, #0
 8019518:	e016      	b.n	8019548 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
          goto freepbuf;
 801951a:	bf00      	nop
 801951c:	e004      	b.n	8019528 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 801951e:	bf00      	nop
 8019520:	e002      	b.n	8019528 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8019522:	bf00      	nop
 8019524:	e000      	b.n	8019528 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8019526:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8019528:	68b8      	ldr	r0, [r7, #8]
 801952a:	f7f6 f995 	bl	800f858 <pbuf_clen>
 801952e:	4603      	mov	r3, r0
 8019530:	461a      	mov	r2, r3
 8019532:	4b0d      	ldr	r3, [pc, #52]	; (8019568 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8019534:	881b      	ldrh	r3, [r3, #0]
 8019536:	1a9b      	subs	r3, r3, r2
 8019538:	b29a      	uxth	r2, r3
 801953a:	4b0b      	ldr	r3, [pc, #44]	; (8019568 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801953c:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 801953e:	68b8      	ldr	r0, [r7, #8]
 8019540:	f7f6 f8f0 	bl	800f724 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019544:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8019548:	4618      	mov	r0, r3
 801954a:	3730      	adds	r7, #48	; 0x30
 801954c:	46bd      	mov	sp, r7
 801954e:	bd80      	pop	{r7, pc}
 8019550:	0801e234 	.word	0x0801e234
 8019554:	0801e310 	.word	0x0801e310
 8019558:	0801e27c 	.word	0x0801e27c
 801955c:	0801e330 	.word	0x0801e330
 8019560:	0801e368 	.word	0x0801e368
 8019564:	0801e378 	.word	0x0801e378
 8019568:	2000ed4c 	.word	0x2000ed4c

0801956c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801956c:	b580      	push	{r7, lr}
 801956e:	b08e      	sub	sp, #56	; 0x38
 8019570:	af00      	add	r7, sp, #0
 8019572:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	685b      	ldr	r3, [r3, #4]
 8019578:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 801957a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801957c:	781b      	ldrb	r3, [r3, #0]
 801957e:	f003 030f 	and.w	r3, r3, #15
 8019582:	009b      	lsls	r3, r3, #2
 8019584:	2b14      	cmp	r3, #20
 8019586:	f040 8131 	bne.w	80197ec <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801958a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801958c:	88db      	ldrh	r3, [r3, #6]
 801958e:	b29b      	uxth	r3, r3
 8019590:	4618      	mov	r0, r3
 8019592:	f7f4 fec7 	bl	800e324 <lwip_htons>
 8019596:	4603      	mov	r3, r0
 8019598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801959c:	b29b      	uxth	r3, r3
 801959e:	00db      	lsls	r3, r3, #3
 80195a0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80195a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195a4:	885b      	ldrh	r3, [r3, #2]
 80195a6:	b29b      	uxth	r3, r3
 80195a8:	4618      	mov	r0, r3
 80195aa:	f7f4 febb 	bl	800e324 <lwip_htons>
 80195ae:	4603      	mov	r3, r0
 80195b0:	461a      	mov	r2, r3
 80195b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195b4:	781b      	ldrb	r3, [r3, #0]
 80195b6:	b29b      	uxth	r3, r3
 80195b8:	f003 030f 	and.w	r3, r3, #15
 80195bc:	b29b      	uxth	r3, r3
 80195be:	009b      	lsls	r3, r3, #2
 80195c0:	b29b      	uxth	r3, r3
 80195c2:	1ad3      	subs	r3, r2, r3
 80195c4:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80195c6:	6878      	ldr	r0, [r7, #4]
 80195c8:	f7f6 f946 	bl	800f858 <pbuf_clen>
 80195cc:	4603      	mov	r3, r0
 80195ce:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80195d0:	4b8e      	ldr	r3, [pc, #568]	; (801980c <ip4_reass+0x2a0>)
 80195d2:	881b      	ldrh	r3, [r3, #0]
 80195d4:	461a      	mov	r2, r3
 80195d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80195d8:	4413      	add	r3, r2
 80195da:	2b0a      	cmp	r3, #10
 80195dc:	dd10      	ble.n	8019600 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80195de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80195e0:	4619      	mov	r1, r3
 80195e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80195e4:	f7ff fd8e 	bl	8019104 <ip_reass_remove_oldest_datagram>
 80195e8:	4603      	mov	r3, r0
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	f000 8100 	beq.w	80197f0 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80195f0:	4b86      	ldr	r3, [pc, #536]	; (801980c <ip4_reass+0x2a0>)
 80195f2:	881b      	ldrh	r3, [r3, #0]
 80195f4:	461a      	mov	r2, r3
 80195f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80195f8:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80195fa:	2b0a      	cmp	r3, #10
 80195fc:	f300 80f8 	bgt.w	80197f0 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019600:	4b83      	ldr	r3, [pc, #524]	; (8019810 <ip4_reass+0x2a4>)
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	633b      	str	r3, [r7, #48]	; 0x30
 8019606:	e015      	b.n	8019634 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8019608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801960a:	695a      	ldr	r2, [r3, #20]
 801960c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801960e:	68db      	ldr	r3, [r3, #12]
 8019610:	429a      	cmp	r2, r3
 8019612:	d10c      	bne.n	801962e <ip4_reass+0xc2>
 8019614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019616:	699a      	ldr	r2, [r3, #24]
 8019618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801961a:	691b      	ldr	r3, [r3, #16]
 801961c:	429a      	cmp	r2, r3
 801961e:	d106      	bne.n	801962e <ip4_reass+0xc2>
 8019620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019622:	899a      	ldrh	r2, [r3, #12]
 8019624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019626:	889b      	ldrh	r3, [r3, #4]
 8019628:	b29b      	uxth	r3, r3
 801962a:	429a      	cmp	r2, r3
 801962c:	d006      	beq.n	801963c <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801962e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	633b      	str	r3, [r7, #48]	; 0x30
 8019634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019636:	2b00      	cmp	r3, #0
 8019638:	d1e6      	bne.n	8019608 <ip4_reass+0x9c>
 801963a:	e000      	b.n	801963e <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801963c:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801963e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019640:	2b00      	cmp	r3, #0
 8019642:	d109      	bne.n	8019658 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8019644:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019646:	4619      	mov	r1, r3
 8019648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801964a:	f7ff fdbd 	bl	80191c8 <ip_reass_enqueue_new_datagram>
 801964e:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8019650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019652:	2b00      	cmp	r3, #0
 8019654:	d11c      	bne.n	8019690 <ip4_reass+0x124>
      goto nullreturn;
 8019656:	e0d0      	b.n	80197fa <ip4_reass+0x28e>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801965a:	88db      	ldrh	r3, [r3, #6]
 801965c:	b29b      	uxth	r3, r3
 801965e:	4618      	mov	r0, r3
 8019660:	f7f4 fe60 	bl	800e324 <lwip_htons>
 8019664:	4603      	mov	r3, r0
 8019666:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801966a:	2b00      	cmp	r3, #0
 801966c:	d110      	bne.n	8019690 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801966e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019670:	89db      	ldrh	r3, [r3, #14]
 8019672:	4618      	mov	r0, r3
 8019674:	f7f4 fe56 	bl	800e324 <lwip_htons>
 8019678:	4603      	mov	r3, r0
 801967a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801967e:	2b00      	cmp	r3, #0
 8019680:	d006      	beq.n	8019690 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8019682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019684:	3308      	adds	r3, #8
 8019686:	2214      	movs	r2, #20
 8019688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801968a:	4618      	mov	r0, r3
 801968c:	f000 fe39 	bl	801a302 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8019690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019692:	88db      	ldrh	r3, [r3, #6]
 8019694:	b29b      	uxth	r3, r3
 8019696:	f003 0320 	and.w	r3, r3, #32
 801969a:	2b00      	cmp	r3, #0
 801969c:	bf0c      	ite	eq
 801969e:	2301      	moveq	r3, #1
 80196a0:	2300      	movne	r3, #0
 80196a2:	b2db      	uxtb	r3, r3
 80196a4:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80196a6:	69fb      	ldr	r3, [r7, #28]
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	d00e      	beq.n	80196ca <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 80196ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80196ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80196b0:	4413      	add	r3, r2
 80196b2:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80196b4:	8b7a      	ldrh	r2, [r7, #26]
 80196b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80196b8:	429a      	cmp	r2, r3
 80196ba:	f0c0 809b 	bcc.w	80197f4 <ip4_reass+0x288>
 80196be:	8b7b      	ldrh	r3, [r7, #26]
 80196c0:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80196c4:	4293      	cmp	r3, r2
 80196c6:	f200 8095 	bhi.w	80197f4 <ip4_reass+0x288>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80196ca:	69fa      	ldr	r2, [r7, #28]
 80196cc:	6879      	ldr	r1, [r7, #4]
 80196ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80196d0:	f7ff fde2 	bl	8019298 <ip_reass_chain_frag_into_datagram_and_validate>
 80196d4:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80196d6:	697b      	ldr	r3, [r7, #20]
 80196d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80196dc:	f000 808c 	beq.w	80197f8 <ip4_reass+0x28c>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80196e0:	4b4a      	ldr	r3, [pc, #296]	; (801980c <ip4_reass+0x2a0>)
 80196e2:	881a      	ldrh	r2, [r3, #0]
 80196e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80196e6:	4413      	add	r3, r2
 80196e8:	b29a      	uxth	r2, r3
 80196ea:	4b48      	ldr	r3, [pc, #288]	; (801980c <ip4_reass+0x2a0>)
 80196ec:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80196ee:	69fb      	ldr	r3, [r7, #28]
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	d00d      	beq.n	8019710 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 80196f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80196f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80196f8:	4413      	add	r3, r2
 80196fa:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80196fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196fe:	8a7a      	ldrh	r2, [r7, #18]
 8019700:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8019702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019704:	7f9b      	ldrb	r3, [r3, #30]
 8019706:	f043 0301 	orr.w	r3, r3, #1
 801970a:	b2da      	uxtb	r2, r3
 801970c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801970e:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8019710:	697b      	ldr	r3, [r7, #20]
 8019712:	2b01      	cmp	r3, #1
 8019714:	d168      	bne.n	80197e8 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8019716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019718:	8b9b      	ldrh	r3, [r3, #28]
 801971a:	3314      	adds	r3, #20
 801971c:	b29a      	uxth	r2, r3
 801971e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019720:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8019722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019724:	685b      	ldr	r3, [r3, #4]
 8019726:	685b      	ldr	r3, [r3, #4]
 8019728:	681b      	ldr	r3, [r3, #0]
 801972a:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 801972c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801972e:	685b      	ldr	r3, [r3, #4]
 8019730:	685b      	ldr	r3, [r3, #4]
 8019732:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8019734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019736:	3308      	adds	r3, #8
 8019738:	2214      	movs	r2, #20
 801973a:	4619      	mov	r1, r3
 801973c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801973e:	f000 fde0 	bl	801a302 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8019742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019744:	8b9b      	ldrh	r3, [r3, #28]
 8019746:	4618      	mov	r0, r3
 8019748:	f7f4 fdec 	bl	800e324 <lwip_htons>
 801974c:	4603      	mov	r3, r0
 801974e:	461a      	mov	r2, r3
 8019750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019752:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8019754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019756:	2200      	movs	r2, #0
 8019758:	719a      	strb	r2, [r3, #6]
 801975a:	2200      	movs	r2, #0
 801975c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801975e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019760:	2200      	movs	r2, #0
 8019762:	729a      	strb	r2, [r3, #10]
 8019764:	2200      	movs	r2, #0
 8019766:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8019768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801976a:	685b      	ldr	r3, [r3, #4]
 801976c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801976e:	e00e      	b.n	801978e <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8019770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019772:	685b      	ldr	r3, [r3, #4]
 8019774:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8019776:	f06f 0113 	mvn.w	r1, #19
 801977a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801977c:	f7f5 ffae 	bl	800f6dc <pbuf_header>
      pbuf_cat(p, r);
 8019780:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019782:	6878      	ldr	r0, [r7, #4]
 8019784:	f7f6 f8a6 	bl	800f8d4 <pbuf_cat>
      r = iprh->next_pbuf;
 8019788:	68fb      	ldr	r3, [r7, #12]
 801978a:	681b      	ldr	r3, [r3, #0]
 801978c:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801978e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019790:	2b00      	cmp	r3, #0
 8019792:	d1ed      	bne.n	8019770 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8019794:	4b1e      	ldr	r3, [pc, #120]	; (8019810 <ip4_reass+0x2a4>)
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801979a:	429a      	cmp	r2, r3
 801979c:	d102      	bne.n	80197a4 <ip4_reass+0x238>
      ipr_prev = NULL;
 801979e:	2300      	movs	r3, #0
 80197a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80197a2:	e010      	b.n	80197c6 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80197a4:	4b1a      	ldr	r3, [pc, #104]	; (8019810 <ip4_reass+0x2a4>)
 80197a6:	681b      	ldr	r3, [r3, #0]
 80197a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80197aa:	e007      	b.n	80197bc <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 80197ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197ae:	681b      	ldr	r3, [r3, #0]
 80197b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80197b2:	429a      	cmp	r2, r3
 80197b4:	d006      	beq.n	80197c4 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80197b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80197bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197be:	2b00      	cmp	r3, #0
 80197c0:	d1f4      	bne.n	80197ac <ip4_reass+0x240>
 80197c2:	e000      	b.n	80197c6 <ip4_reass+0x25a>
          break;
 80197c4:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80197c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80197c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80197ca:	f7ff fd37 	bl	801923c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 80197ce:	6878      	ldr	r0, [r7, #4]
 80197d0:	f7f6 f842 	bl	800f858 <pbuf_clen>
 80197d4:	4603      	mov	r3, r0
 80197d6:	461a      	mov	r2, r3
 80197d8:	4b0c      	ldr	r3, [pc, #48]	; (801980c <ip4_reass+0x2a0>)
 80197da:	881b      	ldrh	r3, [r3, #0]
 80197dc:	1a9b      	subs	r3, r3, r2
 80197de:	b29a      	uxth	r2, r3
 80197e0:	4b0a      	ldr	r3, [pc, #40]	; (801980c <ip4_reass+0x2a0>)
 80197e2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	e00c      	b.n	8019802 <ip4_reass+0x296>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80197e8:	2300      	movs	r3, #0
 80197ea:	e00a      	b.n	8019802 <ip4_reass+0x296>
    goto nullreturn;
 80197ec:	bf00      	nop
 80197ee:	e004      	b.n	80197fa <ip4_reass+0x28e>
      goto nullreturn;
 80197f0:	bf00      	nop
 80197f2:	e002      	b.n	80197fa <ip4_reass+0x28e>
      goto nullreturn;
 80197f4:	bf00      	nop
 80197f6:	e000      	b.n	80197fa <ip4_reass+0x28e>
    goto nullreturn;
 80197f8:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80197fa:	6878      	ldr	r0, [r7, #4]
 80197fc:	f7f5 ff92 	bl	800f724 <pbuf_free>
  return NULL;
 8019800:	2300      	movs	r3, #0
}
 8019802:	4618      	mov	r0, r3
 8019804:	3738      	adds	r7, #56	; 0x38
 8019806:	46bd      	mov	sp, r7
 8019808:	bd80      	pop	{r7, pc}
 801980a:	bf00      	nop
 801980c:	2000ed4c 	.word	0x2000ed4c
 8019810:	2000ed48 	.word	0x2000ed48

08019814 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8019814:	b580      	push	{r7, lr}
 8019816:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8019818:	2005      	movs	r0, #5
 801981a:	f7f5 f96f 	bl	800eafc <memp_malloc>
 801981e:	4603      	mov	r3, r0
}
 8019820:	4618      	mov	r0, r3
 8019822:	bd80      	pop	{r7, pc}

08019824 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8019824:	b580      	push	{r7, lr}
 8019826:	b082      	sub	sp, #8
 8019828:	af00      	add	r7, sp, #0
 801982a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	2b00      	cmp	r3, #0
 8019830:	d106      	bne.n	8019840 <ip_frag_free_pbuf_custom_ref+0x1c>
 8019832:	4b07      	ldr	r3, [pc, #28]	; (8019850 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8019834:	f240 22ae 	movw	r2, #686	; 0x2ae
 8019838:	4906      	ldr	r1, [pc, #24]	; (8019854 <ip_frag_free_pbuf_custom_ref+0x30>)
 801983a:	4807      	ldr	r0, [pc, #28]	; (8019858 <ip_frag_free_pbuf_custom_ref+0x34>)
 801983c:	f000 fe0c 	bl	801a458 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8019840:	6879      	ldr	r1, [r7, #4]
 8019842:	2005      	movs	r0, #5
 8019844:	f7f5 f9ac 	bl	800eba0 <memp_free>
}
 8019848:	bf00      	nop
 801984a:	3708      	adds	r7, #8
 801984c:	46bd      	mov	sp, r7
 801984e:	bd80      	pop	{r7, pc}
 8019850:	0801e234 	.word	0x0801e234
 8019854:	0801e39c 	.word	0x0801e39c
 8019858:	0801e27c 	.word	0x0801e27c

0801985c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801985c:	b580      	push	{r7, lr}
 801985e:	b084      	sub	sp, #16
 8019860:	af00      	add	r7, sp, #0
 8019862:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8019868:	68fb      	ldr	r3, [r7, #12]
 801986a:	2b00      	cmp	r3, #0
 801986c:	d106      	bne.n	801987c <ipfrag_free_pbuf_custom+0x20>
 801986e:	4b11      	ldr	r3, [pc, #68]	; (80198b4 <ipfrag_free_pbuf_custom+0x58>)
 8019870:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8019874:	4910      	ldr	r1, [pc, #64]	; (80198b8 <ipfrag_free_pbuf_custom+0x5c>)
 8019876:	4811      	ldr	r0, [pc, #68]	; (80198bc <ipfrag_free_pbuf_custom+0x60>)
 8019878:	f000 fdee 	bl	801a458 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 801987c:	68fa      	ldr	r2, [r7, #12]
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	429a      	cmp	r2, r3
 8019882:	d006      	beq.n	8019892 <ipfrag_free_pbuf_custom+0x36>
 8019884:	4b0b      	ldr	r3, [pc, #44]	; (80198b4 <ipfrag_free_pbuf_custom+0x58>)
 8019886:	f240 22b9 	movw	r2, #697	; 0x2b9
 801988a:	490d      	ldr	r1, [pc, #52]	; (80198c0 <ipfrag_free_pbuf_custom+0x64>)
 801988c:	480b      	ldr	r0, [pc, #44]	; (80198bc <ipfrag_free_pbuf_custom+0x60>)
 801988e:	f000 fde3 	bl	801a458 <iprintf>
  if (pcr->original != NULL) {
 8019892:	68fb      	ldr	r3, [r7, #12]
 8019894:	695b      	ldr	r3, [r3, #20]
 8019896:	2b00      	cmp	r3, #0
 8019898:	d004      	beq.n	80198a4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801989a:	68fb      	ldr	r3, [r7, #12]
 801989c:	695b      	ldr	r3, [r3, #20]
 801989e:	4618      	mov	r0, r3
 80198a0:	f7f5 ff40 	bl	800f724 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80198a4:	68f8      	ldr	r0, [r7, #12]
 80198a6:	f7ff ffbd 	bl	8019824 <ip_frag_free_pbuf_custom_ref>
}
 80198aa:	bf00      	nop
 80198ac:	3710      	adds	r7, #16
 80198ae:	46bd      	mov	sp, r7
 80198b0:	bd80      	pop	{r7, pc}
 80198b2:	bf00      	nop
 80198b4:	0801e234 	.word	0x0801e234
 80198b8:	0801e3a8 	.word	0x0801e3a8
 80198bc:	0801e27c 	.word	0x0801e27c
 80198c0:	0801e3b4 	.word	0x0801e3b4

080198c4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80198c4:	b580      	push	{r7, lr}
 80198c6:	b092      	sub	sp, #72	; 0x48
 80198c8:	af02      	add	r7, sp, #8
 80198ca:	60f8      	str	r0, [r7, #12]
 80198cc:	60b9      	str	r1, [r7, #8]
 80198ce:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80198d0:	2300      	movs	r3, #0
 80198d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80198d4:	68bb      	ldr	r3, [r7, #8]
 80198d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80198d8:	3b14      	subs	r3, #20
 80198da:	2b00      	cmp	r3, #0
 80198dc:	da00      	bge.n	80198e0 <ip4_frag+0x1c>
 80198de:	3307      	adds	r3, #7
 80198e0:	10db      	asrs	r3, r3, #3
 80198e2:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80198e4:	2314      	movs	r3, #20
 80198e6:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 80198e8:	68fb      	ldr	r3, [r7, #12]
 80198ea:	685b      	ldr	r3, [r3, #4]
 80198ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 80198ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198f0:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80198f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198f4:	781b      	ldrb	r3, [r3, #0]
 80198f6:	f003 030f 	and.w	r3, r3, #15
 80198fa:	009b      	lsls	r3, r3, #2
 80198fc:	2b14      	cmp	r3, #20
 80198fe:	d009      	beq.n	8019914 <ip4_frag+0x50>
 8019900:	4b7a      	ldr	r3, [pc, #488]	; (8019aec <ip4_frag+0x228>)
 8019902:	f240 22e1 	movw	r2, #737	; 0x2e1
 8019906:	497a      	ldr	r1, [pc, #488]	; (8019af0 <ip4_frag+0x22c>)
 8019908:	487a      	ldr	r0, [pc, #488]	; (8019af4 <ip4_frag+0x230>)
 801990a:	f000 fda5 	bl	801a458 <iprintf>
 801990e:	f06f 0305 	mvn.w	r3, #5
 8019912:	e0e6      	b.n	8019ae2 <ip4_frag+0x21e>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8019914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019916:	88db      	ldrh	r3, [r3, #6]
 8019918:	b29b      	uxth	r3, r3
 801991a:	4618      	mov	r0, r3
 801991c:	f7f4 fd02 	bl	800e324 <lwip_htons>
 8019920:	4603      	mov	r3, r0
 8019922:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8019924:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019926:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801992a:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 801992c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801992e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019932:	2b00      	cmp	r3, #0
 8019934:	d009      	beq.n	801994a <ip4_frag+0x86>
 8019936:	4b6d      	ldr	r3, [pc, #436]	; (8019aec <ip4_frag+0x228>)
 8019938:	f240 22e6 	movw	r2, #742	; 0x2e6
 801993c:	496e      	ldr	r1, [pc, #440]	; (8019af8 <ip4_frag+0x234>)
 801993e:	486d      	ldr	r0, [pc, #436]	; (8019af4 <ip4_frag+0x230>)
 8019940:	f000 fd8a 	bl	801a458 <iprintf>
 8019944:	f06f 0305 	mvn.w	r3, #5
 8019948:	e0cb      	b.n	8019ae2 <ip4_frag+0x21e>

  left = p->tot_len - IP_HLEN;
 801994a:	68fb      	ldr	r3, [r7, #12]
 801994c:	891b      	ldrh	r3, [r3, #8]
 801994e:	3b14      	subs	r3, #20
 8019950:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 8019952:	e0bd      	b.n	8019ad0 <ip4_frag+0x20c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8019954:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8019956:	00da      	lsls	r2, r3, #3
 8019958:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801995a:	4293      	cmp	r3, r2
 801995c:	bfa8      	it	ge
 801995e:	4613      	movge	r3, r2
 8019960:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8019962:	2200      	movs	r2, #0
 8019964:	2114      	movs	r1, #20
 8019966:	2002      	movs	r0, #2
 8019968:	f7f5 fb64 	bl	800f034 <pbuf_alloc>
 801996c:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 801996e:	6a3b      	ldr	r3, [r7, #32]
 8019970:	2b00      	cmp	r3, #0
 8019972:	f000 80b3 	beq.w	8019adc <ip4_frag+0x218>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	895b      	ldrh	r3, [r3, #10]
 801997a:	2b13      	cmp	r3, #19
 801997c:	d806      	bhi.n	801998c <ip4_frag+0xc8>
 801997e:	4b5b      	ldr	r3, [pc, #364]	; (8019aec <ip4_frag+0x228>)
 8019980:	f44f 7242 	mov.w	r2, #776	; 0x308
 8019984:	495d      	ldr	r1, [pc, #372]	; (8019afc <ip4_frag+0x238>)
 8019986:	485b      	ldr	r0, [pc, #364]	; (8019af4 <ip4_frag+0x230>)
 8019988:	f000 fd66 	bl	801a458 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801998c:	6a3b      	ldr	r3, [r7, #32]
 801998e:	685b      	ldr	r3, [r3, #4]
 8019990:	2214      	movs	r2, #20
 8019992:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019994:	4618      	mov	r0, r3
 8019996:	f000 fcb4 	bl	801a302 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801999a:	6a3b      	ldr	r3, [r7, #32]
 801999c:	685b      	ldr	r3, [r3, #4]
 801999e:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 80199a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80199a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 80199a4:	e04f      	b.n	8019a46 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 80199a6:	68fb      	ldr	r3, [r7, #12]
 80199a8:	895a      	ldrh	r2, [r3, #10]
 80199aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80199ac:	1ad3      	subs	r3, r2, r3
 80199ae:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80199b0:	8b7a      	ldrh	r2, [r7, #26]
 80199b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80199b4:	4293      	cmp	r3, r2
 80199b6:	bf28      	it	cs
 80199b8:	4613      	movcs	r3, r2
 80199ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80199bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d105      	bne.n	80199ce <ip4_frag+0x10a>
        poff = 0;
 80199c2:	2300      	movs	r3, #0
 80199c4:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 80199c6:	68fb      	ldr	r3, [r7, #12]
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	60fb      	str	r3, [r7, #12]
        continue;
 80199cc:	e03b      	b.n	8019a46 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80199ce:	f7ff ff21 	bl	8019814 <ip_frag_alloc_pbuf_custom_ref>
 80199d2:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 80199d4:	697b      	ldr	r3, [r7, #20]
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	d103      	bne.n	80199e2 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 80199da:	6a38      	ldr	r0, [r7, #32]
 80199dc:	f7f5 fea2 	bl	800f724 <pbuf_free>
        goto memerr;
 80199e0:	e07d      	b.n	8019ade <ip4_frag+0x21a>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80199e2:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 80199e4:	68fb      	ldr	r3, [r7, #12]
 80199e6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80199e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80199ea:	4413      	add	r3, r2
 80199ec:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 80199ee:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80199f0:	9201      	str	r2, [sp, #4]
 80199f2:	9300      	str	r3, [sp, #0]
 80199f4:	4603      	mov	r3, r0
 80199f6:	2202      	movs	r2, #2
 80199f8:	2004      	movs	r0, #4
 80199fa:	f7f5 fcb5 	bl	800f368 <pbuf_alloced_custom>
 80199fe:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8019a00:	693b      	ldr	r3, [r7, #16]
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d106      	bne.n	8019a14 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 8019a06:	6978      	ldr	r0, [r7, #20]
 8019a08:	f7ff ff0c 	bl	8019824 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019a0c:	6a38      	ldr	r0, [r7, #32]
 8019a0e:	f7f5 fe89 	bl	800f724 <pbuf_free>
        goto memerr;
 8019a12:	e064      	b.n	8019ade <ip4_frag+0x21a>
      }
      pbuf_ref(p);
 8019a14:	68f8      	ldr	r0, [r7, #12]
 8019a16:	f7f5 ff35 	bl	800f884 <pbuf_ref>
      pcr->original = p;
 8019a1a:	697b      	ldr	r3, [r7, #20]
 8019a1c:	68fa      	ldr	r2, [r7, #12]
 8019a1e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019a20:	697b      	ldr	r3, [r7, #20]
 8019a22:	4a37      	ldr	r2, [pc, #220]	; (8019b00 <ip4_frag+0x23c>)
 8019a24:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8019a26:	6939      	ldr	r1, [r7, #16]
 8019a28:	6a38      	ldr	r0, [r7, #32]
 8019a2a:	f7f5 ff53 	bl	800f8d4 <pbuf_cat>
      left_to_copy -= newpbuflen;
 8019a2e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8019a30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019a32:	1ad3      	subs	r3, r2, r3
 8019a34:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 8019a36:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d004      	beq.n	8019a46 <ip4_frag+0x182>
        poff = 0;
 8019a3c:	2300      	movs	r3, #0
 8019a3e:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8019a40:	68fb      	ldr	r3, [r7, #12]
 8019a42:	681b      	ldr	r3, [r3, #0]
 8019a44:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8019a46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	d1ac      	bne.n	80199a6 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8019a4c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019a4e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019a50:	4413      	add	r3, r2
 8019a52:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019a54:	68bb      	ldr	r3, [r7, #8]
 8019a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019a58:	f1a3 0213 	sub.w	r2, r3, #19
 8019a5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019a5e:	429a      	cmp	r2, r3
 8019a60:	bfcc      	ite	gt
 8019a62:	2301      	movgt	r3, #1
 8019a64:	2300      	movle	r3, #0
 8019a66:	b2db      	uxtb	r3, r3
 8019a68:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8019a6a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019a6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019a70:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 8019a72:	69fb      	ldr	r3, [r7, #28]
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	d103      	bne.n	8019a80 <ip4_frag+0x1bc>
      tmp = tmp | IP_MF;
 8019a78:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019a7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019a7e:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8019a80:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019a82:	4618      	mov	r0, r3
 8019a84:	f7f4 fc4e 	bl	800e324 <lwip_htons>
 8019a88:	4603      	mov	r3, r0
 8019a8a:	461a      	mov	r2, r3
 8019a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a8e:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8019a90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019a92:	3314      	adds	r3, #20
 8019a94:	b29b      	uxth	r3, r3
 8019a96:	4618      	mov	r0, r3
 8019a98:	f7f4 fc44 	bl	800e324 <lwip_htons>
 8019a9c:	4603      	mov	r3, r0
 8019a9e:	461a      	mov	r2, r3
 8019aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019aa2:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8019aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019aa6:	2200      	movs	r2, #0
 8019aa8:	729a      	strb	r2, [r3, #10]
 8019aaa:	2200      	movs	r2, #0
 8019aac:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8019aae:	68bb      	ldr	r3, [r7, #8]
 8019ab0:	695b      	ldr	r3, [r3, #20]
 8019ab2:	687a      	ldr	r2, [r7, #4]
 8019ab4:	6a39      	ldr	r1, [r7, #32]
 8019ab6:	68b8      	ldr	r0, [r7, #8]
 8019ab8:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8019aba:	6a38      	ldr	r0, [r7, #32]
 8019abc:	f7f5 fe32 	bl	800f724 <pbuf_free>
    left -= fragsize;
 8019ac0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019ac2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019ac4:	1ad3      	subs	r3, r2, r3
 8019ac6:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8019ac8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8019aca:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8019acc:	4413      	add	r3, r2
 8019ace:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8019ad0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	f47f af3e 	bne.w	8019954 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019ad8:	2300      	movs	r3, #0
 8019ada:	e002      	b.n	8019ae2 <ip4_frag+0x21e>
      goto memerr;
 8019adc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8019ade:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019ae2:	4618      	mov	r0, r3
 8019ae4:	3740      	adds	r7, #64	; 0x40
 8019ae6:	46bd      	mov	sp, r7
 8019ae8:	bd80      	pop	{r7, pc}
 8019aea:	bf00      	nop
 8019aec:	0801e234 	.word	0x0801e234
 8019af0:	0801e3c0 	.word	0x0801e3c0
 8019af4:	0801e27c 	.word	0x0801e27c
 8019af8:	0801e3e8 	.word	0x0801e3e8
 8019afc:	0801e404 	.word	0x0801e404
 8019b00:	0801985d 	.word	0x0801985d

08019b04 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019b04:	b580      	push	{r7, lr}
 8019b06:	b086      	sub	sp, #24
 8019b08:	af00      	add	r7, sp, #0
 8019b0a:	6078      	str	r0, [r7, #4]
 8019b0c:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8019b0e:	230e      	movs	r3, #14
 8019b10:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8019b12:	687b      	ldr	r3, [r7, #4]
 8019b14:	895b      	ldrh	r3, [r3, #10]
 8019b16:	2b0e      	cmp	r3, #14
 8019b18:	d977      	bls.n	8019c0a <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	685b      	ldr	r3, [r3, #4]
 8019b1e:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8019b20:	693b      	ldr	r3, [r7, #16]
 8019b22:	7b1a      	ldrb	r2, [r3, #12]
 8019b24:	7b5b      	ldrb	r3, [r3, #13]
 8019b26:	021b      	lsls	r3, r3, #8
 8019b28:	4313      	orrs	r3, r2
 8019b2a:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8019b2c:	693b      	ldr	r3, [r7, #16]
 8019b2e:	781b      	ldrb	r3, [r3, #0]
 8019b30:	f003 0301 	and.w	r3, r3, #1
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	d023      	beq.n	8019b80 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8019b38:	693b      	ldr	r3, [r7, #16]
 8019b3a:	781b      	ldrb	r3, [r3, #0]
 8019b3c:	2b01      	cmp	r3, #1
 8019b3e:	d10f      	bne.n	8019b60 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019b40:	693b      	ldr	r3, [r7, #16]
 8019b42:	785b      	ldrb	r3, [r3, #1]
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	d11b      	bne.n	8019b80 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8019b48:	693b      	ldr	r3, [r7, #16]
 8019b4a:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019b4c:	2b5e      	cmp	r3, #94	; 0x5e
 8019b4e:	d117      	bne.n	8019b80 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	7b5b      	ldrb	r3, [r3, #13]
 8019b54:	f043 0310 	orr.w	r3, r3, #16
 8019b58:	b2da      	uxtb	r2, r3
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	735a      	strb	r2, [r3, #13]
 8019b5e:	e00f      	b.n	8019b80 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8019b60:	693b      	ldr	r3, [r7, #16]
 8019b62:	2206      	movs	r2, #6
 8019b64:	4931      	ldr	r1, [pc, #196]	; (8019c2c <ethernet_input+0x128>)
 8019b66:	4618      	mov	r0, r3
 8019b68:	f000 fbbb 	bl	801a2e2 <memcmp>
 8019b6c:	4603      	mov	r3, r0
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	d106      	bne.n	8019b80 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	7b5b      	ldrb	r3, [r3, #13]
 8019b76:	f043 0308 	orr.w	r3, r3, #8
 8019b7a:	b2da      	uxtb	r2, r3
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8019b80:	89fb      	ldrh	r3, [r7, #14]
 8019b82:	2b08      	cmp	r3, #8
 8019b84:	d003      	beq.n	8019b8e <ethernet_input+0x8a>
 8019b86:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8019b8a:	d01e      	beq.n	8019bca <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8019b8c:	e046      	b.n	8019c1c <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019b8e:	683b      	ldr	r3, [r7, #0]
 8019b90:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8019b94:	f003 0308 	and.w	r3, r3, #8
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d038      	beq.n	8019c0e <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	895b      	ldrh	r3, [r3, #10]
 8019ba0:	461a      	mov	r2, r3
 8019ba2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8019ba6:	429a      	cmp	r2, r3
 8019ba8:	db33      	blt.n	8019c12 <ethernet_input+0x10e>
 8019baa:	8afb      	ldrh	r3, [r7, #22]
 8019bac:	425b      	negs	r3, r3
 8019bae:	b29b      	uxth	r3, r3
 8019bb0:	b21b      	sxth	r3, r3
 8019bb2:	4619      	mov	r1, r3
 8019bb4:	6878      	ldr	r0, [r7, #4]
 8019bb6:	f7f5 fd91 	bl	800f6dc <pbuf_header>
 8019bba:	4603      	mov	r3, r0
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	d128      	bne.n	8019c12 <ethernet_input+0x10e>
        ip4_input(p, netif);
 8019bc0:	6839      	ldr	r1, [r7, #0]
 8019bc2:	6878      	ldr	r0, [r7, #4]
 8019bc4:	f7fe ff5e 	bl	8018a84 <ip4_input>
      break;
 8019bc8:	e01d      	b.n	8019c06 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019bca:	683b      	ldr	r3, [r7, #0]
 8019bcc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8019bd0:	f003 0308 	and.w	r3, r3, #8
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	d01e      	beq.n	8019c16 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	895b      	ldrh	r3, [r3, #10]
 8019bdc:	461a      	mov	r2, r3
 8019bde:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8019be2:	429a      	cmp	r2, r3
 8019be4:	db19      	blt.n	8019c1a <ethernet_input+0x116>
 8019be6:	8afb      	ldrh	r3, [r7, #22]
 8019be8:	425b      	negs	r3, r3
 8019bea:	b29b      	uxth	r3, r3
 8019bec:	b21b      	sxth	r3, r3
 8019bee:	4619      	mov	r1, r3
 8019bf0:	6878      	ldr	r0, [r7, #4]
 8019bf2:	f7f5 fd73 	bl	800f6dc <pbuf_header>
 8019bf6:	4603      	mov	r3, r0
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d10e      	bne.n	8019c1a <ethernet_input+0x116>
        etharp_input(p, netif);
 8019bfc:	6839      	ldr	r1, [r7, #0]
 8019bfe:	6878      	ldr	r0, [r7, #4]
 8019c00:	f7fe f92a 	bl	8017e58 <etharp_input>
      break;
 8019c04:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8019c06:	2300      	movs	r3, #0
 8019c08:	e00c      	b.n	8019c24 <ethernet_input+0x120>
    goto free_and_return;
 8019c0a:	bf00      	nop
 8019c0c:	e006      	b.n	8019c1c <ethernet_input+0x118>
        goto free_and_return;
 8019c0e:	bf00      	nop
 8019c10:	e004      	b.n	8019c1c <ethernet_input+0x118>
        goto free_and_return;
 8019c12:	bf00      	nop
 8019c14:	e002      	b.n	8019c1c <ethernet_input+0x118>
        goto free_and_return;
 8019c16:	bf00      	nop
 8019c18:	e000      	b.n	8019c1c <ethernet_input+0x118>
        goto free_and_return;
 8019c1a:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8019c1c:	6878      	ldr	r0, [r7, #4]
 8019c1e:	f7f5 fd81 	bl	800f724 <pbuf_free>
  return ERR_OK;
 8019c22:	2300      	movs	r3, #0
}
 8019c24:	4618      	mov	r0, r3
 8019c26:	3718      	adds	r7, #24
 8019c28:	46bd      	mov	sp, r7
 8019c2a:	bd80      	pop	{r7, pc}
 8019c2c:	0801e618 	.word	0x0801e618

08019c30 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8019c30:	b580      	push	{r7, lr}
 8019c32:	b086      	sub	sp, #24
 8019c34:	af00      	add	r7, sp, #0
 8019c36:	60f8      	str	r0, [r7, #12]
 8019c38:	60b9      	str	r1, [r7, #8]
 8019c3a:	607a      	str	r2, [r7, #4]
 8019c3c:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019c3e:	8c3b      	ldrh	r3, [r7, #32]
 8019c40:	4618      	mov	r0, r3
 8019c42:	f7f4 fb6f 	bl	800e324 <lwip_htons>
 8019c46:	4603      	mov	r3, r0
 8019c48:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8019c4a:	210e      	movs	r1, #14
 8019c4c:	68b8      	ldr	r0, [r7, #8]
 8019c4e:	f7f5 fd45 	bl	800f6dc <pbuf_header>
 8019c52:	4603      	mov	r3, r0
 8019c54:	2b00      	cmp	r3, #0
 8019c56:	d125      	bne.n	8019ca4 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8019c58:	68bb      	ldr	r3, [r7, #8]
 8019c5a:	685b      	ldr	r3, [r3, #4]
 8019c5c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019c5e:	693b      	ldr	r3, [r7, #16]
 8019c60:	8afa      	ldrh	r2, [r7, #22]
 8019c62:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8019c64:	693b      	ldr	r3, [r7, #16]
 8019c66:	2206      	movs	r2, #6
 8019c68:	6839      	ldr	r1, [r7, #0]
 8019c6a:	4618      	mov	r0, r3
 8019c6c:	f000 fb49 	bl	801a302 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8019c70:	693b      	ldr	r3, [r7, #16]
 8019c72:	3306      	adds	r3, #6
 8019c74:	2206      	movs	r2, #6
 8019c76:	6879      	ldr	r1, [r7, #4]
 8019c78:	4618      	mov	r0, r3
 8019c7a:	f000 fb42 	bl	801a302 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8019c7e:	68fb      	ldr	r3, [r7, #12]
 8019c80:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019c84:	2b06      	cmp	r3, #6
 8019c86:	d006      	beq.n	8019c96 <ethernet_output+0x66>
 8019c88:	4b0a      	ldr	r3, [pc, #40]	; (8019cb4 <ethernet_output+0x84>)
 8019c8a:	f240 122b 	movw	r2, #299	; 0x12b
 8019c8e:	490a      	ldr	r1, [pc, #40]	; (8019cb8 <ethernet_output+0x88>)
 8019c90:	480a      	ldr	r0, [pc, #40]	; (8019cbc <ethernet_output+0x8c>)
 8019c92:	f000 fbe1 	bl	801a458 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8019c96:	68fb      	ldr	r3, [r7, #12]
 8019c98:	699b      	ldr	r3, [r3, #24]
 8019c9a:	68b9      	ldr	r1, [r7, #8]
 8019c9c:	68f8      	ldr	r0, [r7, #12]
 8019c9e:	4798      	blx	r3
 8019ca0:	4603      	mov	r3, r0
 8019ca2:	e002      	b.n	8019caa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8019ca4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8019ca6:	f06f 0301 	mvn.w	r3, #1
}
 8019caa:	4618      	mov	r0, r3
 8019cac:	3718      	adds	r7, #24
 8019cae:	46bd      	mov	sp, r7
 8019cb0:	bd80      	pop	{r7, pc}
 8019cb2:	bf00      	nop
 8019cb4:	0801e424 	.word	0x0801e424
 8019cb8:	0801e45c 	.word	0x0801e45c
 8019cbc:	0801e490 	.word	0x0801e490

08019cc0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8019cc0:	b580      	push	{r7, lr}
 8019cc2:	b086      	sub	sp, #24
 8019cc4:	af00      	add	r7, sp, #0
 8019cc6:	6078      	str	r0, [r7, #4]
 8019cc8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8019cca:	683b      	ldr	r3, [r7, #0]
 8019ccc:	60bb      	str	r3, [r7, #8]
 8019cce:	2304      	movs	r3, #4
 8019cd0:	60fb      	str	r3, [r7, #12]
 8019cd2:	2300      	movs	r3, #0
 8019cd4:	613b      	str	r3, [r7, #16]
 8019cd6:	2300      	movs	r3, #0
 8019cd8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8019cda:	f107 0308 	add.w	r3, r7, #8
 8019cde:	2100      	movs	r1, #0
 8019ce0:	4618      	mov	r0, r3
 8019ce2:	f7ef fbea 	bl	80094ba <osMessageCreate>
 8019ce6:	4602      	mov	r2, r0
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	2b00      	cmp	r3, #0
 8019cf2:	d102      	bne.n	8019cfa <sys_mbox_new+0x3a>
    return ERR_MEM;
 8019cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8019cf8:	e000      	b.n	8019cfc <sys_mbox_new+0x3c>

  return ERR_OK;
 8019cfa:	2300      	movs	r3, #0
}
 8019cfc:	4618      	mov	r0, r3
 8019cfe:	3718      	adds	r7, #24
 8019d00:	46bd      	mov	sp, r7
 8019d02:	bd80      	pop	{r7, pc}

08019d04 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8019d04:	b580      	push	{r7, lr}
 8019d06:	b082      	sub	sp, #8
 8019d08:	af00      	add	r7, sp, #0
 8019d0a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8019d0c:	687b      	ldr	r3, [r7, #4]
 8019d0e:	681b      	ldr	r3, [r3, #0]
 8019d10:	4618      	mov	r0, r3
 8019d12:	f7ef fcaf 	bl	8009674 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	681b      	ldr	r3, [r3, #0]
 8019d1a:	4618      	mov	r0, r3
 8019d1c:	f7ef fcc0 	bl	80096a0 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8019d20:	bf00      	nop
 8019d22:	3708      	adds	r7, #8
 8019d24:	46bd      	mov	sp, r7
 8019d26:	bd80      	pop	{r7, pc}

08019d28 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8019d28:	b580      	push	{r7, lr}
 8019d2a:	b082      	sub	sp, #8
 8019d2c:	af00      	add	r7, sp, #0
 8019d2e:	6078      	str	r0, [r7, #4]
 8019d30:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8019d32:	bf00      	nop
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	6839      	ldr	r1, [r7, #0]
 8019d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8019d3e:	4618      	mov	r0, r3
 8019d40:	f7ef fbe4 	bl	800950c <osMessagePut>
 8019d44:	4603      	mov	r3, r0
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d1f4      	bne.n	8019d34 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 8019d4a:	bf00      	nop
 8019d4c:	bf00      	nop
 8019d4e:	3708      	adds	r7, #8
 8019d50:	46bd      	mov	sp, r7
 8019d52:	bd80      	pop	{r7, pc}

08019d54 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019d54:	b580      	push	{r7, lr}
 8019d56:	b084      	sub	sp, #16
 8019d58:	af00      	add	r7, sp, #0
 8019d5a:	6078      	str	r0, [r7, #4]
 8019d5c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8019d5e:	687b      	ldr	r3, [r7, #4]
 8019d60:	681b      	ldr	r3, [r3, #0]
 8019d62:	6839      	ldr	r1, [r7, #0]
 8019d64:	2200      	movs	r2, #0
 8019d66:	4618      	mov	r0, r3
 8019d68:	f7ef fbd0 	bl	800950c <osMessagePut>
 8019d6c:	4603      	mov	r3, r0
 8019d6e:	2b00      	cmp	r3, #0
 8019d70:	d102      	bne.n	8019d78 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8019d72:	2300      	movs	r3, #0
 8019d74:	73fb      	strb	r3, [r7, #15]
 8019d76:	e001      	b.n	8019d7c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8019d78:	23ff      	movs	r3, #255	; 0xff
 8019d7a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8019d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019d80:	4618      	mov	r0, r3
 8019d82:	3710      	adds	r7, #16
 8019d84:	46bd      	mov	sp, r7
 8019d86:	bd80      	pop	{r7, pc}

08019d88 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8019d88:	b580      	push	{r7, lr}
 8019d8a:	b08c      	sub	sp, #48	; 0x30
 8019d8c:	af00      	add	r7, sp, #0
 8019d8e:	61f8      	str	r0, [r7, #28]
 8019d90:	61b9      	str	r1, [r7, #24]
 8019d92:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8019d94:	f7ef f9bc 	bl	8009110 <osKernelSysTick>
 8019d98:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8019d9a:	697b      	ldr	r3, [r7, #20]
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	d017      	beq.n	8019dd0 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8019da0:	69fb      	ldr	r3, [r7, #28]
 8019da2:	6819      	ldr	r1, [r3, #0]
 8019da4:	f107 0320 	add.w	r3, r7, #32
 8019da8:	697a      	ldr	r2, [r7, #20]
 8019daa:	4618      	mov	r0, r3
 8019dac:	f7ef fbee 	bl	800958c <osMessageGet>

    if(event.status == osEventMessage)
 8019db0:	6a3b      	ldr	r3, [r7, #32]
 8019db2:	2b10      	cmp	r3, #16
 8019db4:	d109      	bne.n	8019dca <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8019db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019db8:	461a      	mov	r2, r3
 8019dba:	69bb      	ldr	r3, [r7, #24]
 8019dbc:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8019dbe:	f7ef f9a7 	bl	8009110 <osKernelSysTick>
 8019dc2:	4602      	mov	r2, r0
 8019dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dc6:	1ad3      	subs	r3, r2, r3
 8019dc8:	e019      	b.n	8019dfe <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019dca:	f04f 33ff 	mov.w	r3, #4294967295
 8019dce:	e016      	b.n	8019dfe <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8019dd0:	69fb      	ldr	r3, [r7, #28]
 8019dd2:	6819      	ldr	r1, [r3, #0]
 8019dd4:	463b      	mov	r3, r7
 8019dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8019dda:	4618      	mov	r0, r3
 8019ddc:	f7ef fbd6 	bl	800958c <osMessageGet>
 8019de0:	f107 0320 	add.w	r3, r7, #32
 8019de4:	463a      	mov	r2, r7
 8019de6:	ca07      	ldmia	r2, {r0, r1, r2}
 8019de8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8019dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dee:	461a      	mov	r2, r3
 8019df0:	69bb      	ldr	r3, [r7, #24]
 8019df2:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8019df4:	f7ef f98c 	bl	8009110 <osKernelSysTick>
 8019df8:	4602      	mov	r2, r0
 8019dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dfc:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8019dfe:	4618      	mov	r0, r3
 8019e00:	3730      	adds	r7, #48	; 0x30
 8019e02:	46bd      	mov	sp, r7
 8019e04:	bd80      	pop	{r7, pc}

08019e06 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8019e06:	b580      	push	{r7, lr}
 8019e08:	b086      	sub	sp, #24
 8019e0a:	af00      	add	r7, sp, #0
 8019e0c:	6078      	str	r0, [r7, #4]
 8019e0e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	6819      	ldr	r1, [r3, #0]
 8019e14:	f107 030c 	add.w	r3, r7, #12
 8019e18:	2200      	movs	r2, #0
 8019e1a:	4618      	mov	r0, r3
 8019e1c:	f7ef fbb6 	bl	800958c <osMessageGet>

  if(event.status == osEventMessage)
 8019e20:	68fb      	ldr	r3, [r7, #12]
 8019e22:	2b10      	cmp	r3, #16
 8019e24:	d105      	bne.n	8019e32 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8019e26:	693b      	ldr	r3, [r7, #16]
 8019e28:	461a      	mov	r2, r3
 8019e2a:	683b      	ldr	r3, [r7, #0]
 8019e2c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8019e2e:	2300      	movs	r3, #0
 8019e30:	e001      	b.n	8019e36 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8019e32:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8019e36:	4618      	mov	r0, r3
 8019e38:	3718      	adds	r7, #24
 8019e3a:	46bd      	mov	sp, r7
 8019e3c:	bd80      	pop	{r7, pc}

08019e3e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8019e3e:	b480      	push	{r7}
 8019e40:	b083      	sub	sp, #12
 8019e42:	af00      	add	r7, sp, #0
 8019e44:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8019e46:	687b      	ldr	r3, [r7, #4]
 8019e48:	681b      	ldr	r3, [r3, #0]
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	d101      	bne.n	8019e52 <sys_mbox_valid+0x14>
    return 0;
 8019e4e:	2300      	movs	r3, #0
 8019e50:	e000      	b.n	8019e54 <sys_mbox_valid+0x16>
  else
    return 1;
 8019e52:	2301      	movs	r3, #1
}
 8019e54:	4618      	mov	r0, r3
 8019e56:	370c      	adds	r7, #12
 8019e58:	46bd      	mov	sp, r7
 8019e5a:	bc80      	pop	{r7}
 8019e5c:	4770      	bx	lr

08019e5e <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8019e5e:	b480      	push	{r7}
 8019e60:	b083      	sub	sp, #12
 8019e62:	af00      	add	r7, sp, #0
 8019e64:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	2200      	movs	r2, #0
 8019e6a:	601a      	str	r2, [r3, #0]
}
 8019e6c:	bf00      	nop
 8019e6e:	370c      	adds	r7, #12
 8019e70:	46bd      	mov	sp, r7
 8019e72:	bc80      	pop	{r7}
 8019e74:	4770      	bx	lr

08019e76 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8019e76:	b580      	push	{r7, lr}
 8019e78:	b084      	sub	sp, #16
 8019e7a:	af00      	add	r7, sp, #0
 8019e7c:	6078      	str	r0, [r7, #4]
 8019e7e:	460b      	mov	r3, r1
 8019e80:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8019e82:	2300      	movs	r3, #0
 8019e84:	60bb      	str	r3, [r7, #8]
 8019e86:	2300      	movs	r3, #0
 8019e88:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8019e8a:	f107 0308 	add.w	r3, r7, #8
 8019e8e:	2101      	movs	r1, #1
 8019e90:	4618      	mov	r0, r3
 8019e92:	f7ef fa49 	bl	8009328 <osSemaphoreCreate>
 8019e96:	4602      	mov	r2, r0
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	681b      	ldr	r3, [r3, #0]
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	d102      	bne.n	8019eaa <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8019ea8:	e009      	b.n	8019ebe <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8019eaa:	78fb      	ldrb	r3, [r7, #3]
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	d105      	bne.n	8019ebc <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	681b      	ldr	r3, [r3, #0]
 8019eb4:	2100      	movs	r1, #0
 8019eb6:	4618      	mov	r0, r3
 8019eb8:	f7ef fa68 	bl	800938c <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8019ebc:	2300      	movs	r3, #0
}
 8019ebe:	4618      	mov	r0, r3
 8019ec0:	3710      	adds	r7, #16
 8019ec2:	46bd      	mov	sp, r7
 8019ec4:	bd80      	pop	{r7, pc}

08019ec6 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8019ec6:	b580      	push	{r7, lr}
 8019ec8:	b084      	sub	sp, #16
 8019eca:	af00      	add	r7, sp, #0
 8019ecc:	6078      	str	r0, [r7, #4]
 8019ece:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8019ed0:	f7ef f91e 	bl	8009110 <osKernelSysTick>
 8019ed4:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8019ed6:	683b      	ldr	r3, [r7, #0]
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	d011      	beq.n	8019f00 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	6839      	ldr	r1, [r7, #0]
 8019ee2:	4618      	mov	r0, r3
 8019ee4:	f7ef fa52 	bl	800938c <osSemaphoreWait>
 8019ee8:	4603      	mov	r3, r0
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d105      	bne.n	8019efa <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8019eee:	f7ef f90f 	bl	8009110 <osKernelSysTick>
 8019ef2:	4602      	mov	r2, r0
 8019ef4:	68fb      	ldr	r3, [r7, #12]
 8019ef6:	1ad3      	subs	r3, r2, r3
 8019ef8:	e012      	b.n	8019f20 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019efa:	f04f 33ff 	mov.w	r3, #4294967295
 8019efe:	e00f      	b.n	8019f20 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8019f00:	bf00      	nop
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	681b      	ldr	r3, [r3, #0]
 8019f06:	f04f 31ff 	mov.w	r1, #4294967295
 8019f0a:	4618      	mov	r0, r3
 8019f0c:	f7ef fa3e 	bl	800938c <osSemaphoreWait>
 8019f10:	4603      	mov	r3, r0
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	d1f5      	bne.n	8019f02 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8019f16:	f7ef f8fb 	bl	8009110 <osKernelSysTick>
 8019f1a:	4602      	mov	r2, r0
 8019f1c:	68fb      	ldr	r3, [r7, #12]
 8019f1e:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8019f20:	4618      	mov	r0, r3
 8019f22:	3710      	adds	r7, #16
 8019f24:	46bd      	mov	sp, r7
 8019f26:	bd80      	pop	{r7, pc}

08019f28 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8019f28:	b580      	push	{r7, lr}
 8019f2a:	b082      	sub	sp, #8
 8019f2c:	af00      	add	r7, sp, #0
 8019f2e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	681b      	ldr	r3, [r3, #0]
 8019f34:	4618      	mov	r0, r3
 8019f36:	f7ef fa77 	bl	8009428 <osSemaphoreRelease>
}
 8019f3a:	bf00      	nop
 8019f3c:	3708      	adds	r7, #8
 8019f3e:	46bd      	mov	sp, r7
 8019f40:	bd80      	pop	{r7, pc}

08019f42 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8019f42:	b580      	push	{r7, lr}
 8019f44:	b082      	sub	sp, #8
 8019f46:	af00      	add	r7, sp, #0
 8019f48:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	4618      	mov	r0, r3
 8019f50:	f7ef faa0 	bl	8009494 <osSemaphoreDelete>
}
 8019f54:	bf00      	nop
 8019f56:	3708      	adds	r7, #8
 8019f58:	46bd      	mov	sp, r7
 8019f5a:	bd80      	pop	{r7, pc}

08019f5c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8019f5c:	b480      	push	{r7}
 8019f5e:	b083      	sub	sp, #12
 8019f60:	af00      	add	r7, sp, #0
 8019f62:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	681b      	ldr	r3, [r3, #0]
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d101      	bne.n	8019f70 <sys_sem_valid+0x14>
    return 0;
 8019f6c:	2300      	movs	r3, #0
 8019f6e:	e000      	b.n	8019f72 <sys_sem_valid+0x16>
  else
    return 1;
 8019f70:	2301      	movs	r3, #1
}
 8019f72:	4618      	mov	r0, r3
 8019f74:	370c      	adds	r7, #12
 8019f76:	46bd      	mov	sp, r7
 8019f78:	bc80      	pop	{r7}
 8019f7a:	4770      	bx	lr

08019f7c <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8019f7c:	b480      	push	{r7}
 8019f7e:	b083      	sub	sp, #12
 8019f80:	af00      	add	r7, sp, #0
 8019f82:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	2200      	movs	r2, #0
 8019f88:	601a      	str	r2, [r3, #0]
}
 8019f8a:	bf00      	nop
 8019f8c:	370c      	adds	r7, #12
 8019f8e:	46bd      	mov	sp, r7
 8019f90:	bc80      	pop	{r7}
 8019f92:	4770      	bx	lr

08019f94 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8019f94:	b580      	push	{r7, lr}
 8019f96:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8019f98:	4803      	ldr	r0, [pc, #12]	; (8019fa8 <sys_init+0x14>)
 8019f9a:	f7ef f929 	bl	80091f0 <osMutexCreate>
 8019f9e:	4603      	mov	r3, r0
 8019fa0:	4a02      	ldr	r2, [pc, #8]	; (8019fac <sys_init+0x18>)
 8019fa2:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8019fa4:	bf00      	nop
 8019fa6:	bd80      	pop	{r7, pc}
 8019fa8:	0801e628 	.word	0x0801e628
 8019fac:	2000ed50 	.word	0x2000ed50

08019fb0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019fb0:	b580      	push	{r7, lr}
 8019fb2:	b084      	sub	sp, #16
 8019fb4:	af00      	add	r7, sp, #0
 8019fb6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8019fb8:	2300      	movs	r3, #0
 8019fba:	60bb      	str	r3, [r7, #8]
 8019fbc:	2300      	movs	r3, #0
 8019fbe:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8019fc0:	f107 0308 	add.w	r3, r7, #8
 8019fc4:	4618      	mov	r0, r3
 8019fc6:	f7ef f913 	bl	80091f0 <osMutexCreate>
 8019fca:	4602      	mov	r2, r0
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d102      	bne.n	8019fde <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8019fdc:	e000      	b.n	8019fe0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8019fde:	2300      	movs	r3, #0
}
 8019fe0:	4618      	mov	r0, r3
 8019fe2:	3710      	adds	r7, #16
 8019fe4:	46bd      	mov	sp, r7
 8019fe6:	bd80      	pop	{r7, pc}

08019fe8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019fe8:	b580      	push	{r7, lr}
 8019fea:	b082      	sub	sp, #8
 8019fec:	af00      	add	r7, sp, #0
 8019fee:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8019ff8:	4618      	mov	r0, r3
 8019ffa:	f7ef f911 	bl	8009220 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8019ffe:	bf00      	nop
 801a000:	3708      	adds	r7, #8
 801a002:	46bd      	mov	sp, r7
 801a004:	bd80      	pop	{r7, pc}

0801a006 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801a006:	b580      	push	{r7, lr}
 801a008:	b082      	sub	sp, #8
 801a00a:	af00      	add	r7, sp, #0
 801a00c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	681b      	ldr	r3, [r3, #0]
 801a012:	4618      	mov	r0, r3
 801a014:	f7ef f952 	bl	80092bc <osMutexRelease>
}
 801a018:	bf00      	nop
 801a01a:	3708      	adds	r7, #8
 801a01c:	46bd      	mov	sp, r7
 801a01e:	bd80      	pop	{r7, pc}

0801a020 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801a020:	b580      	push	{r7, lr}
 801a022:	b08c      	sub	sp, #48	; 0x30
 801a024:	af00      	add	r7, sp, #0
 801a026:	60f8      	str	r0, [r7, #12]
 801a028:	60b9      	str	r1, [r7, #8]
 801a02a:	607a      	str	r2, [r7, #4]
 801a02c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801a02e:	f107 0314 	add.w	r3, r7, #20
 801a032:	2200      	movs	r2, #0
 801a034:	601a      	str	r2, [r3, #0]
 801a036:	605a      	str	r2, [r3, #4]
 801a038:	609a      	str	r2, [r3, #8]
 801a03a:	60da      	str	r2, [r3, #12]
 801a03c:	611a      	str	r2, [r3, #16]
 801a03e:	615a      	str	r2, [r3, #20]
 801a040:	619a      	str	r2, [r3, #24]
 801a042:	68fb      	ldr	r3, [r7, #12]
 801a044:	617b      	str	r3, [r7, #20]
 801a046:	68bb      	ldr	r3, [r7, #8]
 801a048:	61bb      	str	r3, [r7, #24]
 801a04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a04c:	b21b      	sxth	r3, r3
 801a04e:	83bb      	strh	r3, [r7, #28]
 801a050:	683b      	ldr	r3, [r7, #0]
 801a052:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801a054:	f107 0314 	add.w	r3, r7, #20
 801a058:	6879      	ldr	r1, [r7, #4]
 801a05a:	4618      	mov	r0, r3
 801a05c:	f7ef f868 	bl	8009130 <osThreadCreate>
 801a060:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801a062:	4618      	mov	r0, r3
 801a064:	3730      	adds	r7, #48	; 0x30
 801a066:	46bd      	mov	sp, r7
 801a068:	bd80      	pop	{r7, pc}
	...

0801a06c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801a06c:	b580      	push	{r7, lr}
 801a06e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801a070:	4b04      	ldr	r3, [pc, #16]	; (801a084 <sys_arch_protect+0x18>)
 801a072:	681b      	ldr	r3, [r3, #0]
 801a074:	f04f 31ff 	mov.w	r1, #4294967295
 801a078:	4618      	mov	r0, r3
 801a07a:	f7ef f8d1 	bl	8009220 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801a07e:	2301      	movs	r3, #1
}
 801a080:	4618      	mov	r0, r3
 801a082:	bd80      	pop	{r7, pc}
 801a084:	2000ed50 	.word	0x2000ed50

0801a088 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801a088:	b580      	push	{r7, lr}
 801a08a:	b082      	sub	sp, #8
 801a08c:	af00      	add	r7, sp, #0
 801a08e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801a090:	4b04      	ldr	r3, [pc, #16]	; (801a0a4 <sys_arch_unprotect+0x1c>)
 801a092:	681b      	ldr	r3, [r3, #0]
 801a094:	4618      	mov	r0, r3
 801a096:	f7ef f911 	bl	80092bc <osMutexRelease>
}
 801a09a:	bf00      	nop
 801a09c:	3708      	adds	r7, #8
 801a09e:	46bd      	mov	sp, r7
 801a0a0:	bd80      	pop	{r7, pc}
 801a0a2:	bf00      	nop
 801a0a4:	2000ed50 	.word	0x2000ed50

0801a0a8 <std>:
 801a0a8:	2300      	movs	r3, #0
 801a0aa:	b510      	push	{r4, lr}
 801a0ac:	4604      	mov	r4, r0
 801a0ae:	e9c0 3300 	strd	r3, r3, [r0]
 801a0b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a0b6:	6083      	str	r3, [r0, #8]
 801a0b8:	8181      	strh	r1, [r0, #12]
 801a0ba:	6643      	str	r3, [r0, #100]	; 0x64
 801a0bc:	81c2      	strh	r2, [r0, #14]
 801a0be:	6183      	str	r3, [r0, #24]
 801a0c0:	4619      	mov	r1, r3
 801a0c2:	2208      	movs	r2, #8
 801a0c4:	305c      	adds	r0, #92	; 0x5c
 801a0c6:	f000 f92a 	bl	801a31e <memset>
 801a0ca:	4b05      	ldr	r3, [pc, #20]	; (801a0e0 <std+0x38>)
 801a0cc:	6224      	str	r4, [r4, #32]
 801a0ce:	6263      	str	r3, [r4, #36]	; 0x24
 801a0d0:	4b04      	ldr	r3, [pc, #16]	; (801a0e4 <std+0x3c>)
 801a0d2:	62a3      	str	r3, [r4, #40]	; 0x28
 801a0d4:	4b04      	ldr	r3, [pc, #16]	; (801a0e8 <std+0x40>)
 801a0d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a0d8:	4b04      	ldr	r3, [pc, #16]	; (801a0ec <std+0x44>)
 801a0da:	6323      	str	r3, [r4, #48]	; 0x30
 801a0dc:	bd10      	pop	{r4, pc}
 801a0de:	bf00      	nop
 801a0e0:	0801a639 	.word	0x0801a639
 801a0e4:	0801a65b 	.word	0x0801a65b
 801a0e8:	0801a693 	.word	0x0801a693
 801a0ec:	0801a6b7 	.word	0x0801a6b7

0801a0f0 <_cleanup_r>:
 801a0f0:	4901      	ldr	r1, [pc, #4]	; (801a0f8 <_cleanup_r+0x8>)
 801a0f2:	f000 b8af 	b.w	801a254 <_fwalk_reent>
 801a0f6:	bf00      	nop
 801a0f8:	0801a869 	.word	0x0801a869

0801a0fc <__sfmoreglue>:
 801a0fc:	2268      	movs	r2, #104	; 0x68
 801a0fe:	b570      	push	{r4, r5, r6, lr}
 801a100:	1e4d      	subs	r5, r1, #1
 801a102:	4355      	muls	r5, r2
 801a104:	460e      	mov	r6, r1
 801a106:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a10a:	f000 f931 	bl	801a370 <_malloc_r>
 801a10e:	4604      	mov	r4, r0
 801a110:	b140      	cbz	r0, 801a124 <__sfmoreglue+0x28>
 801a112:	2100      	movs	r1, #0
 801a114:	e9c0 1600 	strd	r1, r6, [r0]
 801a118:	300c      	adds	r0, #12
 801a11a:	60a0      	str	r0, [r4, #8]
 801a11c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a120:	f000 f8fd 	bl	801a31e <memset>
 801a124:	4620      	mov	r0, r4
 801a126:	bd70      	pop	{r4, r5, r6, pc}

0801a128 <__sfp_lock_acquire>:
 801a128:	4801      	ldr	r0, [pc, #4]	; (801a130 <__sfp_lock_acquire+0x8>)
 801a12a:	f000 b8d8 	b.w	801a2de <__retarget_lock_acquire_recursive>
 801a12e:	bf00      	nop
 801a130:	2000ed55 	.word	0x2000ed55

0801a134 <__sfp_lock_release>:
 801a134:	4801      	ldr	r0, [pc, #4]	; (801a13c <__sfp_lock_release+0x8>)
 801a136:	f000 b8d3 	b.w	801a2e0 <__retarget_lock_release_recursive>
 801a13a:	bf00      	nop
 801a13c:	2000ed55 	.word	0x2000ed55

0801a140 <__sinit_lock_acquire>:
 801a140:	4801      	ldr	r0, [pc, #4]	; (801a148 <__sinit_lock_acquire+0x8>)
 801a142:	f000 b8cc 	b.w	801a2de <__retarget_lock_acquire_recursive>
 801a146:	bf00      	nop
 801a148:	2000ed56 	.word	0x2000ed56

0801a14c <__sinit_lock_release>:
 801a14c:	4801      	ldr	r0, [pc, #4]	; (801a154 <__sinit_lock_release+0x8>)
 801a14e:	f000 b8c7 	b.w	801a2e0 <__retarget_lock_release_recursive>
 801a152:	bf00      	nop
 801a154:	2000ed56 	.word	0x2000ed56

0801a158 <__sinit>:
 801a158:	b510      	push	{r4, lr}
 801a15a:	4604      	mov	r4, r0
 801a15c:	f7ff fff0 	bl	801a140 <__sinit_lock_acquire>
 801a160:	69a3      	ldr	r3, [r4, #24]
 801a162:	b11b      	cbz	r3, 801a16c <__sinit+0x14>
 801a164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a168:	f7ff bff0 	b.w	801a14c <__sinit_lock_release>
 801a16c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a170:	6523      	str	r3, [r4, #80]	; 0x50
 801a172:	4b13      	ldr	r3, [pc, #76]	; (801a1c0 <__sinit+0x68>)
 801a174:	4a13      	ldr	r2, [pc, #76]	; (801a1c4 <__sinit+0x6c>)
 801a176:	681b      	ldr	r3, [r3, #0]
 801a178:	62a2      	str	r2, [r4, #40]	; 0x28
 801a17a:	42a3      	cmp	r3, r4
 801a17c:	bf08      	it	eq
 801a17e:	2301      	moveq	r3, #1
 801a180:	4620      	mov	r0, r4
 801a182:	bf08      	it	eq
 801a184:	61a3      	streq	r3, [r4, #24]
 801a186:	f000 f81f 	bl	801a1c8 <__sfp>
 801a18a:	6060      	str	r0, [r4, #4]
 801a18c:	4620      	mov	r0, r4
 801a18e:	f000 f81b 	bl	801a1c8 <__sfp>
 801a192:	60a0      	str	r0, [r4, #8]
 801a194:	4620      	mov	r0, r4
 801a196:	f000 f817 	bl	801a1c8 <__sfp>
 801a19a:	2200      	movs	r2, #0
 801a19c:	2104      	movs	r1, #4
 801a19e:	60e0      	str	r0, [r4, #12]
 801a1a0:	6860      	ldr	r0, [r4, #4]
 801a1a2:	f7ff ff81 	bl	801a0a8 <std>
 801a1a6:	2201      	movs	r2, #1
 801a1a8:	2109      	movs	r1, #9
 801a1aa:	68a0      	ldr	r0, [r4, #8]
 801a1ac:	f7ff ff7c 	bl	801a0a8 <std>
 801a1b0:	2202      	movs	r2, #2
 801a1b2:	2112      	movs	r1, #18
 801a1b4:	68e0      	ldr	r0, [r4, #12]
 801a1b6:	f7ff ff77 	bl	801a0a8 <std>
 801a1ba:	2301      	movs	r3, #1
 801a1bc:	61a3      	str	r3, [r4, #24]
 801a1be:	e7d1      	b.n	801a164 <__sinit+0xc>
 801a1c0:	0801e690 	.word	0x0801e690
 801a1c4:	0801a0f1 	.word	0x0801a0f1

0801a1c8 <__sfp>:
 801a1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1ca:	4607      	mov	r7, r0
 801a1cc:	f7ff ffac 	bl	801a128 <__sfp_lock_acquire>
 801a1d0:	4b1e      	ldr	r3, [pc, #120]	; (801a24c <__sfp+0x84>)
 801a1d2:	681e      	ldr	r6, [r3, #0]
 801a1d4:	69b3      	ldr	r3, [r6, #24]
 801a1d6:	b913      	cbnz	r3, 801a1de <__sfp+0x16>
 801a1d8:	4630      	mov	r0, r6
 801a1da:	f7ff ffbd 	bl	801a158 <__sinit>
 801a1de:	3648      	adds	r6, #72	; 0x48
 801a1e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a1e4:	3b01      	subs	r3, #1
 801a1e6:	d503      	bpl.n	801a1f0 <__sfp+0x28>
 801a1e8:	6833      	ldr	r3, [r6, #0]
 801a1ea:	b30b      	cbz	r3, 801a230 <__sfp+0x68>
 801a1ec:	6836      	ldr	r6, [r6, #0]
 801a1ee:	e7f7      	b.n	801a1e0 <__sfp+0x18>
 801a1f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a1f4:	b9d5      	cbnz	r5, 801a22c <__sfp+0x64>
 801a1f6:	4b16      	ldr	r3, [pc, #88]	; (801a250 <__sfp+0x88>)
 801a1f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a1fc:	60e3      	str	r3, [r4, #12]
 801a1fe:	6665      	str	r5, [r4, #100]	; 0x64
 801a200:	f000 f86c 	bl	801a2dc <__retarget_lock_init_recursive>
 801a204:	f7ff ff96 	bl	801a134 <__sfp_lock_release>
 801a208:	2208      	movs	r2, #8
 801a20a:	4629      	mov	r1, r5
 801a20c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a210:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a214:	6025      	str	r5, [r4, #0]
 801a216:	61a5      	str	r5, [r4, #24]
 801a218:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a21c:	f000 f87f 	bl	801a31e <memset>
 801a220:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a224:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a228:	4620      	mov	r0, r4
 801a22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a22c:	3468      	adds	r4, #104	; 0x68
 801a22e:	e7d9      	b.n	801a1e4 <__sfp+0x1c>
 801a230:	2104      	movs	r1, #4
 801a232:	4638      	mov	r0, r7
 801a234:	f7ff ff62 	bl	801a0fc <__sfmoreglue>
 801a238:	4604      	mov	r4, r0
 801a23a:	6030      	str	r0, [r6, #0]
 801a23c:	2800      	cmp	r0, #0
 801a23e:	d1d5      	bne.n	801a1ec <__sfp+0x24>
 801a240:	f7ff ff78 	bl	801a134 <__sfp_lock_release>
 801a244:	230c      	movs	r3, #12
 801a246:	603b      	str	r3, [r7, #0]
 801a248:	e7ee      	b.n	801a228 <__sfp+0x60>
 801a24a:	bf00      	nop
 801a24c:	0801e690 	.word	0x0801e690
 801a250:	ffff0001 	.word	0xffff0001

0801a254 <_fwalk_reent>:
 801a254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a258:	4606      	mov	r6, r0
 801a25a:	4688      	mov	r8, r1
 801a25c:	2700      	movs	r7, #0
 801a25e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a262:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a266:	f1b9 0901 	subs.w	r9, r9, #1
 801a26a:	d505      	bpl.n	801a278 <_fwalk_reent+0x24>
 801a26c:	6824      	ldr	r4, [r4, #0]
 801a26e:	2c00      	cmp	r4, #0
 801a270:	d1f7      	bne.n	801a262 <_fwalk_reent+0xe>
 801a272:	4638      	mov	r0, r7
 801a274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a278:	89ab      	ldrh	r3, [r5, #12]
 801a27a:	2b01      	cmp	r3, #1
 801a27c:	d907      	bls.n	801a28e <_fwalk_reent+0x3a>
 801a27e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a282:	3301      	adds	r3, #1
 801a284:	d003      	beq.n	801a28e <_fwalk_reent+0x3a>
 801a286:	4629      	mov	r1, r5
 801a288:	4630      	mov	r0, r6
 801a28a:	47c0      	blx	r8
 801a28c:	4307      	orrs	r7, r0
 801a28e:	3568      	adds	r5, #104	; 0x68
 801a290:	e7e9      	b.n	801a266 <_fwalk_reent+0x12>
	...

0801a294 <__libc_init_array>:
 801a294:	b570      	push	{r4, r5, r6, lr}
 801a296:	2600      	movs	r6, #0
 801a298:	4d0c      	ldr	r5, [pc, #48]	; (801a2cc <__libc_init_array+0x38>)
 801a29a:	4c0d      	ldr	r4, [pc, #52]	; (801a2d0 <__libc_init_array+0x3c>)
 801a29c:	1b64      	subs	r4, r4, r5
 801a29e:	10a4      	asrs	r4, r4, #2
 801a2a0:	42a6      	cmp	r6, r4
 801a2a2:	d109      	bne.n	801a2b8 <__libc_init_array+0x24>
 801a2a4:	f001 fa6c 	bl	801b780 <_init>
 801a2a8:	2600      	movs	r6, #0
 801a2aa:	4d0a      	ldr	r5, [pc, #40]	; (801a2d4 <__libc_init_array+0x40>)
 801a2ac:	4c0a      	ldr	r4, [pc, #40]	; (801a2d8 <__libc_init_array+0x44>)
 801a2ae:	1b64      	subs	r4, r4, r5
 801a2b0:	10a4      	asrs	r4, r4, #2
 801a2b2:	42a6      	cmp	r6, r4
 801a2b4:	d105      	bne.n	801a2c2 <__libc_init_array+0x2e>
 801a2b6:	bd70      	pop	{r4, r5, r6, pc}
 801a2b8:	f855 3b04 	ldr.w	r3, [r5], #4
 801a2bc:	4798      	blx	r3
 801a2be:	3601      	adds	r6, #1
 801a2c0:	e7ee      	b.n	801a2a0 <__libc_init_array+0xc>
 801a2c2:	f855 3b04 	ldr.w	r3, [r5], #4
 801a2c6:	4798      	blx	r3
 801a2c8:	3601      	adds	r6, #1
 801a2ca:	e7f2      	b.n	801a2b2 <__libc_init_array+0x1e>
 801a2cc:	0801e780 	.word	0x0801e780
 801a2d0:	0801e780 	.word	0x0801e780
 801a2d4:	0801e780 	.word	0x0801e780
 801a2d8:	0801e784 	.word	0x0801e784

0801a2dc <__retarget_lock_init_recursive>:
 801a2dc:	4770      	bx	lr

0801a2de <__retarget_lock_acquire_recursive>:
 801a2de:	4770      	bx	lr

0801a2e0 <__retarget_lock_release_recursive>:
 801a2e0:	4770      	bx	lr

0801a2e2 <memcmp>:
 801a2e2:	b510      	push	{r4, lr}
 801a2e4:	3901      	subs	r1, #1
 801a2e6:	4402      	add	r2, r0
 801a2e8:	4290      	cmp	r0, r2
 801a2ea:	d101      	bne.n	801a2f0 <memcmp+0xe>
 801a2ec:	2000      	movs	r0, #0
 801a2ee:	e005      	b.n	801a2fc <memcmp+0x1a>
 801a2f0:	7803      	ldrb	r3, [r0, #0]
 801a2f2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a2f6:	42a3      	cmp	r3, r4
 801a2f8:	d001      	beq.n	801a2fe <memcmp+0x1c>
 801a2fa:	1b18      	subs	r0, r3, r4
 801a2fc:	bd10      	pop	{r4, pc}
 801a2fe:	3001      	adds	r0, #1
 801a300:	e7f2      	b.n	801a2e8 <memcmp+0x6>

0801a302 <memcpy>:
 801a302:	440a      	add	r2, r1
 801a304:	4291      	cmp	r1, r2
 801a306:	f100 33ff 	add.w	r3, r0, #4294967295
 801a30a:	d100      	bne.n	801a30e <memcpy+0xc>
 801a30c:	4770      	bx	lr
 801a30e:	b510      	push	{r4, lr}
 801a310:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a314:	4291      	cmp	r1, r2
 801a316:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a31a:	d1f9      	bne.n	801a310 <memcpy+0xe>
 801a31c:	bd10      	pop	{r4, pc}

0801a31e <memset>:
 801a31e:	4603      	mov	r3, r0
 801a320:	4402      	add	r2, r0
 801a322:	4293      	cmp	r3, r2
 801a324:	d100      	bne.n	801a328 <memset+0xa>
 801a326:	4770      	bx	lr
 801a328:	f803 1b01 	strb.w	r1, [r3], #1
 801a32c:	e7f9      	b.n	801a322 <memset+0x4>
	...

0801a330 <sbrk_aligned>:
 801a330:	b570      	push	{r4, r5, r6, lr}
 801a332:	4e0e      	ldr	r6, [pc, #56]	; (801a36c <sbrk_aligned+0x3c>)
 801a334:	460c      	mov	r4, r1
 801a336:	6831      	ldr	r1, [r6, #0]
 801a338:	4605      	mov	r5, r0
 801a33a:	b911      	cbnz	r1, 801a342 <sbrk_aligned+0x12>
 801a33c:	f000 f94c 	bl	801a5d8 <_sbrk_r>
 801a340:	6030      	str	r0, [r6, #0]
 801a342:	4621      	mov	r1, r4
 801a344:	4628      	mov	r0, r5
 801a346:	f000 f947 	bl	801a5d8 <_sbrk_r>
 801a34a:	1c43      	adds	r3, r0, #1
 801a34c:	d00a      	beq.n	801a364 <sbrk_aligned+0x34>
 801a34e:	1cc4      	adds	r4, r0, #3
 801a350:	f024 0403 	bic.w	r4, r4, #3
 801a354:	42a0      	cmp	r0, r4
 801a356:	d007      	beq.n	801a368 <sbrk_aligned+0x38>
 801a358:	1a21      	subs	r1, r4, r0
 801a35a:	4628      	mov	r0, r5
 801a35c:	f000 f93c 	bl	801a5d8 <_sbrk_r>
 801a360:	3001      	adds	r0, #1
 801a362:	d101      	bne.n	801a368 <sbrk_aligned+0x38>
 801a364:	f04f 34ff 	mov.w	r4, #4294967295
 801a368:	4620      	mov	r0, r4
 801a36a:	bd70      	pop	{r4, r5, r6, pc}
 801a36c:	2000ed5c 	.word	0x2000ed5c

0801a370 <_malloc_r>:
 801a370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a374:	1ccd      	adds	r5, r1, #3
 801a376:	f025 0503 	bic.w	r5, r5, #3
 801a37a:	3508      	adds	r5, #8
 801a37c:	2d0c      	cmp	r5, #12
 801a37e:	bf38      	it	cc
 801a380:	250c      	movcc	r5, #12
 801a382:	2d00      	cmp	r5, #0
 801a384:	4607      	mov	r7, r0
 801a386:	db01      	blt.n	801a38c <_malloc_r+0x1c>
 801a388:	42a9      	cmp	r1, r5
 801a38a:	d905      	bls.n	801a398 <_malloc_r+0x28>
 801a38c:	230c      	movs	r3, #12
 801a38e:	2600      	movs	r6, #0
 801a390:	603b      	str	r3, [r7, #0]
 801a392:	4630      	mov	r0, r6
 801a394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a398:	4e2e      	ldr	r6, [pc, #184]	; (801a454 <_malloc_r+0xe4>)
 801a39a:	f000 facd 	bl	801a938 <__malloc_lock>
 801a39e:	6833      	ldr	r3, [r6, #0]
 801a3a0:	461c      	mov	r4, r3
 801a3a2:	bb34      	cbnz	r4, 801a3f2 <_malloc_r+0x82>
 801a3a4:	4629      	mov	r1, r5
 801a3a6:	4638      	mov	r0, r7
 801a3a8:	f7ff ffc2 	bl	801a330 <sbrk_aligned>
 801a3ac:	1c43      	adds	r3, r0, #1
 801a3ae:	4604      	mov	r4, r0
 801a3b0:	d14d      	bne.n	801a44e <_malloc_r+0xde>
 801a3b2:	6834      	ldr	r4, [r6, #0]
 801a3b4:	4626      	mov	r6, r4
 801a3b6:	2e00      	cmp	r6, #0
 801a3b8:	d140      	bne.n	801a43c <_malloc_r+0xcc>
 801a3ba:	6823      	ldr	r3, [r4, #0]
 801a3bc:	4631      	mov	r1, r6
 801a3be:	4638      	mov	r0, r7
 801a3c0:	eb04 0803 	add.w	r8, r4, r3
 801a3c4:	f000 f908 	bl	801a5d8 <_sbrk_r>
 801a3c8:	4580      	cmp	r8, r0
 801a3ca:	d13a      	bne.n	801a442 <_malloc_r+0xd2>
 801a3cc:	6821      	ldr	r1, [r4, #0]
 801a3ce:	3503      	adds	r5, #3
 801a3d0:	1a6d      	subs	r5, r5, r1
 801a3d2:	f025 0503 	bic.w	r5, r5, #3
 801a3d6:	3508      	adds	r5, #8
 801a3d8:	2d0c      	cmp	r5, #12
 801a3da:	bf38      	it	cc
 801a3dc:	250c      	movcc	r5, #12
 801a3de:	4638      	mov	r0, r7
 801a3e0:	4629      	mov	r1, r5
 801a3e2:	f7ff ffa5 	bl	801a330 <sbrk_aligned>
 801a3e6:	3001      	adds	r0, #1
 801a3e8:	d02b      	beq.n	801a442 <_malloc_r+0xd2>
 801a3ea:	6823      	ldr	r3, [r4, #0]
 801a3ec:	442b      	add	r3, r5
 801a3ee:	6023      	str	r3, [r4, #0]
 801a3f0:	e00e      	b.n	801a410 <_malloc_r+0xa0>
 801a3f2:	6822      	ldr	r2, [r4, #0]
 801a3f4:	1b52      	subs	r2, r2, r5
 801a3f6:	d41e      	bmi.n	801a436 <_malloc_r+0xc6>
 801a3f8:	2a0b      	cmp	r2, #11
 801a3fa:	d916      	bls.n	801a42a <_malloc_r+0xba>
 801a3fc:	1961      	adds	r1, r4, r5
 801a3fe:	42a3      	cmp	r3, r4
 801a400:	6025      	str	r5, [r4, #0]
 801a402:	bf18      	it	ne
 801a404:	6059      	strne	r1, [r3, #4]
 801a406:	6863      	ldr	r3, [r4, #4]
 801a408:	bf08      	it	eq
 801a40a:	6031      	streq	r1, [r6, #0]
 801a40c:	5162      	str	r2, [r4, r5]
 801a40e:	604b      	str	r3, [r1, #4]
 801a410:	4638      	mov	r0, r7
 801a412:	f104 060b 	add.w	r6, r4, #11
 801a416:	f000 fa95 	bl	801a944 <__malloc_unlock>
 801a41a:	f026 0607 	bic.w	r6, r6, #7
 801a41e:	1d23      	adds	r3, r4, #4
 801a420:	1af2      	subs	r2, r6, r3
 801a422:	d0b6      	beq.n	801a392 <_malloc_r+0x22>
 801a424:	1b9b      	subs	r3, r3, r6
 801a426:	50a3      	str	r3, [r4, r2]
 801a428:	e7b3      	b.n	801a392 <_malloc_r+0x22>
 801a42a:	6862      	ldr	r2, [r4, #4]
 801a42c:	42a3      	cmp	r3, r4
 801a42e:	bf0c      	ite	eq
 801a430:	6032      	streq	r2, [r6, #0]
 801a432:	605a      	strne	r2, [r3, #4]
 801a434:	e7ec      	b.n	801a410 <_malloc_r+0xa0>
 801a436:	4623      	mov	r3, r4
 801a438:	6864      	ldr	r4, [r4, #4]
 801a43a:	e7b2      	b.n	801a3a2 <_malloc_r+0x32>
 801a43c:	4634      	mov	r4, r6
 801a43e:	6876      	ldr	r6, [r6, #4]
 801a440:	e7b9      	b.n	801a3b6 <_malloc_r+0x46>
 801a442:	230c      	movs	r3, #12
 801a444:	4638      	mov	r0, r7
 801a446:	603b      	str	r3, [r7, #0]
 801a448:	f000 fa7c 	bl	801a944 <__malloc_unlock>
 801a44c:	e7a1      	b.n	801a392 <_malloc_r+0x22>
 801a44e:	6025      	str	r5, [r4, #0]
 801a450:	e7de      	b.n	801a410 <_malloc_r+0xa0>
 801a452:	bf00      	nop
 801a454:	2000ed58 	.word	0x2000ed58

0801a458 <iprintf>:
 801a458:	b40f      	push	{r0, r1, r2, r3}
 801a45a:	4b0a      	ldr	r3, [pc, #40]	; (801a484 <iprintf+0x2c>)
 801a45c:	b513      	push	{r0, r1, r4, lr}
 801a45e:	681c      	ldr	r4, [r3, #0]
 801a460:	b124      	cbz	r4, 801a46c <iprintf+0x14>
 801a462:	69a3      	ldr	r3, [r4, #24]
 801a464:	b913      	cbnz	r3, 801a46c <iprintf+0x14>
 801a466:	4620      	mov	r0, r4
 801a468:	f7ff fe76 	bl	801a158 <__sinit>
 801a46c:	ab05      	add	r3, sp, #20
 801a46e:	4620      	mov	r0, r4
 801a470:	9a04      	ldr	r2, [sp, #16]
 801a472:	68a1      	ldr	r1, [r4, #8]
 801a474:	9301      	str	r3, [sp, #4]
 801a476:	f000 fc37 	bl	801ace8 <_vfiprintf_r>
 801a47a:	b002      	add	sp, #8
 801a47c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a480:	b004      	add	sp, #16
 801a482:	4770      	bx	lr
 801a484:	20000020 	.word	0x20000020

0801a488 <rand>:
 801a488:	4b16      	ldr	r3, [pc, #88]	; (801a4e4 <rand+0x5c>)
 801a48a:	b510      	push	{r4, lr}
 801a48c:	681c      	ldr	r4, [r3, #0]
 801a48e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a490:	b9b3      	cbnz	r3, 801a4c0 <rand+0x38>
 801a492:	2018      	movs	r0, #24
 801a494:	f000 fa48 	bl	801a928 <malloc>
 801a498:	4602      	mov	r2, r0
 801a49a:	63a0      	str	r0, [r4, #56]	; 0x38
 801a49c:	b920      	cbnz	r0, 801a4a8 <rand+0x20>
 801a49e:	214e      	movs	r1, #78	; 0x4e
 801a4a0:	4b11      	ldr	r3, [pc, #68]	; (801a4e8 <rand+0x60>)
 801a4a2:	4812      	ldr	r0, [pc, #72]	; (801a4ec <rand+0x64>)
 801a4a4:	f000 f930 	bl	801a708 <__assert_func>
 801a4a8:	4911      	ldr	r1, [pc, #68]	; (801a4f0 <rand+0x68>)
 801a4aa:	4b12      	ldr	r3, [pc, #72]	; (801a4f4 <rand+0x6c>)
 801a4ac:	e9c0 1300 	strd	r1, r3, [r0]
 801a4b0:	4b11      	ldr	r3, [pc, #68]	; (801a4f8 <rand+0x70>)
 801a4b2:	2100      	movs	r1, #0
 801a4b4:	6083      	str	r3, [r0, #8]
 801a4b6:	230b      	movs	r3, #11
 801a4b8:	8183      	strh	r3, [r0, #12]
 801a4ba:	2001      	movs	r0, #1
 801a4bc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a4c0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801a4c2:	4a0e      	ldr	r2, [pc, #56]	; (801a4fc <rand+0x74>)
 801a4c4:	6920      	ldr	r0, [r4, #16]
 801a4c6:	6963      	ldr	r3, [r4, #20]
 801a4c8:	4342      	muls	r2, r0
 801a4ca:	490d      	ldr	r1, [pc, #52]	; (801a500 <rand+0x78>)
 801a4cc:	fb01 2203 	mla	r2, r1, r3, r2
 801a4d0:	fba0 0101 	umull	r0, r1, r0, r1
 801a4d4:	1c43      	adds	r3, r0, #1
 801a4d6:	eb42 0001 	adc.w	r0, r2, r1
 801a4da:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801a4de:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a4e2:	bd10      	pop	{r4, pc}
 801a4e4:	20000020 	.word	0x20000020
 801a4e8:	0801e694 	.word	0x0801e694
 801a4ec:	0801e6ab 	.word	0x0801e6ab
 801a4f0:	abcd330e 	.word	0xabcd330e
 801a4f4:	e66d1234 	.word	0xe66d1234
 801a4f8:	0005deec 	.word	0x0005deec
 801a4fc:	5851f42d 	.word	0x5851f42d
 801a500:	4c957f2d 	.word	0x4c957f2d

0801a504 <cleanup_glue>:
 801a504:	b538      	push	{r3, r4, r5, lr}
 801a506:	460c      	mov	r4, r1
 801a508:	6809      	ldr	r1, [r1, #0]
 801a50a:	4605      	mov	r5, r0
 801a50c:	b109      	cbz	r1, 801a512 <cleanup_glue+0xe>
 801a50e:	f7ff fff9 	bl	801a504 <cleanup_glue>
 801a512:	4621      	mov	r1, r4
 801a514:	4628      	mov	r0, r5
 801a516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a51a:	f000 ba19 	b.w	801a950 <_free_r>
	...

0801a520 <_reclaim_reent>:
 801a520:	4b2c      	ldr	r3, [pc, #176]	; (801a5d4 <_reclaim_reent+0xb4>)
 801a522:	b570      	push	{r4, r5, r6, lr}
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	4604      	mov	r4, r0
 801a528:	4283      	cmp	r3, r0
 801a52a:	d051      	beq.n	801a5d0 <_reclaim_reent+0xb0>
 801a52c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801a52e:	b143      	cbz	r3, 801a542 <_reclaim_reent+0x22>
 801a530:	68db      	ldr	r3, [r3, #12]
 801a532:	2b00      	cmp	r3, #0
 801a534:	d14a      	bne.n	801a5cc <_reclaim_reent+0xac>
 801a536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a538:	6819      	ldr	r1, [r3, #0]
 801a53a:	b111      	cbz	r1, 801a542 <_reclaim_reent+0x22>
 801a53c:	4620      	mov	r0, r4
 801a53e:	f000 fa07 	bl	801a950 <_free_r>
 801a542:	6961      	ldr	r1, [r4, #20]
 801a544:	b111      	cbz	r1, 801a54c <_reclaim_reent+0x2c>
 801a546:	4620      	mov	r0, r4
 801a548:	f000 fa02 	bl	801a950 <_free_r>
 801a54c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a54e:	b111      	cbz	r1, 801a556 <_reclaim_reent+0x36>
 801a550:	4620      	mov	r0, r4
 801a552:	f000 f9fd 	bl	801a950 <_free_r>
 801a556:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a558:	b111      	cbz	r1, 801a560 <_reclaim_reent+0x40>
 801a55a:	4620      	mov	r0, r4
 801a55c:	f000 f9f8 	bl	801a950 <_free_r>
 801a560:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801a562:	b111      	cbz	r1, 801a56a <_reclaim_reent+0x4a>
 801a564:	4620      	mov	r0, r4
 801a566:	f000 f9f3 	bl	801a950 <_free_r>
 801a56a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801a56c:	b111      	cbz	r1, 801a574 <_reclaim_reent+0x54>
 801a56e:	4620      	mov	r0, r4
 801a570:	f000 f9ee 	bl	801a950 <_free_r>
 801a574:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801a576:	b111      	cbz	r1, 801a57e <_reclaim_reent+0x5e>
 801a578:	4620      	mov	r0, r4
 801a57a:	f000 f9e9 	bl	801a950 <_free_r>
 801a57e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801a580:	b111      	cbz	r1, 801a588 <_reclaim_reent+0x68>
 801a582:	4620      	mov	r0, r4
 801a584:	f000 f9e4 	bl	801a950 <_free_r>
 801a588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a58a:	b111      	cbz	r1, 801a592 <_reclaim_reent+0x72>
 801a58c:	4620      	mov	r0, r4
 801a58e:	f000 f9df 	bl	801a950 <_free_r>
 801a592:	69a3      	ldr	r3, [r4, #24]
 801a594:	b1e3      	cbz	r3, 801a5d0 <_reclaim_reent+0xb0>
 801a596:	4620      	mov	r0, r4
 801a598:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a59a:	4798      	blx	r3
 801a59c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801a59e:	b1b9      	cbz	r1, 801a5d0 <_reclaim_reent+0xb0>
 801a5a0:	4620      	mov	r0, r4
 801a5a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a5a6:	f7ff bfad 	b.w	801a504 <cleanup_glue>
 801a5aa:	5949      	ldr	r1, [r1, r5]
 801a5ac:	b941      	cbnz	r1, 801a5c0 <_reclaim_reent+0xa0>
 801a5ae:	3504      	adds	r5, #4
 801a5b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a5b2:	2d80      	cmp	r5, #128	; 0x80
 801a5b4:	68d9      	ldr	r1, [r3, #12]
 801a5b6:	d1f8      	bne.n	801a5aa <_reclaim_reent+0x8a>
 801a5b8:	4620      	mov	r0, r4
 801a5ba:	f000 f9c9 	bl	801a950 <_free_r>
 801a5be:	e7ba      	b.n	801a536 <_reclaim_reent+0x16>
 801a5c0:	680e      	ldr	r6, [r1, #0]
 801a5c2:	4620      	mov	r0, r4
 801a5c4:	f000 f9c4 	bl	801a950 <_free_r>
 801a5c8:	4631      	mov	r1, r6
 801a5ca:	e7ef      	b.n	801a5ac <_reclaim_reent+0x8c>
 801a5cc:	2500      	movs	r5, #0
 801a5ce:	e7ef      	b.n	801a5b0 <_reclaim_reent+0x90>
 801a5d0:	bd70      	pop	{r4, r5, r6, pc}
 801a5d2:	bf00      	nop
 801a5d4:	20000020 	.word	0x20000020

0801a5d8 <_sbrk_r>:
 801a5d8:	b538      	push	{r3, r4, r5, lr}
 801a5da:	2300      	movs	r3, #0
 801a5dc:	4d05      	ldr	r5, [pc, #20]	; (801a5f4 <_sbrk_r+0x1c>)
 801a5de:	4604      	mov	r4, r0
 801a5e0:	4608      	mov	r0, r1
 801a5e2:	602b      	str	r3, [r5, #0]
 801a5e4:	f7e8 f9c0 	bl	8002968 <_sbrk>
 801a5e8:	1c43      	adds	r3, r0, #1
 801a5ea:	d102      	bne.n	801a5f2 <_sbrk_r+0x1a>
 801a5ec:	682b      	ldr	r3, [r5, #0]
 801a5ee:	b103      	cbz	r3, 801a5f2 <_sbrk_r+0x1a>
 801a5f0:	6023      	str	r3, [r4, #0]
 801a5f2:	bd38      	pop	{r3, r4, r5, pc}
 801a5f4:	2000ed60 	.word	0x2000ed60

0801a5f8 <siprintf>:
 801a5f8:	b40e      	push	{r1, r2, r3}
 801a5fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a5fe:	b500      	push	{lr}
 801a600:	b09c      	sub	sp, #112	; 0x70
 801a602:	ab1d      	add	r3, sp, #116	; 0x74
 801a604:	9002      	str	r0, [sp, #8]
 801a606:	9006      	str	r0, [sp, #24]
 801a608:	9107      	str	r1, [sp, #28]
 801a60a:	9104      	str	r1, [sp, #16]
 801a60c:	4808      	ldr	r0, [pc, #32]	; (801a630 <siprintf+0x38>)
 801a60e:	4909      	ldr	r1, [pc, #36]	; (801a634 <siprintf+0x3c>)
 801a610:	f853 2b04 	ldr.w	r2, [r3], #4
 801a614:	9105      	str	r1, [sp, #20]
 801a616:	6800      	ldr	r0, [r0, #0]
 801a618:	a902      	add	r1, sp, #8
 801a61a:	9301      	str	r3, [sp, #4]
 801a61c:	f000 fa3c 	bl	801aa98 <_svfiprintf_r>
 801a620:	2200      	movs	r2, #0
 801a622:	9b02      	ldr	r3, [sp, #8]
 801a624:	701a      	strb	r2, [r3, #0]
 801a626:	b01c      	add	sp, #112	; 0x70
 801a628:	f85d eb04 	ldr.w	lr, [sp], #4
 801a62c:	b003      	add	sp, #12
 801a62e:	4770      	bx	lr
 801a630:	20000020 	.word	0x20000020
 801a634:	ffff0208 	.word	0xffff0208

0801a638 <__sread>:
 801a638:	b510      	push	{r4, lr}
 801a63a:	460c      	mov	r4, r1
 801a63c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a640:	f000 fe18 	bl	801b274 <_read_r>
 801a644:	2800      	cmp	r0, #0
 801a646:	bfab      	itete	ge
 801a648:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a64a:	89a3      	ldrhlt	r3, [r4, #12]
 801a64c:	181b      	addge	r3, r3, r0
 801a64e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a652:	bfac      	ite	ge
 801a654:	6563      	strge	r3, [r4, #84]	; 0x54
 801a656:	81a3      	strhlt	r3, [r4, #12]
 801a658:	bd10      	pop	{r4, pc}

0801a65a <__swrite>:
 801a65a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a65e:	461f      	mov	r7, r3
 801a660:	898b      	ldrh	r3, [r1, #12]
 801a662:	4605      	mov	r5, r0
 801a664:	05db      	lsls	r3, r3, #23
 801a666:	460c      	mov	r4, r1
 801a668:	4616      	mov	r6, r2
 801a66a:	d505      	bpl.n	801a678 <__swrite+0x1e>
 801a66c:	2302      	movs	r3, #2
 801a66e:	2200      	movs	r2, #0
 801a670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a674:	f000 f946 	bl	801a904 <_lseek_r>
 801a678:	89a3      	ldrh	r3, [r4, #12]
 801a67a:	4632      	mov	r2, r6
 801a67c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a680:	81a3      	strh	r3, [r4, #12]
 801a682:	4628      	mov	r0, r5
 801a684:	463b      	mov	r3, r7
 801a686:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a68a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a68e:	f000 b829 	b.w	801a6e4 <_write_r>

0801a692 <__sseek>:
 801a692:	b510      	push	{r4, lr}
 801a694:	460c      	mov	r4, r1
 801a696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a69a:	f000 f933 	bl	801a904 <_lseek_r>
 801a69e:	1c43      	adds	r3, r0, #1
 801a6a0:	89a3      	ldrh	r3, [r4, #12]
 801a6a2:	bf15      	itete	ne
 801a6a4:	6560      	strne	r0, [r4, #84]	; 0x54
 801a6a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a6aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a6ae:	81a3      	strheq	r3, [r4, #12]
 801a6b0:	bf18      	it	ne
 801a6b2:	81a3      	strhne	r3, [r4, #12]
 801a6b4:	bd10      	pop	{r4, pc}

0801a6b6 <__sclose>:
 801a6b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a6ba:	f000 b843 	b.w	801a744 <_close_r>

0801a6be <strncpy>:
 801a6be:	4603      	mov	r3, r0
 801a6c0:	b510      	push	{r4, lr}
 801a6c2:	3901      	subs	r1, #1
 801a6c4:	b132      	cbz	r2, 801a6d4 <strncpy+0x16>
 801a6c6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a6ca:	3a01      	subs	r2, #1
 801a6cc:	f803 4b01 	strb.w	r4, [r3], #1
 801a6d0:	2c00      	cmp	r4, #0
 801a6d2:	d1f7      	bne.n	801a6c4 <strncpy+0x6>
 801a6d4:	2100      	movs	r1, #0
 801a6d6:	441a      	add	r2, r3
 801a6d8:	4293      	cmp	r3, r2
 801a6da:	d100      	bne.n	801a6de <strncpy+0x20>
 801a6dc:	bd10      	pop	{r4, pc}
 801a6de:	f803 1b01 	strb.w	r1, [r3], #1
 801a6e2:	e7f9      	b.n	801a6d8 <strncpy+0x1a>

0801a6e4 <_write_r>:
 801a6e4:	b538      	push	{r3, r4, r5, lr}
 801a6e6:	4604      	mov	r4, r0
 801a6e8:	4608      	mov	r0, r1
 801a6ea:	4611      	mov	r1, r2
 801a6ec:	2200      	movs	r2, #0
 801a6ee:	4d05      	ldr	r5, [pc, #20]	; (801a704 <_write_r+0x20>)
 801a6f0:	602a      	str	r2, [r5, #0]
 801a6f2:	461a      	mov	r2, r3
 801a6f4:	f7e8 f8eb 	bl	80028ce <_write>
 801a6f8:	1c43      	adds	r3, r0, #1
 801a6fa:	d102      	bne.n	801a702 <_write_r+0x1e>
 801a6fc:	682b      	ldr	r3, [r5, #0]
 801a6fe:	b103      	cbz	r3, 801a702 <_write_r+0x1e>
 801a700:	6023      	str	r3, [r4, #0]
 801a702:	bd38      	pop	{r3, r4, r5, pc}
 801a704:	2000ed60 	.word	0x2000ed60

0801a708 <__assert_func>:
 801a708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a70a:	4614      	mov	r4, r2
 801a70c:	461a      	mov	r2, r3
 801a70e:	4b09      	ldr	r3, [pc, #36]	; (801a734 <__assert_func+0x2c>)
 801a710:	4605      	mov	r5, r0
 801a712:	681b      	ldr	r3, [r3, #0]
 801a714:	68d8      	ldr	r0, [r3, #12]
 801a716:	b14c      	cbz	r4, 801a72c <__assert_func+0x24>
 801a718:	4b07      	ldr	r3, [pc, #28]	; (801a738 <__assert_func+0x30>)
 801a71a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a71e:	9100      	str	r1, [sp, #0]
 801a720:	462b      	mov	r3, r5
 801a722:	4906      	ldr	r1, [pc, #24]	; (801a73c <__assert_func+0x34>)
 801a724:	f000 f8dc 	bl	801a8e0 <fiprintf>
 801a728:	f000 fe76 	bl	801b418 <abort>
 801a72c:	4b04      	ldr	r3, [pc, #16]	; (801a740 <__assert_func+0x38>)
 801a72e:	461c      	mov	r4, r3
 801a730:	e7f3      	b.n	801a71a <__assert_func+0x12>
 801a732:	bf00      	nop
 801a734:	20000020 	.word	0x20000020
 801a738:	0801e706 	.word	0x0801e706
 801a73c:	0801e713 	.word	0x0801e713
 801a740:	0801e741 	.word	0x0801e741

0801a744 <_close_r>:
 801a744:	b538      	push	{r3, r4, r5, lr}
 801a746:	2300      	movs	r3, #0
 801a748:	4d05      	ldr	r5, [pc, #20]	; (801a760 <_close_r+0x1c>)
 801a74a:	4604      	mov	r4, r0
 801a74c:	4608      	mov	r0, r1
 801a74e:	602b      	str	r3, [r5, #0]
 801a750:	f7e8 f8d9 	bl	8002906 <_close>
 801a754:	1c43      	adds	r3, r0, #1
 801a756:	d102      	bne.n	801a75e <_close_r+0x1a>
 801a758:	682b      	ldr	r3, [r5, #0]
 801a75a:	b103      	cbz	r3, 801a75e <_close_r+0x1a>
 801a75c:	6023      	str	r3, [r4, #0]
 801a75e:	bd38      	pop	{r3, r4, r5, pc}
 801a760:	2000ed60 	.word	0x2000ed60

0801a764 <__sflush_r>:
 801a764:	898a      	ldrh	r2, [r1, #12]
 801a766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a768:	4605      	mov	r5, r0
 801a76a:	0710      	lsls	r0, r2, #28
 801a76c:	460c      	mov	r4, r1
 801a76e:	d457      	bmi.n	801a820 <__sflush_r+0xbc>
 801a770:	684b      	ldr	r3, [r1, #4]
 801a772:	2b00      	cmp	r3, #0
 801a774:	dc04      	bgt.n	801a780 <__sflush_r+0x1c>
 801a776:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a778:	2b00      	cmp	r3, #0
 801a77a:	dc01      	bgt.n	801a780 <__sflush_r+0x1c>
 801a77c:	2000      	movs	r0, #0
 801a77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a780:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a782:	2e00      	cmp	r6, #0
 801a784:	d0fa      	beq.n	801a77c <__sflush_r+0x18>
 801a786:	2300      	movs	r3, #0
 801a788:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a78c:	682f      	ldr	r7, [r5, #0]
 801a78e:	602b      	str	r3, [r5, #0]
 801a790:	d032      	beq.n	801a7f8 <__sflush_r+0x94>
 801a792:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a794:	89a3      	ldrh	r3, [r4, #12]
 801a796:	075a      	lsls	r2, r3, #29
 801a798:	d505      	bpl.n	801a7a6 <__sflush_r+0x42>
 801a79a:	6863      	ldr	r3, [r4, #4]
 801a79c:	1ac0      	subs	r0, r0, r3
 801a79e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a7a0:	b10b      	cbz	r3, 801a7a6 <__sflush_r+0x42>
 801a7a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a7a4:	1ac0      	subs	r0, r0, r3
 801a7a6:	2300      	movs	r3, #0
 801a7a8:	4602      	mov	r2, r0
 801a7aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a7ac:	4628      	mov	r0, r5
 801a7ae:	6a21      	ldr	r1, [r4, #32]
 801a7b0:	47b0      	blx	r6
 801a7b2:	1c43      	adds	r3, r0, #1
 801a7b4:	89a3      	ldrh	r3, [r4, #12]
 801a7b6:	d106      	bne.n	801a7c6 <__sflush_r+0x62>
 801a7b8:	6829      	ldr	r1, [r5, #0]
 801a7ba:	291d      	cmp	r1, #29
 801a7bc:	d82c      	bhi.n	801a818 <__sflush_r+0xb4>
 801a7be:	4a29      	ldr	r2, [pc, #164]	; (801a864 <__sflush_r+0x100>)
 801a7c0:	40ca      	lsrs	r2, r1
 801a7c2:	07d6      	lsls	r6, r2, #31
 801a7c4:	d528      	bpl.n	801a818 <__sflush_r+0xb4>
 801a7c6:	2200      	movs	r2, #0
 801a7c8:	6062      	str	r2, [r4, #4]
 801a7ca:	6922      	ldr	r2, [r4, #16]
 801a7cc:	04d9      	lsls	r1, r3, #19
 801a7ce:	6022      	str	r2, [r4, #0]
 801a7d0:	d504      	bpl.n	801a7dc <__sflush_r+0x78>
 801a7d2:	1c42      	adds	r2, r0, #1
 801a7d4:	d101      	bne.n	801a7da <__sflush_r+0x76>
 801a7d6:	682b      	ldr	r3, [r5, #0]
 801a7d8:	b903      	cbnz	r3, 801a7dc <__sflush_r+0x78>
 801a7da:	6560      	str	r0, [r4, #84]	; 0x54
 801a7dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a7de:	602f      	str	r7, [r5, #0]
 801a7e0:	2900      	cmp	r1, #0
 801a7e2:	d0cb      	beq.n	801a77c <__sflush_r+0x18>
 801a7e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a7e8:	4299      	cmp	r1, r3
 801a7ea:	d002      	beq.n	801a7f2 <__sflush_r+0x8e>
 801a7ec:	4628      	mov	r0, r5
 801a7ee:	f000 f8af 	bl	801a950 <_free_r>
 801a7f2:	2000      	movs	r0, #0
 801a7f4:	6360      	str	r0, [r4, #52]	; 0x34
 801a7f6:	e7c2      	b.n	801a77e <__sflush_r+0x1a>
 801a7f8:	6a21      	ldr	r1, [r4, #32]
 801a7fa:	2301      	movs	r3, #1
 801a7fc:	4628      	mov	r0, r5
 801a7fe:	47b0      	blx	r6
 801a800:	1c41      	adds	r1, r0, #1
 801a802:	d1c7      	bne.n	801a794 <__sflush_r+0x30>
 801a804:	682b      	ldr	r3, [r5, #0]
 801a806:	2b00      	cmp	r3, #0
 801a808:	d0c4      	beq.n	801a794 <__sflush_r+0x30>
 801a80a:	2b1d      	cmp	r3, #29
 801a80c:	d001      	beq.n	801a812 <__sflush_r+0xae>
 801a80e:	2b16      	cmp	r3, #22
 801a810:	d101      	bne.n	801a816 <__sflush_r+0xb2>
 801a812:	602f      	str	r7, [r5, #0]
 801a814:	e7b2      	b.n	801a77c <__sflush_r+0x18>
 801a816:	89a3      	ldrh	r3, [r4, #12]
 801a818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a81c:	81a3      	strh	r3, [r4, #12]
 801a81e:	e7ae      	b.n	801a77e <__sflush_r+0x1a>
 801a820:	690f      	ldr	r7, [r1, #16]
 801a822:	2f00      	cmp	r7, #0
 801a824:	d0aa      	beq.n	801a77c <__sflush_r+0x18>
 801a826:	0793      	lsls	r3, r2, #30
 801a828:	bf18      	it	ne
 801a82a:	2300      	movne	r3, #0
 801a82c:	680e      	ldr	r6, [r1, #0]
 801a82e:	bf08      	it	eq
 801a830:	694b      	ldreq	r3, [r1, #20]
 801a832:	1bf6      	subs	r6, r6, r7
 801a834:	600f      	str	r7, [r1, #0]
 801a836:	608b      	str	r3, [r1, #8]
 801a838:	2e00      	cmp	r6, #0
 801a83a:	dd9f      	ble.n	801a77c <__sflush_r+0x18>
 801a83c:	4633      	mov	r3, r6
 801a83e:	463a      	mov	r2, r7
 801a840:	4628      	mov	r0, r5
 801a842:	6a21      	ldr	r1, [r4, #32]
 801a844:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 801a848:	47e0      	blx	ip
 801a84a:	2800      	cmp	r0, #0
 801a84c:	dc06      	bgt.n	801a85c <__sflush_r+0xf8>
 801a84e:	89a3      	ldrh	r3, [r4, #12]
 801a850:	f04f 30ff 	mov.w	r0, #4294967295
 801a854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a858:	81a3      	strh	r3, [r4, #12]
 801a85a:	e790      	b.n	801a77e <__sflush_r+0x1a>
 801a85c:	4407      	add	r7, r0
 801a85e:	1a36      	subs	r6, r6, r0
 801a860:	e7ea      	b.n	801a838 <__sflush_r+0xd4>
 801a862:	bf00      	nop
 801a864:	20400001 	.word	0x20400001

0801a868 <_fflush_r>:
 801a868:	b538      	push	{r3, r4, r5, lr}
 801a86a:	690b      	ldr	r3, [r1, #16]
 801a86c:	4605      	mov	r5, r0
 801a86e:	460c      	mov	r4, r1
 801a870:	b913      	cbnz	r3, 801a878 <_fflush_r+0x10>
 801a872:	2500      	movs	r5, #0
 801a874:	4628      	mov	r0, r5
 801a876:	bd38      	pop	{r3, r4, r5, pc}
 801a878:	b118      	cbz	r0, 801a882 <_fflush_r+0x1a>
 801a87a:	6983      	ldr	r3, [r0, #24]
 801a87c:	b90b      	cbnz	r3, 801a882 <_fflush_r+0x1a>
 801a87e:	f7ff fc6b 	bl	801a158 <__sinit>
 801a882:	4b14      	ldr	r3, [pc, #80]	; (801a8d4 <_fflush_r+0x6c>)
 801a884:	429c      	cmp	r4, r3
 801a886:	d11b      	bne.n	801a8c0 <_fflush_r+0x58>
 801a888:	686c      	ldr	r4, [r5, #4]
 801a88a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a88e:	2b00      	cmp	r3, #0
 801a890:	d0ef      	beq.n	801a872 <_fflush_r+0xa>
 801a892:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a894:	07d0      	lsls	r0, r2, #31
 801a896:	d404      	bmi.n	801a8a2 <_fflush_r+0x3a>
 801a898:	0599      	lsls	r1, r3, #22
 801a89a:	d402      	bmi.n	801a8a2 <_fflush_r+0x3a>
 801a89c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a89e:	f7ff fd1e 	bl	801a2de <__retarget_lock_acquire_recursive>
 801a8a2:	4628      	mov	r0, r5
 801a8a4:	4621      	mov	r1, r4
 801a8a6:	f7ff ff5d 	bl	801a764 <__sflush_r>
 801a8aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a8ac:	4605      	mov	r5, r0
 801a8ae:	07da      	lsls	r2, r3, #31
 801a8b0:	d4e0      	bmi.n	801a874 <_fflush_r+0xc>
 801a8b2:	89a3      	ldrh	r3, [r4, #12]
 801a8b4:	059b      	lsls	r3, r3, #22
 801a8b6:	d4dd      	bmi.n	801a874 <_fflush_r+0xc>
 801a8b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a8ba:	f7ff fd11 	bl	801a2e0 <__retarget_lock_release_recursive>
 801a8be:	e7d9      	b.n	801a874 <_fflush_r+0xc>
 801a8c0:	4b05      	ldr	r3, [pc, #20]	; (801a8d8 <_fflush_r+0x70>)
 801a8c2:	429c      	cmp	r4, r3
 801a8c4:	d101      	bne.n	801a8ca <_fflush_r+0x62>
 801a8c6:	68ac      	ldr	r4, [r5, #8]
 801a8c8:	e7df      	b.n	801a88a <_fflush_r+0x22>
 801a8ca:	4b04      	ldr	r3, [pc, #16]	; (801a8dc <_fflush_r+0x74>)
 801a8cc:	429c      	cmp	r4, r3
 801a8ce:	bf08      	it	eq
 801a8d0:	68ec      	ldreq	r4, [r5, #12]
 801a8d2:	e7da      	b.n	801a88a <_fflush_r+0x22>
 801a8d4:	0801e650 	.word	0x0801e650
 801a8d8:	0801e670 	.word	0x0801e670
 801a8dc:	0801e630 	.word	0x0801e630

0801a8e0 <fiprintf>:
 801a8e0:	b40e      	push	{r1, r2, r3}
 801a8e2:	b503      	push	{r0, r1, lr}
 801a8e4:	4601      	mov	r1, r0
 801a8e6:	ab03      	add	r3, sp, #12
 801a8e8:	4805      	ldr	r0, [pc, #20]	; (801a900 <fiprintf+0x20>)
 801a8ea:	f853 2b04 	ldr.w	r2, [r3], #4
 801a8ee:	6800      	ldr	r0, [r0, #0]
 801a8f0:	9301      	str	r3, [sp, #4]
 801a8f2:	f000 f9f9 	bl	801ace8 <_vfiprintf_r>
 801a8f6:	b002      	add	sp, #8
 801a8f8:	f85d eb04 	ldr.w	lr, [sp], #4
 801a8fc:	b003      	add	sp, #12
 801a8fe:	4770      	bx	lr
 801a900:	20000020 	.word	0x20000020

0801a904 <_lseek_r>:
 801a904:	b538      	push	{r3, r4, r5, lr}
 801a906:	4604      	mov	r4, r0
 801a908:	4608      	mov	r0, r1
 801a90a:	4611      	mov	r1, r2
 801a90c:	2200      	movs	r2, #0
 801a90e:	4d05      	ldr	r5, [pc, #20]	; (801a924 <_lseek_r+0x20>)
 801a910:	602a      	str	r2, [r5, #0]
 801a912:	461a      	mov	r2, r3
 801a914:	f7e8 f81b 	bl	800294e <_lseek>
 801a918:	1c43      	adds	r3, r0, #1
 801a91a:	d102      	bne.n	801a922 <_lseek_r+0x1e>
 801a91c:	682b      	ldr	r3, [r5, #0]
 801a91e:	b103      	cbz	r3, 801a922 <_lseek_r+0x1e>
 801a920:	6023      	str	r3, [r4, #0]
 801a922:	bd38      	pop	{r3, r4, r5, pc}
 801a924:	2000ed60 	.word	0x2000ed60

0801a928 <malloc>:
 801a928:	4b02      	ldr	r3, [pc, #8]	; (801a934 <malloc+0xc>)
 801a92a:	4601      	mov	r1, r0
 801a92c:	6818      	ldr	r0, [r3, #0]
 801a92e:	f7ff bd1f 	b.w	801a370 <_malloc_r>
 801a932:	bf00      	nop
 801a934:	20000020 	.word	0x20000020

0801a938 <__malloc_lock>:
 801a938:	4801      	ldr	r0, [pc, #4]	; (801a940 <__malloc_lock+0x8>)
 801a93a:	f7ff bcd0 	b.w	801a2de <__retarget_lock_acquire_recursive>
 801a93e:	bf00      	nop
 801a940:	2000ed54 	.word	0x2000ed54

0801a944 <__malloc_unlock>:
 801a944:	4801      	ldr	r0, [pc, #4]	; (801a94c <__malloc_unlock+0x8>)
 801a946:	f7ff bccb 	b.w	801a2e0 <__retarget_lock_release_recursive>
 801a94a:	bf00      	nop
 801a94c:	2000ed54 	.word	0x2000ed54

0801a950 <_free_r>:
 801a950:	b538      	push	{r3, r4, r5, lr}
 801a952:	4605      	mov	r5, r0
 801a954:	2900      	cmp	r1, #0
 801a956:	d040      	beq.n	801a9da <_free_r+0x8a>
 801a958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a95c:	1f0c      	subs	r4, r1, #4
 801a95e:	2b00      	cmp	r3, #0
 801a960:	bfb8      	it	lt
 801a962:	18e4      	addlt	r4, r4, r3
 801a964:	f7ff ffe8 	bl	801a938 <__malloc_lock>
 801a968:	4a1c      	ldr	r2, [pc, #112]	; (801a9dc <_free_r+0x8c>)
 801a96a:	6813      	ldr	r3, [r2, #0]
 801a96c:	b933      	cbnz	r3, 801a97c <_free_r+0x2c>
 801a96e:	6063      	str	r3, [r4, #4]
 801a970:	6014      	str	r4, [r2, #0]
 801a972:	4628      	mov	r0, r5
 801a974:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a978:	f7ff bfe4 	b.w	801a944 <__malloc_unlock>
 801a97c:	42a3      	cmp	r3, r4
 801a97e:	d908      	bls.n	801a992 <_free_r+0x42>
 801a980:	6820      	ldr	r0, [r4, #0]
 801a982:	1821      	adds	r1, r4, r0
 801a984:	428b      	cmp	r3, r1
 801a986:	bf01      	itttt	eq
 801a988:	6819      	ldreq	r1, [r3, #0]
 801a98a:	685b      	ldreq	r3, [r3, #4]
 801a98c:	1809      	addeq	r1, r1, r0
 801a98e:	6021      	streq	r1, [r4, #0]
 801a990:	e7ed      	b.n	801a96e <_free_r+0x1e>
 801a992:	461a      	mov	r2, r3
 801a994:	685b      	ldr	r3, [r3, #4]
 801a996:	b10b      	cbz	r3, 801a99c <_free_r+0x4c>
 801a998:	42a3      	cmp	r3, r4
 801a99a:	d9fa      	bls.n	801a992 <_free_r+0x42>
 801a99c:	6811      	ldr	r1, [r2, #0]
 801a99e:	1850      	adds	r0, r2, r1
 801a9a0:	42a0      	cmp	r0, r4
 801a9a2:	d10b      	bne.n	801a9bc <_free_r+0x6c>
 801a9a4:	6820      	ldr	r0, [r4, #0]
 801a9a6:	4401      	add	r1, r0
 801a9a8:	1850      	adds	r0, r2, r1
 801a9aa:	4283      	cmp	r3, r0
 801a9ac:	6011      	str	r1, [r2, #0]
 801a9ae:	d1e0      	bne.n	801a972 <_free_r+0x22>
 801a9b0:	6818      	ldr	r0, [r3, #0]
 801a9b2:	685b      	ldr	r3, [r3, #4]
 801a9b4:	4401      	add	r1, r0
 801a9b6:	6011      	str	r1, [r2, #0]
 801a9b8:	6053      	str	r3, [r2, #4]
 801a9ba:	e7da      	b.n	801a972 <_free_r+0x22>
 801a9bc:	d902      	bls.n	801a9c4 <_free_r+0x74>
 801a9be:	230c      	movs	r3, #12
 801a9c0:	602b      	str	r3, [r5, #0]
 801a9c2:	e7d6      	b.n	801a972 <_free_r+0x22>
 801a9c4:	6820      	ldr	r0, [r4, #0]
 801a9c6:	1821      	adds	r1, r4, r0
 801a9c8:	428b      	cmp	r3, r1
 801a9ca:	bf01      	itttt	eq
 801a9cc:	6819      	ldreq	r1, [r3, #0]
 801a9ce:	685b      	ldreq	r3, [r3, #4]
 801a9d0:	1809      	addeq	r1, r1, r0
 801a9d2:	6021      	streq	r1, [r4, #0]
 801a9d4:	6063      	str	r3, [r4, #4]
 801a9d6:	6054      	str	r4, [r2, #4]
 801a9d8:	e7cb      	b.n	801a972 <_free_r+0x22>
 801a9da:	bd38      	pop	{r3, r4, r5, pc}
 801a9dc:	2000ed58 	.word	0x2000ed58

0801a9e0 <__ssputs_r>:
 801a9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a9e4:	688e      	ldr	r6, [r1, #8]
 801a9e6:	4682      	mov	sl, r0
 801a9e8:	429e      	cmp	r6, r3
 801a9ea:	460c      	mov	r4, r1
 801a9ec:	4690      	mov	r8, r2
 801a9ee:	461f      	mov	r7, r3
 801a9f0:	d838      	bhi.n	801aa64 <__ssputs_r+0x84>
 801a9f2:	898a      	ldrh	r2, [r1, #12]
 801a9f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a9f8:	d032      	beq.n	801aa60 <__ssputs_r+0x80>
 801a9fa:	6825      	ldr	r5, [r4, #0]
 801a9fc:	6909      	ldr	r1, [r1, #16]
 801a9fe:	3301      	adds	r3, #1
 801aa00:	eba5 0901 	sub.w	r9, r5, r1
 801aa04:	6965      	ldr	r5, [r4, #20]
 801aa06:	444b      	add	r3, r9
 801aa08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801aa0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801aa10:	106d      	asrs	r5, r5, #1
 801aa12:	429d      	cmp	r5, r3
 801aa14:	bf38      	it	cc
 801aa16:	461d      	movcc	r5, r3
 801aa18:	0553      	lsls	r3, r2, #21
 801aa1a:	d531      	bpl.n	801aa80 <__ssputs_r+0xa0>
 801aa1c:	4629      	mov	r1, r5
 801aa1e:	f7ff fca7 	bl	801a370 <_malloc_r>
 801aa22:	4606      	mov	r6, r0
 801aa24:	b950      	cbnz	r0, 801aa3c <__ssputs_r+0x5c>
 801aa26:	230c      	movs	r3, #12
 801aa28:	f04f 30ff 	mov.w	r0, #4294967295
 801aa2c:	f8ca 3000 	str.w	r3, [sl]
 801aa30:	89a3      	ldrh	r3, [r4, #12]
 801aa32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aa36:	81a3      	strh	r3, [r4, #12]
 801aa38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa3c:	464a      	mov	r2, r9
 801aa3e:	6921      	ldr	r1, [r4, #16]
 801aa40:	f7ff fc5f 	bl	801a302 <memcpy>
 801aa44:	89a3      	ldrh	r3, [r4, #12]
 801aa46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801aa4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aa4e:	81a3      	strh	r3, [r4, #12]
 801aa50:	6126      	str	r6, [r4, #16]
 801aa52:	444e      	add	r6, r9
 801aa54:	6026      	str	r6, [r4, #0]
 801aa56:	463e      	mov	r6, r7
 801aa58:	6165      	str	r5, [r4, #20]
 801aa5a:	eba5 0509 	sub.w	r5, r5, r9
 801aa5e:	60a5      	str	r5, [r4, #8]
 801aa60:	42be      	cmp	r6, r7
 801aa62:	d900      	bls.n	801aa66 <__ssputs_r+0x86>
 801aa64:	463e      	mov	r6, r7
 801aa66:	4632      	mov	r2, r6
 801aa68:	4641      	mov	r1, r8
 801aa6a:	6820      	ldr	r0, [r4, #0]
 801aa6c:	f000 fd4e 	bl	801b50c <memmove>
 801aa70:	68a3      	ldr	r3, [r4, #8]
 801aa72:	2000      	movs	r0, #0
 801aa74:	1b9b      	subs	r3, r3, r6
 801aa76:	60a3      	str	r3, [r4, #8]
 801aa78:	6823      	ldr	r3, [r4, #0]
 801aa7a:	4433      	add	r3, r6
 801aa7c:	6023      	str	r3, [r4, #0]
 801aa7e:	e7db      	b.n	801aa38 <__ssputs_r+0x58>
 801aa80:	462a      	mov	r2, r5
 801aa82:	f000 fd5d 	bl	801b540 <_realloc_r>
 801aa86:	4606      	mov	r6, r0
 801aa88:	2800      	cmp	r0, #0
 801aa8a:	d1e1      	bne.n	801aa50 <__ssputs_r+0x70>
 801aa8c:	4650      	mov	r0, sl
 801aa8e:	6921      	ldr	r1, [r4, #16]
 801aa90:	f7ff ff5e 	bl	801a950 <_free_r>
 801aa94:	e7c7      	b.n	801aa26 <__ssputs_r+0x46>
	...

0801aa98 <_svfiprintf_r>:
 801aa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa9c:	4698      	mov	r8, r3
 801aa9e:	898b      	ldrh	r3, [r1, #12]
 801aaa0:	4607      	mov	r7, r0
 801aaa2:	061b      	lsls	r3, r3, #24
 801aaa4:	460d      	mov	r5, r1
 801aaa6:	4614      	mov	r4, r2
 801aaa8:	b09d      	sub	sp, #116	; 0x74
 801aaaa:	d50e      	bpl.n	801aaca <_svfiprintf_r+0x32>
 801aaac:	690b      	ldr	r3, [r1, #16]
 801aaae:	b963      	cbnz	r3, 801aaca <_svfiprintf_r+0x32>
 801aab0:	2140      	movs	r1, #64	; 0x40
 801aab2:	f7ff fc5d 	bl	801a370 <_malloc_r>
 801aab6:	6028      	str	r0, [r5, #0]
 801aab8:	6128      	str	r0, [r5, #16]
 801aaba:	b920      	cbnz	r0, 801aac6 <_svfiprintf_r+0x2e>
 801aabc:	230c      	movs	r3, #12
 801aabe:	603b      	str	r3, [r7, #0]
 801aac0:	f04f 30ff 	mov.w	r0, #4294967295
 801aac4:	e0d1      	b.n	801ac6a <_svfiprintf_r+0x1d2>
 801aac6:	2340      	movs	r3, #64	; 0x40
 801aac8:	616b      	str	r3, [r5, #20]
 801aaca:	2300      	movs	r3, #0
 801aacc:	9309      	str	r3, [sp, #36]	; 0x24
 801aace:	2320      	movs	r3, #32
 801aad0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801aad4:	2330      	movs	r3, #48	; 0x30
 801aad6:	f04f 0901 	mov.w	r9, #1
 801aada:	f8cd 800c 	str.w	r8, [sp, #12]
 801aade:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801ac84 <_svfiprintf_r+0x1ec>
 801aae2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801aae6:	4623      	mov	r3, r4
 801aae8:	469a      	mov	sl, r3
 801aaea:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aaee:	b10a      	cbz	r2, 801aaf4 <_svfiprintf_r+0x5c>
 801aaf0:	2a25      	cmp	r2, #37	; 0x25
 801aaf2:	d1f9      	bne.n	801aae8 <_svfiprintf_r+0x50>
 801aaf4:	ebba 0b04 	subs.w	fp, sl, r4
 801aaf8:	d00b      	beq.n	801ab12 <_svfiprintf_r+0x7a>
 801aafa:	465b      	mov	r3, fp
 801aafc:	4622      	mov	r2, r4
 801aafe:	4629      	mov	r1, r5
 801ab00:	4638      	mov	r0, r7
 801ab02:	f7ff ff6d 	bl	801a9e0 <__ssputs_r>
 801ab06:	3001      	adds	r0, #1
 801ab08:	f000 80aa 	beq.w	801ac60 <_svfiprintf_r+0x1c8>
 801ab0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ab0e:	445a      	add	r2, fp
 801ab10:	9209      	str	r2, [sp, #36]	; 0x24
 801ab12:	f89a 3000 	ldrb.w	r3, [sl]
 801ab16:	2b00      	cmp	r3, #0
 801ab18:	f000 80a2 	beq.w	801ac60 <_svfiprintf_r+0x1c8>
 801ab1c:	2300      	movs	r3, #0
 801ab1e:	f04f 32ff 	mov.w	r2, #4294967295
 801ab22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ab26:	f10a 0a01 	add.w	sl, sl, #1
 801ab2a:	9304      	str	r3, [sp, #16]
 801ab2c:	9307      	str	r3, [sp, #28]
 801ab2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ab32:	931a      	str	r3, [sp, #104]	; 0x68
 801ab34:	4654      	mov	r4, sl
 801ab36:	2205      	movs	r2, #5
 801ab38:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ab3c:	4851      	ldr	r0, [pc, #324]	; (801ac84 <_svfiprintf_r+0x1ec>)
 801ab3e:	f000 fcd7 	bl	801b4f0 <memchr>
 801ab42:	9a04      	ldr	r2, [sp, #16]
 801ab44:	b9d8      	cbnz	r0, 801ab7e <_svfiprintf_r+0xe6>
 801ab46:	06d0      	lsls	r0, r2, #27
 801ab48:	bf44      	itt	mi
 801ab4a:	2320      	movmi	r3, #32
 801ab4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ab50:	0711      	lsls	r1, r2, #28
 801ab52:	bf44      	itt	mi
 801ab54:	232b      	movmi	r3, #43	; 0x2b
 801ab56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ab5a:	f89a 3000 	ldrb.w	r3, [sl]
 801ab5e:	2b2a      	cmp	r3, #42	; 0x2a
 801ab60:	d015      	beq.n	801ab8e <_svfiprintf_r+0xf6>
 801ab62:	4654      	mov	r4, sl
 801ab64:	2000      	movs	r0, #0
 801ab66:	f04f 0c0a 	mov.w	ip, #10
 801ab6a:	9a07      	ldr	r2, [sp, #28]
 801ab6c:	4621      	mov	r1, r4
 801ab6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ab72:	3b30      	subs	r3, #48	; 0x30
 801ab74:	2b09      	cmp	r3, #9
 801ab76:	d94e      	bls.n	801ac16 <_svfiprintf_r+0x17e>
 801ab78:	b1b0      	cbz	r0, 801aba8 <_svfiprintf_r+0x110>
 801ab7a:	9207      	str	r2, [sp, #28]
 801ab7c:	e014      	b.n	801aba8 <_svfiprintf_r+0x110>
 801ab7e:	eba0 0308 	sub.w	r3, r0, r8
 801ab82:	fa09 f303 	lsl.w	r3, r9, r3
 801ab86:	4313      	orrs	r3, r2
 801ab88:	46a2      	mov	sl, r4
 801ab8a:	9304      	str	r3, [sp, #16]
 801ab8c:	e7d2      	b.n	801ab34 <_svfiprintf_r+0x9c>
 801ab8e:	9b03      	ldr	r3, [sp, #12]
 801ab90:	1d19      	adds	r1, r3, #4
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	9103      	str	r1, [sp, #12]
 801ab96:	2b00      	cmp	r3, #0
 801ab98:	bfbb      	ittet	lt
 801ab9a:	425b      	neglt	r3, r3
 801ab9c:	f042 0202 	orrlt.w	r2, r2, #2
 801aba0:	9307      	strge	r3, [sp, #28]
 801aba2:	9307      	strlt	r3, [sp, #28]
 801aba4:	bfb8      	it	lt
 801aba6:	9204      	strlt	r2, [sp, #16]
 801aba8:	7823      	ldrb	r3, [r4, #0]
 801abaa:	2b2e      	cmp	r3, #46	; 0x2e
 801abac:	d10c      	bne.n	801abc8 <_svfiprintf_r+0x130>
 801abae:	7863      	ldrb	r3, [r4, #1]
 801abb0:	2b2a      	cmp	r3, #42	; 0x2a
 801abb2:	d135      	bne.n	801ac20 <_svfiprintf_r+0x188>
 801abb4:	9b03      	ldr	r3, [sp, #12]
 801abb6:	3402      	adds	r4, #2
 801abb8:	1d1a      	adds	r2, r3, #4
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	9203      	str	r2, [sp, #12]
 801abbe:	2b00      	cmp	r3, #0
 801abc0:	bfb8      	it	lt
 801abc2:	f04f 33ff 	movlt.w	r3, #4294967295
 801abc6:	9305      	str	r3, [sp, #20]
 801abc8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 801ac88 <_svfiprintf_r+0x1f0>
 801abcc:	2203      	movs	r2, #3
 801abce:	4650      	mov	r0, sl
 801abd0:	7821      	ldrb	r1, [r4, #0]
 801abd2:	f000 fc8d 	bl	801b4f0 <memchr>
 801abd6:	b140      	cbz	r0, 801abea <_svfiprintf_r+0x152>
 801abd8:	2340      	movs	r3, #64	; 0x40
 801abda:	eba0 000a 	sub.w	r0, r0, sl
 801abde:	fa03 f000 	lsl.w	r0, r3, r0
 801abe2:	9b04      	ldr	r3, [sp, #16]
 801abe4:	3401      	adds	r4, #1
 801abe6:	4303      	orrs	r3, r0
 801abe8:	9304      	str	r3, [sp, #16]
 801abea:	f814 1b01 	ldrb.w	r1, [r4], #1
 801abee:	2206      	movs	r2, #6
 801abf0:	4826      	ldr	r0, [pc, #152]	; (801ac8c <_svfiprintf_r+0x1f4>)
 801abf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801abf6:	f000 fc7b 	bl	801b4f0 <memchr>
 801abfa:	2800      	cmp	r0, #0
 801abfc:	d038      	beq.n	801ac70 <_svfiprintf_r+0x1d8>
 801abfe:	4b24      	ldr	r3, [pc, #144]	; (801ac90 <_svfiprintf_r+0x1f8>)
 801ac00:	bb1b      	cbnz	r3, 801ac4a <_svfiprintf_r+0x1b2>
 801ac02:	9b03      	ldr	r3, [sp, #12]
 801ac04:	3307      	adds	r3, #7
 801ac06:	f023 0307 	bic.w	r3, r3, #7
 801ac0a:	3308      	adds	r3, #8
 801ac0c:	9303      	str	r3, [sp, #12]
 801ac0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac10:	4433      	add	r3, r6
 801ac12:	9309      	str	r3, [sp, #36]	; 0x24
 801ac14:	e767      	b.n	801aae6 <_svfiprintf_r+0x4e>
 801ac16:	460c      	mov	r4, r1
 801ac18:	2001      	movs	r0, #1
 801ac1a:	fb0c 3202 	mla	r2, ip, r2, r3
 801ac1e:	e7a5      	b.n	801ab6c <_svfiprintf_r+0xd4>
 801ac20:	2300      	movs	r3, #0
 801ac22:	f04f 0c0a 	mov.w	ip, #10
 801ac26:	4619      	mov	r1, r3
 801ac28:	3401      	adds	r4, #1
 801ac2a:	9305      	str	r3, [sp, #20]
 801ac2c:	4620      	mov	r0, r4
 801ac2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ac32:	3a30      	subs	r2, #48	; 0x30
 801ac34:	2a09      	cmp	r2, #9
 801ac36:	d903      	bls.n	801ac40 <_svfiprintf_r+0x1a8>
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	d0c5      	beq.n	801abc8 <_svfiprintf_r+0x130>
 801ac3c:	9105      	str	r1, [sp, #20]
 801ac3e:	e7c3      	b.n	801abc8 <_svfiprintf_r+0x130>
 801ac40:	4604      	mov	r4, r0
 801ac42:	2301      	movs	r3, #1
 801ac44:	fb0c 2101 	mla	r1, ip, r1, r2
 801ac48:	e7f0      	b.n	801ac2c <_svfiprintf_r+0x194>
 801ac4a:	ab03      	add	r3, sp, #12
 801ac4c:	9300      	str	r3, [sp, #0]
 801ac4e:	462a      	mov	r2, r5
 801ac50:	4638      	mov	r0, r7
 801ac52:	4b10      	ldr	r3, [pc, #64]	; (801ac94 <_svfiprintf_r+0x1fc>)
 801ac54:	a904      	add	r1, sp, #16
 801ac56:	f3af 8000 	nop.w
 801ac5a:	1c42      	adds	r2, r0, #1
 801ac5c:	4606      	mov	r6, r0
 801ac5e:	d1d6      	bne.n	801ac0e <_svfiprintf_r+0x176>
 801ac60:	89ab      	ldrh	r3, [r5, #12]
 801ac62:	065b      	lsls	r3, r3, #25
 801ac64:	f53f af2c 	bmi.w	801aac0 <_svfiprintf_r+0x28>
 801ac68:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ac6a:	b01d      	add	sp, #116	; 0x74
 801ac6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac70:	ab03      	add	r3, sp, #12
 801ac72:	9300      	str	r3, [sp, #0]
 801ac74:	462a      	mov	r2, r5
 801ac76:	4638      	mov	r0, r7
 801ac78:	4b06      	ldr	r3, [pc, #24]	; (801ac94 <_svfiprintf_r+0x1fc>)
 801ac7a:	a904      	add	r1, sp, #16
 801ac7c:	f000 f9d4 	bl	801b028 <_printf_i>
 801ac80:	e7eb      	b.n	801ac5a <_svfiprintf_r+0x1c2>
 801ac82:	bf00      	nop
 801ac84:	0801e742 	.word	0x0801e742
 801ac88:	0801e748 	.word	0x0801e748
 801ac8c:	0801e74c 	.word	0x0801e74c
 801ac90:	00000000 	.word	0x00000000
 801ac94:	0801a9e1 	.word	0x0801a9e1

0801ac98 <__sfputc_r>:
 801ac98:	6893      	ldr	r3, [r2, #8]
 801ac9a:	b410      	push	{r4}
 801ac9c:	3b01      	subs	r3, #1
 801ac9e:	2b00      	cmp	r3, #0
 801aca0:	6093      	str	r3, [r2, #8]
 801aca2:	da07      	bge.n	801acb4 <__sfputc_r+0x1c>
 801aca4:	6994      	ldr	r4, [r2, #24]
 801aca6:	42a3      	cmp	r3, r4
 801aca8:	db01      	blt.n	801acae <__sfputc_r+0x16>
 801acaa:	290a      	cmp	r1, #10
 801acac:	d102      	bne.n	801acb4 <__sfputc_r+0x1c>
 801acae:	bc10      	pop	{r4}
 801acb0:	f000 baf2 	b.w	801b298 <__swbuf_r>
 801acb4:	6813      	ldr	r3, [r2, #0]
 801acb6:	1c58      	adds	r0, r3, #1
 801acb8:	6010      	str	r0, [r2, #0]
 801acba:	7019      	strb	r1, [r3, #0]
 801acbc:	4608      	mov	r0, r1
 801acbe:	bc10      	pop	{r4}
 801acc0:	4770      	bx	lr

0801acc2 <__sfputs_r>:
 801acc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801acc4:	4606      	mov	r6, r0
 801acc6:	460f      	mov	r7, r1
 801acc8:	4614      	mov	r4, r2
 801acca:	18d5      	adds	r5, r2, r3
 801accc:	42ac      	cmp	r4, r5
 801acce:	d101      	bne.n	801acd4 <__sfputs_r+0x12>
 801acd0:	2000      	movs	r0, #0
 801acd2:	e007      	b.n	801ace4 <__sfputs_r+0x22>
 801acd4:	463a      	mov	r2, r7
 801acd6:	4630      	mov	r0, r6
 801acd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801acdc:	f7ff ffdc 	bl	801ac98 <__sfputc_r>
 801ace0:	1c43      	adds	r3, r0, #1
 801ace2:	d1f3      	bne.n	801accc <__sfputs_r+0xa>
 801ace4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ace8 <_vfiprintf_r>:
 801ace8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acec:	460d      	mov	r5, r1
 801acee:	4614      	mov	r4, r2
 801acf0:	4698      	mov	r8, r3
 801acf2:	4606      	mov	r6, r0
 801acf4:	b09d      	sub	sp, #116	; 0x74
 801acf6:	b118      	cbz	r0, 801ad00 <_vfiprintf_r+0x18>
 801acf8:	6983      	ldr	r3, [r0, #24]
 801acfa:	b90b      	cbnz	r3, 801ad00 <_vfiprintf_r+0x18>
 801acfc:	f7ff fa2c 	bl	801a158 <__sinit>
 801ad00:	4b89      	ldr	r3, [pc, #548]	; (801af28 <_vfiprintf_r+0x240>)
 801ad02:	429d      	cmp	r5, r3
 801ad04:	d11b      	bne.n	801ad3e <_vfiprintf_r+0x56>
 801ad06:	6875      	ldr	r5, [r6, #4]
 801ad08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ad0a:	07d9      	lsls	r1, r3, #31
 801ad0c:	d405      	bmi.n	801ad1a <_vfiprintf_r+0x32>
 801ad0e:	89ab      	ldrh	r3, [r5, #12]
 801ad10:	059a      	lsls	r2, r3, #22
 801ad12:	d402      	bmi.n	801ad1a <_vfiprintf_r+0x32>
 801ad14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ad16:	f7ff fae2 	bl	801a2de <__retarget_lock_acquire_recursive>
 801ad1a:	89ab      	ldrh	r3, [r5, #12]
 801ad1c:	071b      	lsls	r3, r3, #28
 801ad1e:	d501      	bpl.n	801ad24 <_vfiprintf_r+0x3c>
 801ad20:	692b      	ldr	r3, [r5, #16]
 801ad22:	b9eb      	cbnz	r3, 801ad60 <_vfiprintf_r+0x78>
 801ad24:	4629      	mov	r1, r5
 801ad26:	4630      	mov	r0, r6
 801ad28:	f000 fb08 	bl	801b33c <__swsetup_r>
 801ad2c:	b1c0      	cbz	r0, 801ad60 <_vfiprintf_r+0x78>
 801ad2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ad30:	07dc      	lsls	r4, r3, #31
 801ad32:	d50e      	bpl.n	801ad52 <_vfiprintf_r+0x6a>
 801ad34:	f04f 30ff 	mov.w	r0, #4294967295
 801ad38:	b01d      	add	sp, #116	; 0x74
 801ad3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad3e:	4b7b      	ldr	r3, [pc, #492]	; (801af2c <_vfiprintf_r+0x244>)
 801ad40:	429d      	cmp	r5, r3
 801ad42:	d101      	bne.n	801ad48 <_vfiprintf_r+0x60>
 801ad44:	68b5      	ldr	r5, [r6, #8]
 801ad46:	e7df      	b.n	801ad08 <_vfiprintf_r+0x20>
 801ad48:	4b79      	ldr	r3, [pc, #484]	; (801af30 <_vfiprintf_r+0x248>)
 801ad4a:	429d      	cmp	r5, r3
 801ad4c:	bf08      	it	eq
 801ad4e:	68f5      	ldreq	r5, [r6, #12]
 801ad50:	e7da      	b.n	801ad08 <_vfiprintf_r+0x20>
 801ad52:	89ab      	ldrh	r3, [r5, #12]
 801ad54:	0598      	lsls	r0, r3, #22
 801ad56:	d4ed      	bmi.n	801ad34 <_vfiprintf_r+0x4c>
 801ad58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ad5a:	f7ff fac1 	bl	801a2e0 <__retarget_lock_release_recursive>
 801ad5e:	e7e9      	b.n	801ad34 <_vfiprintf_r+0x4c>
 801ad60:	2300      	movs	r3, #0
 801ad62:	9309      	str	r3, [sp, #36]	; 0x24
 801ad64:	2320      	movs	r3, #32
 801ad66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ad6a:	2330      	movs	r3, #48	; 0x30
 801ad6c:	f04f 0901 	mov.w	r9, #1
 801ad70:	f8cd 800c 	str.w	r8, [sp, #12]
 801ad74:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 801af34 <_vfiprintf_r+0x24c>
 801ad78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ad7c:	4623      	mov	r3, r4
 801ad7e:	469a      	mov	sl, r3
 801ad80:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ad84:	b10a      	cbz	r2, 801ad8a <_vfiprintf_r+0xa2>
 801ad86:	2a25      	cmp	r2, #37	; 0x25
 801ad88:	d1f9      	bne.n	801ad7e <_vfiprintf_r+0x96>
 801ad8a:	ebba 0b04 	subs.w	fp, sl, r4
 801ad8e:	d00b      	beq.n	801ada8 <_vfiprintf_r+0xc0>
 801ad90:	465b      	mov	r3, fp
 801ad92:	4622      	mov	r2, r4
 801ad94:	4629      	mov	r1, r5
 801ad96:	4630      	mov	r0, r6
 801ad98:	f7ff ff93 	bl	801acc2 <__sfputs_r>
 801ad9c:	3001      	adds	r0, #1
 801ad9e:	f000 80aa 	beq.w	801aef6 <_vfiprintf_r+0x20e>
 801ada2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ada4:	445a      	add	r2, fp
 801ada6:	9209      	str	r2, [sp, #36]	; 0x24
 801ada8:	f89a 3000 	ldrb.w	r3, [sl]
 801adac:	2b00      	cmp	r3, #0
 801adae:	f000 80a2 	beq.w	801aef6 <_vfiprintf_r+0x20e>
 801adb2:	2300      	movs	r3, #0
 801adb4:	f04f 32ff 	mov.w	r2, #4294967295
 801adb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801adbc:	f10a 0a01 	add.w	sl, sl, #1
 801adc0:	9304      	str	r3, [sp, #16]
 801adc2:	9307      	str	r3, [sp, #28]
 801adc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801adc8:	931a      	str	r3, [sp, #104]	; 0x68
 801adca:	4654      	mov	r4, sl
 801adcc:	2205      	movs	r2, #5
 801adce:	f814 1b01 	ldrb.w	r1, [r4], #1
 801add2:	4858      	ldr	r0, [pc, #352]	; (801af34 <_vfiprintf_r+0x24c>)
 801add4:	f000 fb8c 	bl	801b4f0 <memchr>
 801add8:	9a04      	ldr	r2, [sp, #16]
 801adda:	b9d8      	cbnz	r0, 801ae14 <_vfiprintf_r+0x12c>
 801addc:	06d1      	lsls	r1, r2, #27
 801adde:	bf44      	itt	mi
 801ade0:	2320      	movmi	r3, #32
 801ade2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ade6:	0713      	lsls	r3, r2, #28
 801ade8:	bf44      	itt	mi
 801adea:	232b      	movmi	r3, #43	; 0x2b
 801adec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801adf0:	f89a 3000 	ldrb.w	r3, [sl]
 801adf4:	2b2a      	cmp	r3, #42	; 0x2a
 801adf6:	d015      	beq.n	801ae24 <_vfiprintf_r+0x13c>
 801adf8:	4654      	mov	r4, sl
 801adfa:	2000      	movs	r0, #0
 801adfc:	f04f 0c0a 	mov.w	ip, #10
 801ae00:	9a07      	ldr	r2, [sp, #28]
 801ae02:	4621      	mov	r1, r4
 801ae04:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ae08:	3b30      	subs	r3, #48	; 0x30
 801ae0a:	2b09      	cmp	r3, #9
 801ae0c:	d94e      	bls.n	801aeac <_vfiprintf_r+0x1c4>
 801ae0e:	b1b0      	cbz	r0, 801ae3e <_vfiprintf_r+0x156>
 801ae10:	9207      	str	r2, [sp, #28]
 801ae12:	e014      	b.n	801ae3e <_vfiprintf_r+0x156>
 801ae14:	eba0 0308 	sub.w	r3, r0, r8
 801ae18:	fa09 f303 	lsl.w	r3, r9, r3
 801ae1c:	4313      	orrs	r3, r2
 801ae1e:	46a2      	mov	sl, r4
 801ae20:	9304      	str	r3, [sp, #16]
 801ae22:	e7d2      	b.n	801adca <_vfiprintf_r+0xe2>
 801ae24:	9b03      	ldr	r3, [sp, #12]
 801ae26:	1d19      	adds	r1, r3, #4
 801ae28:	681b      	ldr	r3, [r3, #0]
 801ae2a:	9103      	str	r1, [sp, #12]
 801ae2c:	2b00      	cmp	r3, #0
 801ae2e:	bfbb      	ittet	lt
 801ae30:	425b      	neglt	r3, r3
 801ae32:	f042 0202 	orrlt.w	r2, r2, #2
 801ae36:	9307      	strge	r3, [sp, #28]
 801ae38:	9307      	strlt	r3, [sp, #28]
 801ae3a:	bfb8      	it	lt
 801ae3c:	9204      	strlt	r2, [sp, #16]
 801ae3e:	7823      	ldrb	r3, [r4, #0]
 801ae40:	2b2e      	cmp	r3, #46	; 0x2e
 801ae42:	d10c      	bne.n	801ae5e <_vfiprintf_r+0x176>
 801ae44:	7863      	ldrb	r3, [r4, #1]
 801ae46:	2b2a      	cmp	r3, #42	; 0x2a
 801ae48:	d135      	bne.n	801aeb6 <_vfiprintf_r+0x1ce>
 801ae4a:	9b03      	ldr	r3, [sp, #12]
 801ae4c:	3402      	adds	r4, #2
 801ae4e:	1d1a      	adds	r2, r3, #4
 801ae50:	681b      	ldr	r3, [r3, #0]
 801ae52:	9203      	str	r2, [sp, #12]
 801ae54:	2b00      	cmp	r3, #0
 801ae56:	bfb8      	it	lt
 801ae58:	f04f 33ff 	movlt.w	r3, #4294967295
 801ae5c:	9305      	str	r3, [sp, #20]
 801ae5e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 801af38 <_vfiprintf_r+0x250>
 801ae62:	2203      	movs	r2, #3
 801ae64:	4650      	mov	r0, sl
 801ae66:	7821      	ldrb	r1, [r4, #0]
 801ae68:	f000 fb42 	bl	801b4f0 <memchr>
 801ae6c:	b140      	cbz	r0, 801ae80 <_vfiprintf_r+0x198>
 801ae6e:	2340      	movs	r3, #64	; 0x40
 801ae70:	eba0 000a 	sub.w	r0, r0, sl
 801ae74:	fa03 f000 	lsl.w	r0, r3, r0
 801ae78:	9b04      	ldr	r3, [sp, #16]
 801ae7a:	3401      	adds	r4, #1
 801ae7c:	4303      	orrs	r3, r0
 801ae7e:	9304      	str	r3, [sp, #16]
 801ae80:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ae84:	2206      	movs	r2, #6
 801ae86:	482d      	ldr	r0, [pc, #180]	; (801af3c <_vfiprintf_r+0x254>)
 801ae88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ae8c:	f000 fb30 	bl	801b4f0 <memchr>
 801ae90:	2800      	cmp	r0, #0
 801ae92:	d03f      	beq.n	801af14 <_vfiprintf_r+0x22c>
 801ae94:	4b2a      	ldr	r3, [pc, #168]	; (801af40 <_vfiprintf_r+0x258>)
 801ae96:	bb1b      	cbnz	r3, 801aee0 <_vfiprintf_r+0x1f8>
 801ae98:	9b03      	ldr	r3, [sp, #12]
 801ae9a:	3307      	adds	r3, #7
 801ae9c:	f023 0307 	bic.w	r3, r3, #7
 801aea0:	3308      	adds	r3, #8
 801aea2:	9303      	str	r3, [sp, #12]
 801aea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aea6:	443b      	add	r3, r7
 801aea8:	9309      	str	r3, [sp, #36]	; 0x24
 801aeaa:	e767      	b.n	801ad7c <_vfiprintf_r+0x94>
 801aeac:	460c      	mov	r4, r1
 801aeae:	2001      	movs	r0, #1
 801aeb0:	fb0c 3202 	mla	r2, ip, r2, r3
 801aeb4:	e7a5      	b.n	801ae02 <_vfiprintf_r+0x11a>
 801aeb6:	2300      	movs	r3, #0
 801aeb8:	f04f 0c0a 	mov.w	ip, #10
 801aebc:	4619      	mov	r1, r3
 801aebe:	3401      	adds	r4, #1
 801aec0:	9305      	str	r3, [sp, #20]
 801aec2:	4620      	mov	r0, r4
 801aec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aec8:	3a30      	subs	r2, #48	; 0x30
 801aeca:	2a09      	cmp	r2, #9
 801aecc:	d903      	bls.n	801aed6 <_vfiprintf_r+0x1ee>
 801aece:	2b00      	cmp	r3, #0
 801aed0:	d0c5      	beq.n	801ae5e <_vfiprintf_r+0x176>
 801aed2:	9105      	str	r1, [sp, #20]
 801aed4:	e7c3      	b.n	801ae5e <_vfiprintf_r+0x176>
 801aed6:	4604      	mov	r4, r0
 801aed8:	2301      	movs	r3, #1
 801aeda:	fb0c 2101 	mla	r1, ip, r1, r2
 801aede:	e7f0      	b.n	801aec2 <_vfiprintf_r+0x1da>
 801aee0:	ab03      	add	r3, sp, #12
 801aee2:	9300      	str	r3, [sp, #0]
 801aee4:	462a      	mov	r2, r5
 801aee6:	4630      	mov	r0, r6
 801aee8:	4b16      	ldr	r3, [pc, #88]	; (801af44 <_vfiprintf_r+0x25c>)
 801aeea:	a904      	add	r1, sp, #16
 801aeec:	f3af 8000 	nop.w
 801aef0:	4607      	mov	r7, r0
 801aef2:	1c78      	adds	r0, r7, #1
 801aef4:	d1d6      	bne.n	801aea4 <_vfiprintf_r+0x1bc>
 801aef6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801aef8:	07d9      	lsls	r1, r3, #31
 801aefa:	d405      	bmi.n	801af08 <_vfiprintf_r+0x220>
 801aefc:	89ab      	ldrh	r3, [r5, #12]
 801aefe:	059a      	lsls	r2, r3, #22
 801af00:	d402      	bmi.n	801af08 <_vfiprintf_r+0x220>
 801af02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801af04:	f7ff f9ec 	bl	801a2e0 <__retarget_lock_release_recursive>
 801af08:	89ab      	ldrh	r3, [r5, #12]
 801af0a:	065b      	lsls	r3, r3, #25
 801af0c:	f53f af12 	bmi.w	801ad34 <_vfiprintf_r+0x4c>
 801af10:	9809      	ldr	r0, [sp, #36]	; 0x24
 801af12:	e711      	b.n	801ad38 <_vfiprintf_r+0x50>
 801af14:	ab03      	add	r3, sp, #12
 801af16:	9300      	str	r3, [sp, #0]
 801af18:	462a      	mov	r2, r5
 801af1a:	4630      	mov	r0, r6
 801af1c:	4b09      	ldr	r3, [pc, #36]	; (801af44 <_vfiprintf_r+0x25c>)
 801af1e:	a904      	add	r1, sp, #16
 801af20:	f000 f882 	bl	801b028 <_printf_i>
 801af24:	e7e4      	b.n	801aef0 <_vfiprintf_r+0x208>
 801af26:	bf00      	nop
 801af28:	0801e650 	.word	0x0801e650
 801af2c:	0801e670 	.word	0x0801e670
 801af30:	0801e630 	.word	0x0801e630
 801af34:	0801e742 	.word	0x0801e742
 801af38:	0801e748 	.word	0x0801e748
 801af3c:	0801e74c 	.word	0x0801e74c
 801af40:	00000000 	.word	0x00000000
 801af44:	0801acc3 	.word	0x0801acc3

0801af48 <_printf_common>:
 801af48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801af4c:	4616      	mov	r6, r2
 801af4e:	4699      	mov	r9, r3
 801af50:	688a      	ldr	r2, [r1, #8]
 801af52:	690b      	ldr	r3, [r1, #16]
 801af54:	4607      	mov	r7, r0
 801af56:	4293      	cmp	r3, r2
 801af58:	bfb8      	it	lt
 801af5a:	4613      	movlt	r3, r2
 801af5c:	6033      	str	r3, [r6, #0]
 801af5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801af62:	460c      	mov	r4, r1
 801af64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801af68:	b10a      	cbz	r2, 801af6e <_printf_common+0x26>
 801af6a:	3301      	adds	r3, #1
 801af6c:	6033      	str	r3, [r6, #0]
 801af6e:	6823      	ldr	r3, [r4, #0]
 801af70:	0699      	lsls	r1, r3, #26
 801af72:	bf42      	ittt	mi
 801af74:	6833      	ldrmi	r3, [r6, #0]
 801af76:	3302      	addmi	r3, #2
 801af78:	6033      	strmi	r3, [r6, #0]
 801af7a:	6825      	ldr	r5, [r4, #0]
 801af7c:	f015 0506 	ands.w	r5, r5, #6
 801af80:	d106      	bne.n	801af90 <_printf_common+0x48>
 801af82:	f104 0a19 	add.w	sl, r4, #25
 801af86:	68e3      	ldr	r3, [r4, #12]
 801af88:	6832      	ldr	r2, [r6, #0]
 801af8a:	1a9b      	subs	r3, r3, r2
 801af8c:	42ab      	cmp	r3, r5
 801af8e:	dc28      	bgt.n	801afe2 <_printf_common+0x9a>
 801af90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801af94:	1e13      	subs	r3, r2, #0
 801af96:	6822      	ldr	r2, [r4, #0]
 801af98:	bf18      	it	ne
 801af9a:	2301      	movne	r3, #1
 801af9c:	0692      	lsls	r2, r2, #26
 801af9e:	d42d      	bmi.n	801affc <_printf_common+0xb4>
 801afa0:	4649      	mov	r1, r9
 801afa2:	4638      	mov	r0, r7
 801afa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801afa8:	47c0      	blx	r8
 801afaa:	3001      	adds	r0, #1
 801afac:	d020      	beq.n	801aff0 <_printf_common+0xa8>
 801afae:	6823      	ldr	r3, [r4, #0]
 801afb0:	68e5      	ldr	r5, [r4, #12]
 801afb2:	f003 0306 	and.w	r3, r3, #6
 801afb6:	2b04      	cmp	r3, #4
 801afb8:	bf18      	it	ne
 801afba:	2500      	movne	r5, #0
 801afbc:	6832      	ldr	r2, [r6, #0]
 801afbe:	f04f 0600 	mov.w	r6, #0
 801afc2:	68a3      	ldr	r3, [r4, #8]
 801afc4:	bf08      	it	eq
 801afc6:	1aad      	subeq	r5, r5, r2
 801afc8:	6922      	ldr	r2, [r4, #16]
 801afca:	bf08      	it	eq
 801afcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801afd0:	4293      	cmp	r3, r2
 801afd2:	bfc4      	itt	gt
 801afd4:	1a9b      	subgt	r3, r3, r2
 801afd6:	18ed      	addgt	r5, r5, r3
 801afd8:	341a      	adds	r4, #26
 801afda:	42b5      	cmp	r5, r6
 801afdc:	d11a      	bne.n	801b014 <_printf_common+0xcc>
 801afde:	2000      	movs	r0, #0
 801afe0:	e008      	b.n	801aff4 <_printf_common+0xac>
 801afe2:	2301      	movs	r3, #1
 801afe4:	4652      	mov	r2, sl
 801afe6:	4649      	mov	r1, r9
 801afe8:	4638      	mov	r0, r7
 801afea:	47c0      	blx	r8
 801afec:	3001      	adds	r0, #1
 801afee:	d103      	bne.n	801aff8 <_printf_common+0xb0>
 801aff0:	f04f 30ff 	mov.w	r0, #4294967295
 801aff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aff8:	3501      	adds	r5, #1
 801affa:	e7c4      	b.n	801af86 <_printf_common+0x3e>
 801affc:	2030      	movs	r0, #48	; 0x30
 801affe:	18e1      	adds	r1, r4, r3
 801b000:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b004:	1c5a      	adds	r2, r3, #1
 801b006:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b00a:	4422      	add	r2, r4
 801b00c:	3302      	adds	r3, #2
 801b00e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b012:	e7c5      	b.n	801afa0 <_printf_common+0x58>
 801b014:	2301      	movs	r3, #1
 801b016:	4622      	mov	r2, r4
 801b018:	4649      	mov	r1, r9
 801b01a:	4638      	mov	r0, r7
 801b01c:	47c0      	blx	r8
 801b01e:	3001      	adds	r0, #1
 801b020:	d0e6      	beq.n	801aff0 <_printf_common+0xa8>
 801b022:	3601      	adds	r6, #1
 801b024:	e7d9      	b.n	801afda <_printf_common+0x92>
	...

0801b028 <_printf_i>:
 801b028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b02c:	7e0f      	ldrb	r7, [r1, #24]
 801b02e:	4691      	mov	r9, r2
 801b030:	2f78      	cmp	r7, #120	; 0x78
 801b032:	4680      	mov	r8, r0
 801b034:	460c      	mov	r4, r1
 801b036:	469a      	mov	sl, r3
 801b038:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b03a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b03e:	d807      	bhi.n	801b050 <_printf_i+0x28>
 801b040:	2f62      	cmp	r7, #98	; 0x62
 801b042:	d80a      	bhi.n	801b05a <_printf_i+0x32>
 801b044:	2f00      	cmp	r7, #0
 801b046:	f000 80d9 	beq.w	801b1fc <_printf_i+0x1d4>
 801b04a:	2f58      	cmp	r7, #88	; 0x58
 801b04c:	f000 80a4 	beq.w	801b198 <_printf_i+0x170>
 801b050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b054:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b058:	e03a      	b.n	801b0d0 <_printf_i+0xa8>
 801b05a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b05e:	2b15      	cmp	r3, #21
 801b060:	d8f6      	bhi.n	801b050 <_printf_i+0x28>
 801b062:	a101      	add	r1, pc, #4	; (adr r1, 801b068 <_printf_i+0x40>)
 801b064:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b068:	0801b0c1 	.word	0x0801b0c1
 801b06c:	0801b0d5 	.word	0x0801b0d5
 801b070:	0801b051 	.word	0x0801b051
 801b074:	0801b051 	.word	0x0801b051
 801b078:	0801b051 	.word	0x0801b051
 801b07c:	0801b051 	.word	0x0801b051
 801b080:	0801b0d5 	.word	0x0801b0d5
 801b084:	0801b051 	.word	0x0801b051
 801b088:	0801b051 	.word	0x0801b051
 801b08c:	0801b051 	.word	0x0801b051
 801b090:	0801b051 	.word	0x0801b051
 801b094:	0801b1e3 	.word	0x0801b1e3
 801b098:	0801b105 	.word	0x0801b105
 801b09c:	0801b1c5 	.word	0x0801b1c5
 801b0a0:	0801b051 	.word	0x0801b051
 801b0a4:	0801b051 	.word	0x0801b051
 801b0a8:	0801b205 	.word	0x0801b205
 801b0ac:	0801b051 	.word	0x0801b051
 801b0b0:	0801b105 	.word	0x0801b105
 801b0b4:	0801b051 	.word	0x0801b051
 801b0b8:	0801b051 	.word	0x0801b051
 801b0bc:	0801b1cd 	.word	0x0801b1cd
 801b0c0:	682b      	ldr	r3, [r5, #0]
 801b0c2:	1d1a      	adds	r2, r3, #4
 801b0c4:	681b      	ldr	r3, [r3, #0]
 801b0c6:	602a      	str	r2, [r5, #0]
 801b0c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b0cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b0d0:	2301      	movs	r3, #1
 801b0d2:	e0a4      	b.n	801b21e <_printf_i+0x1f6>
 801b0d4:	6820      	ldr	r0, [r4, #0]
 801b0d6:	6829      	ldr	r1, [r5, #0]
 801b0d8:	0606      	lsls	r6, r0, #24
 801b0da:	f101 0304 	add.w	r3, r1, #4
 801b0de:	d50a      	bpl.n	801b0f6 <_printf_i+0xce>
 801b0e0:	680e      	ldr	r6, [r1, #0]
 801b0e2:	602b      	str	r3, [r5, #0]
 801b0e4:	2e00      	cmp	r6, #0
 801b0e6:	da03      	bge.n	801b0f0 <_printf_i+0xc8>
 801b0e8:	232d      	movs	r3, #45	; 0x2d
 801b0ea:	4276      	negs	r6, r6
 801b0ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b0f0:	230a      	movs	r3, #10
 801b0f2:	485e      	ldr	r0, [pc, #376]	; (801b26c <_printf_i+0x244>)
 801b0f4:	e019      	b.n	801b12a <_printf_i+0x102>
 801b0f6:	680e      	ldr	r6, [r1, #0]
 801b0f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b0fc:	602b      	str	r3, [r5, #0]
 801b0fe:	bf18      	it	ne
 801b100:	b236      	sxthne	r6, r6
 801b102:	e7ef      	b.n	801b0e4 <_printf_i+0xbc>
 801b104:	682b      	ldr	r3, [r5, #0]
 801b106:	6820      	ldr	r0, [r4, #0]
 801b108:	1d19      	adds	r1, r3, #4
 801b10a:	6029      	str	r1, [r5, #0]
 801b10c:	0601      	lsls	r1, r0, #24
 801b10e:	d501      	bpl.n	801b114 <_printf_i+0xec>
 801b110:	681e      	ldr	r6, [r3, #0]
 801b112:	e002      	b.n	801b11a <_printf_i+0xf2>
 801b114:	0646      	lsls	r6, r0, #25
 801b116:	d5fb      	bpl.n	801b110 <_printf_i+0xe8>
 801b118:	881e      	ldrh	r6, [r3, #0]
 801b11a:	2f6f      	cmp	r7, #111	; 0x6f
 801b11c:	bf0c      	ite	eq
 801b11e:	2308      	moveq	r3, #8
 801b120:	230a      	movne	r3, #10
 801b122:	4852      	ldr	r0, [pc, #328]	; (801b26c <_printf_i+0x244>)
 801b124:	2100      	movs	r1, #0
 801b126:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b12a:	6865      	ldr	r5, [r4, #4]
 801b12c:	2d00      	cmp	r5, #0
 801b12e:	bfa8      	it	ge
 801b130:	6821      	ldrge	r1, [r4, #0]
 801b132:	60a5      	str	r5, [r4, #8]
 801b134:	bfa4      	itt	ge
 801b136:	f021 0104 	bicge.w	r1, r1, #4
 801b13a:	6021      	strge	r1, [r4, #0]
 801b13c:	b90e      	cbnz	r6, 801b142 <_printf_i+0x11a>
 801b13e:	2d00      	cmp	r5, #0
 801b140:	d04d      	beq.n	801b1de <_printf_i+0x1b6>
 801b142:	4615      	mov	r5, r2
 801b144:	fbb6 f1f3 	udiv	r1, r6, r3
 801b148:	fb03 6711 	mls	r7, r3, r1, r6
 801b14c:	5dc7      	ldrb	r7, [r0, r7]
 801b14e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b152:	4637      	mov	r7, r6
 801b154:	42bb      	cmp	r3, r7
 801b156:	460e      	mov	r6, r1
 801b158:	d9f4      	bls.n	801b144 <_printf_i+0x11c>
 801b15a:	2b08      	cmp	r3, #8
 801b15c:	d10b      	bne.n	801b176 <_printf_i+0x14e>
 801b15e:	6823      	ldr	r3, [r4, #0]
 801b160:	07de      	lsls	r6, r3, #31
 801b162:	d508      	bpl.n	801b176 <_printf_i+0x14e>
 801b164:	6923      	ldr	r3, [r4, #16]
 801b166:	6861      	ldr	r1, [r4, #4]
 801b168:	4299      	cmp	r1, r3
 801b16a:	bfde      	ittt	le
 801b16c:	2330      	movle	r3, #48	; 0x30
 801b16e:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b172:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b176:	1b52      	subs	r2, r2, r5
 801b178:	6122      	str	r2, [r4, #16]
 801b17a:	464b      	mov	r3, r9
 801b17c:	4621      	mov	r1, r4
 801b17e:	4640      	mov	r0, r8
 801b180:	f8cd a000 	str.w	sl, [sp]
 801b184:	aa03      	add	r2, sp, #12
 801b186:	f7ff fedf 	bl	801af48 <_printf_common>
 801b18a:	3001      	adds	r0, #1
 801b18c:	d14c      	bne.n	801b228 <_printf_i+0x200>
 801b18e:	f04f 30ff 	mov.w	r0, #4294967295
 801b192:	b004      	add	sp, #16
 801b194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b198:	4834      	ldr	r0, [pc, #208]	; (801b26c <_printf_i+0x244>)
 801b19a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b19e:	6829      	ldr	r1, [r5, #0]
 801b1a0:	6823      	ldr	r3, [r4, #0]
 801b1a2:	f851 6b04 	ldr.w	r6, [r1], #4
 801b1a6:	6029      	str	r1, [r5, #0]
 801b1a8:	061d      	lsls	r5, r3, #24
 801b1aa:	d514      	bpl.n	801b1d6 <_printf_i+0x1ae>
 801b1ac:	07df      	lsls	r7, r3, #31
 801b1ae:	bf44      	itt	mi
 801b1b0:	f043 0320 	orrmi.w	r3, r3, #32
 801b1b4:	6023      	strmi	r3, [r4, #0]
 801b1b6:	b91e      	cbnz	r6, 801b1c0 <_printf_i+0x198>
 801b1b8:	6823      	ldr	r3, [r4, #0]
 801b1ba:	f023 0320 	bic.w	r3, r3, #32
 801b1be:	6023      	str	r3, [r4, #0]
 801b1c0:	2310      	movs	r3, #16
 801b1c2:	e7af      	b.n	801b124 <_printf_i+0xfc>
 801b1c4:	6823      	ldr	r3, [r4, #0]
 801b1c6:	f043 0320 	orr.w	r3, r3, #32
 801b1ca:	6023      	str	r3, [r4, #0]
 801b1cc:	2378      	movs	r3, #120	; 0x78
 801b1ce:	4828      	ldr	r0, [pc, #160]	; (801b270 <_printf_i+0x248>)
 801b1d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b1d4:	e7e3      	b.n	801b19e <_printf_i+0x176>
 801b1d6:	0659      	lsls	r1, r3, #25
 801b1d8:	bf48      	it	mi
 801b1da:	b2b6      	uxthmi	r6, r6
 801b1dc:	e7e6      	b.n	801b1ac <_printf_i+0x184>
 801b1de:	4615      	mov	r5, r2
 801b1e0:	e7bb      	b.n	801b15a <_printf_i+0x132>
 801b1e2:	682b      	ldr	r3, [r5, #0]
 801b1e4:	6826      	ldr	r6, [r4, #0]
 801b1e6:	1d18      	adds	r0, r3, #4
 801b1e8:	6961      	ldr	r1, [r4, #20]
 801b1ea:	6028      	str	r0, [r5, #0]
 801b1ec:	0635      	lsls	r5, r6, #24
 801b1ee:	681b      	ldr	r3, [r3, #0]
 801b1f0:	d501      	bpl.n	801b1f6 <_printf_i+0x1ce>
 801b1f2:	6019      	str	r1, [r3, #0]
 801b1f4:	e002      	b.n	801b1fc <_printf_i+0x1d4>
 801b1f6:	0670      	lsls	r0, r6, #25
 801b1f8:	d5fb      	bpl.n	801b1f2 <_printf_i+0x1ca>
 801b1fa:	8019      	strh	r1, [r3, #0]
 801b1fc:	2300      	movs	r3, #0
 801b1fe:	4615      	mov	r5, r2
 801b200:	6123      	str	r3, [r4, #16]
 801b202:	e7ba      	b.n	801b17a <_printf_i+0x152>
 801b204:	682b      	ldr	r3, [r5, #0]
 801b206:	2100      	movs	r1, #0
 801b208:	1d1a      	adds	r2, r3, #4
 801b20a:	602a      	str	r2, [r5, #0]
 801b20c:	681d      	ldr	r5, [r3, #0]
 801b20e:	6862      	ldr	r2, [r4, #4]
 801b210:	4628      	mov	r0, r5
 801b212:	f000 f96d 	bl	801b4f0 <memchr>
 801b216:	b108      	cbz	r0, 801b21c <_printf_i+0x1f4>
 801b218:	1b40      	subs	r0, r0, r5
 801b21a:	6060      	str	r0, [r4, #4]
 801b21c:	6863      	ldr	r3, [r4, #4]
 801b21e:	6123      	str	r3, [r4, #16]
 801b220:	2300      	movs	r3, #0
 801b222:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b226:	e7a8      	b.n	801b17a <_printf_i+0x152>
 801b228:	462a      	mov	r2, r5
 801b22a:	4649      	mov	r1, r9
 801b22c:	4640      	mov	r0, r8
 801b22e:	6923      	ldr	r3, [r4, #16]
 801b230:	47d0      	blx	sl
 801b232:	3001      	adds	r0, #1
 801b234:	d0ab      	beq.n	801b18e <_printf_i+0x166>
 801b236:	6823      	ldr	r3, [r4, #0]
 801b238:	079b      	lsls	r3, r3, #30
 801b23a:	d413      	bmi.n	801b264 <_printf_i+0x23c>
 801b23c:	68e0      	ldr	r0, [r4, #12]
 801b23e:	9b03      	ldr	r3, [sp, #12]
 801b240:	4298      	cmp	r0, r3
 801b242:	bfb8      	it	lt
 801b244:	4618      	movlt	r0, r3
 801b246:	e7a4      	b.n	801b192 <_printf_i+0x16a>
 801b248:	2301      	movs	r3, #1
 801b24a:	4632      	mov	r2, r6
 801b24c:	4649      	mov	r1, r9
 801b24e:	4640      	mov	r0, r8
 801b250:	47d0      	blx	sl
 801b252:	3001      	adds	r0, #1
 801b254:	d09b      	beq.n	801b18e <_printf_i+0x166>
 801b256:	3501      	adds	r5, #1
 801b258:	68e3      	ldr	r3, [r4, #12]
 801b25a:	9903      	ldr	r1, [sp, #12]
 801b25c:	1a5b      	subs	r3, r3, r1
 801b25e:	42ab      	cmp	r3, r5
 801b260:	dcf2      	bgt.n	801b248 <_printf_i+0x220>
 801b262:	e7eb      	b.n	801b23c <_printf_i+0x214>
 801b264:	2500      	movs	r5, #0
 801b266:	f104 0619 	add.w	r6, r4, #25
 801b26a:	e7f5      	b.n	801b258 <_printf_i+0x230>
 801b26c:	0801e753 	.word	0x0801e753
 801b270:	0801e764 	.word	0x0801e764

0801b274 <_read_r>:
 801b274:	b538      	push	{r3, r4, r5, lr}
 801b276:	4604      	mov	r4, r0
 801b278:	4608      	mov	r0, r1
 801b27a:	4611      	mov	r1, r2
 801b27c:	2200      	movs	r2, #0
 801b27e:	4d05      	ldr	r5, [pc, #20]	; (801b294 <_read_r+0x20>)
 801b280:	602a      	str	r2, [r5, #0]
 801b282:	461a      	mov	r2, r3
 801b284:	f7e7 fb06 	bl	8002894 <_read>
 801b288:	1c43      	adds	r3, r0, #1
 801b28a:	d102      	bne.n	801b292 <_read_r+0x1e>
 801b28c:	682b      	ldr	r3, [r5, #0]
 801b28e:	b103      	cbz	r3, 801b292 <_read_r+0x1e>
 801b290:	6023      	str	r3, [r4, #0]
 801b292:	bd38      	pop	{r3, r4, r5, pc}
 801b294:	2000ed60 	.word	0x2000ed60

0801b298 <__swbuf_r>:
 801b298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b29a:	460e      	mov	r6, r1
 801b29c:	4614      	mov	r4, r2
 801b29e:	4605      	mov	r5, r0
 801b2a0:	b118      	cbz	r0, 801b2aa <__swbuf_r+0x12>
 801b2a2:	6983      	ldr	r3, [r0, #24]
 801b2a4:	b90b      	cbnz	r3, 801b2aa <__swbuf_r+0x12>
 801b2a6:	f7fe ff57 	bl	801a158 <__sinit>
 801b2aa:	4b21      	ldr	r3, [pc, #132]	; (801b330 <__swbuf_r+0x98>)
 801b2ac:	429c      	cmp	r4, r3
 801b2ae:	d12b      	bne.n	801b308 <__swbuf_r+0x70>
 801b2b0:	686c      	ldr	r4, [r5, #4]
 801b2b2:	69a3      	ldr	r3, [r4, #24]
 801b2b4:	60a3      	str	r3, [r4, #8]
 801b2b6:	89a3      	ldrh	r3, [r4, #12]
 801b2b8:	071a      	lsls	r2, r3, #28
 801b2ba:	d52f      	bpl.n	801b31c <__swbuf_r+0x84>
 801b2bc:	6923      	ldr	r3, [r4, #16]
 801b2be:	b36b      	cbz	r3, 801b31c <__swbuf_r+0x84>
 801b2c0:	6923      	ldr	r3, [r4, #16]
 801b2c2:	6820      	ldr	r0, [r4, #0]
 801b2c4:	b2f6      	uxtb	r6, r6
 801b2c6:	1ac0      	subs	r0, r0, r3
 801b2c8:	6963      	ldr	r3, [r4, #20]
 801b2ca:	4637      	mov	r7, r6
 801b2cc:	4283      	cmp	r3, r0
 801b2ce:	dc04      	bgt.n	801b2da <__swbuf_r+0x42>
 801b2d0:	4621      	mov	r1, r4
 801b2d2:	4628      	mov	r0, r5
 801b2d4:	f7ff fac8 	bl	801a868 <_fflush_r>
 801b2d8:	bb30      	cbnz	r0, 801b328 <__swbuf_r+0x90>
 801b2da:	68a3      	ldr	r3, [r4, #8]
 801b2dc:	3001      	adds	r0, #1
 801b2de:	3b01      	subs	r3, #1
 801b2e0:	60a3      	str	r3, [r4, #8]
 801b2e2:	6823      	ldr	r3, [r4, #0]
 801b2e4:	1c5a      	adds	r2, r3, #1
 801b2e6:	6022      	str	r2, [r4, #0]
 801b2e8:	701e      	strb	r6, [r3, #0]
 801b2ea:	6963      	ldr	r3, [r4, #20]
 801b2ec:	4283      	cmp	r3, r0
 801b2ee:	d004      	beq.n	801b2fa <__swbuf_r+0x62>
 801b2f0:	89a3      	ldrh	r3, [r4, #12]
 801b2f2:	07db      	lsls	r3, r3, #31
 801b2f4:	d506      	bpl.n	801b304 <__swbuf_r+0x6c>
 801b2f6:	2e0a      	cmp	r6, #10
 801b2f8:	d104      	bne.n	801b304 <__swbuf_r+0x6c>
 801b2fa:	4621      	mov	r1, r4
 801b2fc:	4628      	mov	r0, r5
 801b2fe:	f7ff fab3 	bl	801a868 <_fflush_r>
 801b302:	b988      	cbnz	r0, 801b328 <__swbuf_r+0x90>
 801b304:	4638      	mov	r0, r7
 801b306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b308:	4b0a      	ldr	r3, [pc, #40]	; (801b334 <__swbuf_r+0x9c>)
 801b30a:	429c      	cmp	r4, r3
 801b30c:	d101      	bne.n	801b312 <__swbuf_r+0x7a>
 801b30e:	68ac      	ldr	r4, [r5, #8]
 801b310:	e7cf      	b.n	801b2b2 <__swbuf_r+0x1a>
 801b312:	4b09      	ldr	r3, [pc, #36]	; (801b338 <__swbuf_r+0xa0>)
 801b314:	429c      	cmp	r4, r3
 801b316:	bf08      	it	eq
 801b318:	68ec      	ldreq	r4, [r5, #12]
 801b31a:	e7ca      	b.n	801b2b2 <__swbuf_r+0x1a>
 801b31c:	4621      	mov	r1, r4
 801b31e:	4628      	mov	r0, r5
 801b320:	f000 f80c 	bl	801b33c <__swsetup_r>
 801b324:	2800      	cmp	r0, #0
 801b326:	d0cb      	beq.n	801b2c0 <__swbuf_r+0x28>
 801b328:	f04f 37ff 	mov.w	r7, #4294967295
 801b32c:	e7ea      	b.n	801b304 <__swbuf_r+0x6c>
 801b32e:	bf00      	nop
 801b330:	0801e650 	.word	0x0801e650
 801b334:	0801e670 	.word	0x0801e670
 801b338:	0801e630 	.word	0x0801e630

0801b33c <__swsetup_r>:
 801b33c:	4b32      	ldr	r3, [pc, #200]	; (801b408 <__swsetup_r+0xcc>)
 801b33e:	b570      	push	{r4, r5, r6, lr}
 801b340:	681d      	ldr	r5, [r3, #0]
 801b342:	4606      	mov	r6, r0
 801b344:	460c      	mov	r4, r1
 801b346:	b125      	cbz	r5, 801b352 <__swsetup_r+0x16>
 801b348:	69ab      	ldr	r3, [r5, #24]
 801b34a:	b913      	cbnz	r3, 801b352 <__swsetup_r+0x16>
 801b34c:	4628      	mov	r0, r5
 801b34e:	f7fe ff03 	bl	801a158 <__sinit>
 801b352:	4b2e      	ldr	r3, [pc, #184]	; (801b40c <__swsetup_r+0xd0>)
 801b354:	429c      	cmp	r4, r3
 801b356:	d10f      	bne.n	801b378 <__swsetup_r+0x3c>
 801b358:	686c      	ldr	r4, [r5, #4]
 801b35a:	89a3      	ldrh	r3, [r4, #12]
 801b35c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b360:	0719      	lsls	r1, r3, #28
 801b362:	d42c      	bmi.n	801b3be <__swsetup_r+0x82>
 801b364:	06dd      	lsls	r5, r3, #27
 801b366:	d411      	bmi.n	801b38c <__swsetup_r+0x50>
 801b368:	2309      	movs	r3, #9
 801b36a:	6033      	str	r3, [r6, #0]
 801b36c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b370:	f04f 30ff 	mov.w	r0, #4294967295
 801b374:	81a3      	strh	r3, [r4, #12]
 801b376:	e03e      	b.n	801b3f6 <__swsetup_r+0xba>
 801b378:	4b25      	ldr	r3, [pc, #148]	; (801b410 <__swsetup_r+0xd4>)
 801b37a:	429c      	cmp	r4, r3
 801b37c:	d101      	bne.n	801b382 <__swsetup_r+0x46>
 801b37e:	68ac      	ldr	r4, [r5, #8]
 801b380:	e7eb      	b.n	801b35a <__swsetup_r+0x1e>
 801b382:	4b24      	ldr	r3, [pc, #144]	; (801b414 <__swsetup_r+0xd8>)
 801b384:	429c      	cmp	r4, r3
 801b386:	bf08      	it	eq
 801b388:	68ec      	ldreq	r4, [r5, #12]
 801b38a:	e7e6      	b.n	801b35a <__swsetup_r+0x1e>
 801b38c:	0758      	lsls	r0, r3, #29
 801b38e:	d512      	bpl.n	801b3b6 <__swsetup_r+0x7a>
 801b390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b392:	b141      	cbz	r1, 801b3a6 <__swsetup_r+0x6a>
 801b394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b398:	4299      	cmp	r1, r3
 801b39a:	d002      	beq.n	801b3a2 <__swsetup_r+0x66>
 801b39c:	4630      	mov	r0, r6
 801b39e:	f7ff fad7 	bl	801a950 <_free_r>
 801b3a2:	2300      	movs	r3, #0
 801b3a4:	6363      	str	r3, [r4, #52]	; 0x34
 801b3a6:	89a3      	ldrh	r3, [r4, #12]
 801b3a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b3ac:	81a3      	strh	r3, [r4, #12]
 801b3ae:	2300      	movs	r3, #0
 801b3b0:	6063      	str	r3, [r4, #4]
 801b3b2:	6923      	ldr	r3, [r4, #16]
 801b3b4:	6023      	str	r3, [r4, #0]
 801b3b6:	89a3      	ldrh	r3, [r4, #12]
 801b3b8:	f043 0308 	orr.w	r3, r3, #8
 801b3bc:	81a3      	strh	r3, [r4, #12]
 801b3be:	6923      	ldr	r3, [r4, #16]
 801b3c0:	b94b      	cbnz	r3, 801b3d6 <__swsetup_r+0x9a>
 801b3c2:	89a3      	ldrh	r3, [r4, #12]
 801b3c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b3c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b3cc:	d003      	beq.n	801b3d6 <__swsetup_r+0x9a>
 801b3ce:	4621      	mov	r1, r4
 801b3d0:	4630      	mov	r0, r6
 801b3d2:	f000 f84d 	bl	801b470 <__smakebuf_r>
 801b3d6:	89a0      	ldrh	r0, [r4, #12]
 801b3d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b3dc:	f010 0301 	ands.w	r3, r0, #1
 801b3e0:	d00a      	beq.n	801b3f8 <__swsetup_r+0xbc>
 801b3e2:	2300      	movs	r3, #0
 801b3e4:	60a3      	str	r3, [r4, #8]
 801b3e6:	6963      	ldr	r3, [r4, #20]
 801b3e8:	425b      	negs	r3, r3
 801b3ea:	61a3      	str	r3, [r4, #24]
 801b3ec:	6923      	ldr	r3, [r4, #16]
 801b3ee:	b943      	cbnz	r3, 801b402 <__swsetup_r+0xc6>
 801b3f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b3f4:	d1ba      	bne.n	801b36c <__swsetup_r+0x30>
 801b3f6:	bd70      	pop	{r4, r5, r6, pc}
 801b3f8:	0781      	lsls	r1, r0, #30
 801b3fa:	bf58      	it	pl
 801b3fc:	6963      	ldrpl	r3, [r4, #20]
 801b3fe:	60a3      	str	r3, [r4, #8]
 801b400:	e7f4      	b.n	801b3ec <__swsetup_r+0xb0>
 801b402:	2000      	movs	r0, #0
 801b404:	e7f7      	b.n	801b3f6 <__swsetup_r+0xba>
 801b406:	bf00      	nop
 801b408:	20000020 	.word	0x20000020
 801b40c:	0801e650 	.word	0x0801e650
 801b410:	0801e670 	.word	0x0801e670
 801b414:	0801e630 	.word	0x0801e630

0801b418 <abort>:
 801b418:	2006      	movs	r0, #6
 801b41a:	b508      	push	{r3, lr}
 801b41c:	f000 f8e8 	bl	801b5f0 <raise>
 801b420:	2001      	movs	r0, #1
 801b422:	f7e7 fa2d 	bl	8002880 <_exit>

0801b426 <__swhatbuf_r>:
 801b426:	b570      	push	{r4, r5, r6, lr}
 801b428:	460e      	mov	r6, r1
 801b42a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b42e:	4614      	mov	r4, r2
 801b430:	2900      	cmp	r1, #0
 801b432:	461d      	mov	r5, r3
 801b434:	b096      	sub	sp, #88	; 0x58
 801b436:	da08      	bge.n	801b44a <__swhatbuf_r+0x24>
 801b438:	2200      	movs	r2, #0
 801b43a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801b43e:	602a      	str	r2, [r5, #0]
 801b440:	061a      	lsls	r2, r3, #24
 801b442:	d410      	bmi.n	801b466 <__swhatbuf_r+0x40>
 801b444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b448:	e00e      	b.n	801b468 <__swhatbuf_r+0x42>
 801b44a:	466a      	mov	r2, sp
 801b44c:	f000 f8ec 	bl	801b628 <_fstat_r>
 801b450:	2800      	cmp	r0, #0
 801b452:	dbf1      	blt.n	801b438 <__swhatbuf_r+0x12>
 801b454:	9a01      	ldr	r2, [sp, #4]
 801b456:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b45a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b45e:	425a      	negs	r2, r3
 801b460:	415a      	adcs	r2, r3
 801b462:	602a      	str	r2, [r5, #0]
 801b464:	e7ee      	b.n	801b444 <__swhatbuf_r+0x1e>
 801b466:	2340      	movs	r3, #64	; 0x40
 801b468:	2000      	movs	r0, #0
 801b46a:	6023      	str	r3, [r4, #0]
 801b46c:	b016      	add	sp, #88	; 0x58
 801b46e:	bd70      	pop	{r4, r5, r6, pc}

0801b470 <__smakebuf_r>:
 801b470:	898b      	ldrh	r3, [r1, #12]
 801b472:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b474:	079d      	lsls	r5, r3, #30
 801b476:	4606      	mov	r6, r0
 801b478:	460c      	mov	r4, r1
 801b47a:	d507      	bpl.n	801b48c <__smakebuf_r+0x1c>
 801b47c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b480:	6023      	str	r3, [r4, #0]
 801b482:	6123      	str	r3, [r4, #16]
 801b484:	2301      	movs	r3, #1
 801b486:	6163      	str	r3, [r4, #20]
 801b488:	b002      	add	sp, #8
 801b48a:	bd70      	pop	{r4, r5, r6, pc}
 801b48c:	466a      	mov	r2, sp
 801b48e:	ab01      	add	r3, sp, #4
 801b490:	f7ff ffc9 	bl	801b426 <__swhatbuf_r>
 801b494:	9900      	ldr	r1, [sp, #0]
 801b496:	4605      	mov	r5, r0
 801b498:	4630      	mov	r0, r6
 801b49a:	f7fe ff69 	bl	801a370 <_malloc_r>
 801b49e:	b948      	cbnz	r0, 801b4b4 <__smakebuf_r+0x44>
 801b4a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b4a4:	059a      	lsls	r2, r3, #22
 801b4a6:	d4ef      	bmi.n	801b488 <__smakebuf_r+0x18>
 801b4a8:	f023 0303 	bic.w	r3, r3, #3
 801b4ac:	f043 0302 	orr.w	r3, r3, #2
 801b4b0:	81a3      	strh	r3, [r4, #12]
 801b4b2:	e7e3      	b.n	801b47c <__smakebuf_r+0xc>
 801b4b4:	4b0d      	ldr	r3, [pc, #52]	; (801b4ec <__smakebuf_r+0x7c>)
 801b4b6:	62b3      	str	r3, [r6, #40]	; 0x28
 801b4b8:	89a3      	ldrh	r3, [r4, #12]
 801b4ba:	6020      	str	r0, [r4, #0]
 801b4bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b4c0:	81a3      	strh	r3, [r4, #12]
 801b4c2:	9b00      	ldr	r3, [sp, #0]
 801b4c4:	6120      	str	r0, [r4, #16]
 801b4c6:	6163      	str	r3, [r4, #20]
 801b4c8:	9b01      	ldr	r3, [sp, #4]
 801b4ca:	b15b      	cbz	r3, 801b4e4 <__smakebuf_r+0x74>
 801b4cc:	4630      	mov	r0, r6
 801b4ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b4d2:	f000 f8bb 	bl	801b64c <_isatty_r>
 801b4d6:	b128      	cbz	r0, 801b4e4 <__smakebuf_r+0x74>
 801b4d8:	89a3      	ldrh	r3, [r4, #12]
 801b4da:	f023 0303 	bic.w	r3, r3, #3
 801b4de:	f043 0301 	orr.w	r3, r3, #1
 801b4e2:	81a3      	strh	r3, [r4, #12]
 801b4e4:	89a0      	ldrh	r0, [r4, #12]
 801b4e6:	4305      	orrs	r5, r0
 801b4e8:	81a5      	strh	r5, [r4, #12]
 801b4ea:	e7cd      	b.n	801b488 <__smakebuf_r+0x18>
 801b4ec:	0801a0f1 	.word	0x0801a0f1

0801b4f0 <memchr>:
 801b4f0:	4603      	mov	r3, r0
 801b4f2:	b510      	push	{r4, lr}
 801b4f4:	b2c9      	uxtb	r1, r1
 801b4f6:	4402      	add	r2, r0
 801b4f8:	4293      	cmp	r3, r2
 801b4fa:	4618      	mov	r0, r3
 801b4fc:	d101      	bne.n	801b502 <memchr+0x12>
 801b4fe:	2000      	movs	r0, #0
 801b500:	e003      	b.n	801b50a <memchr+0x1a>
 801b502:	7804      	ldrb	r4, [r0, #0]
 801b504:	3301      	adds	r3, #1
 801b506:	428c      	cmp	r4, r1
 801b508:	d1f6      	bne.n	801b4f8 <memchr+0x8>
 801b50a:	bd10      	pop	{r4, pc}

0801b50c <memmove>:
 801b50c:	4288      	cmp	r0, r1
 801b50e:	b510      	push	{r4, lr}
 801b510:	eb01 0402 	add.w	r4, r1, r2
 801b514:	d902      	bls.n	801b51c <memmove+0x10>
 801b516:	4284      	cmp	r4, r0
 801b518:	4623      	mov	r3, r4
 801b51a:	d807      	bhi.n	801b52c <memmove+0x20>
 801b51c:	1e43      	subs	r3, r0, #1
 801b51e:	42a1      	cmp	r1, r4
 801b520:	d008      	beq.n	801b534 <memmove+0x28>
 801b522:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b526:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b52a:	e7f8      	b.n	801b51e <memmove+0x12>
 801b52c:	4601      	mov	r1, r0
 801b52e:	4402      	add	r2, r0
 801b530:	428a      	cmp	r2, r1
 801b532:	d100      	bne.n	801b536 <memmove+0x2a>
 801b534:	bd10      	pop	{r4, pc}
 801b536:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b53a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b53e:	e7f7      	b.n	801b530 <memmove+0x24>

0801b540 <_realloc_r>:
 801b540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b544:	4680      	mov	r8, r0
 801b546:	4614      	mov	r4, r2
 801b548:	460e      	mov	r6, r1
 801b54a:	b921      	cbnz	r1, 801b556 <_realloc_r+0x16>
 801b54c:	4611      	mov	r1, r2
 801b54e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b552:	f7fe bf0d 	b.w	801a370 <_malloc_r>
 801b556:	b92a      	cbnz	r2, 801b564 <_realloc_r+0x24>
 801b558:	f7ff f9fa 	bl	801a950 <_free_r>
 801b55c:	4625      	mov	r5, r4
 801b55e:	4628      	mov	r0, r5
 801b560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b564:	f000 f882 	bl	801b66c <_malloc_usable_size_r>
 801b568:	4284      	cmp	r4, r0
 801b56a:	4607      	mov	r7, r0
 801b56c:	d802      	bhi.n	801b574 <_realloc_r+0x34>
 801b56e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b572:	d812      	bhi.n	801b59a <_realloc_r+0x5a>
 801b574:	4621      	mov	r1, r4
 801b576:	4640      	mov	r0, r8
 801b578:	f7fe fefa 	bl	801a370 <_malloc_r>
 801b57c:	4605      	mov	r5, r0
 801b57e:	2800      	cmp	r0, #0
 801b580:	d0ed      	beq.n	801b55e <_realloc_r+0x1e>
 801b582:	42bc      	cmp	r4, r7
 801b584:	4622      	mov	r2, r4
 801b586:	4631      	mov	r1, r6
 801b588:	bf28      	it	cs
 801b58a:	463a      	movcs	r2, r7
 801b58c:	f7fe feb9 	bl	801a302 <memcpy>
 801b590:	4631      	mov	r1, r6
 801b592:	4640      	mov	r0, r8
 801b594:	f7ff f9dc 	bl	801a950 <_free_r>
 801b598:	e7e1      	b.n	801b55e <_realloc_r+0x1e>
 801b59a:	4635      	mov	r5, r6
 801b59c:	e7df      	b.n	801b55e <_realloc_r+0x1e>

0801b59e <_raise_r>:
 801b59e:	291f      	cmp	r1, #31
 801b5a0:	b538      	push	{r3, r4, r5, lr}
 801b5a2:	4604      	mov	r4, r0
 801b5a4:	460d      	mov	r5, r1
 801b5a6:	d904      	bls.n	801b5b2 <_raise_r+0x14>
 801b5a8:	2316      	movs	r3, #22
 801b5aa:	6003      	str	r3, [r0, #0]
 801b5ac:	f04f 30ff 	mov.w	r0, #4294967295
 801b5b0:	bd38      	pop	{r3, r4, r5, pc}
 801b5b2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b5b4:	b112      	cbz	r2, 801b5bc <_raise_r+0x1e>
 801b5b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b5ba:	b94b      	cbnz	r3, 801b5d0 <_raise_r+0x32>
 801b5bc:	4620      	mov	r0, r4
 801b5be:	f000 f831 	bl	801b624 <_getpid_r>
 801b5c2:	462a      	mov	r2, r5
 801b5c4:	4601      	mov	r1, r0
 801b5c6:	4620      	mov	r0, r4
 801b5c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b5cc:	f000 b818 	b.w	801b600 <_kill_r>
 801b5d0:	2b01      	cmp	r3, #1
 801b5d2:	d00a      	beq.n	801b5ea <_raise_r+0x4c>
 801b5d4:	1c59      	adds	r1, r3, #1
 801b5d6:	d103      	bne.n	801b5e0 <_raise_r+0x42>
 801b5d8:	2316      	movs	r3, #22
 801b5da:	6003      	str	r3, [r0, #0]
 801b5dc:	2001      	movs	r0, #1
 801b5de:	e7e7      	b.n	801b5b0 <_raise_r+0x12>
 801b5e0:	2400      	movs	r4, #0
 801b5e2:	4628      	mov	r0, r5
 801b5e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b5e8:	4798      	blx	r3
 801b5ea:	2000      	movs	r0, #0
 801b5ec:	e7e0      	b.n	801b5b0 <_raise_r+0x12>
	...

0801b5f0 <raise>:
 801b5f0:	4b02      	ldr	r3, [pc, #8]	; (801b5fc <raise+0xc>)
 801b5f2:	4601      	mov	r1, r0
 801b5f4:	6818      	ldr	r0, [r3, #0]
 801b5f6:	f7ff bfd2 	b.w	801b59e <_raise_r>
 801b5fa:	bf00      	nop
 801b5fc:	20000020 	.word	0x20000020

0801b600 <_kill_r>:
 801b600:	b538      	push	{r3, r4, r5, lr}
 801b602:	2300      	movs	r3, #0
 801b604:	4d06      	ldr	r5, [pc, #24]	; (801b620 <_kill_r+0x20>)
 801b606:	4604      	mov	r4, r0
 801b608:	4608      	mov	r0, r1
 801b60a:	4611      	mov	r1, r2
 801b60c:	602b      	str	r3, [r5, #0]
 801b60e:	f7e7 f925 	bl	800285c <_kill>
 801b612:	1c43      	adds	r3, r0, #1
 801b614:	d102      	bne.n	801b61c <_kill_r+0x1c>
 801b616:	682b      	ldr	r3, [r5, #0]
 801b618:	b103      	cbz	r3, 801b61c <_kill_r+0x1c>
 801b61a:	6023      	str	r3, [r4, #0]
 801b61c:	bd38      	pop	{r3, r4, r5, pc}
 801b61e:	bf00      	nop
 801b620:	2000ed60 	.word	0x2000ed60

0801b624 <_getpid_r>:
 801b624:	f7e7 b912 	b.w	800284c <_getpid>

0801b628 <_fstat_r>:
 801b628:	b538      	push	{r3, r4, r5, lr}
 801b62a:	2300      	movs	r3, #0
 801b62c:	4d06      	ldr	r5, [pc, #24]	; (801b648 <_fstat_r+0x20>)
 801b62e:	4604      	mov	r4, r0
 801b630:	4608      	mov	r0, r1
 801b632:	4611      	mov	r1, r2
 801b634:	602b      	str	r3, [r5, #0]
 801b636:	f7e7 f971 	bl	800291c <_fstat>
 801b63a:	1c43      	adds	r3, r0, #1
 801b63c:	d102      	bne.n	801b644 <_fstat_r+0x1c>
 801b63e:	682b      	ldr	r3, [r5, #0]
 801b640:	b103      	cbz	r3, 801b644 <_fstat_r+0x1c>
 801b642:	6023      	str	r3, [r4, #0]
 801b644:	bd38      	pop	{r3, r4, r5, pc}
 801b646:	bf00      	nop
 801b648:	2000ed60 	.word	0x2000ed60

0801b64c <_isatty_r>:
 801b64c:	b538      	push	{r3, r4, r5, lr}
 801b64e:	2300      	movs	r3, #0
 801b650:	4d05      	ldr	r5, [pc, #20]	; (801b668 <_isatty_r+0x1c>)
 801b652:	4604      	mov	r4, r0
 801b654:	4608      	mov	r0, r1
 801b656:	602b      	str	r3, [r5, #0]
 801b658:	f7e7 f96f 	bl	800293a <_isatty>
 801b65c:	1c43      	adds	r3, r0, #1
 801b65e:	d102      	bne.n	801b666 <_isatty_r+0x1a>
 801b660:	682b      	ldr	r3, [r5, #0]
 801b662:	b103      	cbz	r3, 801b666 <_isatty_r+0x1a>
 801b664:	6023      	str	r3, [r4, #0]
 801b666:	bd38      	pop	{r3, r4, r5, pc}
 801b668:	2000ed60 	.word	0x2000ed60

0801b66c <_malloc_usable_size_r>:
 801b66c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b670:	1f18      	subs	r0, r3, #4
 801b672:	2b00      	cmp	r3, #0
 801b674:	bfbc      	itt	lt
 801b676:	580b      	ldrlt	r3, [r1, r0]
 801b678:	18c0      	addlt	r0, r0, r3
 801b67a:	4770      	bx	lr
 801b67c:	0000      	movs	r0, r0
	...

0801b680 <floor>:
 801b680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b684:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801b688:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801b68c:	2e13      	cmp	r6, #19
 801b68e:	4602      	mov	r2, r0
 801b690:	460b      	mov	r3, r1
 801b692:	4607      	mov	r7, r0
 801b694:	460c      	mov	r4, r1
 801b696:	4605      	mov	r5, r0
 801b698:	dc33      	bgt.n	801b702 <floor+0x82>
 801b69a:	2e00      	cmp	r6, #0
 801b69c:	da14      	bge.n	801b6c8 <floor+0x48>
 801b69e:	a334      	add	r3, pc, #208	; (adr r3, 801b770 <floor+0xf0>)
 801b6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6a4:	f7e4 fdd4 	bl	8000250 <__adddf3>
 801b6a8:	2200      	movs	r2, #0
 801b6aa:	2300      	movs	r3, #0
 801b6ac:	f7e5 fa16 	bl	8000adc <__aeabi_dcmpgt>
 801b6b0:	b138      	cbz	r0, 801b6c2 <floor+0x42>
 801b6b2:	2c00      	cmp	r4, #0
 801b6b4:	da58      	bge.n	801b768 <floor+0xe8>
 801b6b6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801b6ba:	431d      	orrs	r5, r3
 801b6bc:	d001      	beq.n	801b6c2 <floor+0x42>
 801b6be:	2500      	movs	r5, #0
 801b6c0:	4c2d      	ldr	r4, [pc, #180]	; (801b778 <floor+0xf8>)
 801b6c2:	4623      	mov	r3, r4
 801b6c4:	462f      	mov	r7, r5
 801b6c6:	e025      	b.n	801b714 <floor+0x94>
 801b6c8:	4a2c      	ldr	r2, [pc, #176]	; (801b77c <floor+0xfc>)
 801b6ca:	fa42 f806 	asr.w	r8, r2, r6
 801b6ce:	ea01 0208 	and.w	r2, r1, r8
 801b6d2:	4302      	orrs	r2, r0
 801b6d4:	d01e      	beq.n	801b714 <floor+0x94>
 801b6d6:	a326      	add	r3, pc, #152	; (adr r3, 801b770 <floor+0xf0>)
 801b6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6dc:	f7e4 fdb8 	bl	8000250 <__adddf3>
 801b6e0:	2200      	movs	r2, #0
 801b6e2:	2300      	movs	r3, #0
 801b6e4:	f7e5 f9fa 	bl	8000adc <__aeabi_dcmpgt>
 801b6e8:	2800      	cmp	r0, #0
 801b6ea:	d0ea      	beq.n	801b6c2 <floor+0x42>
 801b6ec:	2c00      	cmp	r4, #0
 801b6ee:	bfbe      	ittt	lt
 801b6f0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b6f4:	fa43 f606 	asrlt.w	r6, r3, r6
 801b6f8:	19a4      	addlt	r4, r4, r6
 801b6fa:	2500      	movs	r5, #0
 801b6fc:	ea24 0408 	bic.w	r4, r4, r8
 801b700:	e7df      	b.n	801b6c2 <floor+0x42>
 801b702:	2e33      	cmp	r6, #51	; 0x33
 801b704:	dd0a      	ble.n	801b71c <floor+0x9c>
 801b706:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b70a:	d103      	bne.n	801b714 <floor+0x94>
 801b70c:	f7e4 fda0 	bl	8000250 <__adddf3>
 801b710:	4607      	mov	r7, r0
 801b712:	460b      	mov	r3, r1
 801b714:	4638      	mov	r0, r7
 801b716:	4619      	mov	r1, r3
 801b718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b71c:	f04f 32ff 	mov.w	r2, #4294967295
 801b720:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801b724:	fa22 f808 	lsr.w	r8, r2, r8
 801b728:	ea18 0f00 	tst.w	r8, r0
 801b72c:	d0f2      	beq.n	801b714 <floor+0x94>
 801b72e:	a310      	add	r3, pc, #64	; (adr r3, 801b770 <floor+0xf0>)
 801b730:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b734:	f7e4 fd8c 	bl	8000250 <__adddf3>
 801b738:	2200      	movs	r2, #0
 801b73a:	2300      	movs	r3, #0
 801b73c:	f7e5 f9ce 	bl	8000adc <__aeabi_dcmpgt>
 801b740:	2800      	cmp	r0, #0
 801b742:	d0be      	beq.n	801b6c2 <floor+0x42>
 801b744:	2c00      	cmp	r4, #0
 801b746:	da02      	bge.n	801b74e <floor+0xce>
 801b748:	2e14      	cmp	r6, #20
 801b74a:	d103      	bne.n	801b754 <floor+0xd4>
 801b74c:	3401      	adds	r4, #1
 801b74e:	ea25 0508 	bic.w	r5, r5, r8
 801b752:	e7b6      	b.n	801b6c2 <floor+0x42>
 801b754:	2301      	movs	r3, #1
 801b756:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b75a:	fa03 f606 	lsl.w	r6, r3, r6
 801b75e:	4435      	add	r5, r6
 801b760:	42bd      	cmp	r5, r7
 801b762:	bf38      	it	cc
 801b764:	18e4      	addcc	r4, r4, r3
 801b766:	e7f2      	b.n	801b74e <floor+0xce>
 801b768:	2500      	movs	r5, #0
 801b76a:	462c      	mov	r4, r5
 801b76c:	e7a9      	b.n	801b6c2 <floor+0x42>
 801b76e:	bf00      	nop
 801b770:	8800759c 	.word	0x8800759c
 801b774:	7e37e43c 	.word	0x7e37e43c
 801b778:	bff00000 	.word	0xbff00000
 801b77c:	000fffff 	.word	0x000fffff

0801b780 <_init>:
 801b780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b782:	bf00      	nop
 801b784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b786:	bc08      	pop	{r3}
 801b788:	469e      	mov	lr, r3
 801b78a:	4770      	bx	lr

0801b78c <_fini>:
 801b78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b78e:	bf00      	nop
 801b790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b792:	bc08      	pop	{r3}
 801b794:	469e      	mov	lr, r3
 801b796:	4770      	bx	lr
